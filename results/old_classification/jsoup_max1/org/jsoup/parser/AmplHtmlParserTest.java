

package org.jsoup.parser;


/**
 * Tests for the Parser
 *
 * @author Jonathan Hedley, jonathan@hedley.net
 */
public class AmplHtmlParserTest {
    @org.junit.Test
    public void parsesSimpleDocument() {
        java.lang.String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        // need a better way to verify these:
        org.jsoup.nodes.Element p = doc.body().child(0);
        org.junit.Assert.assertEquals("p", p.tagName());
        org.jsoup.nodes.Element img = p.child(0);
        org.junit.Assert.assertEquals("foo.png", img.attr("src"));
        org.junit.Assert.assertEquals("img", img.tagName());
    }

    @org.junit.Test
    public void parsesRoughAttributes() {
        java.lang.String html = "<html><head><title>First!</title></head><body><p class=\"foo > bar\">First post! <img src=\"foo.png\" /></p></body></html>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        // need a better way to verify these:
        org.jsoup.nodes.Element p = doc.body().child(0);
        org.junit.Assert.assertEquals("p", p.tagName());
        org.junit.Assert.assertEquals("foo > bar", p.attr("class"));
    }

    @org.junit.Test
    public void parsesQuiteRoughAttributes() {
        java.lang.String html = "<p =a>One<a <p>Something</p>Else";
        // this gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.junit.Assert.assertEquals(("<p =a>One<a <p>Something</a></p>\n" + "<a <p>Else</a>"), doc.body().html());
        doc = org.jsoup.Jsoup.parse("<p .....>");
        org.junit.Assert.assertEquals("<p .....></p>", doc.body().html());
    }

    @org.junit.Test
    public void parsesComments() {
        java.lang.String html = "<html><head></head><body><img src=foo><!-- <table><tr><td></table> --><p>Hello</p></body></html>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element body = doc.body();
        org.jsoup.nodes.Comment comment = ((org.jsoup.nodes.Comment) (body.childNode(1)));// comment should not be sub of img, as it's an empty tag
        
        org.junit.Assert.assertEquals(" <table><tr><td></table> ", comment.getData());
        org.jsoup.nodes.Element p = body.child(1);
        org.jsoup.nodes.TextNode text = ((org.jsoup.nodes.TextNode) (p.childNode(0)));
        org.junit.Assert.assertEquals("Hello", text.getWholeText());
    }

    @org.junit.Test
    public void parsesUnterminatedComments() {
        java.lang.String html = "<p>Hello<!-- <tr><td>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element p = doc.getElementsByTag("p").get(0);
        org.junit.Assert.assertEquals("Hello", p.text());
        org.jsoup.nodes.TextNode text = ((org.jsoup.nodes.TextNode) (p.childNode(0)));
        org.junit.Assert.assertEquals("Hello", text.getWholeText());
        org.jsoup.nodes.Comment comment = ((org.jsoup.nodes.Comment) (p.childNode(1)));
        org.junit.Assert.assertEquals(" <tr><td>", comment.getData());
    }

    @org.junit.Test
    public void dropsUnterminatedTag() {
        // jsoup used to parse this to <p>, but whatwg, webkit will drop.
        java.lang.String h1 = "<p";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
        org.junit.Assert.assertEquals(0, doc.getElementsByTag("p").size());
        org.junit.Assert.assertEquals("", doc.text());
        java.lang.String h2 = "<div id=1<p id='2'";
        doc = org.jsoup.Jsoup.parse(h2);
        org.junit.Assert.assertEquals("", doc.text());
    }

    @org.junit.Test
    public void dropsUnterminatedAttribute() {
        // jsoup used to parse this to <p id="foo">, but whatwg, webkit will drop.
        java.lang.String h1 = "<p id=\"foo";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
        org.junit.Assert.assertEquals("", doc.text());
    }

    @org.junit.Test
    public void parsesUnterminatedTextarea() {
        // don't parse right to end, but break on <p>
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><p><textarea>one<p>two");
        org.jsoup.nodes.Element t = doc.select("textarea").first();
        org.junit.Assert.assertEquals("one", t.text());
        org.junit.Assert.assertEquals("two", doc.select("p").get(1).text());
    }

    @org.junit.Test
    public void parsesUnterminatedOption() {
        // bit weird this -- browsers and spec get stuck in select until there's a </select>
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><p><select><option>One<option>Two</p><p>Three</p>");
        org.jsoup.select.Elements options = doc.select("option");
        org.junit.Assert.assertEquals(2, options.size());
        org.junit.Assert.assertEquals("One", options.first().text());
        org.junit.Assert.assertEquals("TwoThree", options.last().text());
    }

    @org.junit.Test
    public void testSpaceAfterTag() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div > <a name=\"top\"></a ><p id=1 >Hello</p></div>");
        org.junit.Assert.assertEquals("<div> <a name=\"top\"></a><p id=\"1\">Hello</p></div>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void createsDocumentStructure() {
        java.lang.String html = "<meta name=keywords /><link rel=stylesheet /><title>jsoup</title><p>Hello world</p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element head = doc.head();
        org.jsoup.nodes.Element body = doc.body();
        org.junit.Assert.assertEquals(1, doc.children().size());// root node: contains html node
        
        org.junit.Assert.assertEquals(2, doc.child(0).children().size());// html node: head and body
        
        org.junit.Assert.assertEquals(3, head.children().size());
        org.junit.Assert.assertEquals(1, body.children().size());
        org.junit.Assert.assertEquals("keywords", head.getElementsByTag("meta").get(0).attr("name"));
        org.junit.Assert.assertEquals(0, body.getElementsByTag("meta").size());
        org.junit.Assert.assertEquals("jsoup", doc.title());
        org.junit.Assert.assertEquals("Hello world", body.text());
        org.junit.Assert.assertEquals("Hello world", body.children().get(0).text());
    }

    @org.junit.Test
    public void createsStructureFromBodySnippet() {
        // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine
        // needs to move into the start of the body
        java.lang.String html = "foo <b>bar</b> baz";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.junit.Assert.assertEquals("foo bar baz", doc.text());
    }

    @org.junit.Test
    public void handlesEscapedData() {
        java.lang.String html = "<div title='Surf &amp; Turf'>Reef &amp; Beef</div>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element div = doc.getElementsByTag("div").get(0);
        org.junit.Assert.assertEquals("Surf & Turf", div.attr("title"));
        org.junit.Assert.assertEquals("Reef & Beef", div.text());
    }

    @org.junit.Test
    public void handlesDataOnlyTags() {
        java.lang.String t = "<style>font-family: bold</style>";
        java.util.List<org.jsoup.nodes.Element> tels = org.jsoup.Jsoup.parse(t).getElementsByTag("style");
        org.junit.Assert.assertEquals("font-family: bold", tels.get(0).data());
        org.junit.Assert.assertEquals("", tels.get(0).text());
        java.lang.String s = "<p>Hello</p><script>obj.insert(\'<a rel=\"none\" />\');\ni++;</script><p>There</p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(s);
        org.junit.Assert.assertEquals("Hello There", doc.text());
        org.junit.Assert.assertEquals("obj.insert(\'<a rel=\"none\" />\');\ni++;", doc.data());
    }

    @org.junit.Test
    public void handlesTextAfterData() {
        java.lang.String h = "<html><body>pre <script>inner</script> aft</body></html>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("<html><head></head><body>pre <script>inner</script> aft</body></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
    }

    @org.junit.Test
    public void handlesTextArea() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>Hello</textarea>");
        org.jsoup.select.Elements els = doc.select("textarea");
        org.junit.Assert.assertEquals("Hello", els.text());
        org.junit.Assert.assertEquals("Hello", els.val());
    }

    @org.junit.Test
    public void preservesSpaceInTextArea() {
        // preserve because the tag is marked as preserve white space
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>\n\tOne\n\tTwo\n\tThree\n</textarea>");
        java.lang.String expect = "One\n\tTwo\n\tThree";// the leading and trailing spaces are dropped as a convenience to authors
        
        org.jsoup.nodes.Element el = doc.select("textarea").first();
        org.junit.Assert.assertEquals(expect, el.text());
        org.junit.Assert.assertEquals(expect, el.val());
        org.junit.Assert.assertEquals(expect, el.html());
        org.junit.Assert.assertEquals((("<textarea>\n\t" + expect) + "\n</textarea>"), el.outerHtml());// but preserved in round-trip html
        
    }

    @org.junit.Test
    public void preservesSpaceInScript() {
        // preserve because it's content is a data node
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>\nOne\n\tTwo\n\tThree\n</script>");
        java.lang.String expect = "\nOne\n\tTwo\n\tThree\n";
        org.jsoup.nodes.Element el = doc.select("script").first();
        org.junit.Assert.assertEquals(expect, el.data());
        org.junit.Assert.assertEquals("One\n\tTwo\n\tThree", el.html());
        org.junit.Assert.assertEquals((("<script>" + expect) + "</script>"), el.outerHtml());
    }

    @org.junit.Test
    public void doesNotCreateImplicitLists() {
        // old jsoup used to wrap this in <ul>, but that's not to spec
        java.lang.String h = "<li>Point one<li>Point two";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.jsoup.select.Elements ol = doc.select("ul");// should NOT have created a default ul.
        
        org.junit.Assert.assertEquals(0, ol.size());
        org.jsoup.select.Elements lis = doc.select("li");
        org.junit.Assert.assertEquals(2, lis.size());
        org.junit.Assert.assertEquals("body", lis.first().parent().tagName());
        // no fiddling with non-implicit lists
        java.lang.String h2 = "<ol><li><p>Point the first<li><p>Point the second";
        org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse(h2);
        org.junit.Assert.assertEquals(0, doc2.select("ul").size());
        org.junit.Assert.assertEquals(1, doc2.select("ol").size());
        org.junit.Assert.assertEquals(2, doc2.select("ol li").size());
        org.junit.Assert.assertEquals(2, doc2.select("ol li p").size());
        org.junit.Assert.assertEquals(1, doc2.select("ol li").get(0).children().size());// one p in first li
        
    }

    @org.junit.Test
    public void discardsNakedTds() {
        // jsoup used to make this into an implicit table; but browsers make it into a text run
        java.lang.String h = "<td>Hello<td><p>There<p>now";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("Hello<p>There</p><p>now</p>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
        // <tbody> is introduced if no implicitly creating table, but allows tr to be directly under table
    }

    @org.junit.Test
    public void handlesNestedImplicitTable() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>");
        org.junit.Assert.assertEquals("<table><tbody><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tbody><tr><td>3</td> <td>4</td></tr></tbody></table> </td></tr><tr><td>5</td></tr></tbody></table>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void handlesWhatWgExpensesTableExample() {
        // http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#examples-0
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling, general, and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>");
        org.junit.Assert.assertEquals("<table> <colgroup> <col> </colgroup><colgroup> <col> <col> <col> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\"rowgroup\"> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 3.4% </td><td> 3.3% </td><td> 3.7% </td></tr></tbody><tbody> <tr> <th scope=\"rowgroup\"> Selling, general, and administrative </th><td> $ 3,761 </td><td> $ 2,963 </td><td> $ 2,433 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 11.6% </td><td> 12.3% </td><td> 12.6% </td></tr></tbody></table>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void handlesTbodyTable() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head></head><body><table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table></body></html>");
        org.junit.Assert.assertEquals("<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void handlesImplicitCaptionClose() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><caption>A caption<td>One<td>Two");
        org.junit.Assert.assertEquals("<table><caption>A caption</caption><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void noTableDirectInTable() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table> <td>One <td><table><td>Two</table> <table><td>Three");
        org.junit.Assert.assertEquals("<table> <tbody><tr><td>One </td><td><table><tbody><tr><td>Two</td></tr></tbody></table> <table><tbody><tr><td>Three</td></tr></tbody></table></td></tr></tbody></table>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void ignoresDupeEndTrTag() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>One</td><td><table><tr><td>Two</td></tr></tr></table></td><td>Three</td></tr></table>");// two </tr></tr>, must ignore or will close table
        
        org.junit.Assert.assertEquals("<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table></td><td>Three</td></tr></tbody></table>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void handlesBaseTags() {
        // only listen to the first base href
        java.lang.String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=/4>#</a>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h, "http://foo/");
        org.junit.Assert.assertEquals("http://foo/2/", doc.baseUri());// gets set once, so doc and descendants have first only
        
        org.jsoup.select.Elements anchors = doc.getElementsByTag("a");
        org.junit.Assert.assertEquals(3, anchors.size());
        org.junit.Assert.assertEquals("http://foo/2/", anchors.get(0).baseUri());
        org.junit.Assert.assertEquals("http://foo/2/", anchors.get(1).baseUri());
        org.junit.Assert.assertEquals("http://foo/2/", anchors.get(2).baseUri());
        org.junit.Assert.assertEquals("http://foo/2/1", anchors.get(0).absUrl("href"));
        org.junit.Assert.assertEquals("http://foo/2/3", anchors.get(1).absUrl("href"));
        org.junit.Assert.assertEquals("http://foo/4", anchors.get(2).absUrl("href"));
    }

    @org.junit.Test
    public void handlesProtocolRelativeUrl() {
        java.lang.String base = "https://example.com/";
        java.lang.String html = "<img src='//example.net/img.jpg'>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, base);
        org.jsoup.nodes.Element el = doc.select("img").first();
        org.junit.Assert.assertEquals("https://example.net/img.jpg", el.absUrl("src"));
    }

    @org.junit.Test
    public void handlesCdata() {
        // todo: as this is html namespace, should actually treat as bogus comment, not cdata. keep as cdata for now
        java.lang.String h = "<div id=1><![CDATA[<html>\n<foo><&amp;]]></div>";// the &amp; in there should remain literal
        
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.jsoup.nodes.Element div = doc.getElementById("1");
        org.junit.Assert.assertEquals("<html> <foo><&amp;", div.text());
        org.junit.Assert.assertEquals(0, div.children().size());
        org.junit.Assert.assertEquals(1, div.childNodeSize());// no elements, one text node
        
    }

    @org.junit.Test
    public void handlesUnclosedCdataAtEOF() {
        // https://github.com/jhy/jsoup/issues/349 would crash, as character reader would try to seek past EOF
        java.lang.String h = "<![CDATA[]]";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals(1, doc.body().childNodeSize());
    }

    @org.junit.Test
    public void handlesInvalidStartTags() {
        java.lang.String h = "<div>Hello < There <&amp;></div>";// parse to <div {#text=Hello < There <&>}>
        
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("Hello < There <&>", doc.select("div").first().text());
    }

    @org.junit.Test
    public void handlesUnknownTags() {
        java.lang.String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.jsoup.select.Elements foos = doc.select("foo");
        org.junit.Assert.assertEquals(2, foos.size());
        org.junit.Assert.assertEquals("bar", foos.first().attr("title"));
        org.junit.Assert.assertEquals("qux", foos.last().attr("title"));
        org.junit.Assert.assertEquals("there", foos.last().text());
    }

    @org.junit.Test
    public void handlesUnknownInlineTags() {
        java.lang.String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parseBodyFragment(h);
        java.lang.String out = doc.body().html();
        org.junit.Assert.assertEquals(h, org.jsoup.TextUtil.stripNewlines(out));
    }

    @org.junit.Test
    public void parsesBodyFragment() {
        java.lang.String h = "<!-- comment --><p><a href='foo'>One</a></p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parseBodyFragment(h, "http://example.com");
        org.junit.Assert.assertEquals("<body><!-- comment --><p><a href=\"foo\">One</a></p></body>", org.jsoup.TextUtil.stripNewlines(doc.body().outerHtml()));
        org.junit.Assert.assertEquals("http://example.com/foo", doc.select("a").first().absUrl("href"));
    }

    @org.junit.Test
    public void handlesUnknownNamespaceTags() {
        // note that the first foo:bar should not really be allowed to be self closing, if parsed in html mode.
        java.lang.String h = "<foo:bar id='1' /><abc:def id=2>Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("<foo:bar id=\"1\" /><abc:def id=\"2\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void handlesKnownEmptyBlocks() {
        // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.
        java.lang.String h = "<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("<div id=\"1\"></div><script src=\"/foo\"></script><div id=\"2\"><img><img></div><a id=\"3\"></a><i></i><foo /><foo>One</foo> <hr> hr text <hr> hr text two", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void handlesSolidusAtAttributeEnd() {
        // this test makes sure [<a href=/>link</a>] is parsed as [<a href="/">link</a>], not [<a href="" /><a>link</a>]
        java.lang.String h = "<a href=/>link</a>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("<a href=\"/\">link</a>", doc.body().html());
    }

    @org.junit.Test
    public void handlesMultiClosingBody() {
        java.lang.String h = "<body><p>Hello</body><p>there</p></body></body></html><p>now";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals(3, doc.select("p").size());
        org.junit.Assert.assertEquals(3, doc.body().children().size());
    }

    @org.junit.Test
    public void handlesUnclosedDefinitionLists() {
        // jsoup used to create a <dl>, but that's not to spec
        java.lang.String h = "<dt>Foo<dd>Bar<dt>Qux<dd>Zug";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals(0, doc.select("dl").size());// no auto dl
        
        org.junit.Assert.assertEquals(4, doc.select("dt, dd").size());
        org.jsoup.select.Elements dts = doc.select("dt");
        org.junit.Assert.assertEquals(2, dts.size());
        org.junit.Assert.assertEquals("Zug", dts.get(1).nextElementSibling().text());
    }

    @org.junit.Test
    public void handlesBlocksInDefinitions() {
        // per the spec, dt and dd are inline, but in practise are block
        java.lang.String h = "<dl><dt><div id=1>Term</div></dt><dd><div id=2>Def</div></dd></dl>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("dt", doc.select("#1").first().parent().tagName());
        org.junit.Assert.assertEquals("dd", doc.select("#2").first().parent().tagName());
        org.junit.Assert.assertEquals("<dl><dt><div id=\"1\">Term</div></dt><dd><div id=\"2\">Def</div></dd></dl>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void handlesFrames() {
        java.lang.String h = "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\"><frame src=\"foo\"></frameset></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
        // no body auto vivification
    }

    @org.junit.Test
    public void ignoresContentAfterFrameset() {
        java.lang.String h = "<html><head><title>One</title></head><frameset><frame /><frame /></frameset><table></table></html>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("<html><head><title>One</title></head><frameset><frame><frame></frameset></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
        // no body, no table. No crash!
    }

    @org.junit.Test
    public void handlesJavadocFont() {
        java.lang.String h = "<TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"deprecated-list.html\"><FONT CLASS=\"NavBarFont1\"><B>Deprecated</B></FONT></A>&nbsp;</TD>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.jsoup.nodes.Element a = doc.select("a").first();
        org.junit.Assert.assertEquals("Deprecated", a.text());
        org.junit.Assert.assertEquals("font", a.child(0).tagName());
        org.junit.Assert.assertEquals("b", a.child(0).child(0).tagName());
    }

    @org.junit.Test
    public void handlesBaseWithoutHref() {
        java.lang.String h = "<head><base target='_blank'></head><body><a href=/foo>Test</a></body>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h, "http://example.com/");
        org.jsoup.nodes.Element a = doc.select("a").first();
        org.junit.Assert.assertEquals("/foo", a.attr("href"));
        org.junit.Assert.assertEquals("http://example.com/foo", a.attr("abs:href"));
    }

    @org.junit.Test
    public void normalisesDocument() {
        java.lang.String h = "<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven ";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("<!doctype html><html><head></head><body>OneTwoThree<link>FourFive Six Seven </body></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
    }

    @org.junit.Test
    public void normalisesEmptyDocument() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("");
        org.junit.Assert.assertEquals("<html><head></head><body></body></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
    }

    @org.junit.Test
    public void normalisesHeadlessBody() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><body><span class=\"foo\">bar</span>");
        org.junit.Assert.assertEquals("<html><head></head><body><span class=\"foo\">bar</span></body></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
    }

    @org.junit.Test
    public void normalisedBodyAfterContent() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<font face=Arial><body class=name><div>One</div></body></font>");
        org.junit.Assert.assertEquals("<html><head></head><body class=\"name\"><font face=\"Arial\"><div>One</div></font></body></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
    }

    @org.junit.Test
    public void findsCharsetInMalformedMeta() {
        java.lang.String h = "<meta http-equiv=Content-Type content=text/html; charset=gb2312>";
        // example cited for reason of html5's <meta charset> element
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("gb2312", doc.select("meta").attr("charset"));
    }

    @org.junit.Test
    public void testHgroup() {
        // jsoup used to not allow hroup in h{n}, but that's not in spec, and browsers are OK
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<h1>Hello <h2>There <hgroup><h1>Another<h2>headline</hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup>");
        org.junit.Assert.assertEquals("<h1>Hello </h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup></h2>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void testRelaxedTags() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<abc_def id=1>Hello</abc_def> <abc-def>There</abc-def>");
        org.junit.Assert.assertEquals("<abc_def id=\"1\">Hello</abc_def> <abc-def>There</abc-def>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void testHeaderContents() {
        // h* tags (h1 .. h9) in browsers can handle any internal content other than other h*. which is not per any
        // spec, which defines them as containing phrasing content only. so, reality over theory.
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<h1>Hello <div>There</div> now</h1> <h2>More <h3>Content</h3></h2>");
        org.junit.Assert.assertEquals("<h1>Hello <div>There</div> now</h1> <h2>More </h2><h3>Content</h3>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void testSpanContents() {
        // like h1 tags, the spec says SPAN is phrasing only, but browsers and publisher treat span as a block tag
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>");
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void testNoImagesInNoScriptInHead() {
        // jsoup used to allow, but against spec if parsing with noscript
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head><noscript><img src='foo'></noscript></head><body><p>Hello</p></body></html>");
        org.junit.Assert.assertEquals("<html><head><noscript>&lt;img src=\"foo\"&gt;</noscript></head><body><p>Hello</p></body></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
    }

    @org.junit.Test
    public void testAFlowContents() {
        // html5 has <a> as either phrasing or block
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<a>Hello <div>there</div> <span>now</span></a>");
        org.junit.Assert.assertEquals("<a>Hello <div>there</div> <span>now</span></a>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void testFontFlowContents() {
        // html5 has no definition of <font>; often used as flow
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<font>Hello <div>there</div> <span>now</span></font>");
        org.junit.Assert.assertEquals("<font>Hello <div>there</div> <span>now</span></font>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void handlesMisnestedTagsBI() {
        // whatwg: <b><i></b></i>
        java.lang.String h = "<p>1<b>2<i>3</b>4</i>5</p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("<p>1<b>2<i>3</i></b><i>4</i>5</p>", doc.body().html());
        // adoption agency on </b>, reconstruction of formatters on 4.
    }

    @org.junit.Test
    public void handlesMisnestedTagsBP() {
        // whatwg: <b><p></b></p>
        java.lang.String h = "<b>1<p>2</b>3</p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("<b>1</b>\n<p><b>2</b>3</p>", doc.body().html());
    }

    @org.junit.Test
    public void handlesUnexpectedMarkupInTables() {
        // whatwg - tests markers in active formatting (if they didn't work, would get in in table)
        // also tests foster parenting
        java.lang.String h = "<table><b><tr><td>aaa</td></tr>bbb</table>ccc";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("<b></b><b>bbb</b><table><tbody><tr><td>aaa</td></tr></tbody></table><b>ccc</b>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void handlesUnclosedFormattingElements() {
        // whatwg: formatting elements get collected and applied, but excess elements are thrown away
        java.lang.String h = "<!DOCTYPE html>\n" + ((("<p><b class=x><b class=x><b><b class=x><b class=x><b>X\n" + "<p>X\n") + "<p><b><b class=x><b>X\n") + "<p></b></b></b></b></b></b>X");
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        doc.outputSettings().indentAmount(0);
        java.lang.String want = "<!doctype html>\n" + (((((((("<html>\n" + "<head></head>\n") + "<body>\n") + "<p><b class=\"x\"><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></b></p>\n") + "<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></p>\n") + "<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b><b><b class=\"x\"><b>X </b></b></b></b></b></b></b></b></p>\n") + "<p>X</p>\n") + "</body>\n") + "</html>");
        org.junit.Assert.assertEquals(want, doc.html());
    }

    @org.junit.Test
    public void handlesUnclosedAnchors() {
        java.lang.String h = "<a href='http://example.com/'>Link<p>Error link</a>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        java.lang.String want = "<a href=\"http://example.com/\">Link</a>\n<p><a href=\"http://example.com/\">Error link</a></p>";
        org.junit.Assert.assertEquals(want, doc.body().html());
    }

    @org.junit.Test
    public void reconstructFormattingElements() {
        // tests attributes and multi b
        java.lang.String h = "<p><b class=one>One <i>Two <b>Three</p><p>Hello</p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("<p><b class=\"one\">One <i>Two <b>Three</b></i></b></p>\n<p><b class=\"one\"><i><b>Hello</b></i></b></p>", doc.body().html());
    }

    @org.junit.Test
    public void reconstructFormattingElementsInTable() {
        // tests that tables get formatting markers -- the <b> applies outside the table and does not leak in,
        // and the <i> inside the table and does not leak out.
        java.lang.String h = "<p><b>One</p> <table><tr><td><p><i>Three<p>Four</i></td></tr></table> <p>Five</p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        java.lang.String want = "<p><b>One</b></p>\n" + ((((((("<b> \n" + " <table>\n") + "  <tbody>\n") + "   <tr>\n") + "    <td><p><i>Three</i></p><p><i>Four</i></p></td>\n") + "   </tr>\n") + "  </tbody>\n") + " </table> <p>Five</p></b>");
        org.junit.Assert.assertEquals(want, doc.body().html());
    }

    @org.junit.Test
    public void commentBeforeHtml() {
        java.lang.String h = "<!-- comment --><!-- comment 2 --><p>One</p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("<!-- comment --><!-- comment 2 --><html><head></head><body><p>One</p></body></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
    }

    @org.junit.Test
    public void emptyTdTag() {
        java.lang.String h = "<table><tr><td>One</td><td id='2' /></tr></table>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("<td>One</td>\n<td id=\"2\"></td>", doc.select("tr").first().html());
    }

    @org.junit.Test
    public void handlesSolidusInA() {
        // test for bug #66
        java.lang.String h = "<a class=lp href=/lib/14160711/>link text</a>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.jsoup.nodes.Element a = doc.select("a").first();
        org.junit.Assert.assertEquals("link text", a.text());
        org.junit.Assert.assertEquals("/lib/14160711/", a.attr("href"));
    }

    @org.junit.Test
    public void handlesSpanInTbody() {
        // test for bug 64
        java.lang.String h = "<table><tbody><span class='1'><tr><td>One</td></tr><tr><td>Two</td></tr></span></tbody></table>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals(doc.select("span").first().children().size(), 0);// the span gets closed
        
        org.junit.Assert.assertEquals(doc.select("table").size(), 1);// only one table
        
    }

    @org.junit.Test
    public void handlesUnclosedTitleAtEof() {
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<title>Data").title());
        org.junit.Assert.assertEquals("Data<", org.jsoup.Jsoup.parse("<title>Data<").title());
        org.junit.Assert.assertEquals("Data</", org.jsoup.Jsoup.parse("<title>Data</").title());
        org.junit.Assert.assertEquals("Data</t", org.jsoup.Jsoup.parse("<title>Data</t").title());
        org.junit.Assert.assertEquals("Data</ti", org.jsoup.Jsoup.parse("<title>Data</ti").title());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<title>Data</title>").title());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<title>Data</title >").title());
    }

    @org.junit.Test
    public void handlesUnclosedTitle() {
        org.jsoup.nodes.Document one = org.jsoup.Jsoup.parse("<title>One <b>Two <b>Three</TITLE><p>Test</p>");// has title, so <b> is plain text
        
        org.junit.Assert.assertEquals("One <b>Two <b>Three", one.title());
        org.junit.Assert.assertEquals("Test", one.select("p").first().text());
        org.jsoup.nodes.Document two = org.jsoup.Jsoup.parse("<title>One<b>Two <p>Test</p>");// no title, so <b> causes </title> breakout
        
        org.junit.Assert.assertEquals("One", two.title());
        org.junit.Assert.assertEquals("<b>Two <p>Test</p></b>", two.body().html());
    }

    @org.junit.Test
    public void handlesUnclosedScriptAtEof() {
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<script>Data").select("script").first().data());
        org.junit.Assert.assertEquals("Data<", org.jsoup.Jsoup.parse("<script>Data<").select("script").first().data());
        org.junit.Assert.assertEquals("Data</sc", org.jsoup.Jsoup.parse("<script>Data</sc").select("script").first().data());
        org.junit.Assert.assertEquals("Data</-sc", org.jsoup.Jsoup.parse("<script>Data</-sc").select("script").first().data());
        org.junit.Assert.assertEquals("Data</sc-", org.jsoup.Jsoup.parse("<script>Data</sc-").select("script").first().data());
        org.junit.Assert.assertEquals("Data</sc--", org.jsoup.Jsoup.parse("<script>Data</sc--").select("script").first().data());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<script>Data</script>").select("script").first().data());
        org.junit.Assert.assertEquals("Data</script", org.jsoup.Jsoup.parse("<script>Data</script").select("script").first().data());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<script>Data</script ").select("script").first().data());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<script>Data</script n").select("script").first().data());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<script>Data</script n=").select("script").first().data());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<script>Data</script n=\"").select("script").first().data());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<script>Data</script n=\"p").select("script").first().data());
    }

    @org.junit.Test
    public void handlesUnclosedRawtextAtEof() {
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<style>Data").select("style").first().data());
        org.junit.Assert.assertEquals("Data</st", org.jsoup.Jsoup.parse("<style>Data</st").select("style").first().data());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<style>Data</style>").select("style").first().data());
        org.junit.Assert.assertEquals("Data</style", org.jsoup.Jsoup.parse("<style>Data</style").select("style").first().data());
        org.junit.Assert.assertEquals("Data</-style", org.jsoup.Jsoup.parse("<style>Data</-style").select("style").first().data());
        org.junit.Assert.assertEquals("Data</style-", org.jsoup.Jsoup.parse("<style>Data</style-").select("style").first().data());
        org.junit.Assert.assertEquals("Data</style--", org.jsoup.Jsoup.parse("<style>Data</style--").select("style").first().data());
    }

    @org.junit.Test
    public void noImplicitFormForTextAreas() {
        // old jsoup parser would create implicit forms for form children like <textarea>, but no more
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>One</textarea>");
        org.junit.Assert.assertEquals("<textarea>One</textarea>", doc.body().html());
    }

    @org.junit.Test
    public void handlesEscapedScript() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script><!-- one <script>Blah</script> --></script>");
        org.junit.Assert.assertEquals("<!-- one <script>Blah</script> -->", doc.select("script").first().data());
    }

    @org.junit.Test
    public void handles0CharacterAsText() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("0<p>0</p>");
        org.junit.Assert.assertEquals("0\n<p>0</p>", doc.body().html());
    }

    @org.junit.Test
    public void handlesNullInData() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p id= >Blah  </p>");
        org.junit.Assert.assertEquals("<p id=\"\ufffd\">Blah  </p>", doc.body().html());// replaced in attr, NOT replaced in data
        
    }

    @org.junit.Test
    public void handlesNullInComments() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><!--     -->");
        org.junit.Assert.assertEquals("<!-- \ufffd \ufffd -->", doc.body().html());
    }

    @org.junit.Test
    public void handlesNewlinesAndWhitespaceInTag() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<a \n href=\"one\" \r\n id=\"two\" \f >");
        org.junit.Assert.assertEquals("<a href=\"one\" id=\"two\"></a>", doc.body().html());
    }

    @org.junit.Test
    public void handlesWhitespaceInoDocType() {
        java.lang.String html = "<!DOCTYPE html\r\n" + ("      PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\r\n" + "      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.junit.Assert.assertEquals("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">", doc.childNode(0).outerHtml());
    }

    @org.junit.Test
    public void tracksErrorsWhenRequested() {
        java.lang.String html = "<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo";
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser().setTrackErrors(500);
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com", parser);
        java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
        org.junit.Assert.assertEquals(5, errors.size());
        org.junit.Assert.assertEquals("20: Attributes incorrectly present on end tag", errors.get(0).toString());
        org.junit.Assert.assertEquals("35: Unexpected token [Doctype] when in state [InBody]", errors.get(1).toString());
        org.junit.Assert.assertEquals("36: Invalid character reference: invalid named referenece 'arrgh'", errors.get(2).toString());
        org.junit.Assert.assertEquals("50: Self closing flag not acknowledged", errors.get(3).toString());
        org.junit.Assert.assertEquals("61: Unexpectedly reached end of file (EOF) in input state [TagName]", errors.get(4).toString());
    }

    @org.junit.Test
    public void tracksLimitedErrorsWhenRequested() {
        java.lang.String html = "<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo";
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser().setTrackErrors(3);
        org.jsoup.nodes.Document doc = parser.parseInput(html, "http://example.com");
        java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
        org.junit.Assert.assertEquals(3, errors.size());
        org.junit.Assert.assertEquals("20: Attributes incorrectly present on end tag", errors.get(0).toString());
        org.junit.Assert.assertEquals("35: Unexpected token [Doctype] when in state [InBody]", errors.get(1).toString());
        org.junit.Assert.assertEquals("36: Invalid character reference: invalid named referenece 'arrgh'", errors.get(2).toString());
    }

    @org.junit.Test
    public void noErrorsByDefault() {
        java.lang.String html = "<p>One</p href='no'>&arrgh;<font /><br /><foo";
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com", parser);
        java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
        org.junit.Assert.assertEquals(0, errors.size());
    }

    @org.junit.Test
    public void handlesCommentsInTable() {
        java.lang.String html = "<table><tr><td>text</td><!-- Comment --></tr></table>";
        org.jsoup.nodes.Document node = org.jsoup.Jsoup.parseBodyFragment(html);
        org.junit.Assert.assertEquals("<html><head></head><body><table><tbody><tr><td>text</td><!-- Comment --></tr></tbody></table></body></html>", org.jsoup.TextUtil.stripNewlines(node.outerHtml()));
    }

    @org.junit.Test
    public void handlesQuotesInCommentsInScripts() {
        java.lang.String html = "<script>\n" + ((("  <!--\n" + "    document.write(\'</scr\' + \'ipt>\');\n") + "  // -->\n") + "</script>");
        org.jsoup.nodes.Document node = org.jsoup.Jsoup.parseBodyFragment(html);
        org.junit.Assert.assertEquals(("<script>\n" + ((("  <!--\n" + "    document.write(\'</scr\' + \'ipt>\');\n") + "  // -->\n") + "</script>")), node.body().html());
    }

    @org.junit.Test
    public void handleNullContextInParseFragment() {
        java.lang.String html = "<ol><li>One</li></ol><p>Two</p>";
        java.util.List<org.jsoup.nodes.Node> nodes = org.jsoup.parser.Parser.parseFragment(html, null, "http://example.com/");
        org.junit.Assert.assertEquals(1, nodes.size());// returns <html> node (not document) -- no context means doc gets created
        
        org.junit.Assert.assertEquals("html", nodes.get(0).nodeName());
        org.junit.Assert.assertEquals("<html> <head></head> <body> <ol> <li>One</li> </ol> <p>Two</p> </body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(nodes.get(0).outerHtml()));
    }

    @org.junit.Test
    public void doesNotFindShortestMatchingEntity() {
        // previous behaviour was to identify a possible entity, then chomp down the string until a match was found.
        // (as defined in html5.) However in practise that lead to spurious matches against the author's intent.
        java.lang.String html = "One &clubsuite; &clubsuit;";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.junit.Assert.assertEquals(org.jsoup.helper.StringUtil.normaliseWhitespace("One &amp;clubsuite; ?"), doc.body().html());
    }

    @org.junit.Test
    public void relaxedBaseEntityMatchAndStrictExtendedMatch() {
        // extended entities need a ; at the end to match, base does not
        java.lang.String html = "&amp &quot &reg &icy &hopf &icy; &hopf;";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        doc.outputSettings().escapeMode(org.jsoup.nodes.Entities.EscapeMode.extended).charset("ascii");// modifies output only to clarify test
        
        org.junit.Assert.assertEquals("&amp; \" &reg; &amp;icy &amp;hopf &icy; &hopf;", doc.body().html());
    }

    @org.junit.Test
    public void handlesXmlDeclarationAsBogusComment() {
        java.lang.String html = "<?xml encoding='UTF-8' ?><body>One</body>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.junit.Assert.assertEquals("<!--?xml encoding='UTF-8' ?--> <html> <head></head> <body> One </body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml()));
    }

    @org.junit.Test
    public void handlesTagsInTextarea() {
        java.lang.String html = "<textarea><p>Jsoup</p></textarea>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.junit.Assert.assertEquals("<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>", doc.body().html());
    }

    // form tests
    @org.junit.Test
    public void createsFormElements() {
        java.lang.String html = "<body><form><input id=1><input id=2></form></body>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element el = doc.select("form").first();
        org.junit.Assert.assertTrue("Is form element", (el instanceof org.jsoup.nodes.FormElement));
        org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
        org.jsoup.select.Elements controls = form.elements();
        org.junit.Assert.assertEquals(2, controls.size());
        org.junit.Assert.assertEquals("1", controls.get(0).id());
        org.junit.Assert.assertEquals("2", controls.get(1).id());
    }

    @org.junit.Test
    public void associatedFormControlsWithDisjointForms() {
        // form gets closed, isn't parent of controls
        java.lang.String html = "<table><tr><form><input type=hidden id=1><td><input type=text id=2></td><tr></table>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element el = doc.select("form").first();
        org.junit.Assert.assertTrue("Is form element", (el instanceof org.jsoup.nodes.FormElement));
        org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
        org.jsoup.select.Elements controls = form.elements();
        org.junit.Assert.assertEquals(2, controls.size());
        org.junit.Assert.assertEquals("1", controls.get(0).id());
        org.junit.Assert.assertEquals("2", controls.get(1).id());
        org.junit.Assert.assertEquals("<table><tbody><tr><form></form><input type=\"hidden\" id=\"1\"><td><input type=\"text\" id=\"2\"></td></tr><tr></tr></tbody></table>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void handlesInputInTable() {
        java.lang.String h = "<body>\n" + (((("<input type=\"hidden\" name=\"a\" value=\"\">\n" + "<table>\n") + "<input type=\"hidden\" name=\"b\" value=\"\" />\n") + "</table>\n") + "</body>");
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals(1, doc.select("table input").size());
        org.junit.Assert.assertEquals(2, doc.select("input").size());
    }

    @org.junit.Test
    public void convertsImageToImg() {
        // image to img, unless in a svg. old html cruft.
        java.lang.String h = "<body><image><svg><image /></svg></body>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("<img>\n<svg>\n <image />\n</svg>", doc.body().html());
    }

    @org.junit.Test
    public void handlesInvalidDoctypes() {
        // would previously throw invalid name exception on empty doctype
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<!DOCTYPE>");
        org.junit.Assert.assertEquals("<!doctype> <html> <head></head> <body></body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml()));
        doc = org.jsoup.Jsoup.parse("<!DOCTYPE><html><p>Foo</p></html>");
        org.junit.Assert.assertEquals("<!doctype> <html> <head></head> <body> <p>Foo</p> </body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml()));
        doc = org.jsoup.Jsoup.parse("<!DOCTYPE  >");
        org.junit.Assert.assertEquals("<!doctype ?> <html> <head></head> <body></body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml()));
    }

    @org.junit.Test
    public void handlesManyChildren() {
        // Arrange
        java.lang.StringBuilder longBody = new java.lang.StringBuilder(500000);
        for (int i = 0; i < 25000; i++) {
            longBody.append(i).append("<br>");
        }
        // Act
        long start = java.lang.System.currentTimeMillis();
        org.jsoup.nodes.Document doc = org.jsoup.parser.Parser.parseBodyFragment(longBody.toString(), "");
        // Assert
        org.junit.Assert.assertEquals(50000, doc.body().childNodeSize());
        org.junit.Assert.assertTrue((((java.lang.System.currentTimeMillis()) - start) < 1000));
    }

    @org.junit.Test
    public void testInvalidTableContents() throws java.io.IOException {
        java.io.File in = org.jsoup.integration.ParseTest.getFile("/htmltests/table-invalid-elements.html");
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(in, "UTF-8");
        doc.outputSettings().prettyPrint(true);
        java.lang.String rendered = doc.toString();
        int endOfEmail = rendered.indexOf("Comment");
        int guarantee = rendered.indexOf("Why am I here?");
        org.junit.Assert.assertTrue("Comment not found", (endOfEmail > (-1)));
        org.junit.Assert.assertTrue("Search text not found", (guarantee > (-1)));
        org.junit.Assert.assertTrue("Search text did not come after comment", (guarantee > endOfEmail));
    }

    @org.junit.Test
    public void testNormalisesIsIndex() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><isindex action='/submit'></body>");
        java.lang.String html = doc.outerHtml();
        org.junit.Assert.assertEquals("<form action=\"/submit\"> <hr> <label>This is a searchable index. Enter search keywords: <input name=\"isindex\"></label> <hr> </form>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.body().html()));
    }

    @org.junit.Test
    public void testReinsertionModeForThCelss() {
        java.lang.String body = "<body> <table> <tr> <th> <table><tr><td></td></tr></table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
        org.junit.Assert.assertEquals(1, doc.body().children().size());
    }

    @org.junit.Test
    public void testUsingSingleQuotesInQueries() {
        java.lang.String body = "<body> <div class='main'>hello</div></body>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
        org.jsoup.select.Elements main = doc.select("div[class='main']");
        org.junit.Assert.assertEquals("hello", main.text());
    }

    @org.junit.Test
    public void testSupportsNonAsciiTags() {
        java.lang.String body = "<???????>Yes</???????><???????-???>Correct</<???????-???>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
        org.jsoup.select.Elements els = doc.select("???????");
        org.junit.Assert.assertEquals("Yes", els.text());
        els = doc.select("???????-???");
        org.junit.Assert.assertEquals("Correct", els.text());
    }

    @org.junit.Test
    public void testSupportsPartiallyNonAsciiTags() {
        java.lang.String body = "<div>Check</div?>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
        org.jsoup.select.Elements els = doc.select("div");
        org.junit.Assert.assertEquals("Check", els.text());
    }

    @org.junit.Test
    public void testFragment() {
        // make sure when parsing a body fragment, a script tag at start goes into the body
        java.lang.String html = "<script type=\"text/javascript\">console.log(\'foo\');</script>\n" + ("<div id=\"somecontent\">some content</div>\n" + "<script type=\"text/javascript\">console.log(\'bar\');</script>");
        org.jsoup.nodes.Document body = org.jsoup.Jsoup.parseBodyFragment(html);
        org.junit.Assert.assertEquals(("<script type=\"text/javascript\">console.log(\'foo\');</script> \n" + ((("<div id=\"somecontent\">\n" + " some content\n") + "</div> \n") + "<script type=\"text/javascript\">console.log(\'bar\');</script>")), body.body().html());
    }

    @org.junit.Test
    public void testHtmlLowerCase() {
        java.lang.String html = "<!doctype HTML><DIV ID=1>One</DIV>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.junit.Assert.assertEquals("<!doctype html> <html> <head></head> <body> <div id=\"1\"> One </div> </body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml()));
    }

    @org.junit.Test
    public void canPreserveTagCase() {
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
        parser.settings(new org.jsoup.parser.ParseSettings(true, false));
        org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
        org.junit.Assert.assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN id=\"2\"></SPAN> </div> </body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml()));
    }

    @org.junit.Test
    public void canPreserveAttributeCase() {
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
        parser.settings(new org.jsoup.parser.ParseSettings(false, true));
        org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
        org.junit.Assert.assertEquals("<html> <head></head> <body> <div id=\"1\"> <span ID=\"2\"></span> </div> </body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml()));
    }

    @org.junit.Test
    public void handlesControlCodeInAttributeName() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p><a =foo>One</a><a/=bar><a foo=bar>Two</a></p>");
        org.junit.Assert.assertEquals("<p><a>One</a><a></a><a foo=\"bar\">Two</a></p>", doc.body().html());
    }

    @org.junit.Test
    public void canPreserveBothCase() {
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_canPreserveBothCase__3 = parser.settings(new org.jsoup.parser.ParseSettings(true, true));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_canPreserveBothCase__3.equals(parser));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_canPreserveBothCase__3).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_canPreserveBothCase__3).getErrors());
        org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
        org.junit.Assert.assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN ID=\"2\"></SPAN> </div> </body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#associatedFormControlsWithDisjointForms */
    @org.junit.Test(timeout = 10000)
    public void associatedFormControlsWithDisjointForms_cf225() {
        // form gets closed, isn't parent of controls
        java.lang.String html = "<table><tr><form><input type=hidden id=1><td><input type=text id=2></td><tr></table>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element el = doc.select("form").first();
        org.junit.Assert.assertTrue("Is form element", (el instanceof org.jsoup.nodes.FormElement));
        org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
        org.jsoup.select.Elements controls = form.elements();
        org.junit.Assert.assertEquals(2, controls.size());
        org.junit.Assert.assertEquals("1", controls.get(0).id());
        org.junit.Assert.assertEquals("2", controls.get(1).id());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_58 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_58);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_associatedFormControlsWithDisjointForms_cf225__22 = // StatementAdderMethod cloned existing statement
vc_58.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_associatedFormControlsWithDisjointForms_cf225__22).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_associatedFormControlsWithDisjointForms_cf225__22).isTrackErrors());
        org.junit.Assert.assertEquals("<table><tbody><tr><form></form><input type=\"hidden\" id=\"1\"><td><input type=\"text\" id=\"2\"></td></tr><tr></tr></tbody></table>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#associatedFormControlsWithDisjointForms */
    @org.junit.Test(timeout = 10000)
    public void associatedFormControlsWithDisjointForms_cf29() {
        // form gets closed, isn't parent of controls
        java.lang.String html = "<table><tr><form><input type=hidden id=1><td><input type=text id=2></td><tr></table>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element el = doc.select("form").first();
        org.junit.Assert.assertTrue("Is form element", (el instanceof org.jsoup.nodes.FormElement));
        org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
        org.jsoup.select.Elements controls = form.elements();
        org.junit.Assert.assertEquals(2, controls.size());
        org.junit.Assert.assertEquals("1", controls.get(0).id());
        org.junit.Assert.assertEquals("2", controls.get(1).id());
        // StatementAdderOnAssert create random local variable
        boolean vc_6 = false;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(vc_6);
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_5 = new java.lang.String();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(vc_5, "");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_2 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_2);
        // AssertGenerator replace invocation
        java.lang.String o_associatedFormControlsWithDisjointForms_cf29__26 = // StatementAdderMethod cloned existing statement
vc_2.unescapeEntities(vc_5, vc_6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_associatedFormControlsWithDisjointForms_cf29__26, "");
        org.junit.Assert.assertEquals("<table><tbody><tr><form></form><input type=\"hidden\" id=\"1\"><td><input type=\"text\" id=\"2\"></td></tr><tr></tr></tbody></table>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#associatedFormControlsWithDisjointForms */
    @org.junit.Test
    public void associatedFormControlsWithDisjointForms_literalMutation2_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // form gets closed, isn't parent of controls
            java.lang.String html = "";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element el = doc.select("form").first();
            // MethodAssertGenerator build local variable
            Object o_8_0 = el instanceof org.jsoup.nodes.FormElement;
            org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
            org.jsoup.select.Elements controls = form.elements();
            // MethodAssertGenerator build local variable
            Object o_12_0 = controls.size();
            // MethodAssertGenerator build local variable
            Object o_14_0 = controls.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_17_0 = controls.get(1).id();
            // MethodAssertGenerator build local variable
            Object o_20_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("associatedFormControlsWithDisjointForms_literalMutation2 should have thrown Exception");
        } catch (java.lang.Exception eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#associatedFormControlsWithDisjointForms */
    @org.junit.Test(timeout = 10000)
    public void associatedFormControlsWithDisjointForms_cf207_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // form gets closed, isn't parent of controls
            java.lang.String html = "<table><tr><form><input type=hidden id=1><td><input type=text id=2></td><tr></table>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element el = doc.select("form").first();
            // MethodAssertGenerator build local variable
            Object o_8_0 = el instanceof org.jsoup.nodes.FormElement;
            org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
            org.jsoup.select.Elements controls = form.elements();
            // MethodAssertGenerator build local variable
            Object o_12_0 = controls.size();
            // MethodAssertGenerator build local variable
            Object o_14_0 = controls.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_17_0 = controls.get(1).id();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_43 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_43.settings();
            // MethodAssertGenerator build local variable
            Object o_24_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("associatedFormControlsWithDisjointForms_cf207 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#associatedFormControlsWithDisjointForms */
    @org.junit.Test(timeout = 10000)
    public void associatedFormControlsWithDisjointForms_cf227_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // form gets closed, isn't parent of controls
            java.lang.String html = "<table><tr><form><input type=hidden id=1><td><input type=text id=2></td><tr></table>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element el = doc.select("form").first();
            // MethodAssertGenerator build local variable
            Object o_8_0 = el instanceof org.jsoup.nodes.FormElement;
            org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
            org.jsoup.select.Elements controls = form.elements();
            // MethodAssertGenerator build local variable
            Object o_12_0 = controls.size();
            // MethodAssertGenerator build local variable
            Object o_14_0 = controls.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_17_0 = controls.get(1).id();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_60 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_60.getTreeBuilder();
            // MethodAssertGenerator build local variable
            Object o_24_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("associatedFormControlsWithDisjointForms_cf227 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#associatedFormControlsWithDisjointForms */
    @org.junit.Test(timeout = 10000)
    public void associatedFormControlsWithDisjointForms_cf209_cf251_failAssert19() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // form gets closed, isn't parent of controls
            java.lang.String html = "<table><tr><form><input type=hidden id=1><td><input type=text id=2></td><tr></table>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element el = doc.select("form").first();
            // MethodAssertGenerator build local variable
            Object o_8_0 = el instanceof org.jsoup.nodes.FormElement;
            org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
            org.jsoup.select.Elements controls = form.elements();
            // MethodAssertGenerator build local variable
            Object o_12_0 = controls.size();
            // MethodAssertGenerator build local variable
            Object o_14_0 = controls.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_17_0 = controls.get(1).id();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_45 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_22_0 = vc_45;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_associatedFormControlsWithDisjointForms_cf209__22 = // StatementAdderMethod cloned existing statement
vc_45.htmlParser();
            // MethodAssertGenerator build local variable
            Object o_26_0 = ((org.jsoup.parser.Parser)o_associatedFormControlsWithDisjointForms_cf209__22).isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_28_0 = ((org.jsoup.parser.Parser)o_associatedFormControlsWithDisjointForms_cf209__22).getErrors();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_62 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_62.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_34_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("associatedFormControlsWithDisjointForms_cf209_cf251 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#associatedFormControlsWithDisjointForms */
    @org.junit.Test(timeout = 10000)
    public void associatedFormControlsWithDisjointForms_cf225_literalMutation2042_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // form gets closed, isn't parent of controls
            java.lang.String html = "";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element el = doc.select("form").first();
            // MethodAssertGenerator build local variable
            Object o_8_0 = el instanceof org.jsoup.nodes.FormElement;
            org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
            org.jsoup.select.Elements controls = form.elements();
            // MethodAssertGenerator build local variable
            Object o_12_0 = controls.size();
            // MethodAssertGenerator build local variable
            Object o_14_0 = controls.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_17_0 = controls.get(1).id();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_58 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_22_0 = vc_58;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_associatedFormControlsWithDisjointForms_cf225__22 = // StatementAdderMethod cloned existing statement
vc_58.xmlParser();
            // MethodAssertGenerator build local variable
            Object o_26_0 = ((org.jsoup.parser.Parser)o_associatedFormControlsWithDisjointForms_cf225__22).getErrors();
            // MethodAssertGenerator build local variable
            Object o_28_0 = ((org.jsoup.parser.Parser)o_associatedFormControlsWithDisjointForms_cf225__22).isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_30_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("associatedFormControlsWithDisjointForms_cf225_literalMutation2042 should have thrown Exception");
        } catch (java.lang.Exception eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#associatedFormControlsWithDisjointForms */
    @org.junit.Test(timeout = 10000)
    public void associatedFormControlsWithDisjointForms_cf29_cf1013_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // form gets closed, isn't parent of controls
            java.lang.String html = "<table><tr><form><input type=hidden id=1><td><input type=text id=2></td><tr></table>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element el = doc.select("form").first();
            // MethodAssertGenerator build local variable
            Object o_8_0 = el instanceof org.jsoup.nodes.FormElement;
            org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
            org.jsoup.select.Elements controls = form.elements();
            // MethodAssertGenerator build local variable
            Object o_12_0 = controls.size();
            // MethodAssertGenerator build local variable
            Object o_14_0 = controls.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_17_0 = controls.get(1).id();
            // StatementAdderOnAssert create random local variable
            boolean vc_6 = false;
            // MethodAssertGenerator build local variable
            Object o_22_0 = vc_6;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_5 = new java.lang.String();
            // MethodAssertGenerator build local variable
            Object o_26_0 = vc_5;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_2 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_30_0 = vc_2;
            // AssertGenerator replace invocation
            java.lang.String o_associatedFormControlsWithDisjointForms_cf29__26 = // StatementAdderMethod cloned existing statement
vc_2.unescapeEntities(vc_5, vc_6);
            // MethodAssertGenerator build local variable
            Object o_34_0 = o_associatedFormControlsWithDisjointForms_cf29__26;
            // StatementAdderMethod cloned existing statement
            vc_2.getErrors();
            // MethodAssertGenerator build local variable
            Object o_38_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("associatedFormControlsWithDisjointForms_cf29_cf1013 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#associatedFormControlsWithDisjointForms */
    @org.junit.Test(timeout = 10000)
    public void associatedFormControlsWithDisjointForms_cf27_cf1751_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // form gets closed, isn't parent of controls
            java.lang.String html = "<table><tr><form><input type=hidden id=1><td><input type=text id=2></td><tr></table>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element el = doc.select("form").first();
            // MethodAssertGenerator build local variable
            Object o_8_0 = el instanceof org.jsoup.nodes.FormElement;
            org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
            org.jsoup.select.Elements controls = form.elements();
            // MethodAssertGenerator build local variable
            Object o_12_0 = controls.size();
            // MethodAssertGenerator build local variable
            Object o_14_0 = controls.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_17_0 = controls.get(1).id();
            // StatementAdderOnAssert create random local variable
            boolean vc_6 = false;
            // MethodAssertGenerator build local variable
            Object o_22_0 = vc_6;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // MethodAssertGenerator build local variable
            Object o_28_0 = out;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_2 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_32_0 = vc_2;
            // AssertGenerator replace invocation
            java.lang.String o_associatedFormControlsWithDisjointForms_cf27__28 = // StatementAdderMethod cloned existing statement
vc_2.unescapeEntities(out, vc_6);
            // MethodAssertGenerator build local variable
            Object o_36_0 = o_associatedFormControlsWithDisjointForms_cf27__28;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_317 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_317.getErrors();
            // MethodAssertGenerator build local variable
            Object o_42_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("associatedFormControlsWithDisjointForms_cf27_cf1751 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#associatedFormControlsWithDisjointForms */
    @org.junit.Test(timeout = 10000)
    public void associatedFormControlsWithDisjointForms_cf27_cf1706_failAssert14_literalMutation2498_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // form gets closed, isn't parent of controls
                java.lang.String html = "";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element el = doc.select("form").first();
                // MethodAssertGenerator build local variable
                Object o_8_0 = el instanceof org.jsoup.nodes.FormElement;
                org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
                org.jsoup.select.Elements controls = form.elements();
                // MethodAssertGenerator build local variable
                Object o_12_0 = controls.size();
                // MethodAssertGenerator build local variable
                Object o_14_0 = controls.get(0).id();
                // MethodAssertGenerator build local variable
                Object o_17_0 = controls.get(1).id();
                // StatementAdderOnAssert create random local variable
                boolean vc_6 = false;
                // MethodAssertGenerator build local variable
                Object o_22_0 = vc_6;
                // StatementAddOnAssert local variable replacement
                java.lang.String out = doc.body().html();
                // MethodAssertGenerator build local variable
                Object o_28_0 = out;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_2 = (org.jsoup.parser.Parser)null;
                // MethodAssertGenerator build local variable
                Object o_32_0 = vc_2;
                // AssertGenerator replace invocation
                java.lang.String o_associatedFormControlsWithDisjointForms_cf27__28 = // StatementAdderMethod cloned existing statement
vc_2.unescapeEntities(out, vc_6);
                // MethodAssertGenerator build local variable
                Object o_36_0 = o_associatedFormControlsWithDisjointForms_cf27__28;
                // StatementAdderOnAssert create null value
                java.lang.String vc_314 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_312 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_312.unescapeEntities(vc_314, vc_6);
                // MethodAssertGenerator build local variable
                Object o_44_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.junit.Assert.fail("associatedFormControlsWithDisjointForms_cf27_cf1706 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("associatedFormControlsWithDisjointForms_cf27_cf1706_failAssert14_literalMutation2498 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#associatedFormControlsWithDisjointForms */
    @org.junit.Test(timeout = 10000)
    public void associatedFormControlsWithDisjointForms_cf209_cf251_failAssert19_literalMutation2521_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // form gets closed, isn't parent of controls
                java.lang.String html = "<table><tr><form><input type=hidden id=1><td><inut type=text id=2></td><tr></table>";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element el = doc.select("form").first();
                // MethodAssertGenerator build local variable
                Object o_8_0 = el instanceof org.jsoup.nodes.FormElement;
                org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
                org.jsoup.select.Elements controls = form.elements();
                // MethodAssertGenerator build local variable
                Object o_12_0 = controls.size();
                // MethodAssertGenerator build local variable
                Object o_14_0 = controls.get(0).id();
                // MethodAssertGenerator build local variable
                Object o_17_0 = controls.get(1).id();
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_45 = (org.jsoup.parser.Parser)null;
                // MethodAssertGenerator build local variable
                Object o_22_0 = vc_45;
                // AssertGenerator replace invocation
                org.jsoup.parser.Parser o_associatedFormControlsWithDisjointForms_cf209__22 = // StatementAdderMethod cloned existing statement
vc_45.htmlParser();
                // MethodAssertGenerator build local variable
                Object o_26_0 = ((org.jsoup.parser.Parser)o_associatedFormControlsWithDisjointForms_cf209__22).isTrackErrors();
                // MethodAssertGenerator build local variable
                Object o_28_0 = ((org.jsoup.parser.Parser)o_associatedFormControlsWithDisjointForms_cf209__22).getErrors();
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_62 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_62.isTrackErrors();
                // MethodAssertGenerator build local variable
                Object o_34_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.junit.Assert.fail("associatedFormControlsWithDisjointForms_cf209_cf251 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("associatedFormControlsWithDisjointForms_cf209_cf251_failAssert19_literalMutation2521 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#associatedFormControlsWithDisjointForms */
    @org.junit.Test(timeout = 10000)
    public void associatedFormControlsWithDisjointForms_cf209_cf254_failAssert0_literalMutation2433_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // form gets closed, isn't parent of controls
                java.lang.String html = "*uc([}!2XbQs |)TDG+L,kgWS%rG!{ 75Uj=:LlOH0m({q956x/WBjX1$DqGN[/eqoq0eDQ=abN3ud2>^fz:";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element el = doc.select("form").first();
                // MethodAssertGenerator build local variable
                Object o_8_0 = el instanceof org.jsoup.nodes.FormElement;
                org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
                org.jsoup.select.Elements controls = form.elements();
                // MethodAssertGenerator build local variable
                Object o_12_0 = controls.size();
                // MethodAssertGenerator build local variable
                Object o_14_0 = controls.get(0).id();
                // MethodAssertGenerator build local variable
                Object o_17_0 = controls.get(1).id();
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_45 = (org.jsoup.parser.Parser)null;
                // MethodAssertGenerator build local variable
                Object o_22_0 = vc_45;
                // AssertGenerator replace invocation
                org.jsoup.parser.Parser o_associatedFormControlsWithDisjointForms_cf209__22 = // StatementAdderMethod cloned existing statement
vc_45.htmlParser();
                // MethodAssertGenerator build local variable
                Object o_26_0 = ((org.jsoup.parser.Parser)o_associatedFormControlsWithDisjointForms_cf209__22).isTrackErrors();
                // MethodAssertGenerator build local variable
                Object o_28_0 = ((org.jsoup.parser.Parser)o_associatedFormControlsWithDisjointForms_cf209__22).getErrors();
                // StatementAdderOnAssert create random local variable
                boolean vc_68 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_66 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_64 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_64.unescapeEntities(vc_66, vc_68);
                // MethodAssertGenerator build local variable
                Object o_38_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.junit.Assert.fail("associatedFormControlsWithDisjointForms_cf209_cf254 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("associatedFormControlsWithDisjointForms_cf209_cf254_failAssert0_literalMutation2433 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#associatedFormControlsWithDisjointForms */
    @org.junit.Test(timeout = 10000)
    public void associatedFormControlsWithDisjointForms_cf29_cf982_failAssert5_literalMutation2465_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // form gets closed, isn't parent of controls
                java.lang.String html = "On+!znTd=IMME;yo14S)l&]LK8V&#?$PpS(_B8Y[|DN0`h+q|gIwD1]v<eNH/UPDIA^u%z@UD[NJ`(GNJ$!x";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element el = doc.select("form").first();
                // MethodAssertGenerator build local variable
                Object o_8_0 = el instanceof org.jsoup.nodes.FormElement;
                org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
                org.jsoup.select.Elements controls = form.elements();
                // MethodAssertGenerator build local variable
                Object o_12_0 = controls.size();
                // MethodAssertGenerator build local variable
                Object o_14_0 = controls.get(0).id();
                // MethodAssertGenerator build local variable
                Object o_17_0 = controls.get(1).id();
                // StatementAdderOnAssert create random local variable
                boolean vc_6 = false;
                // MethodAssertGenerator build local variable
                Object o_22_0 = vc_6;
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_5 = new java.lang.String();
                // MethodAssertGenerator build local variable
                Object o_26_0 = vc_5;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_2 = (org.jsoup.parser.Parser)null;
                // MethodAssertGenerator build local variable
                Object o_30_0 = vc_2;
                // AssertGenerator replace invocation
                java.lang.String o_associatedFormControlsWithDisjointForms_cf29__26 = // StatementAdderMethod cloned existing statement
vc_2.unescapeEntities(vc_5, vc_6);
                // MethodAssertGenerator build local variable
                Object o_34_0 = o_associatedFormControlsWithDisjointForms_cf29__26;
                // StatementAdderOnAssert create null value
                java.lang.String vc_190 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                vc_2.unescapeEntities(vc_190, vc_6);
                // MethodAssertGenerator build local variable
                Object o_40_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.junit.Assert.fail("associatedFormControlsWithDisjointForms_cf29_cf982 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("associatedFormControlsWithDisjointForms_cf29_cf982_failAssert5_literalMutation2465 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#associatedFormControlsWithDisjointForms */
    @org.junit.Test(timeout = 10000)
    public void associatedFormControlsWithDisjointForms_cf27_cf1706_failAssert14_literalMutation2499_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // form gets closed, isn't parent of controls
                java.lang.String html = "p[a+9MOHI<:##Gs!n`(S#,%#dY:3ia]GT35i&DZ7w6;tz]*L)]_h(ex#Z^J-/RS8h65%8_O03f{!^)btHA!9";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element el = doc.select("form").first();
                // MethodAssertGenerator build local variable
                Object o_8_0 = el instanceof org.jsoup.nodes.FormElement;
                org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
                org.jsoup.select.Elements controls = form.elements();
                // MethodAssertGenerator build local variable
                Object o_12_0 = controls.size();
                // MethodAssertGenerator build local variable
                Object o_14_0 = controls.get(0).id();
                // MethodAssertGenerator build local variable
                Object o_17_0 = controls.get(1).id();
                // StatementAdderOnAssert create random local variable
                boolean vc_6 = false;
                // MethodAssertGenerator build local variable
                Object o_22_0 = vc_6;
                // StatementAddOnAssert local variable replacement
                java.lang.String out = doc.body().html();
                // MethodAssertGenerator build local variable
                Object o_28_0 = out;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_2 = (org.jsoup.parser.Parser)null;
                // MethodAssertGenerator build local variable
                Object o_32_0 = vc_2;
                // AssertGenerator replace invocation
                java.lang.String o_associatedFormControlsWithDisjointForms_cf27__28 = // StatementAdderMethod cloned existing statement
vc_2.unescapeEntities(out, vc_6);
                // MethodAssertGenerator build local variable
                Object o_36_0 = o_associatedFormControlsWithDisjointForms_cf27__28;
                // StatementAdderOnAssert create null value
                java.lang.String vc_314 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_312 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_312.unescapeEntities(vc_314, vc_6);
                // MethodAssertGenerator build local variable
                Object o_44_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.junit.Assert.fail("associatedFormControlsWithDisjointForms_cf27_cf1706 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("associatedFormControlsWithDisjointForms_cf27_cf1706_failAssert14_literalMutation2499 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveAttributeCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveAttributeCase_cf2735() {
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
        parser.settings(new org.jsoup.parser.ParseSettings(false, true));
        org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_canPreserveAttributeCase_cf2735__7 = // StatementAdderMethod cloned existing statement
parser.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_canPreserveAttributeCase_cf2735__7).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_canPreserveAttributeCase_cf2735__7).getErrors());
        org.junit.Assert.assertEquals("<html> <head></head> <body> <div id=\"1\"> <span ID=\"2\"></span> </div> </body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveAttributeCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveAttributeCase_cf2545_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
            parser.settings(new org.jsoup.parser.ParseSettings(false, true));
            org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
            // StatementAdderOnAssert create random local variable
            boolean vc_440 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_438 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            parser.unescapeEntities(vc_438, vc_440);
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("canPreserveAttributeCase_cf2545 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveAttributeCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveAttributeCase_add2525() {
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_canPreserveAttributeCase_add2525__3 = // MethodCallAdder
parser.settings(new org.jsoup.parser.ParseSettings(false, true));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_canPreserveAttributeCase_add2525__3).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_canPreserveAttributeCase_add2525__3).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_canPreserveAttributeCase_add2525__3.equals(parser));
        parser.settings(new org.jsoup.parser.ParseSettings(false, true));
        org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
        org.junit.Assert.assertEquals("<html> <head></head> <body> <div id=\"1\"> <span ID=\"2\"></span> </div> </body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveAttributeCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveAttributeCase_cf2740_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
            parser.settings(new org.jsoup.parser.ParseSettings(false, true));
            org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_486 = (org.jsoup.parser.TreeBuilder)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_484 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_484.setTreeBuilder(vc_486);
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("canPreserveAttributeCase_cf2740 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveAttributeCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveAttributeCase_cf2536_failAssert11_literalMutation7415() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_canPreserveAttributeCase_cf2536_failAssert11_literalMutation7415__5 = parser.settings(new org.jsoup.parser.ParseSettings(true, true));
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_canPreserveAttributeCase_cf2536_failAssert11_literalMutation7415__5).isTrackErrors());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_canPreserveAttributeCase_cf2536_failAssert11_literalMutation7415__5).getErrors());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(o_canPreserveAttributeCase_cf2536_failAssert11_literalMutation7415__5.equals(parser));
            org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_68 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(boolean_vc_68);
            // StatementAdderOnAssert create null value
            java.lang.String vc_438 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_438);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_436 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_436);
            // StatementAdderMethod cloned existing statement
            vc_436.unescapeEntities(vc_438, boolean_vc_68);
            // MethodAssertGenerator build local variable
            Object o_15_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("canPreserveAttributeCase_cf2536 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveAttributeCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveAttributeCase_cf2731_failAssert7_add7401() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_canPreserveAttributeCase_cf2731_failAssert7_add7401__5 = // MethodCallAdder
parser.settings(new org.jsoup.parser.ParseSettings(false, true));
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_canPreserveAttributeCase_cf2731_failAssert7_add7401__5).getErrors());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(o_canPreserveAttributeCase_cf2731_failAssert7_add7401__5.equals(parser));
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_canPreserveAttributeCase_cf2731_failAssert7_add7401__5).isTrackErrors());
            parser.settings(new org.jsoup.parser.ParseSettings(false, true));
            org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_477 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_477);
            // StatementAdderMethod cloned existing statement
            vc_477.settings();
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("canPreserveAttributeCase_cf2731 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveAttributeCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveAttributeCase_cf2547_cf6746_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
            parser.settings(new org.jsoup.parser.ParseSettings(false, true));
            org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
            // StatementAdderOnAssert create random local variable
            boolean vc_440 = true;
            // MethodAssertGenerator build local variable
            Object o_9_0 = vc_440;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // MethodAssertGenerator build local variable
            Object o_14_0 = rendered;
            // AssertGenerator replace invocation
            java.lang.String o_canPreserveAttributeCase_cf2547__12 = // StatementAdderMethod cloned existing statement
parser.unescapeEntities(rendered, vc_440);
            // MethodAssertGenerator build local variable
            Object o_18_0 = o_canPreserveAttributeCase_cf2547__12;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_1358 = (org.jsoup.parser.ParseSettings)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_1356 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_1356.settings(vc_1358);
            // MethodAssertGenerator build local variable
            Object o_26_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("canPreserveAttributeCase_cf2547_cf6746 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveAttributeCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveAttributeCase_cf2740_failAssert4_add7393_cf7967_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
                parser.settings(new org.jsoup.parser.ParseSettings(false, true));
                org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
                // StatementAdderOnAssert create null value
                org.jsoup.parser.TreeBuilder vc_486 = (org.jsoup.parser.TreeBuilder)null;
                // MethodAssertGenerator build local variable
                Object o_11_0 = vc_486;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_484 = (org.jsoup.parser.Parser)null;
                // StatementAdderOnAssert create random local variable
                boolean vc_1618 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_1616 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                parser.unescapeEntities(vc_1616, vc_1618);
                // MethodAssertGenerator build local variable
                Object o_21_0 = vc_484;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                vc_484.setTreeBuilder(vc_486);
                // StatementAdderMethod cloned existing statement
                vc_484.setTreeBuilder(vc_486);
                // MethodAssertGenerator build local variable
                Object o_13_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
                org.junit.Assert.fail("canPreserveAttributeCase_cf2740 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("canPreserveAttributeCase_cf2740_failAssert4_add7393_cf7967 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveAttributeCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveAttributeCase_cf2536_failAssert11_literalMutation7415_cf7656_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
                // AssertGenerator replace invocation
                org.jsoup.parser.Parser o_canPreserveAttributeCase_cf2536_failAssert11_literalMutation7415__5 = parser.settings(new org.jsoup.parser.ParseSettings(true, true));
                // MethodAssertGenerator build local variable
                Object o_7_0 = ((org.jsoup.parser.Parser)o_canPreserveAttributeCase_cf2536_failAssert11_literalMutation7415__5).isTrackErrors();
                // MethodAssertGenerator build local variable
                Object o_9_0 = ((org.jsoup.parser.Parser)o_canPreserveAttributeCase_cf2536_failAssert11_literalMutation7415__5).getErrors();
                // MethodAssertGenerator build local variable
                Object o_11_0 = o_canPreserveAttributeCase_cf2536_failAssert11_literalMutation7415__5.equals(parser);
                org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
                // StatementAdderOnAssert create literal from method
                boolean boolean_vc_68 = false;
                // MethodAssertGenerator build local variable
                Object o_17_0 = boolean_vc_68;
                // StatementAdderOnAssert create null value
                java.lang.String vc_438 = (java.lang.String)null;
                // MethodAssertGenerator build local variable
                Object o_21_0 = vc_438;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_436 = (org.jsoup.parser.Parser)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_1550 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_1550.isTrackErrors();
                // MethodAssertGenerator build local variable
                Object o_29_0 = vc_436;
                // StatementAdderMethod cloned existing statement
                vc_436.unescapeEntities(vc_438, boolean_vc_68);
                // MethodAssertGenerator build local variable
                Object o_15_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
                org.junit.Assert.fail("canPreserveAttributeCase_cf2536 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("canPreserveAttributeCase_cf2536_failAssert11_literalMutation7415_cf7656 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveBothCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveBothCase_cf8432() {
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
        parser.settings(new org.jsoup.parser.ParseSettings(true, true));
        org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_canPreserveBothCase_cf8432__7 = // StatementAdderMethod cloned existing statement
parser.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_canPreserveBothCase_cf8432__7).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_canPreserveBothCase_cf8432__7).getErrors());
        org.junit.Assert.assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN ID=\"2\"></SPAN> </div> </body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveBothCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveBothCase_cf8246() {
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
        parser.settings(new org.jsoup.parser.ParseSettings(true, true));
        org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
        // StatementAdderOnAssert create random local variable
        boolean vc_1680 = true;
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(vc_1680);
        // StatementAdderOnAssert create literal from method
        java.lang.String String_vc_266 = "";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(String_vc_266, "");
        // AssertGenerator replace invocation
        java.lang.String o_canPreserveBothCase_cf8246__11 = // StatementAdderMethod cloned existing statement
parser.unescapeEntities(String_vc_266, vc_1680);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_canPreserveBothCase_cf8246__11, "");
        org.junit.Assert.assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN ID=\"2\"></SPAN> </div> </body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveBothCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveBothCase_add8222() {
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_canPreserveBothCase_add8222__3 = // MethodCallAdder
parser.settings(new org.jsoup.parser.ParseSettings(true, true));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_canPreserveBothCase_add8222__3.equals(parser));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_canPreserveBothCase_add8222__3).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_canPreserveBothCase_add8222__3).getErrors());
        parser.settings(new org.jsoup.parser.ParseSettings(true, true));
        org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
        org.junit.Assert.assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN ID=\"2\"></SPAN> </div> </body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveBothCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveBothCase_cf8233_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
            parser.settings(new org.jsoup.parser.ParseSettings(true, true));
            org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_267 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_1678 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_1676 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_1676.unescapeEntities(vc_1678, boolean_vc_267);
            // MethodAssertGenerator build local variable
            Object o_15_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("canPreserveBothCase_cf8233 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveBothCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveBothCase_cf8236_cf13341_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
            parser.settings(new org.jsoup.parser.ParseSettings(true, true));
            org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
            // StatementAdderOnAssert create random local variable
            boolean vc_1680 = true;
            // MethodAssertGenerator build local variable
            Object o_9_0 = vc_1680;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // MethodAssertGenerator build local variable
            Object o_15_0 = out;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_1676 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_19_0 = vc_1676;
            // AssertGenerator replace invocation
            java.lang.String o_canPreserveBothCase_cf8236__15 = // StatementAdderMethod cloned existing statement
vc_1676.unescapeEntities(out, vc_1680);
            // MethodAssertGenerator build local variable
            Object o_23_0 = o_canPreserveBothCase_cf8236__15;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_2784 = (org.jsoup.parser.ParseSettings)null;
            // StatementAdderMethod cloned existing statement
            vc_1676.settings(vc_2784);
            // MethodAssertGenerator build local variable
            Object o_29_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("canPreserveBothCase_cf8236_cf13341 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveBothCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveBothCase_cf8257_failAssert11_add13387() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_canPreserveBothCase_cf8257_failAssert11_add13387__5 = // MethodCallAdder
parser.settings(new org.jsoup.parser.ParseSettings(true, true));
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(o_canPreserveBothCase_cf8257_failAssert11_add13387__5.equals(parser));
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_canPreserveBothCase_cf8257_failAssert11_add13387__5).getErrors());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_canPreserveBothCase_cf8257_failAssert11_add13387__5).isTrackErrors());
            parser.settings(new org.jsoup.parser.ParseSettings(true, true));
            org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_1681 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_1681);
            // StatementAdderMethod cloned existing statement
            vc_1681.getErrors();
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("canPreserveBothCase_cf8257 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveBothCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveBothCase_cf8432_cf11971_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
            parser.settings(new org.jsoup.parser.ParseSettings(true, true));
            org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_canPreserveBothCase_cf8432__7 = // StatementAdderMethod cloned existing statement
parser.htmlParser();
            // MethodAssertGenerator build local variable
            Object o_9_0 = ((org.jsoup.parser.Parser)o_canPreserveBothCase_cf8432__7).isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_11_0 = ((org.jsoup.parser.Parser)o_canPreserveBothCase_cf8432__7).getErrors();
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_396 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_2484 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            parser.unescapeEntities(vc_2484, boolean_vc_396);
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("canPreserveBothCase_cf8432_cf11971 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveTagCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveTagCase_cf14153() {
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
        parser.settings(new org.jsoup.parser.ParseSettings(true, false));
        org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_canPreserveTagCase_cf14153__7 = // StatementAdderMethod cloned existing statement
parser.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_canPreserveTagCase_cf14153__7).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_canPreserveTagCase_cf14153__7).isTrackErrors());
        org.junit.Assert.assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN id=\"2\"></SPAN> </div> </body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveTagCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveTagCase_add13925() {
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_canPreserveTagCase_add13925__3 = // MethodCallAdder
parser.settings(new org.jsoup.parser.ParseSettings(true, false));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_canPreserveTagCase_add13925__3.equals(parser));
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_canPreserveTagCase_add13925__3).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_canPreserveTagCase_add13925__3).isTrackErrors());
        parser.settings(new org.jsoup.parser.ParseSettings(true, false));
        org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
        org.junit.Assert.assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN id=\"2\"></SPAN> </div> </body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveTagCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveTagCase_cf13945_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
            parser.settings(new org.jsoup.parser.ParseSettings(true, false));
            org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
            // StatementAdderOnAssert create random local variable
            boolean vc_2920 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_2918 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            parser.unescapeEntities(vc_2918, vc_2920);
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("canPreserveTagCase_cf13945 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveTagCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveTagCase_cf13947_cf17241_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
            parser.settings(new org.jsoup.parser.ParseSettings(true, false));
            org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
            // StatementAdderOnAssert create random local variable
            boolean vc_2920 = true;
            // MethodAssertGenerator build local variable
            Object o_9_0 = vc_2920;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // MethodAssertGenerator build local variable
            Object o_14_0 = rendered;
            // AssertGenerator replace invocation
            java.lang.String o_canPreserveTagCase_cf13947__12 = // StatementAdderMethod cloned existing statement
parser.unescapeEntities(rendered, vc_2920);
            // MethodAssertGenerator build local variable
            Object o_18_0 = o_canPreserveTagCase_cf13947__12;
            // StatementAdderOnAssert create literal from method
            int int_vc_583 = 10000;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_3643 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_3643.setTrackErrors(int_vc_583);
            // MethodAssertGenerator build local variable
            Object o_26_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("canPreserveTagCase_cf13947_cf17241 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveTagCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveTagCase_cf13944_failAssert8_literalMutation18074() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_canPreserveTagCase_cf13944_failAssert8_literalMutation18074__5 = parser.settings(new org.jsoup.parser.ParseSettings(true, true));
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_canPreserveTagCase_cf13944_failAssert8_literalMutation18074__5).isTrackErrors());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(o_canPreserveTagCase_cf13944_failAssert8_literalMutation18074__5.equals(parser));
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_canPreserveTagCase_cf13944_failAssert8_literalMutation18074__5).getErrors());
            org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_466 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(boolean_vc_466);
            // StatementAdderOnAssert create null value
            java.lang.String vc_2918 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_2918);
            // StatementAdderMethod cloned existing statement
            parser.unescapeEntities(vc_2918, boolean_vc_466);
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("canPreserveTagCase_cf13944 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#canPreserveTagCase */
    @org.junit.Test(timeout = 10000)
    public void canPreserveTagCase_cf13936_failAssert14_add18085_cf18391_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
                // AssertGenerator replace invocation
                org.jsoup.parser.Parser o_canPreserveTagCase_cf13936_failAssert14_add18085__5 = // MethodCallAdder
parser.settings(new org.jsoup.parser.ParseSettings(true, false));
                // MethodAssertGenerator build local variable
                Object o_7_0 = ((org.jsoup.parser.Parser)o_canPreserveTagCase_cf13936_failAssert14_add18085__5).getErrors();
                // MethodAssertGenerator build local variable
                Object o_9_0 = ((org.jsoup.parser.Parser)o_canPreserveTagCase_cf13936_failAssert14_add18085__5).isTrackErrors();
                // MethodAssertGenerator build local variable
                Object o_11_0 = o_canPreserveTagCase_cf13936_failAssert14_add18085__5.equals(parser);
                parser.settings(new org.jsoup.parser.ParseSettings(true, false));
                org.jsoup.nodes.Document doc = parser.parseInput("<div id=1><SPAN ID=2>", "");
                // StatementAdderOnAssert create literal from method
                boolean boolean_vc_466 = false;
                // MethodAssertGenerator build local variable
                Object o_19_0 = boolean_vc_466;
                // StatementAdderOnAssert create null value
                java.lang.String vc_2918 = (java.lang.String)null;
                // MethodAssertGenerator build local variable
                Object o_23_0 = vc_2918;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_2916 = (org.jsoup.parser.Parser)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_3906 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_3906.isTrackErrors();
                // MethodAssertGenerator build local variable
                Object o_31_0 = vc_2916;
                // StatementAdderMethod cloned existing statement
                vc_2916.unescapeEntities(vc_2918, boolean_vc_466);
                // MethodAssertGenerator build local variable
                Object o_15_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
                org.junit.Assert.fail("canPreserveTagCase_cf13936 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("canPreserveTagCase_cf13936_failAssert14_add18085_cf18391 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml */
    @org.junit.Test(timeout = 10000)
    public void commentBeforeHtml_cf18928_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<!-- comment --><!-- comment 2 --><p>One</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_4020 = (org.jsoup.parser.TreeBuilder)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_4018 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_4018.setTreeBuilder(vc_4020);
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("commentBeforeHtml_cf18928 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml */
    @org.junit.Test(timeout = 10000)
    public void commentBeforeHtml_cf18772() {
        java.lang.String h = "<!-- comment --><!-- comment 2 --><p>One</p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create random local variable
        boolean vc_3974 = false;
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_3973 = new java.lang.String();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_3970 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_commentBeforeHtml_cf18772__10 = // StatementAdderMethod cloned existing statement
vc_3970.unescapeEntities(vc_3973, vc_3974);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_commentBeforeHtml_cf18772__10, "");
        org.junit.Assert.assertEquals("<!-- comment --><!-- comment 2 --><html><head></head><body><p>One</p></body></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml */
    @org.junit.Test(timeout = 10000)
    public void commentBeforeHtml_cf18766_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<!-- comment --><!-- comment 2 --><p>One</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_3968 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_3968.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("commentBeforeHtml_cf18766 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml */
    @org.junit.Test(timeout = 10000)
    public void commentBeforeHtml_cf18936() {
        java.lang.String h = "<!-- comment --><!-- comment 2 --><p>One</p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_4026 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_commentBeforeHtml_cf18936__6 = // StatementAdderMethod cloned existing statement
vc_4026.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_commentBeforeHtml_cf18936__6).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_commentBeforeHtml_cf18936__6).isTrackErrors());
        org.junit.Assert.assertEquals("<!-- comment --><!-- comment 2 --><html><head></head><body><p>One</p></body></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml */
    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml_cf18778 */
    @org.junit.Test(timeout = 10000)
    public void commentBeforeHtml_cf18778_failAssert12_literalMutation20748() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "E&#pMb7`(nvs-j(<68cQ=S*652,[?/s*I]#W?sZGp(In";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "E&#pMb7`(nvs-j(<68cQ=S*652,[?/s*I]#W?sZGp(In");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_3975 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_3975.getErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("commentBeforeHtml_cf18778 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml */
    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml_cf18772 */
    @org.junit.Test(timeout = 10000)
    public void commentBeforeHtml_cf18772_cf19937_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<!-- comment --><!-- comment 2 --><p>One</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_3974 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_3973 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_3970 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_commentBeforeHtml_cf18772__10 = // StatementAdderMethod cloned existing statement
vc_3970.unescapeEntities(vc_3973, vc_3974);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_commentBeforeHtml_cf18772__10;
            // StatementAdderMethod cloned existing statement
            vc_3970.getErrors();
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("commentBeforeHtml_cf18772_cf19937 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml */
    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml_cf18768 */
    @org.junit.Test(timeout = 10000)
    public void commentBeforeHtml_cf18768_failAssert11_literalMutation20740() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "gk$}LTi-zg/[lPj?;-zzTz/vK_5i:Lji[s=m{L_*/#:[";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "gk$}LTi-zg/[lPj?;-zzTz/vK_5i:Lji[s=m{L_*/#:[");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_3974 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_3972 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_3970 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_3970.unescapeEntities(vc_3972, vc_3974);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("commentBeforeHtml_cf18768 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml */
    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml_cf18778 */
    @org.junit.Test(timeout = 10000)
    public void commentBeforeHtml_cf18778_failAssert12_literalMutation20745_cf21346_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String h = "<!-- comment --><!-- comment 2 7--><p>One</p>";
                // StatementAdderOnAssert create random local variable
                boolean vc_4656 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_4654 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_4652 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_4652.unescapeEntities(vc_4654, vc_4656);
                // MethodAssertGenerator build local variable
                Object o_12_0 = h;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_3975 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_3975.getErrors();
                // MethodAssertGenerator build local variable
                Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
                org.junit.Assert.fail("commentBeforeHtml_cf18778 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("commentBeforeHtml_cf18778_failAssert12_literalMutation20745_cf21346 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml */
    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml_cf18772 */
    @org.junit.Test(timeout = 10000)
    public void commentBeforeHtml_cf18772_cf19937_failAssert9_literalMutation21508() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "(dDkC:4tB2mK0.0Gmvvaj`$N-jI[(rv2=uLtwdY={!j(";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "(dDkC:4tB2mK0.0Gmvvaj`$N-jI[(rv2=uLtwdY={!j(");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_3974 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_3973 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_3970 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_commentBeforeHtml_cf18772__10 = // StatementAdderMethod cloned existing statement
vc_3970.unescapeEntities(vc_3973, vc_3974);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_commentBeforeHtml_cf18772__10;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, "");
            // StatementAdderMethod cloned existing statement
            vc_3970.getErrors();
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("commentBeforeHtml_cf18772_cf19937 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml */
    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml_cf18771 */
    @org.junit.Test(timeout = 10000)
    public void commentBeforeHtml_cf18771_cf19843_failAssert11_add21523() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<!-- comment --><!-- comment 2 --><p>One</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_3974 = false;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_634 = "<!-- comment --><!-- comment 2 --><p>One</p>";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_3970 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_commentBeforeHtml_cf18771__10 = // StatementAdderMethod cloned existing statement
vc_3970.unescapeEntities(String_vc_634, vc_3974);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_commentBeforeHtml_cf18771__10;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, "<!-- comment --><!-- comment 2 --><p>One</p>");
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_3970.settings();
            // StatementAdderMethod cloned existing statement
            vc_3970.settings();
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("commentBeforeHtml_cf18771_cf19843 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml */
    /* amplification of org.jsoup.parser.HtmlParserTest#commentBeforeHtml_cf18772 */
    @org.junit.Test(timeout = 10000)
    public void commentBeforeHtml_cf18772_cf19937_failAssert9_literalMutation21509() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<!-- comment --<!-- comment 2 --><p>One</p>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<!-- comment --<!-- comment 2 --><p>One</p>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_3974 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_3973 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_3970 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_commentBeforeHtml_cf18772__10 = // StatementAdderMethod cloned existing statement
vc_3970.unescapeEntities(vc_3973, vc_3974);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_commentBeforeHtml_cf18772__10;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, "");
            // StatementAdderMethod cloned existing statement
            vc_3970.getErrors();
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("commentBeforeHtml_cf18772_cf19937 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#convertsImageToImg */
    @org.junit.Test(timeout = 10000)
    public void convertsImageToImg_cf21701() {
        // image to img, unless in a svg. old html cruft.
        java.lang.String h = "<body><image><svg><image /></svg></body>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_4757 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_convertsImageToImg_cf21701__7 = // StatementAdderMethod cloned existing statement
vc_4757.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_convertsImageToImg_cf21701__7).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_convertsImageToImg_cf21701__7).getErrors());
        org.junit.Assert.assertEquals("<img>\n<svg>\n <image />\n</svg>", doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#convertsImageToImg */
    @org.junit.Test(timeout = 10000)
    public void convertsImageToImg_cf21547_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // image to img, unless in a svg. old html cruft.
            java.lang.String h = "<body><image><svg><image /></svg></body>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_4718 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_4716 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_4714 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_4714.unescapeEntities(vc_4716, vc_4718);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.body().html();
            org.junit.Assert.fail("convertsImageToImg_cf21547 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#convertsImageToImg */
    @org.junit.Test(timeout = 10000)
    public void convertsImageToImg_cf21545_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // image to img, unless in a svg. old html cruft.
            java.lang.String h = "<body><image><svg><image /></svg></body>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_4712 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_4712.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.body().html();
            org.junit.Assert.fail("convertsImageToImg_cf21545 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#convertsImageToImg */
    /* amplification of org.jsoup.parser.HtmlParserTest#convertsImageToImg_cf21711 */
    @org.junit.Test(timeout = 10000)
    public void convertsImageToImg_cf21711_failAssert15_literalMutation23553_cf24124_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // image to img, unless in a svg. old html cruft.
                java.lang.String h = "<body><image><svg><image /</svg></body>";
                // StatementAdderOnAssert create random local variable
                boolean vc_5400 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_5398 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_5396 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_5396.unescapeEntities(vc_5398, vc_5400);
                // MethodAssertGenerator build local variable
                Object o_13_0 = h;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                // StatementAdderOnAssert create null value
                org.jsoup.parser.ParseSettings vc_4768 = (org.jsoup.parser.ParseSettings)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_4766 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_4766.settings(vc_4768);
                // MethodAssertGenerator build local variable
                Object o_11_0 = doc.body().html();
                org.junit.Assert.fail("convertsImageToImg_cf21711 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("convertsImageToImg_cf21711_failAssert15_literalMutation23553_cf24124 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#convertsImageToImg */
    /* amplification of org.jsoup.parser.HtmlParserTest#convertsImageToImg_cf21551 */
    @org.junit.Test(timeout = 10000)
    public void convertsImageToImg_cf21551_cf22671_failAssert13_literalMutation24322() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // image to img, unless in a svg. old html cruft.
            java.lang.String h = "<body><image><svg><image /></svg></bdy>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<body><image><svg><image /></svg></bdy>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_4718 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_4717 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_4714 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_convertsImageToImg_cf21551__11 = // StatementAdderMethod cloned existing statement
vc_4714.unescapeEntities(vc_4717, vc_4718);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_convertsImageToImg_cf21551__11;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_13_0, "");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_786 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(boolean_vc_786);
            // StatementAdderOnAssert create null value
            java.lang.String vc_4964 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_4964);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_4962 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_4962);
            // StatementAdderMethod cloned existing statement
            vc_4962.unescapeEntities(vc_4964, boolean_vc_786);
            // MethodAssertGenerator build local variable
            Object o_23_0 = doc.body().html();
            org.junit.Assert.fail("convertsImageToImg_cf21551_cf22671 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#convertsImageToImg */
    /* amplification of org.jsoup.parser.HtmlParserTest#convertsImageToImg_cf21551 */
    @org.junit.Test(timeout = 10000)
    public void convertsImageToImg_cf21551_cf22668_failAssert9_literalMutation24296() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // image to img, unless in a svg. old html cruft.
            java.lang.String h = "<body><image><svg><image /></sv></body>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<body><image><svg><image /></sv></body>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_4718 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_4717 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_4714 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_convertsImageToImg_cf21551__11 = // StatementAdderMethod cloned existing statement
vc_4714.unescapeEntities(vc_4717, vc_4718);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_convertsImageToImg_cf21551__11;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_13_0, "");
            // StatementAdderMethod cloned existing statement
            vc_4714.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.body().html();
            org.junit.Assert.fail("convertsImageToImg_cf21551_cf22668 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#convertsImageToImg */
    /* amplification of org.jsoup.parser.HtmlParserTest#convertsImageToImg_cf21550 */
    @org.junit.Test(timeout = 10000)
    public void convertsImageToImg_cf21550_cf22621_failAssert7_literalMutation24271() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // image to img, unless in a svg. old html cruft.
            java.lang.String h = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_4718 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_747 = "<body><image><svg><image /></svg></body>";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_4714 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_convertsImageToImg_cf21550__11 = // StatementAdderMethod cloned existing statement
vc_4714.unescapeEntities(String_vc_747, vc_4718);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_convertsImageToImg_cf21550__11;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_13_0, "<body><image><svg><image /></svg></body>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_4941 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_4941);
            // StatementAdderMethod cloned existing statement
            vc_4941.settings();
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.body().html();
            org.junit.Assert.fail("convertsImageToImg_cf21550_cf22621 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#convertsImageToImg */
    /* amplification of org.jsoup.parser.HtmlParserTest#convertsImageToImg_cf21551 */
    @org.junit.Test(timeout = 10000)
    public void convertsImageToImg_cf21551_cf22928_failAssert12_literalMutation24314() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // image to img, unless in a svg. old html cruft.
            java.lang.String h = "knpj8>+A,lHp6#5!6CcPe)j(j{3bIDW-:P?xc!y+";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "knpj8>+A,lHp6#5!6CcPe)j(j{3bIDW-:P?xc!y+");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_4718 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_4717 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_4714 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_convertsImageToImg_cf21551__11 = // StatementAdderMethod cloned existing statement
vc_4714.unescapeEntities(vc_4717, vc_4718);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_convertsImageToImg_cf21551__11;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_13_0, "");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_5003 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_5003);
            // StatementAdderMethod cloned existing statement
            vc_5003.settings();
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.body().html();
            org.junit.Assert.fail("convertsImageToImg_cf21551_cf22928 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#convertsImageToImg */
    /* amplification of org.jsoup.parser.HtmlParserTest#convertsImageToImg_cf21551 */
    @org.junit.Test(timeout = 10000)
    public void convertsImageToImg_cf21551_cf22951_failAssert6_literalMutation24264() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // image to img, unless in a svg. old html cruft.
            java.lang.String h = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_4718 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_4717 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_4714 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_convertsImageToImg_cf21551__11 = // StatementAdderMethod cloned existing statement
vc_4714.unescapeEntities(vc_4717, vc_4718);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_convertsImageToImg_cf21551__11;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_13_0, "");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_5016 = (org.jsoup.parser.ParseSettings)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_5016);
            // StatementAdderMethod cloned existing statement
            vc_4714.settings(vc_5016);
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.body().html();
            org.junit.Assert.fail("convertsImageToImg_cf21551_cf22951 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#convertsImageToImg */
    /* amplification of org.jsoup.parser.HtmlParserTest#convertsImageToImg_cf21549 */
    @org.junit.Test(timeout = 10000)
    public void convertsImageToImg_cf21549_cf22329_failAssert16_literalMutation24329() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // image to img, unless in a svg. old html cruft.
            java.lang.String h = "N8n.awdgK.BX&d!0b=`k.,wi<iSMZ[)nim/f[Ym,";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "N8n.awdgK.BX&d!0b=`k.,wi<iSMZ[)nim/f[Ym,");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_4718 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_4714 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_convertsImageToImg_cf21549__12 = // StatementAdderMethod cloned existing statement
vc_4714.unescapeEntities(html, vc_4718);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_convertsImageToImg_cf21549__12;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, "<html>\n <head></head>\n <body>\n  N8n.awdgK.BX&d!0b=`k.,wi\n </body>\n</html>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_4892 = (org.jsoup.parser.ParseSettings)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_4892);
            // StatementAdderMethod cloned existing statement
            vc_4714.settings(vc_4892);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.body().html();
            org.junit.Assert.fail("convertsImageToImg_cf21549_cf22329 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsDocumentStructure */
    @org.junit.Test(timeout = 10000)
    public void createsDocumentStructure_cf24386_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<meta name=keywords /><link rel=stylesheet /><title>jsoup</title><p>Hello world</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element head = doc.head();
            org.jsoup.nodes.Element body = doc.body();
            // MethodAssertGenerator build local variable
            Object o_8_0 = doc.children().size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.child(0).children().size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = head.children().size();
            // MethodAssertGenerator build local variable
            Object o_20_0 = body.children().size();
            // MethodAssertGenerator build local variable
            Object o_23_0 = head.getElementsByTag("meta").get(0).attr("name");
            // MethodAssertGenerator build local variable
            Object o_27_0 = body.getElementsByTag("meta").size();
            // MethodAssertGenerator build local variable
            Object o_30_0 = doc.title();
            // MethodAssertGenerator build local variable
            Object o_32_0 = body.text();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_5456 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_5456.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_38_0 = body.children().get(0).text();
            org.junit.Assert.fail("createsDocumentStructure_cf24386 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsDocumentStructure */
    @org.junit.Test
    public void createsDocumentStructure_literalMutation24345_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element head = doc.head();
            org.jsoup.nodes.Element body = doc.body();
            // MethodAssertGenerator build local variable
            Object o_8_0 = doc.children().size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.child(0).children().size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = head.children().size();
            // MethodAssertGenerator build local variable
            Object o_20_0 = body.children().size();
            // MethodAssertGenerator build local variable
            Object o_23_0 = head.getElementsByTag("meta").get(0).attr("name");
            // MethodAssertGenerator build local variable
            Object o_27_0 = body.getElementsByTag("meta").size();
            // MethodAssertGenerator build local variable
            Object o_30_0 = doc.title();
            // MethodAssertGenerator build local variable
            Object o_32_0 = body.text();
            // MethodAssertGenerator build local variable
            Object o_34_0 = body.children().get(0).text();
            org.junit.Assert.fail("createsDocumentStructure_literalMutation24345 should have thrown Exception");
        } catch (java.lang.Exception eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsDocumentStructure */
    @org.junit.Test(timeout = 10000)
    public void createsDocumentStructure_cf24588() {
        java.lang.String html = "<meta name=keywords /><link rel=stylesheet /><title>jsoup</title><p>Hello world</p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element head = doc.head();
        org.jsoup.nodes.Element body = doc.body();
        org.junit.Assert.assertEquals(1, doc.children().size());// root node: contains html node
        
        org.junit.Assert.assertEquals(2, doc.child(0).children().size());// html node: head and body
        
        org.junit.Assert.assertEquals(3, head.children().size());
        org.junit.Assert.assertEquals(1, body.children().size());
        org.junit.Assert.assertEquals("keywords", head.getElementsByTag("meta").get(0).attr("name"));
        org.junit.Assert.assertEquals(0, body.getElementsByTag("meta").size());
        org.junit.Assert.assertEquals("jsoup", doc.title());
        org.junit.Assert.assertEquals("Hello world", body.text());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_5514 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_5514);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_createsDocumentStructure_cf24588__36 = // StatementAdderMethod cloned existing statement
vc_5514.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_createsDocumentStructure_cf24588__36).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_createsDocumentStructure_cf24588__36).isTrackErrors());
        org.junit.Assert.assertEquals("Hello world", body.children().get(0).text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsDocumentStructure */
    @org.junit.Test(timeout = 10000)
    public void createsDocumentStructure_cf24570_failAssert31() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<meta name=keywords /><link rel=stylesheet /><title>jsoup</title><p>Hello world</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element head = doc.head();
            org.jsoup.nodes.Element body = doc.body();
            // MethodAssertGenerator build local variable
            Object o_8_0 = doc.children().size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.child(0).children().size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = head.children().size();
            // MethodAssertGenerator build local variable
            Object o_20_0 = body.children().size();
            // MethodAssertGenerator build local variable
            Object o_23_0 = head.getElementsByTag("meta").get(0).attr("name");
            // MethodAssertGenerator build local variable
            Object o_27_0 = body.getElementsByTag("meta").size();
            // MethodAssertGenerator build local variable
            Object o_30_0 = doc.title();
            // MethodAssertGenerator build local variable
            Object o_32_0 = body.text();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_5499 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_5499.settings();
            // MethodAssertGenerator build local variable
            Object o_38_0 = body.children().get(0).text();
            org.junit.Assert.fail("createsDocumentStructure_cf24570 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsDocumentStructure */
    @org.junit.Test
    public void createsDocumentStructure_literalMutation24347_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "_kE`WDoG#V=trg_q6APO6|[dOHm`eW*lItA)EtFo<:(Dht+]mt|;zFs7eiRqyT8)SVOxM/r[( BSx LoX#x";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element head = doc.head();
            org.jsoup.nodes.Element body = doc.body();
            // MethodAssertGenerator build local variable
            Object o_8_0 = doc.children().size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.child(0).children().size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = head.children().size();
            // MethodAssertGenerator build local variable
            Object o_20_0 = body.children().size();
            // MethodAssertGenerator build local variable
            Object o_23_0 = head.getElementsByTag("meta").get(0).attr("name");
            // MethodAssertGenerator build local variable
            Object o_27_0 = body.getElementsByTag("meta").size();
            // MethodAssertGenerator build local variable
            Object o_30_0 = doc.title();
            // MethodAssertGenerator build local variable
            Object o_32_0 = body.text();
            // MethodAssertGenerator build local variable
            Object o_34_0 = body.children().get(0).text();
            org.junit.Assert.fail("createsDocumentStructure_literalMutation24347 should have thrown Exception");
        } catch (java.lang.Exception eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsDocumentStructure */
    @org.junit.Test(timeout = 10000)
    public void createsDocumentStructure_cf24580_failAssert11_literalMutation25743() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<meta name=keywords /><link rel=stylesheet /><title>jsoup</title><p>Hllo world</p>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<meta name=keywords /><link rel=stylesheet /><title>jsoup</title><p>Hllo world</p>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element head = doc.head();
            org.jsoup.nodes.Element body = doc.body();
            // MethodAssertGenerator build local variable
            Object o_8_0 = doc.children().size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_8_0, 1);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.child(0).children().size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, 2);
            // MethodAssertGenerator build local variable
            Object o_17_0 = head.children().size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_17_0, 3);
            // MethodAssertGenerator build local variable
            Object o_20_0 = body.children().size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_20_0, 1);
            // MethodAssertGenerator build local variable
            Object o_23_0 = head.getElementsByTag("meta").get(0).attr("name");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_23_0, "keywords");
            // MethodAssertGenerator build local variable
            Object o_27_0 = body.getElementsByTag("meta").size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_27_0, 0);
            // MethodAssertGenerator build local variable
            Object o_30_0 = doc.title();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_30_0, "jsoup");
            // MethodAssertGenerator build local variable
            Object o_32_0 = body.text();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_32_0, "Hllo world");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_5508 = (org.jsoup.parser.TreeBuilder)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_5508);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_5506 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_5506);
            // StatementAdderMethod cloned existing statement
            vc_5506.setTreeBuilder(vc_5508);
            // MethodAssertGenerator build local variable
            Object o_40_0 = body.children().get(0).text();
            org.junit.Assert.fail("createsDocumentStructure_cf24580 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsDocumentStructure */
    @org.junit.Test(timeout = 10000)
    public void createsDocumentStructure_cf24389_literalMutation24992_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "SlscH/p(rIa}cOjYv$S/|@W- c+}k`N$+TKH8>rPJG)c^ e]6#dB,/|#?ew:36C%Wg(YnE3:]JDXTsKRPNJ";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element head = doc.head();
            org.jsoup.nodes.Element body = doc.body();
            // MethodAssertGenerator build local variable
            Object o_8_0 = doc.children().size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.child(0).children().size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = head.children().size();
            // MethodAssertGenerator build local variable
            Object o_20_0 = body.children().size();
            // MethodAssertGenerator build local variable
            Object o_23_0 = head.getElementsByTag("meta").get(0).attr("name");
            // MethodAssertGenerator build local variable
            Object o_27_0 = body.getElementsByTag("meta").size();
            // MethodAssertGenerator build local variable
            Object o_30_0 = doc.title();
            // MethodAssertGenerator build local variable
            Object o_32_0 = body.text();
            // StatementAdderOnAssert create random local variable
            boolean vc_5462 = false;
            // MethodAssertGenerator build local variable
            Object o_36_0 = vc_5462;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_5458 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_40_0 = vc_5458;
            // AssertGenerator replace invocation
            java.lang.String o_createsDocumentStructure_cf24389__38 = // StatementAdderMethod cloned existing statement
vc_5458.unescapeEntities(html, vc_5462);
            // MethodAssertGenerator build local variable
            Object o_44_0 = o_createsDocumentStructure_cf24389__38;
            // MethodAssertGenerator build local variable
            Object o_46_0 = body.children().get(0).text();
            org.junit.Assert.fail("createsDocumentStructure_cf24389_literalMutation24992 should have thrown Exception");
        } catch (java.lang.Exception eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsDocumentStructure */
    @org.junit.Test(timeout = 10000)
    public void createsDocumentStructure_cf24388_failAssert14_literalMutation25748_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element head = doc.head();
                org.jsoup.nodes.Element body = doc.body();
                // MethodAssertGenerator build local variable
                Object o_8_0 = doc.children().size();
                // MethodAssertGenerator build local variable
                Object o_12_0 = doc.child(0).children().size();
                // MethodAssertGenerator build local variable
                Object o_17_0 = head.children().size();
                // MethodAssertGenerator build local variable
                Object o_20_0 = body.children().size();
                // MethodAssertGenerator build local variable
                Object o_23_0 = head.getElementsByTag("meta").get(0).attr("name");
                // MethodAssertGenerator build local variable
                Object o_27_0 = body.getElementsByTag("meta").size();
                // MethodAssertGenerator build local variable
                Object o_30_0 = doc.title();
                // MethodAssertGenerator build local variable
                Object o_32_0 = body.text();
                // StatementAdderOnAssert create random local variable
                boolean vc_5462 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_5460 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_5458 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_5458.unescapeEntities(vc_5460, vc_5462);
                // MethodAssertGenerator build local variable
                Object o_42_0 = body.children().get(0).text();
                org.junit.Assert.fail("createsDocumentStructure_cf24388 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("createsDocumentStructure_cf24388_failAssert14_literalMutation25748 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsDocumentStructure */
    @org.junit.Test(timeout = 10000)
    public void createsDocumentStructure_cf24575_failAssert23_literalMutation25765_failAssert26() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "V#gS#(nJ>}F4vc5A#&;C#U1c_RmTYQgD=LjZ,l+qmNd^b(X,&U FB[7uc^26b7_!rfvGU?^]2(hIH{%3=D6";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element head = doc.head();
                org.jsoup.nodes.Element body = doc.body();
                // MethodAssertGenerator build local variable
                Object o_8_0 = doc.children().size();
                // MethodAssertGenerator build local variable
                Object o_12_0 = doc.child(0).children().size();
                // MethodAssertGenerator build local variable
                Object o_17_0 = head.children().size();
                // MethodAssertGenerator build local variable
                Object o_20_0 = body.children().size();
                // MethodAssertGenerator build local variable
                Object o_23_0 = head.getElementsByTag("meta").get(0).attr("name");
                // MethodAssertGenerator build local variable
                Object o_27_0 = body.getElementsByTag("meta").size();
                // MethodAssertGenerator build local variable
                Object o_30_0 = doc.title();
                // MethodAssertGenerator build local variable
                Object o_32_0 = body.text();
                // StatementAdderOnAssert create literal from method
                int int_vc_867 = 1;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_5503 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_5503.setTrackErrors(int_vc_867);
                // MethodAssertGenerator build local variable
                Object o_40_0 = body.children().get(0).text();
                org.junit.Assert.fail("createsDocumentStructure_cf24575 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("createsDocumentStructure_cf24575_failAssert23_literalMutation25765 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsDocumentStructure */
    @org.junit.Test(timeout = 10000)
    public void createsDocumentStructure_cf24584_failAssert27_literalMutation25778_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "ZHXEk$d<`nCnKp]+#Jv|5e(2sxJ/YPPrQRQjOx5j>) vP{*SBd-d5[dJ5QE[v,[Q!:TAu-S(%; 9uk8O4IC";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element head = doc.head();
                org.jsoup.nodes.Element body = doc.body();
                // MethodAssertGenerator build local variable
                Object o_8_0 = doc.children().size();
                // MethodAssertGenerator build local variable
                Object o_12_0 = doc.child(0).children().size();
                // MethodAssertGenerator build local variable
                Object o_17_0 = head.children().size();
                // MethodAssertGenerator build local variable
                Object o_20_0 = body.children().size();
                // MethodAssertGenerator build local variable
                Object o_23_0 = head.getElementsByTag("meta").get(0).attr("name");
                // MethodAssertGenerator build local variable
                Object o_27_0 = body.getElementsByTag("meta").size();
                // MethodAssertGenerator build local variable
                Object o_30_0 = doc.title();
                // MethodAssertGenerator build local variable
                Object o_32_0 = body.text();
                // StatementAdderOnAssert create null value
                org.jsoup.parser.ParseSettings vc_5512 = (org.jsoup.parser.ParseSettings)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_5510 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_5510.settings(vc_5512);
                // MethodAssertGenerator build local variable
                Object o_40_0 = body.children().get(0).text();
                org.junit.Assert.fail("createsDocumentStructure_cf24584 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("createsDocumentStructure_cf24584_failAssert27_literalMutation25778 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    // form tests
    /* amplification of org.jsoup.parser.HtmlParserTest#createsFormElements */
    @org.junit.Test(timeout = 10000)
    public void createsFormElements_cf28402() {
        java.lang.String html = "<body><form><input id=1><input id=2></form></body>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element el = doc.select("form").first();
        org.junit.Assert.assertTrue("Is form element", (el instanceof org.jsoup.nodes.FormElement));
        org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
        org.jsoup.select.Elements controls = form.elements();
        org.junit.Assert.assertEquals(2, controls.size());
        org.junit.Assert.assertEquals("1", controls.get(0).id());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_6183 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_6183);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_createsFormElements_cf28402__18 = // StatementAdderMethod cloned existing statement
vc_6183.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_createsFormElements_cf28402__18).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_createsFormElements_cf28402__18).isTrackErrors());
        org.junit.Assert.assertEquals("2", controls.get(1).id());
    }

    // form tests
    /* amplification of org.jsoup.parser.HtmlParserTest#createsFormElements */
    @org.junit.Test(timeout = 10000)
    public void createsFormElements_cf28410_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<body><form><input id=1><input id=2></form></body>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element el = doc.select("form").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = el instanceof org.jsoup.nodes.FormElement;
            org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
            org.jsoup.select.Elements controls = form.elements();
            // MethodAssertGenerator build local variable
            Object o_11_0 = controls.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = controls.get(0).id();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_6190 = (org.jsoup.parser.TreeBuilder)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6188 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_6188.setTreeBuilder(vc_6190);
            // MethodAssertGenerator build local variable
            Object o_22_0 = controls.get(1).id();
            org.junit.Assert.fail("createsFormElements_cf28410 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    // form tests
    /* amplification of org.jsoup.parser.HtmlParserTest#createsFormElements */
    @org.junit.Test(timeout = 10000)
    public void createsFormElements_cf28219() {
        java.lang.String html = "<body><form><input id=1><input id=2></form></body>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element el = doc.select("form").first();
        org.junit.Assert.assertTrue("Is form element", (el instanceof org.jsoup.nodes.FormElement));
        org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
        org.jsoup.select.Elements controls = form.elements();
        org.junit.Assert.assertEquals(2, controls.size());
        org.junit.Assert.assertEquals("1", controls.get(0).id());
        // StatementAdderOnAssert create random local variable
        boolean vc_6144 = true;
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(vc_6144);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_6140 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_6140);
        // AssertGenerator replace invocation
        java.lang.String o_createsFormElements_cf28219__20 = // StatementAdderMethod cloned existing statement
vc_6140.unescapeEntities(html, vc_6144);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_createsFormElements_cf28219__20, "<body><form><input id=1><input id=2></form></body>");
        org.junit.Assert.assertEquals("2", controls.get(1).id());
    }

    // form tests
    /* amplification of org.jsoup.parser.HtmlParserTest#createsFormElements */
    @org.junit.Test
    public void createsFormElements_literalMutation28202_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "xu z^j&4pcQj(mX?}t%TWcwfQPM^&LBd+|bN1Tsg_|;ZDeJ(%u";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element el = doc.select("form").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = el instanceof org.jsoup.nodes.FormElement;
            org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
            org.jsoup.select.Elements controls = form.elements();
            // MethodAssertGenerator build local variable
            Object o_11_0 = controls.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = controls.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_16_0 = controls.get(1).id();
            org.junit.Assert.fail("createsFormElements_literalMutation28202 should have thrown Exception");
        } catch (java.lang.Exception eee) {
        }
    }

    // form tests
    /* amplification of org.jsoup.parser.HtmlParserTest#createsFormElements */
    @org.junit.Test
    public void createsFormElements_literalMutation28199_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element el = doc.select("form").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = el instanceof org.jsoup.nodes.FormElement;
            org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
            org.jsoup.select.Elements controls = form.elements();
            // MethodAssertGenerator build local variable
            Object o_11_0 = controls.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = controls.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_16_0 = controls.get(1).id();
            org.junit.Assert.fail("createsFormElements_literalMutation28199 should have thrown Exception");
        } catch (java.lang.Exception eee) {
        }
    }

    // form tests
    /* amplification of org.jsoup.parser.HtmlParserTest#createsFormElements */
    @org.junit.Test(timeout = 10000)
    public void createsFormElements_cf28402_cf28442_failAssert16() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<body><form><input id=1><input id=2></form></body>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element el = doc.select("form").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = el instanceof org.jsoup.nodes.FormElement;
            org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
            org.jsoup.select.Elements controls = form.elements();
            // MethodAssertGenerator build local variable
            Object o_11_0 = controls.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = controls.get(0).id();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6183 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_18_0 = vc_6183;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_createsFormElements_cf28402__18 = // StatementAdderMethod cloned existing statement
vc_6183.htmlParser();
            // MethodAssertGenerator build local variable
            Object o_22_0 = ((org.jsoup.parser.Parser)o_createsFormElements_cf28402__18).getErrors();
            // MethodAssertGenerator build local variable
            Object o_24_0 = ((org.jsoup.parser.Parser)o_createsFormElements_cf28402__18).isTrackErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_6206 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_6204 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6202 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_6202.unescapeEntities(vc_6204, vc_6206);
            // MethodAssertGenerator build local variable
            Object o_34_0 = controls.get(1).id();
            org.junit.Assert.fail("createsFormElements_cf28402_cf28442 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    // form tests
    /* amplification of org.jsoup.parser.HtmlParserTest#createsFormElements */
    @org.junit.Test(timeout = 10000)
    public void createsFormElements_cf28220_cf30131_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<body><form><input id=1><input id=2></form></body>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element el = doc.select("form").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = el instanceof org.jsoup.nodes.FormElement;
            org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
            org.jsoup.select.Elements controls = form.elements();
            // MethodAssertGenerator build local variable
            Object o_11_0 = controls.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = controls.get(0).id();
            // StatementAdderOnAssert create random local variable
            boolean vc_6144 = true;
            // MethodAssertGenerator build local variable
            Object o_18_0 = vc_6144;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // MethodAssertGenerator build local variable
            Object o_23_0 = rendered;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6140 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_27_0 = vc_6140;
            // AssertGenerator replace invocation
            java.lang.String o_createsFormElements_cf28220__23 = // StatementAdderMethod cloned existing statement
vc_6140.unescapeEntities(rendered, vc_6144);
            // MethodAssertGenerator build local variable
            Object o_31_0 = o_createsFormElements_cf28220__23;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6491 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_6491.settings();
            // MethodAssertGenerator build local variable
            Object o_37_0 = controls.get(1).id();
            org.junit.Assert.fail("createsFormElements_cf28220_cf30131 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    // form tests
    /* amplification of org.jsoup.parser.HtmlParserTest#createsFormElements */
    @org.junit.Test(timeout = 10000)
    public void createsFormElements_cf28219_cf29136_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<body><form><input id=1><input id=2></form></body>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element el = doc.select("form").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = el instanceof org.jsoup.nodes.FormElement;
            org.jsoup.nodes.FormElement form = ((org.jsoup.nodes.FormElement) (el));
            org.jsoup.select.Elements controls = form.elements();
            // MethodAssertGenerator build local variable
            Object o_11_0 = controls.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = controls.get(0).id();
            // StatementAdderOnAssert create random local variable
            boolean vc_6144 = true;
            // MethodAssertGenerator build local variable
            Object o_18_0 = vc_6144;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6140 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_22_0 = vc_6140;
            // AssertGenerator replace invocation
            java.lang.String o_createsFormElements_cf28219__20 = // StatementAdderMethod cloned existing statement
vc_6140.unescapeEntities(html, vc_6144);
            // MethodAssertGenerator build local variable
            Object o_26_0 = o_createsFormElements_cf28219__20;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_990 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_6328 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6326 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_6326.unescapeEntities(vc_6328, boolean_vc_990);
            // MethodAssertGenerator build local variable
            Object o_36_0 = controls.get(1).id();
            org.junit.Assert.fail("createsFormElements_cf28219_cf29136 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet */
    @org.junit.Test(timeout = 10000)
    public void createsStructureFromBodySnippet_cf30929() {
        // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine
        // needs to move into the start of the body
        java.lang.String html = "foo <b>bar</b> baz";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        // StatementAdderOnAssert create random local variable
        boolean vc_6640 = true;
        // StatementAddOnAssert local variable replacement
        java.lang.String rendered = doc.toString();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_6636 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_createsStructureFromBodySnippet_cf30929__13 = // StatementAdderMethod cloned existing statement
vc_6636.unescapeEntities(rendered, vc_6640);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_createsStructureFromBodySnippet_cf30929__13, "<html>\n <head></head>\n <body>\n  foo \n  <b>bar</b> baz\n </body>\n</html>");
        org.junit.Assert.assertEquals("foo bar baz", doc.text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet */
    @org.junit.Test(timeout = 10000)
    public void createsStructureFromBodySnippet_cf30925_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine
            // needs to move into the start of the body
            java.lang.String html = "foo <b>bar</b> baz";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6634 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_6634.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_10_0 = doc.text();
            org.junit.Assert.fail("createsStructureFromBodySnippet_cf30925 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet */
    @org.junit.Test(timeout = 10000)
    public void createsStructureFromBodySnippet_cf31081() {
        // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine
        // needs to move into the start of the body
        java.lang.String html = "foo <b>bar</b> baz";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_6679 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_createsStructureFromBodySnippet_cf31081__8 = // StatementAdderMethod cloned existing statement
vc_6679.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_createsStructureFromBodySnippet_cf31081__8).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_createsStructureFromBodySnippet_cf31081__8).isTrackErrors());
        org.junit.Assert.assertEquals("foo bar baz", doc.text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet */
    @org.junit.Test(timeout = 10000)
    public void createsStructureFromBodySnippet_cf30927_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine
            // needs to move into the start of the body
            java.lang.String html = "foo <b>bar</b> baz";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_6640 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_6638 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6636 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_6636.unescapeEntities(vc_6638, vc_6640);
            // MethodAssertGenerator build local variable
            Object o_14_0 = doc.text();
            org.junit.Assert.fail("createsStructureFromBodySnippet_cf30927 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet */
    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet_cf30931 */
    @org.junit.Test(timeout = 10000)
    public void createsStructureFromBodySnippet_cf30931_cf32052_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine
            // needs to move into the start of the body
            java.lang.String html = "foo <b>bar</b> baz";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_6640 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_6639 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6636 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_createsStructureFromBodySnippet_cf30931__12 = // StatementAdderMethod cloned existing statement
vc_6636.unescapeEntities(vc_6639, vc_6640);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_createsStructureFromBodySnippet_cf30931__12;
            // StatementAdderOnAssert create random local variable
            boolean vc_6888 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_6886 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6884 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_6884.unescapeEntities(vc_6886, vc_6888);
            // MethodAssertGenerator build local variable
            Object o_24_0 = doc.text();
            org.junit.Assert.fail("createsStructureFromBodySnippet_cf30931_cf32052 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet */
    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet_cf30929 */
    @org.junit.Test(timeout = 10000)
    public void createsStructureFromBodySnippet_cf30929_cf31444_failAssert10_add33529() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine
            // needs to move into the start of the body
            java.lang.String html = "foo <b>bar</b> baz";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_6640 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6636 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_createsStructureFromBodySnippet_cf30929__13 = // StatementAdderMethod cloned existing statement
vc_6636.unescapeEntities(rendered, vc_6640);
            // MethodAssertGenerator build local variable
            Object o_15_0 = o_createsStructureFromBodySnippet_cf30929__13;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_15_0, "<html>\n <head></head>\n <body>\n  foo \n  <b>bar</b> baz\n </body>\n</html>");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_1056 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(boolean_vc_1056);
            // StatementAdderOnAssert create null value
            java.lang.String vc_6762 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_6762);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_6636.unescapeEntities(vc_6762, boolean_vc_1056);
            // StatementAdderMethod cloned existing statement
            vc_6636.unescapeEntities(vc_6762, boolean_vc_1056);
            // MethodAssertGenerator build local variable
            Object o_23_0 = doc.text();
            org.junit.Assert.fail("createsStructureFromBodySnippet_cf30929_cf31444 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet */
    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet_cf30930 */
    @org.junit.Test(timeout = 10000)
    public void createsStructureFromBodySnippet_cf30930_cf32018_failAssert8_literalMutation33522() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine
            // needs to move into the start of the body
            java.lang.String html = "n SN&RQAQAv9A?M!G,";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "n SN&RQAQAv9A?M!G,");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_6640 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_1037 = "foo bar baz";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6636 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_createsStructureFromBodySnippet_cf30930__12 = // StatementAdderMethod cloned existing statement
vc_6636.unescapeEntities(String_vc_1037, vc_6640);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_createsStructureFromBodySnippet_cf30930__12;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, "foo bar baz");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_6872 = (org.jsoup.parser.TreeBuilder)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_6872);
            // StatementAdderMethod cloned existing statement
            vc_6636.setTreeBuilder(vc_6872);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.text();
            org.junit.Assert.fail("createsStructureFromBodySnippet_cf30930_cf32018 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet */
    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet_cf30929 */
    @org.junit.Test(timeout = 10000)
    public void createsStructureFromBodySnippet_cf30929_cf31687_failAssert2_literalMutation33499() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine
            // needs to move into the start of the body
            java.lang.String html = "foo <b>bar)/b> baz";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "foo <b>bar)/b> baz");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_6640 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6636 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_createsStructureFromBodySnippet_cf30929__13 = // StatementAdderMethod cloned existing statement
vc_6636.unescapeEntities(rendered, vc_6640);
            // MethodAssertGenerator build local variable
            Object o_15_0 = o_createsStructureFromBodySnippet_cf30929__13;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_15_0, "<html>\n <head></head>\n <body>\n  foo \n  <b>bar)/b> baz</b>\n </body>\n</html>");
            // StatementAdderMethod cloned existing statement
            vc_6636.settings();
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.text();
            org.junit.Assert.fail("createsStructureFromBodySnippet_cf30929_cf31687 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet */
    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet_cf30929 */
    @org.junit.Test(timeout = 10000)
    public void createsStructureFromBodySnippet_cf30929_cf31687_failAssert2_literalMutation33502() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine
            // needs to move into the start of the body
            java.lang.String html = "foo <b>bar</> baz";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "foo <b>bar</> baz");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_6640 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6636 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_createsStructureFromBodySnippet_cf30929__13 = // StatementAdderMethod cloned existing statement
vc_6636.unescapeEntities(rendered, vc_6640);
            // MethodAssertGenerator build local variable
            Object o_15_0 = o_createsStructureFromBodySnippet_cf30929__13;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_15_0, "<html>\n <head></head>\n <body>\n  foo \n  <b>bar baz</b>\n </body>\n</html>");
            // StatementAdderMethod cloned existing statement
            vc_6636.settings();
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.text();
            org.junit.Assert.fail("createsStructureFromBodySnippet_cf30929_cf31687 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet */
    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet_cf30931 */
    @org.junit.Test(timeout = 10000)
    public void createsStructureFromBodySnippet_cf30931_cf32052_failAssert18_literalMutation33577() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine
            // needs to move into the start of the body
            java.lang.String html = "foo <b>bar</b> baz";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_6640 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_6639 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6636 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_createsStructureFromBodySnippet_cf30931__12 = // StatementAdderMethod cloned existing statement
vc_6636.unescapeEntities(vc_6639, vc_6640);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_createsStructureFromBodySnippet_cf30931__12;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, "");
            // StatementAdderOnAssert create random local variable
            boolean vc_6888 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_6888);
            // StatementAdderOnAssert create null value
            java.lang.String vc_6886 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_6886);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6884 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_6884);
            // StatementAdderMethod cloned existing statement
            vc_6884.unescapeEntities(vc_6886, vc_6888);
            // MethodAssertGenerator build local variable
            Object o_24_0 = doc.text();
            org.junit.Assert.fail("createsStructureFromBodySnippet_cf30931_cf32052 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet */
    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet_cf30930 */
    @org.junit.Test(timeout = 10000)
    public void createsStructureFromBodySnippet_cf30930_cf32018_failAssert8_literalMutation33518() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine
            // needs to move into the start of the body
            java.lang.String html = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_6640 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_1037 = "foo bar baz";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6636 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_createsStructureFromBodySnippet_cf30930__12 = // StatementAdderMethod cloned existing statement
vc_6636.unescapeEntities(String_vc_1037, vc_6640);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_createsStructureFromBodySnippet_cf30930__12;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, "foo bar baz");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_6872 = (org.jsoup.parser.TreeBuilder)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_6872);
            // StatementAdderMethod cloned existing statement
            vc_6636.setTreeBuilder(vc_6872);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.text();
            org.junit.Assert.fail("createsStructureFromBodySnippet_cf30930_cf32018 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet */
    /* amplification of org.jsoup.parser.HtmlParserTest#createsStructureFromBodySnippet_cf30929 */
    @org.junit.Test(timeout = 10000)
    public void createsStructureFromBodySnippet_cf30929_cf31444_failAssert10_literalMutation33530() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine
            // needs to move into the start of the body
            java.lang.String html = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_6640 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_6636 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_createsStructureFromBodySnippet_cf30929__13 = // StatementAdderMethod cloned existing statement
vc_6636.unescapeEntities(rendered, vc_6640);
            // MethodAssertGenerator build local variable
            Object o_15_0 = o_createsStructureFromBodySnippet_cf30929__13;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_15_0, "<html>\n <head></head>\n <body></body>\n</html>");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_1056 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(boolean_vc_1056);
            // StatementAdderOnAssert create null value
            java.lang.String vc_6762 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_6762);
            // StatementAdderMethod cloned existing statement
            vc_6636.unescapeEntities(vc_6762, boolean_vc_1056);
            // MethodAssertGenerator build local variable
            Object o_23_0 = doc.text();
            org.junit.Assert.fail("createsStructureFromBodySnippet_cf30929_cf31444 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#discardsNakedTds */
    @org.junit.Test(timeout = 10000)
    public void discardsNakedTds_cf33588_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to make this into an implicit table; but browsers make it into a text run
            java.lang.String h = "<td>Hello<td><p>There<p>now";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_7316 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_7316.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // <tbody> is introduced if no implicitly creating table, but allows tr to be directly under table
            org.junit.Assert.fail("discardsNakedTds_cf33588 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#discardsNakedTds */
    @org.junit.Test(timeout = 10000)
    public void discardsNakedTds_cf33590_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to make this into an implicit table; but browsers make it into a text run
            java.lang.String h = "<td>Hello<td><p>There<p>now";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_7322 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_7320 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_7318 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_7318.unescapeEntities(vc_7320, vc_7322);
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // <tbody> is introduced if no implicitly creating table, but allows tr to be directly under table
            org.junit.Assert.fail("discardsNakedTds_cf33590 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#discardsNakedTds */
    @org.junit.Test(timeout = 10000)
    public void discardsNakedTds_cf33744() {
        // jsoup used to make this into an implicit table; but browsers make it into a text run
        java.lang.String h = "<td>Hello<td><p>There<p>now";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_7361 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_discardsNakedTds_cf33744__7 = // StatementAdderMethod cloned existing statement
vc_7361.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_discardsNakedTds_cf33744__7).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_discardsNakedTds_cf33744__7).getErrors());
        org.junit.Assert.assertEquals("Hello<p>There</p><p>now</p>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
        // <tbody> is introduced if no implicitly creating table, but allows tr to be directly under table
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#discardsNakedTds */
    @org.junit.Test(timeout = 10000)
    public void discardsNakedTds_cf33594() {
        // jsoup used to make this into an implicit table; but browsers make it into a text run
        java.lang.String h = "<td>Hello<td><p>There<p>now";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create random local variable
        boolean vc_7322 = false;
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_7321 = new java.lang.String();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_7318 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_discardsNakedTds_cf33594__11 = // StatementAdderMethod cloned existing statement
vc_7318.unescapeEntities(vc_7321, vc_7322);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_discardsNakedTds_cf33594__11, "");
        org.junit.Assert.assertEquals("Hello<p>There</p><p>now</p>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
        // <tbody> is introduced if no implicitly creating table, but allows tr to be directly under table
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#discardsNakedTds */
    /* amplification of org.jsoup.parser.HtmlParserTest#discardsNakedTds_cf33758 */
    @org.junit.Test(timeout = 10000)
    public void discardsNakedTds_cf33758_cf35291_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to make this into an implicit table; but browsers make it into a text run
            java.lang.String h = "<td>Hello<td><p>There<p>now";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_7374 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_discardsNakedTds_cf33758__7 = // StatementAdderMethod cloned existing statement
vc_7374.xmlParser();
            // MethodAssertGenerator build local variable
            Object o_9_0 = ((org.jsoup.parser.Parser)o_discardsNakedTds_cf33758__7).isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_11_0 = ((org.jsoup.parser.Parser)o_discardsNakedTds_cf33758__7).getErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_7694 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_7692 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_7690 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_7690.unescapeEntities(vc_7692, vc_7694);
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // <tbody> is introduced if no implicitly creating table, but allows tr to be directly under table
            org.junit.Assert.fail("discardsNakedTds_cf33758_cf35291 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#discardsNakedTds */
    /* amplification of org.jsoup.parser.HtmlParserTest#discardsNakedTds_cf33591 */
    @org.junit.Test(timeout = 10000)
    public void discardsNakedTds_cf33591_cf33778_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to make this into an implicit table; but browsers make it into a text run
            java.lang.String h = "<td>Hello<td><p>There<p>now";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_7322 = false;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_7318 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_discardsNakedTds_cf33591__9 = // StatementAdderMethod cloned existing statement
vc_7318.unescapeEntities(h, vc_7322);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_discardsNakedTds_cf33591__9;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_7378 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_7378.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_17_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // <tbody> is introduced if no implicitly creating table, but allows tr to be directly under table
            org.junit.Assert.fail("discardsNakedTds_cf33591_cf33778 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#discardsNakedTds */
    /* amplification of org.jsoup.parser.HtmlParserTest#discardsNakedTds_cf33591 */
    @org.junit.Test(timeout = 10000)
    public void discardsNakedTds_cf33591_cf33798_failAssert15_literalMutation35863() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to make this into an implicit table; but browsers make it into a text run
            java.lang.String h = "j_*F%G*z?Wk$!;&d=G=4PHSkRxk";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "j_*F%G*z?Wk$!;&d=G=4PHSkRxk");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_7322 = false;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_7318 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_discardsNakedTds_cf33591__9 = // StatementAdderMethod cloned existing statement
vc_7318.unescapeEntities(h, vc_7322);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_discardsNakedTds_cf33591__9;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "j_*F%G*z?Wk$!;&d=G=4PHSkRxk");
            // StatementAdderOnAssert create random local variable
            boolean vc_7384 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_7384);
            // StatementAdderOnAssert create null value
            java.lang.String vc_7382 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_7382);
            // StatementAdderMethod cloned existing statement
            vc_7318.unescapeEntities(vc_7382, vc_7384);
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // <tbody> is introduced if no implicitly creating table, but allows tr to be directly under table
            org.junit.Assert.fail("discardsNakedTds_cf33591_cf33798 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#discardsNakedTds */
    /* amplification of org.jsoup.parser.HtmlParserTest#discardsNakedTds_cf33591 */
    @org.junit.Test(timeout = 10000)
    public void discardsNakedTds_cf33591_cf33798_failAssert15_literalMutation35864() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to make this into an implicit table; but browsers make it into a text run
            java.lang.String h = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_7322 = false;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_7318 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_discardsNakedTds_cf33591__9 = // StatementAdderMethod cloned existing statement
vc_7318.unescapeEntities(h, vc_7322);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_discardsNakedTds_cf33591__9;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "");
            // StatementAdderOnAssert create random local variable
            boolean vc_7384 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_7384);
            // StatementAdderOnAssert create null value
            java.lang.String vc_7382 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_7382);
            // StatementAdderMethod cloned existing statement
            vc_7318.unescapeEntities(vc_7382, vc_7384);
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // <tbody> is introduced if no implicitly creating table, but allows tr to be directly under table
            org.junit.Assert.fail("discardsNakedTds_cf33591_cf33798 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#doesNotCreateImplicitLists */
    @org.junit.Test(timeout = 10000)
    public void doesNotCreateImplicitLists_cf35918_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // old jsoup used to wrap this in <ul>, but that's not to spec
            java.lang.String h = "<li>Point one<li>Point two";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.select.Elements ol = doc.select("ul");// should NOT have created a default ul.
            
            // MethodAssertGenerator build local variable
            Object o_8_0 = ol.size();
            org.jsoup.select.Elements lis = doc.select("li");
            // MethodAssertGenerator build local variable
            Object o_12_0 = lis.size();
            // MethodAssertGenerator build local variable
            Object o_14_0 = lis.first().parent().tagName();
            // no fiddling with non-implicit lists
            java.lang.String h2 = "<ol><li><p>Point the first<li><p>Point the second";
            org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse(h2);
            // MethodAssertGenerator build local variable
            Object o_22_0 = doc2.select("ul").size();
            // MethodAssertGenerator build local variable
            Object o_25_0 = doc2.select("ol").size();
            // MethodAssertGenerator build local variable
            Object o_28_0 = doc2.select("ol li").size();
            // MethodAssertGenerator build local variable
            Object o_31_0 = doc2.select("ol li p").size();
            // StatementAdderOnAssert create random local variable
            boolean vc_7818 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_7816 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_7814 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_7814.unescapeEntities(vc_7816, vc_7818);
            // MethodAssertGenerator build local variable
            Object o_42_0 = doc2.select("ol li").get(0).children().size();
            org.junit.Assert.fail("doesNotCreateImplicitLists_cf35918 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#doesNotCreateImplicitLists */
    @org.junit.Test(timeout = 10000)
    public void doesNotCreateImplicitLists_cf36072() {
        // old jsoup used to wrap this in <ul>, but that's not to spec
        java.lang.String h = "<li>Point one<li>Point two";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.jsoup.select.Elements ol = doc.select("ul");// should NOT have created a default ul.
        
        org.junit.Assert.assertEquals(0, ol.size());
        org.jsoup.select.Elements lis = doc.select("li");
        org.junit.Assert.assertEquals(2, lis.size());
        org.junit.Assert.assertEquals("body", lis.first().parent().tagName());
        // no fiddling with non-implicit lists
        java.lang.String h2 = "<ol><li><p>Point the first<li><p>Point the second";
        org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse(h2);
        org.junit.Assert.assertEquals(0, doc2.select("ul").size());
        org.junit.Assert.assertEquals(1, doc2.select("ol").size());
        org.junit.Assert.assertEquals(2, doc2.select("ol li").size());
        org.junit.Assert.assertEquals(2, doc2.select("ol li p").size());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_7857 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_7857);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_doesNotCreateImplicitLists_cf36072__36 = // StatementAdderMethod cloned existing statement
vc_7857.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_doesNotCreateImplicitLists_cf36072__36).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_doesNotCreateImplicitLists_cf36072__36).getErrors());
        org.junit.Assert.assertEquals(1, doc2.select("ol li").get(0).children().size());// one p in first li
        
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#doesNotCreateImplicitLists */
    @org.junit.Test(timeout = 10000)
    public void doesNotCreateImplicitLists_cf36072_cf36131_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // old jsoup used to wrap this in <ul>, but that's not to spec
            java.lang.String h = "<li>Point one<li>Point two";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.select.Elements ol = doc.select("ul");// should NOT have created a default ul.
            
            // MethodAssertGenerator build local variable
            Object o_8_0 = ol.size();
            org.jsoup.select.Elements lis = doc.select("li");
            // MethodAssertGenerator build local variable
            Object o_12_0 = lis.size();
            // MethodAssertGenerator build local variable
            Object o_14_0 = lis.first().parent().tagName();
            // no fiddling with non-implicit lists
            java.lang.String h2 = "<ol><li><p>Point the first<li><p>Point the second";
            org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse(h2);
            // MethodAssertGenerator build local variable
            Object o_22_0 = doc2.select("ul").size();
            // MethodAssertGenerator build local variable
            Object o_25_0 = doc2.select("ol").size();
            // MethodAssertGenerator build local variable
            Object o_28_0 = doc2.select("ol li").size();
            // MethodAssertGenerator build local variable
            Object o_31_0 = doc2.select("ol li p").size();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_7857 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_36_0 = vc_7857;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_doesNotCreateImplicitLists_cf36072__36 = // StatementAdderMethod cloned existing statement
vc_7857.htmlParser();
            // MethodAssertGenerator build local variable
            Object o_40_0 = ((org.jsoup.parser.Parser)o_doesNotCreateImplicitLists_cf36072__36).isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_42_0 = ((org.jsoup.parser.Parser)o_doesNotCreateImplicitLists_cf36072__36).getErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_7880 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_7878 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_7876 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_7876.unescapeEntities(vc_7878, vc_7880);
            // MethodAssertGenerator build local variable
            Object o_52_0 = doc2.select("ol li").get(0).children().size();
            org.junit.Assert.fail("doesNotCreateImplicitLists_cf36072_cf36131 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#doesNotCreateImplicitLists */
    @org.junit.Test(timeout = 10000)
    public void doesNotCreateImplicitLists_cf35920_cf36488_failAssert26_literalMutation42689() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // old jsoup used to wrap this in <ul>, but that's not to spec
            java.lang.String h = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.select.Elements ol = doc.select("ul");// should NOT have created a default ul.
            
            // MethodAssertGenerator build local variable
            Object o_8_0 = ol.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_8_0, 0);
            org.jsoup.select.Elements lis = doc.select("li");
            // MethodAssertGenerator build local variable
            Object o_12_0 = lis.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, 0);
            // MethodAssertGenerator build local variable
            Object o_14_0 = lis.first().parent().tagName();
            // no fiddling with non-implicit lists
            java.lang.String h2 = "<ol><li><p>Point the first<li><p>Point the second";
            org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse(h2);
            // MethodAssertGenerator build local variable
            Object o_22_0 = doc2.select("ul").size();
            // MethodAssertGenerator build local variable
            Object o_25_0 = doc2.select("ol").size();
            // MethodAssertGenerator build local variable
            Object o_28_0 = doc2.select("ol li").size();
            // MethodAssertGenerator build local variable
            Object o_31_0 = doc2.select("ol li p").size();
            // StatementAdderOnAssert create random local variable
            boolean vc_7818 = true;
            // MethodAssertGenerator build local variable
            Object o_36_0 = vc_7818;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // MethodAssertGenerator build local variable
            Object o_42_0 = out;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_7814 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_46_0 = vc_7814;
            // AssertGenerator replace invocation
            java.lang.String o_doesNotCreateImplicitLists_cf35920__42 = // StatementAdderMethod cloned existing statement
vc_7814.unescapeEntities(out, vc_7818);
            // MethodAssertGenerator build local variable
            Object o_50_0 = o_doesNotCreateImplicitLists_cf35920__42;
            // StatementAdderMethod cloned existing statement
            vc_7814.getErrors();
            // MethodAssertGenerator build local variable
            Object o_54_0 = doc2.select("ol li").get(0).children().size();
            org.junit.Assert.fail("doesNotCreateImplicitLists_cf35920_cf36488 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedAttribute */
    @org.junit.Test(timeout = 10000)
    public void dropsUnterminatedAttribute_cf42732_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to parse this to <p id="foo">, but whatwg, webkit will drop.
            java.lang.String h1 = "<p id=\"foo";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_9300 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_9300.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.text();
            org.junit.Assert.fail("dropsUnterminatedAttribute_cf42732 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedAttribute */
    @org.junit.Test(timeout = 10000)
    public void dropsUnterminatedAttribute_cf42744_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to parse this to <p id="foo">, but whatwg, webkit will drop.
            java.lang.String h1 = "<p id=\"foo";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_9307 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_9307.getErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.text();
            org.junit.Assert.fail("dropsUnterminatedAttribute_cf42744 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedAttribute */
    @org.junit.Test(timeout = 10000)
    public void dropsUnterminatedAttribute_cf42888() {
        // jsoup used to parse this to <p id="foo">, but whatwg, webkit will drop.
        java.lang.String h1 = "<p id=\"foo";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_9345 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_dropsUnterminatedAttribute_cf42888__7 = // StatementAdderMethod cloned existing statement
vc_9345.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_dropsUnterminatedAttribute_cf42888__7).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_dropsUnterminatedAttribute_cf42888__7).getErrors());
        org.junit.Assert.assertEquals("", doc.text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedAttribute */
    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedAttribute_cf42737 */
    @org.junit.Test(timeout = 10000)
    public void dropsUnterminatedAttribute_cf42737_cf43543_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to parse this to <p id="foo">, but whatwg, webkit will drop.
            java.lang.String h1 = "<p id=\"foo";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
            // StatementAdderOnAssert create random local variable
            boolean vc_9306 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_1436 = "<p id=\"foo";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_9302 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_dropsUnterminatedAttribute_cf42737__11 = // StatementAdderMethod cloned existing statement
vc_9302.unescapeEntities(String_vc_1436, vc_9306);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_dropsUnterminatedAttribute_cf42737__11;
            // StatementAdderOnAssert create random local variable
            boolean vc_9492 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_9490 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_9488 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_9488.unescapeEntities(vc_9490, vc_9492);
            // MethodAssertGenerator build local variable
            Object o_23_0 = doc.text();
            org.junit.Assert.fail("dropsUnterminatedAttribute_cf42737_cf43543 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedAttribute */
    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedAttribute_cf42886 */
    @org.junit.Test(timeout = 10000)
    public void dropsUnterminatedAttribute_cf42886_failAssert6_literalMutation44700() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to parse this to <p id="foo">, but whatwg, webkit will drop.
            java.lang.String h1 = "<]p id=\"foo";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h1, "<]p id=\"foo");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_9343 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_9343.settings();
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.text();
            org.junit.Assert.fail("dropsUnterminatedAttribute_cf42886 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedAttribute */
    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedAttribute_cf42898 */
    @org.junit.Test(timeout = 10000)
    public void dropsUnterminatedAttribute_cf42898_failAssert9_literalMutation44723() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to parse this to <p id="foo">, but whatwg, webkit will drop.
            java.lang.String h1 = "<pid=\"foo";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h1, "<pid=\"foo");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_9356 = (org.jsoup.parser.ParseSettings)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_9354 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_9354.settings(vc_9356);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.text();
            org.junit.Assert.fail("dropsUnterminatedAttribute_cf42898 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedAttribute */
    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedAttribute_cf42738 */
    @org.junit.Test(timeout = 10000)
    public void dropsUnterminatedAttribute_cf42738_cf44124_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to parse this to <p id="foo">, but whatwg, webkit will drop.
            java.lang.String h1 = "<p id=\"foo";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
            // StatementAdderOnAssert create random local variable
            boolean vc_9306 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_9305 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_9302 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_dropsUnterminatedAttribute_cf42738__11 = // StatementAdderMethod cloned existing statement
vc_9302.unescapeEntities(vc_9305, vc_9306);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_dropsUnterminatedAttribute_cf42738__11;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_9604 = (org.jsoup.parser.ParseSettings)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_9602 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_9602.settings(vc_9604);
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.text();
            org.junit.Assert.fail("dropsUnterminatedAttribute_cf42738_cf44124 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedAttribute */
    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedAttribute_cf42886 */
    @org.junit.Test(timeout = 10000)
    public void dropsUnterminatedAttribute_cf42886_failAssert6_literalMutation44700_cf44744_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // jsoup used to parse this to <p id="foo">, but whatwg, webkit will drop.
                java.lang.String h1 = "<]p id=\"foo";
                // StatementAdderOnAssert create random local variable
                boolean vc_9740 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_9738 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_9736 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_9736.unescapeEntities(vc_9738, vc_9740);
                // MethodAssertGenerator build local variable
                Object o_13_0 = h1;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_9343 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_9343.settings();
                // MethodAssertGenerator build local variable
                Object o_9_0 = doc.text();
                org.junit.Assert.fail("dropsUnterminatedAttribute_cf42886 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("dropsUnterminatedAttribute_cf42886_failAssert6_literalMutation44700_cf44744 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedAttribute */
    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedAttribute_cf42735 */
    @org.junit.Test(timeout = 10000)
    public void dropsUnterminatedAttribute_cf42735_cf43180_failAssert6_add45743() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to parse this to <p id="foo">, but whatwg, webkit will drop.
            java.lang.String h1 = "<p id=\"foo";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
            // StatementAdderOnAssert create random local variable
            boolean vc_9306 = true;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_9302 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_dropsUnterminatedAttribute_cf42735__9 = // StatementAdderMethod cloned existing statement
vc_9302.unescapeEntities(h1, vc_9306);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_dropsUnterminatedAttribute_cf42735__9;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "<p id=\"foo");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_9405 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_9405);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_9405.settings();
            // StatementAdderMethod cloned existing statement
            vc_9405.settings();
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.text();
            org.junit.Assert.fail("dropsUnterminatedAttribute_cf42735_cf43180 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedAttribute */
    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedAttribute_cf42735 */
    @org.junit.Test(timeout = 10000)
    public void dropsUnterminatedAttribute_cf42735_cf43180_failAssert6_literalMutation45744() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to parse this to <p id="foo">, but whatwg, webkit will drop.
            java.lang.String h1 = "<p id=foo";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h1, "<p id=foo");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
            // StatementAdderOnAssert create random local variable
            boolean vc_9306 = true;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_9302 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_dropsUnterminatedAttribute_cf42735__9 = // StatementAdderMethod cloned existing statement
vc_9302.unescapeEntities(h1, vc_9306);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_dropsUnterminatedAttribute_cf42735__9;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "<p id=foo");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_9405 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_9405);
            // StatementAdderMethod cloned existing statement
            vc_9405.settings();
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.text();
            org.junit.Assert.fail("dropsUnterminatedAttribute_cf42735_cf43180 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedTag */
    @org.junit.Test(timeout = 10000)
    public void dropsUnterminatedTag_cf45826_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to parse this to <p>, but whatwg, webkit will drop.
            java.lang.String h1 = "<p";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.getElementsByTag("p").size();
            // MethodAssertGenerator build local variable
            Object o_8_0 = doc.text();
            java.lang.String h2 = "<div id=1<p id='2'";
            doc = org.jsoup.Jsoup.parse(h2);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_10168 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_10168.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.text();
            org.junit.Assert.fail("dropsUnterminatedTag_cf45826 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedTag */
    @org.junit.Test(timeout = 10000)
    public void dropsUnterminatedTag_cf45998() {
        // jsoup used to parse this to <p>, but whatwg, webkit will drop.
        java.lang.String h1 = "<p";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
        org.junit.Assert.assertEquals(0, doc.getElementsByTag("p").size());
        org.junit.Assert.assertEquals("", doc.text());
        java.lang.String h2 = "<div id=1<p id='2'";
        doc = org.jsoup.Jsoup.parse(h2);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_10226 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_dropsUnterminatedTag_cf45998__15 = // StatementAdderMethod cloned existing statement
vc_10226.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_dropsUnterminatedTag_cf45998__15).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_dropsUnterminatedTag_cf45998__15).getErrors());
        org.junit.Assert.assertEquals("", doc.text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedTag */
    @org.junit.Test(timeout = 10000)
    public void dropsUnterminatedTag_cf45828_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to parse this to <p>, but whatwg, webkit will drop.
            java.lang.String h1 = "<p";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.getElementsByTag("p").size();
            // MethodAssertGenerator build local variable
            Object o_8_0 = doc.text();
            java.lang.String h2 = "<div id=1<p id='2'";
            doc = org.jsoup.Jsoup.parse(h2);
            // StatementAdderOnAssert create random local variable
            boolean vc_10174 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_10172 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_10170 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_10170.unescapeEntities(vc_10172, vc_10174);
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.text();
            org.junit.Assert.fail("dropsUnterminatedTag_cf45828 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedTag_cf45830 */
    @org.junit.Test(timeout = 10000)
    public void dropsUnterminatedTag_cf45830_cf46354_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to parse this to <p>, but whatwg, webkit will drop.
            java.lang.String h1 = "<p";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.getElementsByTag("p").size();
            // MethodAssertGenerator build local variable
            Object o_8_0 = doc.text();
            java.lang.String h2 = "<div id=1<p id='2'";
            doc = org.jsoup.Jsoup.parse(h2);
            // StatementAdderOnAssert create random local variable
            boolean vc_10174 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_10170 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_dropsUnterminatedTag_cf45830__20 = // StatementAdderMethod cloned existing statement
vc_10170.unescapeEntities(rendered, vc_10174);
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_dropsUnterminatedTag_cf45830__20;
            // StatementAdderOnAssert create null value
            java.lang.String vc_10296 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_10170.unescapeEntities(vc_10296, vc_10174);
            // MethodAssertGenerator build local variable
            Object o_28_0 = doc.text();
            org.junit.Assert.fail("dropsUnterminatedTag_cf45830_cf46354 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedTag_cf45829 */
    @org.junit.Test(timeout = 10000)
    public void dropsUnterminatedTag_cf45829_cf46291_failAssert15_literalMutation48943() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to parse this to <p>, but whatwg, webkit will drop.
            java.lang.String h1 = "<p";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.getElementsByTag("p").size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_5_0, 0);
            // MethodAssertGenerator build local variable
            Object o_8_0 = doc.text();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_8_0, "");
            java.lang.String h2 = "u4kCt-_y&&#H7(s5u4";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h2, "u4kCt-_y&&#H7(s5u4");
            doc = org.jsoup.Jsoup.parse(h2);
            // StatementAdderOnAssert create random local variable
            boolean vc_10174 = true;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_10170 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_dropsUnterminatedTag_cf45829__17 = // StatementAdderMethod cloned existing statement
vc_10170.unescapeEntities(h2, vc_10174);
            // MethodAssertGenerator build local variable
            Object o_19_0 = o_dropsUnterminatedTag_cf45829__17;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_19_0, "u4kCt-_y&&#H7(s5u4");
            // StatementAdderOnAssert create random local variable
            int vc_10279 = -1977560373;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_10279, -1977560373);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_10277 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_10277);
            // StatementAdderMethod cloned existing statement
            vc_10277.setTrackErrors(vc_10279);
            // MethodAssertGenerator build local variable
            Object o_27_0 = doc.text();
            org.junit.Assert.fail("dropsUnterminatedTag_cf45829_cf46291 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#dropsUnterminatedTag_cf45838 */
    @org.junit.Test(timeout = 10000)
    public void dropsUnterminatedTag_cf45838_failAssert10_literalMutation47834_cf48095_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_11_1 = 0;
                // jsoup used to parse this to <p>, but whatwg, webkit will drop.
                java.lang.String h1 = "<p";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h1);
                // MethodAssertGenerator build local variable
                Object o_5_0 = doc.getElementsByTag("p").size();
                // MethodAssertGenerator build local variable
                Object o_11_0 = o_5_0;
                // MethodAssertGenerator build local variable
                Object o_8_0 = doc.text();
                // MethodAssertGenerator build local variable
                Object o_16_0 = o_8_0;
                java.lang.String h2 = "<div iXd=1<p id=\'2\'";
                // StatementAdderOnAssert create random local variable
                boolean vc_10670 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_10668 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_10666 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_10666.unescapeEntities(vc_10668, vc_10670);
                // MethodAssertGenerator build local variable
                Object o_27_0 = h2;
                doc = org.jsoup.Jsoup.parse(h2);
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_10175 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_10175.getErrors();
                // MethodAssertGenerator build local variable
                Object o_17_0 = doc.text();
                org.junit.Assert.fail("dropsUnterminatedTag_cf45838 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("dropsUnterminatedTag_cf45838_failAssert10_literalMutation47834_cf48095 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#emptyTdTag */
    @org.junit.Test(timeout = 10000)
    public void emptyTdTag_cf49125() {
        java.lang.String h = "<table><tr><td>One</td><td id='2' /></tr></table>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_10957 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_emptyTdTag_cf49125__6 = // StatementAdderMethod cloned existing statement
vc_10957.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_emptyTdTag_cf49125__6).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_emptyTdTag_cf49125__6).getErrors());
        org.junit.Assert.assertEquals("<td>One</td>\n<td id=\"2\"></td>", doc.select("tr").first().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#emptyTdTag */
    @org.junit.Test(timeout = 10000)
    public void emptyTdTag_cf48971_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<table><tr><td>One</td><td id='2' /></tr></table>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_10918 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_10916 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_10914 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_10914.unescapeEntities(vc_10916, vc_10918);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.select("tr").first().html();
            org.junit.Assert.fail("emptyTdTag_cf48971 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#emptyTdTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#emptyTdTag_cf49131 */
    @org.junit.Test(timeout = 10000)
    public void emptyTdTag_cf49131_failAssert13_literalMutation50980() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<tabl><tr><td>One</td><td id=\'2\' /></tr></table>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<tabl><tr><td>One</td><td id=\'2\' /></tr></table>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_10964 = (org.jsoup.parser.TreeBuilder)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_10962 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_10962.setTreeBuilder(vc_10964);
            // MethodAssertGenerator build local variable
            Object o_10_0 = doc.select("tr").first().html();
            org.junit.Assert.fail("emptyTdTag_cf49131 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#emptyTdTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#emptyTdTag_cf49131 */
    @org.junit.Test(timeout = 10000)
    public void emptyTdTag_cf49131_failAssert13_literalMutation50979() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<table><tr><td>One</td><td1id=\'2\' /></tr></table>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<table><tr><td>One</td><td1id=\'2\' /></tr></table>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_10964 = (org.jsoup.parser.TreeBuilder)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_10962 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_10962.setTreeBuilder(vc_10964);
            // MethodAssertGenerator build local variable
            Object o_10_0 = doc.select("tr").first().html();
            org.junit.Assert.fail("emptyTdTag_cf49131 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#emptyTdTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#emptyTdTag_cf48973 */
    @org.junit.Test(timeout = 10000)
    public void emptyTdTag_cf48973_cf49753_failAssert5_literalMutation52289() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<table><tr><td>One</td><td id='2' /></tr></table>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_10918 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(vc_10918);
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_10914 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_emptyTdTag_cf48973__12 = // StatementAdderMethod cloned existing statement
vc_10914.unescapeEntities(out, vc_10918);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_emptyTdTag_cf48973__12;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, "<table>\n <tbody>\n  <tr>\n   <td>One</td>\n   <td id=\"2\"></td>\n  </tr>\n </tbody>\n</table>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_11092 = (org.jsoup.parser.ParseSettings)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_11092);
            // StatementAdderMethod cloned existing statement
            vc_10914.settings(vc_11092);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.select("tr").first().html();
            org.junit.Assert.fail("emptyTdTag_cf48973_cf49753 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#findsCharsetInMalformedMeta */
    @org.junit.Test(timeout = 10000)
    public void findsCharsetInMalformedMeta_cf52380() {
        java.lang.String h = "<meta http-equiv=Content-Type content=text/html; charset=gb2312>";
        // example cited for reason of html5's <meta charset> element
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create random local variable
        boolean vc_11910 = false;
        // StatementAddOnAssert local variable replacement
        java.lang.String html = doc.outerHtml();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_11906 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_findsCharsetInMalformedMeta_cf52380__12 = // StatementAdderMethod cloned existing statement
vc_11906.unescapeEntities(html, vc_11910);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_findsCharsetInMalformedMeta_cf52380__12, "<html>\n <head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html;\" charset=\"gb2312\">\n </head>\n <body></body>\n</html>");
        org.junit.Assert.assertEquals("gb2312", doc.select("meta").attr("charset"));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#findsCharsetInMalformedMeta */
    @org.junit.Test(timeout = 10000)
    public void findsCharsetInMalformedMeta_cf52376_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<meta http-equiv=Content-Type content=text/html; charset=gb2312>";
            // example cited for reason of html5's <meta charset> element
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_11904 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_11904.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.select("meta").attr("charset");
            org.junit.Assert.fail("findsCharsetInMalformedMeta_cf52376 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#findsCharsetInMalformedMeta */
    @org.junit.Test(timeout = 10000)
    public void findsCharsetInMalformedMeta_cf52532() {
        java.lang.String h = "<meta http-equiv=Content-Type content=text/html; charset=gb2312>";
        // example cited for reason of html5's <meta charset> element
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_11949 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_findsCharsetInMalformedMeta_cf52532__7 = // StatementAdderMethod cloned existing statement
vc_11949.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_findsCharsetInMalformedMeta_cf52532__7).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_findsCharsetInMalformedMeta_cf52532__7).isTrackErrors());
        org.junit.Assert.assertEquals("gb2312", doc.select("meta").attr("charset"));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#findsCharsetInMalformedMeta */
    @org.junit.Test(timeout = 10000)
    public void findsCharsetInMalformedMeta_cf52378_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<meta http-equiv=Content-Type content=text/html; charset=gb2312>";
            // example cited for reason of html5's <meta charset> element
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_11910 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_11908 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_11906 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_11906.unescapeEntities(vc_11908, vc_11910);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.select("meta").attr("charset");
            org.junit.Assert.fail("findsCharsetInMalformedMeta_cf52378 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#findsCharsetInMalformedMeta */
    /* amplification of org.jsoup.parser.HtmlParserTest#findsCharsetInMalformedMeta_cf52382 */
    @org.junit.Test(timeout = 10000)
    public void findsCharsetInMalformedMeta_cf52382_cf53518_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<meta http-equiv=Content-Type content=text/html; charset=gb2312>";
            // example cited for reason of html5's <meta charset> element
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_11910 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_11909 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_11906 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_findsCharsetInMalformedMeta_cf52382__11 = // StatementAdderMethod cloned existing statement
vc_11906.unescapeEntities(vc_11909, vc_11910);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_findsCharsetInMalformedMeta_cf52382__11;
            // StatementAdderOnAssert create random local variable
            boolean vc_12158 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_12156 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_11906.unescapeEntities(vc_12156, vc_12158);
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.select("meta").attr("charset");
            org.junit.Assert.fail("findsCharsetInMalformedMeta_cf52382_cf53518 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handleNullContextInParseFragment */
    @org.junit.Test(timeout = 10000)
    public void handleNullContextInParseFragment_cf55285() {
        java.lang.String html = "<ol><li>One</li></ol><p>Two</p>";
        java.util.List<org.jsoup.nodes.Node> nodes = org.jsoup.parser.Parser.parseFragment(html, null, "http://example.com/");
        org.junit.Assert.assertEquals(1, nodes.size());// returns <html> node (not document) -- no context means doc gets created
        
        org.junit.Assert.assertEquals("html", nodes.get(0).nodeName());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_12693 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handleNullContextInParseFragment_cf55285__12 = // StatementAdderMethod cloned existing statement
vc_12693.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handleNullContextInParseFragment_cf55285__12).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handleNullContextInParseFragment_cf55285__12).isTrackErrors());
        org.junit.Assert.assertEquals("<html> <head></head> <body> <ol> <li>One</li> </ol> <p>Two</p> </body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(nodes.get(0).outerHtml()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handleNullContextInParseFragment */
    @org.junit.Test(timeout = 10000)
    public void handleNullContextInParseFragment_cf55167_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<ol><li>One</li></ol><p>Two</p>";
            java.util.List<org.jsoup.nodes.Node> nodes = org.jsoup.parser.Parser.parseFragment(html, null, "http://example.com/");
            // MethodAssertGenerator build local variable
            Object o_4_0 = nodes.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = nodes.get(0).nodeName();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_12648 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_12648.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_14_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(nodes.get(0).outerHtml());
            org.junit.Assert.fail("handleNullContextInParseFragment_cf55167 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handleNullContextInParseFragment */
    @org.junit.Test(timeout = 10000)
    public void handleNullContextInParseFragment_cf55169_failAssert19() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<ol><li>One</li></ol><p>Two</p>";
            java.util.List<org.jsoup.nodes.Node> nodes = org.jsoup.parser.Parser.parseFragment(html, null, "http://example.com/");
            // MethodAssertGenerator build local variable
            Object o_4_0 = nodes.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = nodes.get(0).nodeName();
            // StatementAdderOnAssert create random local variable
            boolean vc_12654 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_12652 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_12650 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_12650.unescapeEntities(vc_12652, vc_12654);
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(nodes.get(0).outerHtml());
            org.junit.Assert.fail("handleNullContextInParseFragment_cf55169 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handleNullContextInParseFragment */
    /* amplification of org.jsoup.parser.HtmlParserTest#handleNullContextInParseFragment_cf55172 */
    @org.junit.Test(timeout = 10000)
    public void handleNullContextInParseFragment_cf55172_cf55844_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<ol><li>One</li></ol><p>Two</p>";
            java.util.List<org.jsoup.nodes.Node> nodes = org.jsoup.parser.Parser.parseFragment(html, null, "http://example.com/");
            // MethodAssertGenerator build local variable
            Object o_4_0 = nodes.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = nodes.get(0).nodeName();
            // StatementAdderOnAssert create random local variable
            boolean vc_12654 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_12653 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_12650 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handleNullContextInParseFragment_cf55172__16 = // StatementAdderMethod cloned existing statement
vc_12650.unescapeEntities(vc_12653, vc_12654);
            // MethodAssertGenerator build local variable
            Object o_18_0 = o_handleNullContextInParseFragment_cf55172__16;
            // StatementAdderOnAssert create null value
            java.lang.String vc_12838 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_12836 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_12836.unescapeEntities(vc_12838, vc_12654);
            // MethodAssertGenerator build local variable
            Object o_26_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(nodes.get(0).outerHtml());
            org.junit.Assert.fail("handleNullContextInParseFragment_cf55172_cf55844 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handleNullContextInParseFragment */
    /* amplification of org.jsoup.parser.HtmlParserTest#handleNullContextInParseFragment_cf55170 */
    @org.junit.Test(timeout = 10000)
    public void handleNullContextInParseFragment_cf55170_cf55333_failAssert27_literalMutation57768() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<ol><li>One</li></ol><p>Two</p>";
            java.util.List<org.jsoup.nodes.Node> nodes = org.jsoup.parser.Parser.parseFragment(html, null, "http://example.com/");
            // MethodAssertGenerator build local variable
            Object o_4_0 = nodes.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_4_0, 1);
            // MethodAssertGenerator build local variable
            Object o_7_0 = nodes.get(0).nodeName();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_7_0, "html");
            // StatementAdderOnAssert create random local variable
            boolean vc_12654 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(vc_12654);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_12650 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handleNullContextInParseFragment_cf55170__14 = // StatementAdderMethod cloned existing statement
vc_12650.unescapeEntities(html, vc_12654);
            // MethodAssertGenerator build local variable
            Object o_16_0 = o_handleNullContextInParseFragment_cf55170__14;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_16_0, "<ol><li>One</li></ol><p>Two</p>");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_1946 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(boolean_vc_1946);
            // StatementAdderOnAssert create null value
            java.lang.String vc_12714 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_12714);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_12712 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_12712);
            // StatementAdderMethod cloned existing statement
            vc_12712.unescapeEntities(vc_12714, boolean_vc_1946);
            // MethodAssertGenerator build local variable
            Object o_26_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(nodes.get(0).outerHtml());
            org.junit.Assert.fail("handleNullContextInParseFragment_cf55170_cf55333 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handleNullContextInParseFragment */
    /* amplification of org.jsoup.parser.HtmlParserTest#handleNullContextInParseFragment_cf55170 */
    @org.junit.Test(timeout = 10000)
    public void handleNullContextInParseFragment_cf55170_cf55333_failAssert27_literalMutation57764() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "8P:qnbtP|!Kf@tBPucr3b#_j=,7eq@#";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "8P:qnbtP|!Kf@tBPucr3b#_j=,7eq@#");
            java.util.List<org.jsoup.nodes.Node> nodes = org.jsoup.parser.Parser.parseFragment(html, null, "http://example.com/");
            // MethodAssertGenerator build local variable
            Object o_4_0 = nodes.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_4_0, 1);
            // MethodAssertGenerator build local variable
            Object o_7_0 = nodes.get(0).nodeName();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_7_0, "html");
            // StatementAdderOnAssert create random local variable
            boolean vc_12654 = true;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_12650 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handleNullContextInParseFragment_cf55170__14 = // StatementAdderMethod cloned existing statement
vc_12650.unescapeEntities(html, vc_12654);
            // MethodAssertGenerator build local variable
            Object o_16_0 = o_handleNullContextInParseFragment_cf55170__14;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_16_0, "8P:qnbtP|!Kf@tBPucr3b#_j=,7eq@#");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_1946 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(boolean_vc_1946);
            // StatementAdderOnAssert create null value
            java.lang.String vc_12714 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_12714);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_12712 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_12712);
            // StatementAdderMethod cloned existing statement
            vc_12712.unescapeEntities(vc_12714, boolean_vc_1946);
            // MethodAssertGenerator build local variable
            Object o_26_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(nodes.get(0).outerHtml());
            org.junit.Assert.fail("handleNullContextInParseFragment_cf55170_cf55333 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handles0CharacterAsText */
    @org.junit.Test(timeout = 10000)
    public void handles0CharacterAsText_cf57831_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("0<p>0</p>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_13454 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_13454.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.body().html();
            org.junit.Assert.fail("handles0CharacterAsText_cf57831 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handles0CharacterAsText */
    @org.junit.Test(timeout = 10000)
    public void handles0CharacterAsText_cf57836() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("0<p>0</p>");
        // StatementAdderOnAssert create random local variable
        boolean vc_13460 = true;
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_13459 = new java.lang.String();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_13456 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_handles0CharacterAsText_cf57836__9 = // StatementAdderMethod cloned existing statement
vc_13456.unescapeEntities(vc_13459, vc_13460);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handles0CharacterAsText_cf57836__9, "");
        org.junit.Assert.assertEquals("0\n<p>0</p>", doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handles0CharacterAsText */
    @org.junit.Test(timeout = 10000)
    public void handles0CharacterAsText_cf57957() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("0<p>0</p>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_13499 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handles0CharacterAsText_cf57957__5 = // StatementAdderMethod cloned existing statement
vc_13499.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handles0CharacterAsText_cf57957__5).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handles0CharacterAsText_cf57957__5).getErrors());
        org.junit.Assert.assertEquals("0\n<p>0</p>", doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handles0CharacterAsText */
    @org.junit.Test(timeout = 10000)
    public void handles0CharacterAsText_cf57833_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("0<p>0</p>");
            // StatementAdderOnAssert create random local variable
            boolean vc_13460 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_13458 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_13456 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_13456.unescapeEntities(vc_13458, vc_13460);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.body().html();
            org.junit.Assert.fail("handles0CharacterAsText_cf57833 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handles0CharacterAsText */
    /* amplification of org.jsoup.parser.HtmlParserTest#handles0CharacterAsText_cf57834 */
    @org.junit.Test(timeout = 10000)
    public void handles0CharacterAsText_cf57834_cf57984_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("0<p>0</p>");
            // StatementAdderOnAssert create random local variable
            boolean vc_13460 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_13456 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handles0CharacterAsText_cf57834__11 = // StatementAdderMethod cloned existing statement
vc_13456.unescapeEntities(out, vc_13460);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_handles0CharacterAsText_cf57834__11;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_13516 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_13516.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.body().html();
            org.junit.Assert.fail("handles0CharacterAsText_cf57834_cf57984 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handles0CharacterAsText */
    /* amplification of org.jsoup.parser.HtmlParserTest#handles0CharacterAsText_cf57835 */
    @org.junit.Test(timeout = 10000)
    public void handles0CharacterAsText_cf57835_cf58298_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("0<p>0</p>");
            // StatementAdderOnAssert create random local variable
            boolean vc_13460 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_2056 = "0<p>0</p>";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_13456 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handles0CharacterAsText_cf57835__9 = // StatementAdderMethod cloned existing statement
vc_13456.unescapeEntities(String_vc_2056, vc_13460);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_handles0CharacterAsText_cf57835__9;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_2075 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_13582 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_13580 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_13580.unescapeEntities(vc_13582, boolean_vc_2075);
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.body().html();
            org.junit.Assert.fail("handles0CharacterAsText_cf57835_cf58298 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handles0CharacterAsText */
    /* amplification of org.jsoup.parser.HtmlParserTest#handles0CharacterAsText_cf57834 */
    @org.junit.Test(timeout = 10000)
    public void handles0CharacterAsText_cf57834_cf58256_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("0<p>0</p>");
            // StatementAdderOnAssert create random local variable
            boolean vc_13460 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_13456 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handles0CharacterAsText_cf57834__11 = // StatementAdderMethod cloned existing statement
vc_13456.unescapeEntities(out, vc_13460);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_handles0CharacterAsText_cf57834__11;
            // StatementAdderOnAssert create random local variable
            int vc_13565 = 948450661;
            // StatementAdderMethod cloned existing statement
            vc_13456.setTrackErrors(vc_13565);
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.body().html();
            org.junit.Assert.fail("handles0CharacterAsText_cf57834_cf58256 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handles0CharacterAsText */
    /* amplification of org.jsoup.parser.HtmlParserTest#handles0CharacterAsText_cf57835 */
    @org.junit.Test(timeout = 10000)
    public void handles0CharacterAsText_cf57835_cf58555_failAssert10_literalMutation59526() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("0<p>0</p>");
            // StatementAdderOnAssert create random local variable
            boolean vc_13460 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_2056 = "iC J55M!&";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_2056, "iC J55M!&");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_13456 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handles0CharacterAsText_cf57835__9 = // StatementAdderMethod cloned existing statement
vc_13456.unescapeEntities(String_vc_2056, vc_13460);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_handles0CharacterAsText_cf57835__9;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "iC J55M!&");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_13621 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_13621);
            // StatementAdderMethod cloned existing statement
            vc_13621.settings();
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.body().html();
            org.junit.Assert.fail("handles0CharacterAsText_cf57835_cf58555 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handles0CharacterAsText */
    /* amplification of org.jsoup.parser.HtmlParserTest#handles0CharacterAsText_cf57959 */
    @org.junit.Test(timeout = 10000)
    public void handles0CharacterAsText_cf57959_failAssert9_literalMutation59341_cf59352_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_16_1 = -2147483648;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("0<p>0</p>");
                // StatementAdderOnAssert create random local variable
                int vc_13503 = -2147483648;
                // StatementAdderOnAssert create random local variable
                boolean vc_13832 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_13830 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_13828 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_13828.unescapeEntities(vc_13830, vc_13832);
                // MethodAssertGenerator build local variable
                Object o_16_0 = vc_13503;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_13501 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_13501.setTrackErrors(vc_13503);
                // MethodAssertGenerator build local variable
                Object o_9_0 = doc.body().html();
                org.junit.Assert.fail("handles0CharacterAsText_cf57959 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handles0CharacterAsText_cf57959_failAssert9_literalMutation59341_cf59352 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesBaseTags */
    @org.junit.Test(timeout = 10000)
    public void handlesBaseTags_cf59608_failAssert36() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // only listen to the first base href
            java.lang.String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=/4>#</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h, "http://foo/");
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.baseUri();
            org.jsoup.select.Elements anchors = doc.getElementsByTag("a");
            // MethodAssertGenerator build local variable
            Object o_10_0 = anchors.size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = anchors.get(0).baseUri();
            // MethodAssertGenerator build local variable
            Object o_15_0 = anchors.get(1).baseUri();
            // MethodAssertGenerator build local variable
            Object o_18_0 = anchors.get(2).baseUri();
            // MethodAssertGenerator build local variable
            Object o_21_0 = anchors.get(0).absUrl("href");
            // MethodAssertGenerator build local variable
            Object o_24_0 = anchors.get(1).absUrl("href");
            // StatementAdderOnAssert create random local variable
            boolean vc_13894 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_13892 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_13890 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_13890.unescapeEntities(vc_13892, vc_13894);
            // MethodAssertGenerator build local variable
            Object o_35_0 = anchors.get(2).absUrl("href");
            org.junit.Assert.fail("handlesBaseTags_cf59608 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesBaseTags */
    @org.junit.Test(timeout = 10000)
    public void handlesBaseTags_cf59762() {
        // only listen to the first base href
        java.lang.String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=/4>#</a>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h, "http://foo/");
        org.junit.Assert.assertEquals("http://foo/2/", doc.baseUri());// gets set once, so doc and descendants have first only
        
        org.jsoup.select.Elements anchors = doc.getElementsByTag("a");
        org.junit.Assert.assertEquals(3, anchors.size());
        org.junit.Assert.assertEquals("http://foo/2/", anchors.get(0).baseUri());
        org.junit.Assert.assertEquals("http://foo/2/", anchors.get(1).baseUri());
        org.junit.Assert.assertEquals("http://foo/2/", anchors.get(2).baseUri());
        org.junit.Assert.assertEquals("http://foo/2/1", anchors.get(0).absUrl("href"));
        org.junit.Assert.assertEquals("http://foo/2/3", anchors.get(1).absUrl("href"));
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_13933 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_13933);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesBaseTags_cf59762__29 = // StatementAdderMethod cloned existing statement
vc_13933.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesBaseTags_cf59762__29).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesBaseTags_cf59762__29).isTrackErrors());
        org.junit.Assert.assertEquals("http://foo/4", anchors.get(2).absUrl("href"));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesBaseTags */
    @org.junit.Test(timeout = 10000)
    public void handlesBaseTags_cf59612_cf60194_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // only listen to the first base href
            java.lang.String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=/4>#</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h, "http://foo/");
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.baseUri();
            org.jsoup.select.Elements anchors = doc.getElementsByTag("a");
            // MethodAssertGenerator build local variable
            Object o_10_0 = anchors.size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = anchors.get(0).baseUri();
            // MethodAssertGenerator build local variable
            Object o_15_0 = anchors.get(1).baseUri();
            // MethodAssertGenerator build local variable
            Object o_18_0 = anchors.get(2).baseUri();
            // MethodAssertGenerator build local variable
            Object o_21_0 = anchors.get(0).absUrl("href");
            // MethodAssertGenerator build local variable
            Object o_24_0 = anchors.get(1).absUrl("href");
            // StatementAdderOnAssert create random local variable
            boolean vc_13894 = false;
            // MethodAssertGenerator build local variable
            Object o_29_0 = vc_13894;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_13893 = new java.lang.String();
            // MethodAssertGenerator build local variable
            Object o_33_0 = vc_13893;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_13890 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_37_0 = vc_13890;
            // AssertGenerator replace invocation
            java.lang.String o_handlesBaseTags_cf59612__33 = // StatementAdderMethod cloned existing statement
vc_13890.unescapeEntities(vc_13893, vc_13894);
            // MethodAssertGenerator build local variable
            Object o_41_0 = o_handlesBaseTags_cf59612__33;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_2141 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_14016 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_13890.unescapeEntities(vc_14016, boolean_vc_2141);
            // MethodAssertGenerator build local variable
            Object o_49_0 = anchors.get(2).absUrl("href");
            org.junit.Assert.fail("handlesBaseTags_cf59612_cf60194 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesBaseWithoutHref */
    @org.junit.Test(timeout = 10000)
    public void handlesBaseWithoutHref_cf63063_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<head><base target='_blank'></head><body><a href=/foo>Test</a></body>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h, "http://example.com/");
            org.jsoup.nodes.Element a = doc.select("a").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = a.attr("href");
            // StatementAdderOnAssert create random local variable
            boolean vc_14576 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_14574 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_14572 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_14572.unescapeEntities(vc_14574, vc_14576);
            // MethodAssertGenerator build local variable
            Object o_17_0 = a.attr("abs:href");
            org.junit.Assert.fail("handlesBaseWithoutHref_cf63063 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesBaseWithoutHref */
    @org.junit.Test(timeout = 10000)
    public void handlesBaseWithoutHref_cf63247() {
        java.lang.String h = "<head><base target='_blank'></head><body><a href=/foo>Test</a></body>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h, "http://example.com/");
        org.jsoup.nodes.Element a = doc.select("a").first();
        org.junit.Assert.assertEquals("/foo", a.attr("href"));
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_14615 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_14615);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesBaseWithoutHref_cf63247__11 = // StatementAdderMethod cloned existing statement
vc_14615.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesBaseWithoutHref_cf63247__11).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesBaseWithoutHref_cf63247__11).getErrors());
        org.junit.Assert.assertEquals("http://example.com/foo", a.attr("abs:href"));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesBaseWithoutHref */
    @org.junit.Test(timeout = 10000)
    public void handlesBaseWithoutHref_cf63066_cf64995_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<head><base target='_blank'></head><body><a href=/foo>Test</a></body>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h, "http://example.com/");
            org.jsoup.nodes.Element a = doc.select("a").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = a.attr("href");
            // StatementAdderOnAssert create random local variable
            boolean vc_14576 = false;
            // MethodAssertGenerator build local variable
            Object o_11_0 = vc_14576;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_2224 = "abs:href";
            // MethodAssertGenerator build local variable
            Object o_15_0 = String_vc_2224;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_14572 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_19_0 = vc_14572;
            // AssertGenerator replace invocation
            java.lang.String o_handlesBaseWithoutHref_cf63066__15 = // StatementAdderMethod cloned existing statement
vc_14572.unescapeEntities(String_vc_2224, vc_14576);
            // MethodAssertGenerator build local variable
            Object o_23_0 = o_handlesBaseWithoutHref_cf63066__15;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_2285 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_15008 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_14572.unescapeEntities(vc_15008, boolean_vc_2285);
            // MethodAssertGenerator build local variable
            Object o_31_0 = a.attr("abs:href");
            org.junit.Assert.fail("handlesBaseWithoutHref_cf63066_cf64995 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesBaseWithoutHref */
    @org.junit.Test(timeout = 10000)
    public void handlesBaseWithoutHref_cf63263_failAssert15_add66087_cf66113_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String h = "<head><base target='_blank'></head><body><a href=/foo>Test</a></body>";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h, "http://example.com/");
                org.jsoup.nodes.Element a = doc.select("a").first();
                // MethodAssertGenerator build local variable
                Object o_7_0 = a.attr("href");
                // MethodAssertGenerator build local variable
                Object o_12_0 = o_7_0;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_14630 = (org.jsoup.parser.Parser)null;
                // StatementAdderOnAssert create random local variable
                boolean vc_15196 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_15194 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                vc_14630.unescapeEntities(vc_15194, vc_15196);
                // MethodAssertGenerator build local variable
                Object o_22_0 = vc_14630;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                vc_14630.getTreeBuilder();
                // StatementAdderMethod cloned existing statement
                vc_14630.getTreeBuilder();
                // MethodAssertGenerator build local variable
                Object o_13_0 = a.attr("abs:href");
                org.junit.Assert.fail("handlesBaseWithoutHref_cf63263 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesBaseWithoutHref_cf63263_failAssert15_add66087_cf66113 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesBlocksInDefinitions */
    @org.junit.Test(timeout = 10000)
    public void handlesBlocksInDefinitions_cf67140() {
        // per the spec, dt and dd are inline, but in practise are block
        java.lang.String h = "<dl><dt><div id=1>Term</div></dt><dd><div id=2>Def</div></dd></dl>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("dt", doc.select("#1").first().parent().tagName());
        org.junit.Assert.assertEquals("dd", doc.select("#2").first().parent().tagName());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_15421 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesBlocksInDefinitions_cf67140__17 = // StatementAdderMethod cloned existing statement
vc_15421.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesBlocksInDefinitions_cf67140__17).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesBlocksInDefinitions_cf67140__17).getErrors());
        org.junit.Assert.assertEquals("<dl><dt><div id=\"1\">Term</div></dt><dd><div id=\"2\">Def</div></dd></dl>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesBlocksInDefinitions */
    @org.junit.Test(timeout = 10000)
    public void handlesBlocksInDefinitions_cf66986_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // per the spec, dt and dd are inline, but in practise are block
            java.lang.String h = "<dl><dt><div id=1>Term</div></dt><dd><div id=2>Def</div></dd></dl>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.select("#1").first().parent().tagName();
            // MethodAssertGenerator build local variable
            Object o_10_0 = doc.select("#2").first().parent().tagName();
            // StatementAdderOnAssert create random local variable
            boolean vc_15382 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_15380 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_15378 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_15378.unescapeEntities(vc_15380, vc_15382);
            // MethodAssertGenerator build local variable
            Object o_23_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesBlocksInDefinitions_cf66986 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCdata */
    @org.junit.Test(timeout = 10000)
    public void handlesCdata_cf70688_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // todo: as this is html namespace, should actually treat as bogus comment, not cdata. keep as cdata for now
            java.lang.String h = "<div id=1><![CDATA[<html>\n<foo><&amp;]]></div>";// the &amp; in there should remain literal
            
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_8_0 = div.text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = div.children().size();
            // StatementAdderOnAssert create random local variable
            int vc_16355 = 1131695242;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_16353 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_16353.setTrackErrors(vc_16355);
            // MethodAssertGenerator build local variable
            Object o_19_0 = div.childNodeSize();
            org.junit.Assert.fail("handlesCdata_cf70688 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCdata */
    @org.junit.Test(timeout = 10000)
    public void handlesCdata_cf70498_failAssert22() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // todo: as this is html namespace, should actually treat as bogus comment, not cdata. keep as cdata for now
            java.lang.String h = "<div id=1><![CDATA[<html>\n<foo><&amp;]]></div>";// the &amp; in there should remain literal
            
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_8_0 = div.text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = div.children().size();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_16306 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_16306.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_17_0 = div.childNodeSize();
            org.junit.Assert.fail("handlesCdata_cf70498 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCdata */
    @org.junit.Test
    public void handlesCdata_literalMutation70485_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // todo: as this is html namespace, should actually treat as bogus comment, not cdata. keep as cdata for now
            java.lang.String h = "|#L+.|se&@>@PdDJZRuE[+ Y1IJO3g)`*pezJf%f0c7JNd";// the &amp; in there should remain literal
            
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_8_0 = div.text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = div.children().size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = div.childNodeSize();
            org.junit.Assert.fail("handlesCdata_literalMutation70485 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCdata */
    @org.junit.Test
    public void handlesCdata_literalMutation70483_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // todo: as this is html namespace, should actually treat as bogus comment, not cdata. keep as cdata for now
            java.lang.String h = "";// the &amp; in there should remain literal
            
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_8_0 = div.text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = div.children().size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = div.childNodeSize();
            org.junit.Assert.fail("handlesCdata_literalMutation70483 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCdata */
    @org.junit.Test(timeout = 10000)
    public void handlesCdata_cf70500_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // todo: as this is html namespace, should actually treat as bogus comment, not cdata. keep as cdata for now
            java.lang.String h = "<div id=1><![CDATA[<html>\n<foo><&amp;]]></div>";// the &amp; in there should remain literal
            
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_8_0 = div.text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = div.children().size();
            // StatementAdderOnAssert create random local variable
            boolean vc_16312 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_16310 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_16308 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_16308.unescapeEntities(vc_16310, vc_16312);
            // MethodAssertGenerator build local variable
            Object o_21_0 = div.childNodeSize();
            org.junit.Assert.fail("handlesCdata_cf70500 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCdata */
    @org.junit.Test(timeout = 10000)
    public void handlesCdata_cf70684() {
        // todo: as this is html namespace, should actually treat as bogus comment, not cdata. keep as cdata for now
        java.lang.String h = "<div id=1><![CDATA[<html>\n<foo><&amp;]]></div>";// the &amp; in there should remain literal
        
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.jsoup.nodes.Element div = doc.getElementById("1");
        org.junit.Assert.assertEquals("<html> <foo><&amp;", div.text());
        org.junit.Assert.assertEquals(0, div.children().size());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_16351 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_16351);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesCdata_cf70684__15 = // StatementAdderMethod cloned existing statement
vc_16351.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesCdata_cf70684__15).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesCdata_cf70684__15).getErrors());
        org.junit.Assert.assertEquals(1, div.childNodeSize());// no elements, one text node
        
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCdata */
    @org.junit.Test(timeout = 10000)
    public void handlesCdata_cf70501_cf70745_failAssert23() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // todo: as this is html namespace, should actually treat as bogus comment, not cdata. keep as cdata for now
            java.lang.String h = "<div id=1><![CDATA[<html>\n<foo><&amp;]]></div>";// the &amp; in there should remain literal
            
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_8_0 = div.text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = div.children().size();
            // StatementAdderOnAssert create random local variable
            boolean vc_16312 = false;
            // MethodAssertGenerator build local variable
            Object o_15_0 = vc_16312;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_16308 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_19_0 = vc_16308;
            // AssertGenerator replace invocation
            java.lang.String o_handlesCdata_cf70501__17 = // StatementAdderMethod cloned existing statement
vc_16308.unescapeEntities(h, vc_16312);
            // MethodAssertGenerator build local variable
            Object o_23_0 = o_handlesCdata_cf70501__17;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_2488 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_16372 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_16308.unescapeEntities(vc_16372, boolean_vc_2488);
            // MethodAssertGenerator build local variable
            Object o_31_0 = div.childNodeSize();
            org.junit.Assert.fail("handlesCdata_cf70501_cf70745 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCommentsInTable */
    @org.junit.Test(timeout = 10000)
    public void handlesCommentsInTable_cf73579_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<table><tr><td>text</td><!-- Comment --></tr></table>";
            org.jsoup.nodes.Document node = org.jsoup.Jsoup.parseBodyFragment(html);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_16926 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_16926.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(node.outerHtml());
            org.junit.Assert.fail("handlesCommentsInTable_cf73579 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCommentsInTable */
    @org.junit.Test(timeout = 10000)
    public void handlesCommentsInTable_cf73749() {
        java.lang.String html = "<table><tr><td>text</td><!-- Comment --></tr></table>";
        org.jsoup.nodes.Document node = org.jsoup.Jsoup.parseBodyFragment(html);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_16984 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesCommentsInTable_cf73749__6 = // StatementAdderMethod cloned existing statement
vc_16984.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesCommentsInTable_cf73749__6).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesCommentsInTable_cf73749__6).getErrors());
        org.junit.Assert.assertEquals("<html><head></head><body><table><tbody><tr><td>text</td><!-- Comment --></tr></tbody></table></body></html>", org.jsoup.TextUtil.stripNewlines(node.outerHtml()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCommentsInTable */
    @org.junit.Test(timeout = 10000)
    public void handlesCommentsInTable_cf73581_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<table><tr><td>text</td><!-- Comment --></tr></table>";
            org.jsoup.nodes.Document node = org.jsoup.Jsoup.parseBodyFragment(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_16932 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_16930 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_16928 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_16928.unescapeEntities(vc_16930, vc_16932);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(node.outerHtml());
            org.junit.Assert.fail("handlesCommentsInTable_cf73581 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCommentsInTable */
    @org.junit.Test(timeout = 10000)
    public void handlesCommentsInTable_cf73585() {
        java.lang.String html = "<table><tr><td>text</td><!-- Comment --></tr></table>";
        org.jsoup.nodes.Document node = org.jsoup.Jsoup.parseBodyFragment(html);
        // StatementAdderOnAssert create random local variable
        boolean vc_16932 = false;
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_16931 = new java.lang.String();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_16928 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_handlesCommentsInTable_cf73585__10 = // StatementAdderMethod cloned existing statement
vc_16928.unescapeEntities(vc_16931, vc_16932);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesCommentsInTable_cf73585__10, "");
        org.junit.Assert.assertEquals("<html><head></head><body><table><tbody><tr><td>text</td><!-- Comment --></tr></tbody></table></body></html>", org.jsoup.TextUtil.stripNewlines(node.outerHtml()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCommentsInTable */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCommentsInTable_cf73585 */
    @org.junit.Test(timeout = 10000)
    public void handlesCommentsInTable_cf73585_cf74396_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<table><tr><td>text</td><!-- Comment --></tr></table>";
            org.jsoup.nodes.Document node = org.jsoup.Jsoup.parseBodyFragment(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_16932 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_16931 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_16928 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesCommentsInTable_cf73585__10 = // StatementAdderMethod cloned existing statement
vc_16928.unescapeEntities(vc_16931, vc_16932);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_handlesCommentsInTable_cf73585__10;
            // StatementAdderOnAssert create random local variable
            boolean vc_17118 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_17116 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_17114 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_17114.unescapeEntities(vc_17116, vc_17118);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(node.outerHtml());
            org.junit.Assert.fail("handlesCommentsInTable_cf73585_cf74396 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCommentsInTable */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCommentsInTable_cf73591 */
    @org.junit.Test(timeout = 10000)
    public void handlesCommentsInTable_cf73591_failAssert12_literalMutation75251() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<table><tr><td>text</td><!-- Comment --></r></table>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<table><tr><td>text</td><!-- Comment --></r></table>");
            org.jsoup.nodes.Document node = org.jsoup.Jsoup.parseBodyFragment(html);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_16933 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_16933.getErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(node.outerHtml());
            org.junit.Assert.fail("handlesCommentsInTable_cf73591 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCommentsInTable */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCommentsInTable_cf73581 */
    @org.junit.Test(timeout = 10000)
    public void handlesCommentsInTable_cf73581_failAssert11_literalMutation75242() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<table><tr><td>text</td><!-- Comment --></tr></tabNle>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<table><tr><td>text</td><!-- Comment --></tr></tabNle>");
            org.jsoup.nodes.Document node = org.jsoup.Jsoup.parseBodyFragment(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_16932 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_16930 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_16928 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_16928.unescapeEntities(vc_16930, vc_16932);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(node.outerHtml());
            org.junit.Assert.fail("handlesCommentsInTable_cf73581 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCommentsInTable */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCommentsInTable_cf73585 */
    @org.junit.Test(timeout = 10000)
    public void handlesCommentsInTable_cf73585_cf74396_failAssert13_literalMutation75898() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<table><tr><td>text</td><!-- Comment --></Atr></table>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<table><tr><td>text</td><!-- Comment --></Atr></table>");
            org.jsoup.nodes.Document node = org.jsoup.Jsoup.parseBodyFragment(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_16932 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_16931 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_16928 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesCommentsInTable_cf73585__10 = // StatementAdderMethod cloned existing statement
vc_16928.unescapeEntities(vc_16931, vc_16932);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_handlesCommentsInTable_cf73585__10;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, "");
            // StatementAdderOnAssert create random local variable
            boolean vc_17118 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(vc_17118);
            // StatementAdderOnAssert create null value
            java.lang.String vc_17116 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_17116);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_17114 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_17114);
            // StatementAdderMethod cloned existing statement
            vc_17114.unescapeEntities(vc_17116, vc_17118);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(node.outerHtml());
            org.junit.Assert.fail("handlesCommentsInTable_cf73585_cf74396 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCommentsInTable */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesCommentsInTable_cf73584 */
    @org.junit.Test(timeout = 10000)
    public void handlesCommentsInTable_cf73584_cf74103_failAssert18_literalMutation75931() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<tabl><tr><td>text</td><!-- Comment --></tr></table>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<tabl><tr><td>text</td><!-- Comment --></tr></table>");
            org.jsoup.nodes.Document node = org.jsoup.Jsoup.parseBodyFragment(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_16932 = false;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_2571 = "<html><head></head><body><table><tbody><tr><td>text</td><!-- Comment --></tr></tbody></table></body></html>";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_16928 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesCommentsInTable_cf73584__10 = // StatementAdderMethod cloned existing statement
vc_16928.unescapeEntities(String_vc_2571, vc_16932);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_handlesCommentsInTable_cf73584__10;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, "<html><head></head><body><table><tbody><tr><td>text</td><!-- Comment --></tr></tbody></table></body></html>");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_2590 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(boolean_vc_2590);
            // StatementAdderOnAssert create null value
            java.lang.String vc_17054 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_17054);
            // StatementAdderMethod cloned existing statement
            vc_16928.unescapeEntities(vc_17054, boolean_vc_2590);
            // MethodAssertGenerator build local variable
            Object o_20_0 = org.jsoup.TextUtil.stripNewlines(node.outerHtml());
            org.junit.Assert.fail("handlesCommentsInTable_cf73584_cf74103 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesControlCodeInAttributeName */
    @org.junit.Test(timeout = 10000)
    public void handlesControlCodeInAttributeName_cf75959_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p><a =foo>One</a><a/=bar><a foo=bar>Two</a></p>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_17546 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_17546.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.body().html();
            org.junit.Assert.fail("handlesControlCodeInAttributeName_cf75959 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesControlCodeInAttributeName */
    @org.junit.Test(timeout = 10000)
    public void handlesControlCodeInAttributeName_cf75961_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p><a =foo>One</a><a/=bar><a foo=bar>Two</a></p>");
            // StatementAdderOnAssert create random local variable
            boolean vc_17552 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_17550 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_17548 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_17548.unescapeEntities(vc_17550, vc_17552);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.body().html();
            org.junit.Assert.fail("handlesControlCodeInAttributeName_cf75961 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesControlCodeInAttributeName */
    @org.junit.Test(timeout = 10000)
    public void handlesControlCodeInAttributeName_cf76085() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p><a =foo>One</a><a/=bar><a foo=bar>Two</a></p>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_17591 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesControlCodeInAttributeName_cf76085__5 = // StatementAdderMethod cloned existing statement
vc_17591.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesControlCodeInAttributeName_cf76085__5).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesControlCodeInAttributeName_cf76085__5).isTrackErrors());
        org.junit.Assert.assertEquals("<p><a>One</a><a></a><a foo=\"bar\">Two</a></p>", doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesControlCodeInAttributeName */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesControlCodeInAttributeName_cf76097 */
    @org.junit.Test(timeout = 10000)
    public void handlesControlCodeInAttributeName_cf76097_cf77247_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p><a =foo>One</a><a/=bar><a foo=bar>Two</a></p>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_17604 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_handlesControlCodeInAttributeName_cf76097__5 = // StatementAdderMethod cloned existing statement
vc_17604.xmlParser();
            // MethodAssertGenerator build local variable
            Object o_7_0 = ((org.jsoup.parser.Parser)o_handlesControlCodeInAttributeName_cf76097__5).isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = ((org.jsoup.parser.Parser)o_handlesControlCodeInAttributeName_cf76097__5).getErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_17862 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_17860 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_17858 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_17858.unescapeEntities(vc_17860, vc_17862);
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.body().html();
            org.junit.Assert.fail("handlesControlCodeInAttributeName_cf76097_cf77247 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesControlCodeInAttributeName */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesControlCodeInAttributeName_cf75962 */
    @org.junit.Test(timeout = 10000)
    public void handlesControlCodeInAttributeName_cf75962_cf76394_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p><a =foo>One</a><a/=bar><a foo=bar>Two</a></p>");
            // StatementAdderOnAssert create random local variable
            boolean vc_17552 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_17548 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesControlCodeInAttributeName_cf75962__10 = // StatementAdderMethod cloned existing statement
vc_17548.unescapeEntities(html, vc_17552);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_handlesControlCodeInAttributeName_cf75962__10;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_17664 = (org.jsoup.parser.ParseSettings)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_17662 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_17662.settings(vc_17664);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.body().html();
            org.junit.Assert.fail("handlesControlCodeInAttributeName_cf75962_cf76394 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesControlCodeInAttributeName */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesControlCodeInAttributeName_cf75962 */
    @org.junit.Test(timeout = 10000)
    public void handlesControlCodeInAttributeName_cf75962_cf76116_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p><a =foo>One</a><a/=bar><a foo=bar>Two</a></p>");
            // StatementAdderOnAssert create random local variable
            boolean vc_17552 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_17548 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesControlCodeInAttributeName_cf75962__10 = // StatementAdderMethod cloned existing statement
vc_17548.unescapeEntities(html, vc_17552);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_handlesControlCodeInAttributeName_cf75962__10;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_2673 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_17612 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_17610 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_17610.unescapeEntities(vc_17612, boolean_vc_2673);
            // MethodAssertGenerator build local variable
            Object o_22_0 = doc.body().html();
            org.junit.Assert.fail("handlesControlCodeInAttributeName_cf75962_cf76116 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesDataOnlyTags */
    @org.junit.Test
    public void handlesDataOnlyTags_literalMutation77525_failAssert24() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String t = "";
            java.util.List<org.jsoup.nodes.Element> tels = org.jsoup.Jsoup.parse(t).getElementsByTag("style");
            // MethodAssertGenerator build local variable
            Object o_5_0 = tels.get(0).data();
            // MethodAssertGenerator build local variable
            Object o_8_0 = tels.get(0).text();
            java.lang.String s = "<p>Hello</p><script>obj.insert(\'<a rel=\"none\" />\');\ni++;</script><p>There</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(s);
            // MethodAssertGenerator build local variable
            Object o_14_0 = doc.text();
            // MethodAssertGenerator build local variable
            Object o_16_0 = doc.data();
            org.junit.Assert.fail("handlesDataOnlyTags_literalMutation77525 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesDataOnlyTags */
    @org.junit.Test(timeout = 10000)
    public void handlesDataOnlyTags_cf77554_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String t = "<style>font-family: bold</style>";
            java.util.List<org.jsoup.nodes.Element> tels = org.jsoup.Jsoup.parse(t).getElementsByTag("style");
            // MethodAssertGenerator build local variable
            Object o_5_0 = tels.get(0).data();
            // MethodAssertGenerator build local variable
            Object o_8_0 = tels.get(0).text();
            java.lang.String s = "<p>Hello</p><script>obj.insert(\'<a rel=\"none\" />\');\ni++;</script><p>There</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(s);
            // MethodAssertGenerator build local variable
            Object o_14_0 = doc.text();
            // StatementAdderOnAssert create random local variable
            boolean vc_17924 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_17922 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_17920 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_17920.unescapeEntities(vc_17922, vc_17924);
            // MethodAssertGenerator build local variable
            Object o_24_0 = doc.data();
            org.junit.Assert.fail("handlesDataOnlyTags_cf77554 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesDataOnlyTags */
    @org.junit.Test
    public void handlesDataOnlyTags_literalMutation77526_failAssert16() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String t = ";|?Lv{HaXF^Zt-p4Y7_?lUXan!.G&RoX";
            java.util.List<org.jsoup.nodes.Element> tels = org.jsoup.Jsoup.parse(t).getElementsByTag("style");
            // MethodAssertGenerator build local variable
            Object o_5_0 = tels.get(0).data();
            // MethodAssertGenerator build local variable
            Object o_8_0 = tels.get(0).text();
            java.lang.String s = "<p>Hello</p><script>obj.insert(\'<a rel=\"none\" />\');\ni++;</script><p>There</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(s);
            // MethodAssertGenerator build local variable
            Object o_14_0 = doc.text();
            // MethodAssertGenerator build local variable
            Object o_16_0 = doc.data();
            org.junit.Assert.fail("handlesDataOnlyTags_literalMutation77526 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesDataOnlyTags */
    @org.junit.Test(timeout = 10000)
    public void handlesDataOnlyTags_cf77736_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String t = "<style>font-family: bold</style>";
            java.util.List<org.jsoup.nodes.Element> tels = org.jsoup.Jsoup.parse(t).getElementsByTag("style");
            // MethodAssertGenerator build local variable
            Object o_5_0 = tels.get(0).data();
            // MethodAssertGenerator build local variable
            Object o_8_0 = tels.get(0).text();
            java.lang.String s = "<p>Hello</p><script>obj.insert(\'<a rel=\"none\" />\');\ni++;</script><p>There</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(s);
            // MethodAssertGenerator build local variable
            Object o_14_0 = doc.text();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_17961 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_17961.settings();
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.data();
            org.junit.Assert.fail("handlesDataOnlyTags_cf77736 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesDataOnlyTags */
    @org.junit.Test(timeout = 10000)
    public void handlesDataOnlyTags_cf77738() {
        java.lang.String t = "<style>font-family: bold</style>";
        java.util.List<org.jsoup.nodes.Element> tels = org.jsoup.Jsoup.parse(t).getElementsByTag("style");
        org.junit.Assert.assertEquals("font-family: bold", tels.get(0).data());
        org.junit.Assert.assertEquals("", tels.get(0).text());
        java.lang.String s = "<p>Hello</p><script>obj.insert(\'<a rel=\"none\" />\');\ni++;</script><p>There</p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(s);
        org.junit.Assert.assertEquals("Hello There", doc.text());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_17963 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_17963);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesDataOnlyTags_cf77738__18 = // StatementAdderMethod cloned existing statement
vc_17963.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesDataOnlyTags_cf77738__18).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesDataOnlyTags_cf77738__18).getErrors());
        org.junit.Assert.assertEquals("obj.insert(\'<a rel=\"none\" />\');\ni++;", doc.data());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesDataOnlyTags */
    @org.junit.Test(timeout = 10000)
    public void handlesDataOnlyTags_cf77750_failAssert19_literalMutation79623_cf82323_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String t = "<style>fnt-family: bold</style>";
                // MethodAssertGenerator build local variable
                Object o_4_0 = t;
                java.util.List<org.jsoup.nodes.Element> tels = org.jsoup.Jsoup.parse(t).getElementsByTag("style");
                // MethodAssertGenerator build local variable
                Object o_5_0 = tels.get(0).data();
                // MethodAssertGenerator build local variable
                Object o_13_0 = o_5_0;
                // MethodAssertGenerator build local variable
                Object o_8_0 = tels.get(0).text();
                // MethodAssertGenerator build local variable
                Object o_19_0 = o_8_0;
                java.lang.String s = "<p>Hello</p><script>obj.insert(\'<a rel=\"none\" />\');\ni++;</script><p>There</p>";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(s);
                // MethodAssertGenerator build local variable
                Object o_14_0 = doc.text();
                // MethodAssertGenerator build local variable
                Object o_27_0 = o_14_0;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.ParseSettings vc_17974 = (org.jsoup.parser.ParseSettings)null;
                // MethodAssertGenerator build local variable
                Object o_31_0 = vc_17974;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_17972 = (org.jsoup.parser.Parser)null;
                // StatementAdderOnAssert create random local variable
                boolean vc_18916 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_18914 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                vc_17972.unescapeEntities(vc_18914, vc_18916);
                // MethodAssertGenerator build local variable
                Object o_41_0 = vc_17972;
                // StatementAdderMethod cloned existing statement
                vc_17972.settings(vc_17974);
                // MethodAssertGenerator build local variable
                Object o_22_0 = doc.data();
                org.junit.Assert.fail("handlesDataOnlyTags_cf77750 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesDataOnlyTags_cf77750_failAssert19_literalMutation79623_cf82323 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesEscapedData */
    @org.junit.Test(timeout = 10000)
    public void handlesEscapedData_cf83043() {
        java.lang.String html = "<div title='Surf &amp; Turf'>Reef &amp; Beef</div>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element div = doc.getElementsByTag("div").get(0);
        org.junit.Assert.assertEquals("Surf & Turf", div.attr("title"));
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_19017 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_19017);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesEscapedData_cf83043__11 = // StatementAdderMethod cloned existing statement
vc_19017.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesEscapedData_cf83043__11).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesEscapedData_cf83043__11).isTrackErrors());
        org.junit.Assert.assertEquals("Reef & Beef", div.text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesEscapedData */
    @org.junit.Test(timeout = 10000)
    public void handlesEscapedData_cf82859_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<div title='Surf &amp; Turf'>Reef &amp; Beef</div>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element div = doc.getElementsByTag("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.attr("title");
            // StatementAdderOnAssert create random local variable
            boolean vc_18978 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_18976 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_18974 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_18974.unescapeEntities(vc_18976, vc_18978);
            // MethodAssertGenerator build local variable
            Object o_17_0 = div.text();
            org.junit.Assert.fail("handlesEscapedData_cf82859 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesEscapedData */
    @org.junit.Test
    public void handlesEscapedData_literalMutation82846_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "_%X[t_.x|)UXJr/,2rQqMnp]tD+K;{qBvmLZ&#U/D%(V*ubZ]5";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element div = doc.getElementsByTag("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.attr("title");
            // MethodAssertGenerator build local variable
            Object o_9_0 = div.text();
            org.junit.Assert.fail("handlesEscapedData_literalMutation82846 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesEscapedData */
    @org.junit.Test(timeout = 10000)
    public void handlesEscapedData_cf83041_failAssert8_literalMutation84469() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<div title=&\'Surf &amp; Turf\'>Reef &amp; Beef</div>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<div title=&\'Surf &amp; Turf\'>Reef &amp; Beef</div>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element div = doc.getElementsByTag("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.attr("title");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_7_0, "&\'Surf");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_19015 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_19015);
            // StatementAdderMethod cloned existing statement
            vc_19015.settings();
            // MethodAssertGenerator build local variable
            Object o_13_0 = div.text();
            org.junit.Assert.fail("handlesEscapedData_cf83041 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesEscapedData */
    @org.junit.Test(timeout = 10000)
    public void handlesEscapedData_cf82860_cf83778_failAssert23() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<div title='Surf &amp; Turf'>Reef &amp; Beef</div>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element div = doc.getElementsByTag("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.attr("title");
            // StatementAdderOnAssert create random local variable
            boolean vc_18978 = true;
            // MethodAssertGenerator build local variable
            Object o_11_0 = vc_18978;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_18974 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_15_0 = vc_18974;
            // AssertGenerator replace invocation
            java.lang.String o_handlesEscapedData_cf82860__13 = // StatementAdderMethod cloned existing statement
vc_18974.unescapeEntities(html, vc_18978);
            // MethodAssertGenerator build local variable
            Object o_19_0 = o_handlesEscapedData_cf82860__13;
            // StatementAdderOnAssert create random local variable
            boolean vc_19164 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_19162 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_19160 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_19160.unescapeEntities(vc_19162, vc_19164);
            // MethodAssertGenerator build local variable
            Object o_29_0 = div.text();
            org.junit.Assert.fail("handlesEscapedData_cf82860_cf83778 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesEscapedData */
    @org.junit.Test(timeout = 10000)
    public void handlesEscapedData_cf83041_failAssert8_literalMutation84469_cf86314_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "<div title=&\'Surf &amp; Turf\'>Reef &amp; Beef</div>";
                // MethodAssertGenerator build local variable
                Object o_4_0 = html;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element div = doc.getElementsByTag("div").get(0);
                // MethodAssertGenerator build local variable
                Object o_7_0 = div.attr("title");
                // MethodAssertGenerator build local variable
                Object o_14_0 = o_7_0;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_19015 = (org.jsoup.parser.Parser)null;
                // StatementAdderOnAssert create random local variable
                boolean vc_19660 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_19658 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_19656 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_19656.unescapeEntities(vc_19658, vc_19660);
                // MethodAssertGenerator build local variable
                Object o_26_0 = vc_19015;
                // StatementAdderMethod cloned existing statement
                vc_19015.settings();
                // MethodAssertGenerator build local variable
                Object o_13_0 = div.text();
                org.junit.Assert.fail("handlesEscapedData_cf83041 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesEscapedData_cf83041_failAssert8_literalMutation84469_cf86314 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesEscapedScript */
    @org.junit.Test(timeout = 10000)
    public void handlesEscapedScript_cf87213() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script><!-- one <script>Blah</script> --></script>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_19823 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesEscapedScript_cf87213__5 = // StatementAdderMethod cloned existing statement
vc_19823.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesEscapedScript_cf87213__5).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesEscapedScript_cf87213__5).isTrackErrors());
        org.junit.Assert.assertEquals("<!-- one <script>Blah</script> -->", doc.select("script").first().data());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesEscapedScript */
    @org.junit.Test(timeout = 10000)
    public void handlesEscapedScript_cf87089_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script><!-- one <script>Blah</script> --></script>");
            // StatementAdderOnAssert create random local variable
            boolean vc_19784 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_19782 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_19780 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_19780.unescapeEntities(vc_19782, vc_19784);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.select("script").first().data();
            org.junit.Assert.fail("handlesEscapedScript_cf87089 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesEscapedScript */
    @org.junit.Test(timeout = 10000)
    public void handlesEscapedScript_cf87087_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script><!-- one <script>Blah</script> --></script>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_19778 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_19778.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("script").first().data();
            org.junit.Assert.fail("handlesEscapedScript_cf87087 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesEscapedScript */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesEscapedScript_cf87092 */
    @org.junit.Test(timeout = 10000)
    public void handlesEscapedScript_cf87092_cf87856_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script><!-- one <script>Blah</script> --></script>");
            // StatementAdderOnAssert create random local variable
            boolean vc_19784 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_19783 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_19780 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesEscapedScript_cf87092__9 = // StatementAdderMethod cloned existing statement
vc_19780.unescapeEntities(vc_19783, vc_19784);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_handlesEscapedScript_cf87092__9;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_3028 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_19968 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_19966 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_19966.unescapeEntities(vc_19968, boolean_vc_3028);
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.select("script").first().data();
            org.junit.Assert.fail("handlesEscapedScript_cf87092_cf87856 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesEscapedScript */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesEscapedScript_cf87090 */
    @org.junit.Test(timeout = 10000)
    public void handlesEscapedScript_cf87090_cf87243_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script><!-- one <script>Blah</script> --></script>");
            // StatementAdderOnAssert create random local variable
            boolean vc_19784 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_19780 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesEscapedScript_cf87090__10 = // StatementAdderMethod cloned existing statement
vc_19780.unescapeEntities(html, vc_19784);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_handlesEscapedScript_cf87090__10;
            // StatementAdderOnAssert create null value
            java.lang.String vc_19844 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_19842 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_19842.unescapeEntities(vc_19844, vc_19784);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.select("script").first().data();
            org.junit.Assert.fail("handlesEscapedScript_cf87090_cf87243 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesFrames */
    @org.junit.Test(timeout = 10000)
    public void handlesFrames_cf88836() {
        java.lang.String h = "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_20195 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesFrames_cf88836__6 = // StatementAdderMethod cloned existing statement
vc_20195.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesFrames_cf88836__6).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesFrames_cf88836__6).isTrackErrors());
        org.junit.Assert.assertEquals("<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\"><frame src=\"foo\"></frameset></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
        // no body auto vivification
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesFrames */
    @org.junit.Test(timeout = 10000)
    public void handlesFrames_cf88680_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_20150 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_20150.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // no body auto vivification
            org.junit.Assert.fail("handlesFrames_cf88680 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesFrames */
    @org.junit.Test(timeout = 10000)
    public void handlesFrames_cf88682_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_20156 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_20154 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_20152 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_20152.unescapeEntities(vc_20154, vc_20156);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // no body auto vivification
            org.junit.Assert.fail("handlesFrames_cf88682 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesFrames */
    @org.junit.Test(timeout = 10000)
    public void handlesFrames_cf88686() {
        java.lang.String h = "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create random local variable
        boolean vc_20156 = false;
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_20155 = new java.lang.String();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_20152 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_handlesFrames_cf88686__10 = // StatementAdderMethod cloned existing statement
vc_20152.unescapeEntities(vc_20155, vc_20156);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesFrames_cf88686__10, "");
        org.junit.Assert.assertEquals("<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\"><frame src=\"foo\"></frameset></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
        // no body auto vivification
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesFrames */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesFrames_cf88686 */
    @org.junit.Test(timeout = 10000)
    public void handlesFrames_cf88686_cf89822_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_20156 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_20155 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_20152 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesFrames_cf88686__10 = // StatementAdderMethod cloned existing statement
vc_20152.unescapeEntities(vc_20155, vc_20156);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_handlesFrames_cf88686__10;
            // StatementAdderOnAssert create random local variable
            boolean vc_20404 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_20402 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_20152.unescapeEntities(vc_20402, vc_20404);
            // MethodAssertGenerator build local variable
            Object o_20_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // no body auto vivification
            org.junit.Assert.fail("handlesFrames_cf88686_cf89822 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesFrames */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesFrames_cf88692 */
    @org.junit.Test(timeout = 10000)
    public void handlesFrames_cf88692_failAssert12_literalMutation90662() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><head><script></script><nos0ript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<html><head><script></script><nos0ript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_20157 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_20157.getErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // no body auto vivification
            org.junit.Assert.fail("handlesFrames_cf88692 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesFrames */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesFrames_cf88683 */
    @org.junit.Test(timeout = 10000)
    public void handlesFrames_cf88683_cf88895_failAssert22_literalMutation91337() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><head><scrip&></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<html><head><scrip&></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_20156 = false;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_20152 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesFrames_cf88683__8 = // StatementAdderMethod cloned existing statement
vc_20152.unescapeEntities(h, vc_20156);
            // MethodAssertGenerator build local variable
            Object o_10_0 = o_handlesFrames_cf88683__8;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_10_0, "<html><head><scrip&></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_3064 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(boolean_vc_3064);
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderMethod cloned existing statement
            vc_20152.unescapeEntities(out, boolean_vc_3064);
            // MethodAssertGenerator build local variable
            Object o_20_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // no body auto vivification
            org.junit.Assert.fail("handlesFrames_cf88683_cf88895 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesFrames */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesFrames_cf88692 */
    @org.junit.Test(timeout = 10000)
    public void handlesFrames_cf88692_failAssert12_literalMutation90661_cf91109_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String h = "(kFIV<yU9}Kg+Y{j((8Md(.9U. jYQDtXgV|}N4#46Ln-Kk5J[v>4w@q<oq]MtN+ZB50q]YIJ>/6LKEfhHK _P5NuXuZ:*`m+Z;,P;Oi@V,P,Oi&`d){!6G(Go|";
                // StatementAdderOnAssert create random local variable
                boolean vc_20776 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_20774 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_20772 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_20772.unescapeEntities(vc_20774, vc_20776);
                // MethodAssertGenerator build local variable
                Object o_12_0 = h;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_20157 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_20157.getErrors();
                // MethodAssertGenerator build local variable
                Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
                // no body auto vivification
                org.junit.Assert.fail("handlesFrames_cf88692 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesFrames_cf88692_failAssert12_literalMutation90661_cf91109 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesFrames */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesFrames_cf88685 */
    @org.junit.Test(timeout = 10000)
    public void handlesFrames_cf88685_cf89499_failAssert0_literalMutation91234() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><head><scrpt></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<html><head><scrpt></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_20156 = false;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_3055 = "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_20152 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesFrames_cf88685__10 = // StatementAdderMethod cloned existing statement
vc_20152.unescapeEntities(String_vc_3055, vc_20156);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_handlesFrames_cf88685__10;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_3084 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(boolean_vc_3084);
            // StatementAdderOnAssert create null value
            java.lang.String vc_20340 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_20340);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_20338 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_20338);
            // StatementAdderMethod cloned existing statement
            vc_20338.unescapeEntities(vc_20340, boolean_vc_3084);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // no body auto vivification
            org.junit.Assert.fail("handlesFrames_cf88685_cf89499 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesFrames */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesFrames_cf88683 */
    @org.junit.Test(timeout = 10000)
    public void handlesFrames_cf88683_cf88895_failAssert22_literalMutation91339() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><fram src=foo></frameset></html>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><fram src=foo></frameset></html>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_20156 = false;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_20152 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesFrames_cf88683__8 = // StatementAdderMethod cloned existing statement
vc_20152.unescapeEntities(h, vc_20156);
            // MethodAssertGenerator build local variable
            Object o_10_0 = o_handlesFrames_cf88683__8;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_10_0, "<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><fram src=foo></frameset></html>");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_3064 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(boolean_vc_3064);
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderMethod cloned existing statement
            vc_20152.unescapeEntities(out, boolean_vc_3064);
            // MethodAssertGenerator build local variable
            Object o_20_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // no body auto vivification
            org.junit.Assert.fail("handlesFrames_cf88683_cf88895 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesImplicitCaptionClose */
    @org.junit.Test(timeout = 10000)
    public void handlesImplicitCaptionClose_cf91386_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><caption>A caption<td>One<td>Two");
            // StatementAdderOnAssert create random local variable
            boolean vc_20838 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_20836 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_20834 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_20834.unescapeEntities(vc_20836, vc_20838);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesImplicitCaptionClose_cf91386 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesImplicitCaptionClose */
    @org.junit.Test(timeout = 10000)
    public void handlesImplicitCaptionClose_cf91510() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><caption>A caption<td>One<td>Two");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_20877 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesImplicitCaptionClose_cf91510__5 = // StatementAdderMethod cloned existing statement
vc_20877.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesImplicitCaptionClose_cf91510__5).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesImplicitCaptionClose_cf91510__5).isTrackErrors());
        org.junit.Assert.assertEquals("<table><caption>A caption</caption><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesImplicitCaptionClose */
    @org.junit.Test(timeout = 10000)
    public void handlesImplicitCaptionClose_cf91384_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><caption>A caption<td>One<td>Two");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_20832 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_20832.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesImplicitCaptionClose_cf91384 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesImplicitCaptionClose */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesImplicitCaptionClose_cf91387 */
    @org.junit.Test(timeout = 10000)
    public void handlesImplicitCaptionClose_cf91387_cf91813_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><caption>A caption<td>One<td>Two");
            // StatementAdderOnAssert create random local variable
            boolean vc_20838 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_20834 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesImplicitCaptionClose_cf91387__11 = // StatementAdderMethod cloned existing statement
vc_20834.unescapeEntities(out, vc_20838);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_handlesImplicitCaptionClose_cf91387__11;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_20946 = (org.jsoup.parser.TreeBuilder)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_20944 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_20944.setTreeBuilder(vc_20946);
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesImplicitCaptionClose_cf91387_cf91813 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesImplicitCaptionClose */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesImplicitCaptionClose_cf91389 */
    @org.junit.Test(timeout = 10000)
    public void handlesImplicitCaptionClose_cf91389_cf92154_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><caption>A caption<td>One<td>Two");
            // StatementAdderOnAssert create random local variable
            boolean vc_20838 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_20837 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_20834 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesImplicitCaptionClose_cf91389__9 = // StatementAdderMethod cloned existing statement
vc_20834.unescapeEntities(vc_20837, vc_20838);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_handlesImplicitCaptionClose_cf91389__9;
            // StatementAdderOnAssert create random local variable
            boolean vc_21024 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_21022 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_21020 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_21020.unescapeEntities(vc_21022, vc_21024);
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesImplicitCaptionClose_cf91389_cf92154 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesImplicitCaptionClose */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesImplicitCaptionClose_cf91387 */
    @org.junit.Test(timeout = 10000)
    public void handlesImplicitCaptionClose_cf91387_cf91541_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><caption>A caption<td>One<td>Two");
            // StatementAdderOnAssert create random local variable
            boolean vc_20838 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_20834 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesImplicitCaptionClose_cf91387__11 = // StatementAdderMethod cloned existing statement
vc_20834.unescapeEntities(out, vc_20838);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_handlesImplicitCaptionClose_cf91387__11;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_3166 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_20898 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_20896 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_20896.unescapeEntities(vc_20898, boolean_vc_3166);
            // MethodAssertGenerator build local variable
            Object o_23_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesImplicitCaptionClose_cf91387_cf91541 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesInputInTable */
    @org.junit.Test(timeout = 10000)
    public void handlesInputInTable_cf92993_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<body>\n" + (((("<input type=\"hidden\" name=\"a\" value=\"\">\n" + "<table>\n") + "<input type=\"hidden\" name=\"b\" value=\"\" />\n") + "</table>\n") + "</body>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.select("table input").size();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_21204 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_21204.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.select("input").size();
            org.junit.Assert.fail("handlesInputInTable_cf92993 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesInputInTable */
    @org.junit.Test(timeout = 10000)
    public void handlesInputInTable_cf92995_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<body>\n" + (((("<input type=\"hidden\" name=\"a\" value=\"\">\n" + "<table>\n") + "<input type=\"hidden\" name=\"b\" value=\"\" />\n") + "</table>\n") + "</body>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.select("table input").size();
            // StatementAdderOnAssert create random local variable
            boolean vc_21210 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_21208 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_21206 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_21206.unescapeEntities(vc_21208, vc_21210);
            // MethodAssertGenerator build local variable
            Object o_15_0 = doc.select("input").size();
            org.junit.Assert.fail("handlesInputInTable_cf92995 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesInputInTable */
    @org.junit.Test(timeout = 10000)
    public void handlesInputInTable_cf93149() {
        java.lang.String h = "<body>\n" + (((("<input type=\"hidden\" name=\"a\" value=\"\">\n" + "<table>\n") + "<input type=\"hidden\" name=\"b\" value=\"\" />\n") + "</table>\n") + "</body>");
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals(1, doc.select("table input").size());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_21249 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_21249);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesInputInTable_cf93149__9 = // StatementAdderMethod cloned existing statement
vc_21249.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesInputInTable_cf93149__9).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesInputInTable_cf93149__9).getErrors());
        org.junit.Assert.assertEquals(2, doc.select("input").size());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesInputInTable */
    @org.junit.Test(timeout = 10000)
    public void handlesInputInTable_cf92997() {
        java.lang.String h = "<body>\n" + (((("<input type=\"hidden\" name=\"a\" value=\"\">\n" + "<table>\n") + "<input type=\"hidden\" name=\"b\" value=\"\" />\n") + "</table>\n") + "</body>");
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals(1, doc.select("table input").size());
        // StatementAdderOnAssert create random local variable
        boolean vc_21210 = true;
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(vc_21210);
        // StatementAddOnAssert local variable replacement
        java.lang.String rendered = doc.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(rendered, "<html>\n <head></head>\n <body> \n  <input type=\"hidden\" name=\"a\" value=\"\"> \n  <table> \n   <input type=\"hidden\" name=\"b\" value=\"\"> \n  </table> \n </body>\n</html>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_21206 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_21206);
        // AssertGenerator replace invocation
        java.lang.String o_handlesInputInTable_cf92997__14 = // StatementAdderMethod cloned existing statement
vc_21206.unescapeEntities(rendered, vc_21210);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesInputInTable_cf92997__14, "<html>\n <head></head>\n <body> \n  <input type=\"hidden\" name=\"a\" value=\"\"> \n  <table> \n   <input type=\"hidden\" name=\"b\" value=\"\"> \n  </table> \n </body>\n</html>");
        org.junit.Assert.assertEquals(2, doc.select("input").size());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesInputInTable */
    @org.junit.Test(timeout = 10000)
    public void handlesInputInTable_cf92995_failAssert15_literalMutation99076() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<body>\n" + (((("<input type=\"hidden\" name=\"a\" value=\"\">\n" + "") + "<input type=\"hidden\" name=\"b\" value=\"\" />\n") + "</table>\n") + "</body>");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<body>\n<input type=\"hidden\" name=\"a\" value=\"\">\n<input type=\"hidden\" name=\"b\" value=\"\" />\n</table>\n</body>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.select("table input").size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_4_0, 0);
            // StatementAdderOnAssert create random local variable
            boolean vc_21210 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_21210);
            // StatementAdderOnAssert create null value
            java.lang.String vc_21208 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_21208);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_21206 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_21206);
            // StatementAdderMethod cloned existing statement
            vc_21206.unescapeEntities(vc_21208, vc_21210);
            // MethodAssertGenerator build local variable
            Object o_15_0 = doc.select("input").size();
            org.junit.Assert.fail("handlesInputInTable_cf92995 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesInputInTable */
    @org.junit.Test(timeout = 10000)
    public void handlesInputInTable_literalMutation92978_cf97213_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<body>\n" + (((("<input type=\"hidden\" name=\"a\" value=\"\">\n" + "<table>\n") + "<input type=\"hidden\" name=\"b\" value=\"\" />\n") + "") + "</body>");
            // MethodAssertGenerator build local variable
            Object o_2_0 = h;
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_6_0 = doc.select("table input").size();
            // StatementAdderOnAssert create random local variable
            boolean vc_22264 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_22262 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_22260 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_22260.unescapeEntities(vc_22262, vc_22264);
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.select("input").size();
            org.junit.Assert.fail("handlesInputInTable_literalMutation92978_cf97213 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesInputInTable */
    @org.junit.Test(timeout = 10000)
    public void handlesInputInTable_cf93005_failAssert20_literalMutation99111() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<body>\n" + (((("<input type=\"hidden\" name=\"a\" value=\"\">\n" + "<tabkle>\n") + "<input type=\"hidden\" name=\"b\" value=\"\" />\n") + "</table>\n") + "</body>");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<body>\n<input type=\"hidden\" name=\"a\" value=\"\">\n<tabkle>\n<input type=\"hidden\" name=\"b\" value=\"\" />\n</table>\n</body>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.select("table input").size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_4_0, 0);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_21211 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_21211);
            // StatementAdderMethod cloned existing statement
            vc_21211.getErrors();
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.select("input").size();
            org.junit.Assert.fail("handlesInputInTable_cf93005 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesInvalidStartTags */
    @org.junit.Test(timeout = 10000)
    public void handlesInvalidStartTags_cf101783_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<div>Hello < There <&amp;></div>";// parse to <div {#text=Hello < There <&>}>
            
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_23194 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_23192 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_23190 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_23190.unescapeEntities(vc_23192, vc_23194);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.select("div").first().text();
            org.junit.Assert.fail("handlesInvalidStartTags_cf101783 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesInvalidStartTags */
    @org.junit.Test(timeout = 10000)
    public void handlesInvalidStartTags_cf101937() {
        java.lang.String h = "<div>Hello < There <&amp;></div>";// parse to <div {#text=Hello < There <&>}>
        
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_23233 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesInvalidStartTags_cf101937__7 = // StatementAdderMethod cloned existing statement
vc_23233.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesInvalidStartTags_cf101937__7).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesInvalidStartTags_cf101937__7).getErrors());
        org.junit.Assert.assertEquals("Hello < There <&>", doc.select("div").first().text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesInvalidStartTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesInvalidStartTags_cf101786 */
    @org.junit.Test(timeout = 10000)
    public void handlesInvalidStartTags_cf101786_cf102599_failAssert20() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<div>Hello < There <&amp;></div>";// parse to <div {#text=Hello < There <&>}>
            
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_23194 = false;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_3505 = "div";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_23190 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesInvalidStartTags_cf101786__11 = // StatementAdderMethod cloned existing statement
vc_23190.unescapeEntities(String_vc_3505, vc_23194);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_handlesInvalidStartTags_cf101786__11;
            // StatementAdderOnAssert create null value
            java.lang.String vc_23378 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_23376 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_23376.unescapeEntities(vc_23378, vc_23194);
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.select("div").first().text();
            org.junit.Assert.fail("handlesInvalidStartTags_cf101786_cf102599 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesJavadocFont */
    @org.junit.Test(timeout = 10000)
    public void handlesJavadocFont_cf104571() {
        java.lang.String h = "<TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"deprecated-list.html\"><FONT CLASS=\"NavBarFont1\"><B>Deprecated</B></FONT></A>&nbsp;</TD>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.jsoup.nodes.Element a = doc.select("a").first();
        org.junit.Assert.assertEquals("Deprecated", a.text());
        org.junit.Assert.assertEquals("font", a.child(0).tagName());
        // StatementAdderOnAssert create random local variable
        boolean vc_23876 = false;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(vc_23876);
        // StatementAddOnAssert local variable replacement
        java.lang.String rendered = doc.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(rendered, "<html>\n <head></head>\n <body> \n  <a href=\"deprecated-list.html\"><font class=\"NavBarFont1\"><b>Deprecated</b></font></a>&nbsp;\n </body>\n</html>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_23872 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_23872);
        // AssertGenerator replace invocation
        java.lang.String o_handlesJavadocFont_cf104571__19 = // StatementAdderMethod cloned existing statement
vc_23872.unescapeEntities(rendered, vc_23876);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesJavadocFont_cf104571__19, "<html>\n <head></head>\n <body> \n  <a href=\"deprecated-list.html\"><font class=\"NavBarFont1\"><b>Deprecated</b></font></a>\u00a0\n </body>\n</html>");
        org.junit.Assert.assertEquals("b", a.child(0).child(0).tagName());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesJavadocFont */
    @org.junit.Test(timeout = 10000)
    public void handlesJavadocFont_cf104769() {
        java.lang.String h = "<TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"deprecated-list.html\"><FONT CLASS=\"NavBarFont1\"><B>Deprecated</B></FONT></A>&nbsp;</TD>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.jsoup.nodes.Element a = doc.select("a").first();
        org.junit.Assert.assertEquals("Deprecated", a.text());
        org.junit.Assert.assertEquals("font", a.child(0).tagName());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_23928 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_23928);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesJavadocFont_cf104769__14 = // StatementAdderMethod cloned existing statement
vc_23928.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesJavadocFont_cf104769__14).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesJavadocFont_cf104769__14).isTrackErrors());
        org.junit.Assert.assertEquals("b", a.child(0).child(0).tagName());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesJavadocFont */
    @org.junit.Test(timeout = 10000)
    public void handlesJavadocFont_cf104569_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"deprecated-list.html\"><FONT CLASS=\"NavBarFont1\"><B>Deprecated</B></FONT></A>&nbsp;</TD>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.nodes.Element a = doc.select("a").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = a.text();
            // MethodAssertGenerator build local variable
            Object o_9_0 = a.child(0).tagName();
            // StatementAdderOnAssert create random local variable
            boolean vc_23876 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_23874 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_23872 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_23872.unescapeEntities(vc_23874, vc_23876);
            // MethodAssertGenerator build local variable
            Object o_20_0 = a.child(0).child(0).tagName();
            org.junit.Assert.fail("handlesJavadocFont_cf104569 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesJavadocFont */
    @org.junit.Test(timeout = 10000)
    public void handlesJavadocFont_cf104570_cf105043_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"deprecated-list.html\"><FONT CLASS=\"NavBarFont1\"><B>Deprecated</B></FONT></A>&nbsp;</TD>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.nodes.Element a = doc.select("a").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = a.text();
            // MethodAssertGenerator build local variable
            Object o_9_0 = a.child(0).tagName();
            // StatementAdderOnAssert create random local variable
            boolean vc_23876 = false;
            // MethodAssertGenerator build local variable
            Object o_14_0 = vc_23876;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_23872 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_18_0 = vc_23872;
            // AssertGenerator replace invocation
            java.lang.String o_handlesJavadocFont_cf104570__16 = // StatementAdderMethod cloned existing statement
vc_23872.unescapeEntities(h, vc_23876);
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_handlesJavadocFont_cf104570__16;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_3628 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_23998 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_23872.unescapeEntities(vc_23998, boolean_vc_3628);
            // MethodAssertGenerator build local variable
            Object o_30_0 = a.child(0).child(0).tagName();
            org.junit.Assert.fail("handlesJavadocFont_cf104570_cf105043 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesJavadocFont */
    @org.junit.Test(timeout = 10000)
    public void handlesJavadocFont_cf104579_failAssert4_literalMutation107585_cf108313_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String h = "";
                // StatementAdderOnAssert create random local variable
                boolean vc_24620 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_24618 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_24616 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_24616.unescapeEntities(vc_24618, vc_24620);
                // MethodAssertGenerator build local variable
                Object o_12_0 = h;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                org.jsoup.nodes.Element a = doc.select("a").first();
                // MethodAssertGenerator build local variable
                Object o_7_0 = a.text();
                // MethodAssertGenerator build local variable
                Object o_9_0 = a.child(0).tagName();
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_23877 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_23877.getErrors();
                // MethodAssertGenerator build local variable
                Object o_16_0 = a.child(0).child(0).tagName();
                org.junit.Assert.fail("handlesJavadocFont_cf104579 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesJavadocFont_cf104579_failAssert4_literalMutation107585_cf108313 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesKnownEmptyBlocks */
    @org.junit.Test(timeout = 10000)
    public void handlesKnownEmptyBlocks_cf108615_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.
            java.lang.String h = "<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_24744 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_24742 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_24740 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_24740.unescapeEntities(vc_24742, vc_24744);
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesKnownEmptyBlocks_cf108615 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesKnownEmptyBlocks */
    @org.junit.Test(timeout = 10000)
    public void handlesKnownEmptyBlocks_cf108619() {
        // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.
        java.lang.String h = "<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create random local variable
        boolean vc_24744 = true;
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_24743 = new java.lang.String();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_24740 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_handlesKnownEmptyBlocks_cf108619__11 = // StatementAdderMethod cloned existing statement
vc_24740.unescapeEntities(vc_24743, vc_24744);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesKnownEmptyBlocks_cf108619__11, "");
        org.junit.Assert.assertEquals("<div id=\"1\"></div><script src=\"/foo\"></script><div id=\"2\"><img><img></div><a id=\"3\"></a><i></i><foo /><foo>One</foo> <hr> hr text <hr> hr text two", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesKnownEmptyBlocks */
    @org.junit.Test(timeout = 10000)
    public void handlesKnownEmptyBlocks_cf108783() {
        // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.
        java.lang.String h = "<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_24796 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesKnownEmptyBlocks_cf108783__7 = // StatementAdderMethod cloned existing statement
vc_24796.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesKnownEmptyBlocks_cf108783__7).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesKnownEmptyBlocks_cf108783__7).getErrors());
        org.junit.Assert.assertEquals("<div id=\"1\"></div><script src=\"/foo\"></script><div id=\"2\"><img><img></div><a id=\"3\"></a><i></i><foo /><foo>One</foo> <hr> hr text <hr> hr text two", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesKnownEmptyBlocks */
    @org.junit.Test(timeout = 10000)
    public void handlesKnownEmptyBlocks_cf108613_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.
            java.lang.String h = "<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_24738 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_24738.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesKnownEmptyBlocks_cf108613 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesKnownEmptyBlocks */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesKnownEmptyBlocks_cf108769 */
    @org.junit.Test(timeout = 10000)
    public void handlesKnownEmptyBlocks_cf108769_cf110042_failAssert27() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.
            java.lang.String h = "<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_24783 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_handlesKnownEmptyBlocks_cf108769__7 = // StatementAdderMethod cloned existing statement
vc_24783.htmlParser();
            // MethodAssertGenerator build local variable
            Object o_9_0 = ((org.jsoup.parser.Parser)o_handlesKnownEmptyBlocks_cf108769__7).getErrors();
            // MethodAssertGenerator build local variable
            Object o_11_0 = ((org.jsoup.parser.Parser)o_handlesKnownEmptyBlocks_cf108769__7).isTrackErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_25054 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_25052 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_25050 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_25050.unescapeEntities(vc_25052, vc_25054);
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesKnownEmptyBlocks_cf108769_cf110042 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesKnownEmptyBlocks */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesKnownEmptyBlocks_cf108619 */
    @org.junit.Test(timeout = 10000)
    public void handlesKnownEmptyBlocks_cf108619_cf109736_failAssert19_literalMutation111244() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.
            java.lang.String h = "<div id=\'1\' /><script src=\'/foo\' /><div id=2><img /><img></div><a id=3 /><i /><foo /><fooG>One</foo> <hr /> hr text <hr> hr text two";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<div id=\'1\' /><script src=\'/foo\' /><div id=2><img /><img></div><a id=3 /><i /><foo /><fooG>One</foo> <hr /> hr text <hr> hr text two");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_24744 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_24743 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_24740 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesKnownEmptyBlocks_cf108619__11 = // StatementAdderMethod cloned existing statement
vc_24740.unescapeEntities(vc_24743, vc_24744);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_handlesKnownEmptyBlocks_cf108619__11;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_13_0, "");
            // StatementAdderMethod cloned existing statement
            vc_24740.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_17_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesKnownEmptyBlocks_cf108619_cf109736 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesKnownEmptyBlocks */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesKnownEmptyBlocks_cf108785 */
    @org.junit.Test(timeout = 10000)
    public void handlesKnownEmptyBlocks_cf108785_failAssert17_literalMutation110629_cf111036_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.
                java.lang.String h = "{div id=\'1\' /><script src=\'/foo\' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two";
                // StatementAdderOnAssert create random local variable
                boolean vc_25364 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_25362 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_25360 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_25360.unescapeEntities(vc_25362, vc_25364);
                // MethodAssertGenerator build local variable
                Object o_13_0 = h;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_24798 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_24798.getTreeBuilder();
                // MethodAssertGenerator build local variable
                Object o_9_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.junit.Assert.fail("handlesKnownEmptyBlocks_cf108785 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesKnownEmptyBlocks_cf108785_failAssert17_literalMutation110629_cf111036 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesManyChildren */
    @org.junit.Test(timeout = 10000)
    public void handlesManyChildren_cf111303_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // Arrange
            java.lang.StringBuilder longBody = new java.lang.StringBuilder(500000);
            for (int i = 0; i < 25000; i++) {
                longBody.append(i).append("<br>");
            }
            // Act
            long start = java.lang.System.currentTimeMillis();
            org.jsoup.nodes.Document doc = org.jsoup.parser.Parser.parseBodyFragment(longBody.toString(), "");
            // MethodAssertGenerator build local variable
            Object o_16_0 = doc.body().childNodeSize();
            // StatementAdderOnAssert create random local variable
            boolean vc_25426 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_25424 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_25422 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_25422.unescapeEntities(vc_25424, vc_25426);
            // MethodAssertGenerator build local variable
            Object o_28_0 = ((java.lang.System.currentTimeMillis()) - start) < 1000;
            org.junit.Assert.fail("handlesManyChildren_cf111303 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesManyChildren */
    @org.junit.Test(timeout = 10000)
    public void handlesManyChildren_cf111301_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // Arrange
            java.lang.StringBuilder longBody = new java.lang.StringBuilder(500000);
            for (int i = 0; i < 25000; i++) {
                longBody.append(i).append("<br>");
            }
            // Act
            long start = java.lang.System.currentTimeMillis();
            org.jsoup.nodes.Document doc = org.jsoup.parser.Parser.parseBodyFragment(longBody.toString(), "");
            // MethodAssertGenerator build local variable
            Object o_16_0 = doc.body().childNodeSize();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_25420 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_25420.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_24_0 = ((java.lang.System.currentTimeMillis()) - start) < 1000;
            org.junit.Assert.fail("handlesManyChildren_cf111301 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesManyChildren */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesManyChildren_cf111303 */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesManyChildren_cf111303_failAssert12_literalMutation111473 */
    @org.junit.Test(timeout = 10000)
    public void handlesManyChildren_cf111303_failAssert12_literalMutation111473_literalMutation112100() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // Arrange
            java.lang.StringBuilder longBody = new java.lang.StringBuilder(499999);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.lang.StringBuilder)((java.lang.StringBuilder)longBody).reverse()).capacity(), 499999);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.lang.StringBuilder)((java.lang.StringBuilder)longBody).reverse()).length(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.lang.StringBuilder)((java.lang.StringBuilder)((java.lang.StringBuilder)longBody).reverse()).reverse()).reverse().equals(longBody));
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.lang.StringBuilder)longBody).length(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.lang.StringBuilder)((java.lang.StringBuilder)((java.lang.StringBuilder)longBody).reverse()).reverse()).capacity(), 499999);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.lang.StringBuilder)((java.lang.StringBuilder)longBody).reverse()).reverse().equals(longBody));
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.lang.StringBuilder)longBody).reverse().equals(longBody));
            for (int i = 0; i < 12500; i++) {
                longBody.append(i).append("<br>");
            }
            // Act
            long start = java.lang.System.currentTimeMillis();
            org.jsoup.nodes.Document doc = org.jsoup.parser.Parser.parseBodyFragment(longBody.toString(), "");
            // MethodAssertGenerator build local variable
            Object o_16_0 = doc.body().childNodeSize();
            // StatementAdderOnAssert create random local variable
            boolean vc_25426 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_25424 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_25422 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_25422.unescapeEntities(vc_25424, vc_25426);
            // MethodAssertGenerator build local variable
            Object o_28_0 = ((java.lang.System.currentTimeMillis()) - start) < 1000;
            org.junit.Assert.fail("handlesManyChildren_cf111303 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesManyChildren */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesManyChildren_cf111301 */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesManyChildren_cf111301_failAssert11_add111445 */
    @org.junit.Test(timeout = 10000)
    public void handlesManyChildren_cf111301_failAssert11_add111445_literalMutation111613() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // Arrange
            java.lang.StringBuilder longBody = new java.lang.StringBuilder(1000000);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.lang.StringBuilder)longBody).capacity(), 1000000);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.lang.StringBuilder)((java.lang.StringBuilder)((java.lang.StringBuilder)longBody).reverse()).reverse()).length(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.lang.StringBuilder)((java.lang.StringBuilder)((java.lang.StringBuilder)longBody).reverse()).reverse()).reverse().equals(longBody));
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.lang.StringBuilder)((java.lang.StringBuilder)longBody).reverse()).reverse().equals(longBody));
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.lang.StringBuilder)longBody).reverse().equals(longBody));
            for (int i = 0; i < 25000; i++) {
                // MethodCallAdder
                longBody.append(i).append("<br>");
                longBody.append(i).append("<br>");
            }
            // Act
            long start = java.lang.System.currentTimeMillis();
            org.jsoup.nodes.Document doc = org.jsoup.parser.Parser.parseBodyFragment(longBody.toString(), "");
            // MethodAssertGenerator build local variable
            Object o_16_0 = doc.body().childNodeSize();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_25420 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_25420.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_24_0 = ((java.lang.System.currentTimeMillis()) - start) < 1000;
            org.junit.Assert.fail("handlesManyChildren_cf111301 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBI */
    @org.junit.Test(timeout = 10000)
    public void handlesMisnestedTagsBI_cf114581() {
        // whatwg: <b><i></b></i>
        java.lang.String h = "<p>1<b>2<i>3</b>4</i>5</p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create random local variable
        boolean vc_25488 = true;
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_25487 = new java.lang.String();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_25484 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_handlesMisnestedTagsBI_cf114581__11 = // StatementAdderMethod cloned existing statement
vc_25484.unescapeEntities(vc_25487, vc_25488);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesMisnestedTagsBI_cf114581__11, "");
        org.junit.Assert.assertEquals("<p>1<b>2<i>3</i></b><i>4</i>5</p>", doc.body().html());
        // adoption agency on </b>, reconstruction of formatters on 4.
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBI */
    @org.junit.Test(timeout = 10000)
    public void handlesMisnestedTagsBI_cf114575_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: <b><i></b></i>
            java.lang.String h = "<p>1<b>2<i>3</b>4</i>5</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_25482 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_25482.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.body().html();
            // adoption agency on </b>, reconstruction of formatters on 4.
            org.junit.Assert.fail("handlesMisnestedTagsBI_cf114575 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBI */
    @org.junit.Test(timeout = 10000)
    public void handlesMisnestedTagsBI_cf114577_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: <b><i></b></i>
            java.lang.String h = "<p>1<b>2<i>3</b>4</i>5</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_25488 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_25486 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_25484 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_25484.unescapeEntities(vc_25486, vc_25488);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.body().html();
            // adoption agency on </b>, reconstruction of formatters on 4.
            org.junit.Assert.fail("handlesMisnestedTagsBI_cf114577 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBI */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBI_cf114580 */
    @org.junit.Test(timeout = 10000)
    public void handlesMisnestedTagsBI_cf114580_cf115395_failAssert27() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: <b><i></b></i>
            java.lang.String h = "<p>1<b>2<i>3</b>4</i>5</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_25488 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_3850 = "<p>1<b>2<i>3</b>4</i>5</p>";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_25484 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesMisnestedTagsBI_cf114580__11 = // StatementAdderMethod cloned existing statement
vc_25484.unescapeEntities(String_vc_3850, vc_25488);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_handlesMisnestedTagsBI_cf114580__11;
            // StatementAdderOnAssert create random local variable
            boolean vc_25674 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_25672 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_25670 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_25670.unescapeEntities(vc_25672, vc_25674);
            // MethodAssertGenerator build local variable
            Object o_23_0 = doc.body().html();
            // adoption agency on </b>, reconstruction of formatters on 4.
            org.junit.Assert.fail("handlesMisnestedTagsBI_cf114580_cf115395 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBI */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBI_cf114578 */
    @org.junit.Test(timeout = 10000)
    public void handlesMisnestedTagsBI_cf114578_cf114769_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: <b><i></b></i>
            java.lang.String h = "<p>1<b>2<i>3</b>4</i>5</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_25488 = true;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_25484 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesMisnestedTagsBI_cf114578__9 = // StatementAdderMethod cloned existing statement
vc_25484.unescapeEntities(h, vc_25488);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_handlesMisnestedTagsBI_cf114578__9;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_3859 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_25548 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_25546 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_25546.unescapeEntities(vc_25548, boolean_vc_3859);
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.body().html();
            // adoption agency on </b>, reconstruction of formatters on 4.
            org.junit.Assert.fail("handlesMisnestedTagsBI_cf114578_cf114769 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBI */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBI_cf114579 */
    @org.junit.Test(timeout = 10000)
    public void handlesMisnestedTagsBI_cf114579_cf115353_failAssert20() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: <b><i></b></i>
            java.lang.String h = "<p>1<b>2<i>3</b>4</i>5</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_25488 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_25484 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesMisnestedTagsBI_cf114579__12 = // StatementAdderMethod cloned existing statement
vc_25484.unescapeEntities(html, vc_25488);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_handlesMisnestedTagsBI_cf114579__12;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_25658 = (org.jsoup.parser.TreeBuilder)null;
            // StatementAdderMethod cloned existing statement
            vc_25484.setTreeBuilder(vc_25658);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.body().html();
            // adoption agency on </b>, reconstruction of formatters on 4.
            org.junit.Assert.fail("handlesMisnestedTagsBI_cf114579_cf115353 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBI */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBI_cf114579 */
    @org.junit.Test(timeout = 10000)
    public void handlesMisnestedTagsBI_cf114579_cf115346_failAssert14_literalMutation117114() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: <b><i></b></i>
            java.lang.String h = "<p>1<b>2<i>3</b>4</i>5</<p>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<p>1<b>2<i>3</b>4</i>5</<p>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_25488 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_25484 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesMisnestedTagsBI_cf114579__12 = // StatementAdderMethod cloned existing statement
vc_25484.unescapeEntities(html, vc_25488);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_handlesMisnestedTagsBI_cf114579__12;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, "<html>\n <head></head>\n <body>\n  <p>1<b>2<i>3</i></b><i>4</i>5\n   <!--<p--></p>\n </body>\n</html>");
            // StatementAdderOnAssert create literal from method
            int int_vc_3877 = 10000;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(int_vc_3877, 10000);
            // StatementAdderMethod cloned existing statement
            vc_25484.setTrackErrors(int_vc_3877);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.body().html();
            // adoption agency on </b>, reconstruction of formatters on 4.
            org.junit.Assert.fail("handlesMisnestedTagsBI_cf114579_cf115346 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBI */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBI_cf114580 */
    @org.junit.Test(timeout = 10000)
    public void handlesMisnestedTagsBI_cf114580_cf115651_failAssert3_literalMutation117054() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: <b><i></b></i>
            java.lang.String h = "<p>1;b>2<i>3</b>4</i>5</p>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<p>1;b>2<i>3</b>4</i>5</p>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_25488 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_3850 = "<p>1<b>2<i>3</b>4</i>5</p>";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_25484 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesMisnestedTagsBI_cf114580__11 = // StatementAdderMethod cloned existing statement
vc_25484.unescapeEntities(String_vc_3850, vc_25488);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_handlesMisnestedTagsBI_cf114580__11;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_13_0, "<p>1<b>2<i>3</b>4</i>5</p>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_25711 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_25711);
            // StatementAdderMethod cloned existing statement
            vc_25711.settings();
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.body().html();
            // adoption agency on </b>, reconstruction of formatters on 4.
            org.junit.Assert.fail("handlesMisnestedTagsBI_cf114580_cf115651 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBP */
    @org.junit.Test(timeout = 10000)
    public void handlesMisnestedTagsBP_cf117223_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: <b><p></b></p>
            java.lang.String h = "<b>1<p>2</b>3</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_26164 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_26164.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.body().html();
            org.junit.Assert.fail("handlesMisnestedTagsBP_cf117223 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBP */
    @org.junit.Test(timeout = 10000)
    public void handlesMisnestedTagsBP_cf117225_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: <b><p></b></p>
            java.lang.String h = "<b>1<p>2</b>3</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_26170 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_26168 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_26166 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_26166.unescapeEntities(vc_26168, vc_26170);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.body().html();
            org.junit.Assert.fail("handlesMisnestedTagsBP_cf117225 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBP */
    @org.junit.Test(timeout = 10000)
    public void handlesMisnestedTagsBP_cf117379() {
        // whatwg: <b><p></b></p>
        java.lang.String h = "<b>1<p>2</b>3</p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_26209 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesMisnestedTagsBP_cf117379__7 = // StatementAdderMethod cloned existing statement
vc_26209.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesMisnestedTagsBP_cf117379__7).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesMisnestedTagsBP_cf117379__7).getErrors());
        org.junit.Assert.assertEquals("<b>1</b>\n<p><b>2</b>3</p>", doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBP */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBP_cf117379 */
    @org.junit.Test(timeout = 10000)
    public void handlesMisnestedTagsBP_cf117379_cf118657_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: <b><p></b></p>
            java.lang.String h = "<b>1<p>2</b>3</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_26209 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_handlesMisnestedTagsBP_cf117379__7 = // StatementAdderMethod cloned existing statement
vc_26209.htmlParser();
            // MethodAssertGenerator build local variable
            Object o_9_0 = ((org.jsoup.parser.Parser)o_handlesMisnestedTagsBP_cf117379__7).isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_11_0 = ((org.jsoup.parser.Parser)o_handlesMisnestedTagsBP_cf117379__7).getErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_26480 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_26478 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_26209.unescapeEntities(vc_26478, vc_26480);
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.body().html();
            org.junit.Assert.fail("handlesMisnestedTagsBP_cf117379_cf118657 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBP */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBP_cf117227 */
    @org.junit.Test(timeout = 10000)
    public void handlesMisnestedTagsBP_cf117227_cf117995_failAssert3_literalMutation119539() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: <b><p></b></p>
            java.lang.String h = "<b>1@p>2</b>3</p>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<b>1@p>2</b>3</p>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_26170 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_26166 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesMisnestedTagsBP_cf117227__12 = // StatementAdderMethod cloned existing statement
vc_26166.unescapeEntities(rendered, vc_26170);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_handlesMisnestedTagsBP_cf117227__12;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, "<html>\n <head></head>\n <body>\n  <b>1@p>2</b>3\n  <p></p>\n </body>\n</html>");
            // StatementAdderOnAssert create random local variable
            int vc_26337 = 1450134983;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_26337, 1450134983);
            // StatementAdderMethod cloned existing statement
            vc_26166.setTrackErrors(vc_26337);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.body().html();
            org.junit.Assert.fail("handlesMisnestedTagsBP_cf117227_cf117995 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBP */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBP_cf117226 */
    @org.junit.Test(timeout = 10000)
    public void handlesMisnestedTagsBP_cf117226_cf117431_failAssert10_literalMutation119558() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: <b><p></b></p>
            java.lang.String h = "<b-1<p>2</b>3</p>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<b-1<p>2</b>3</p>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_26170 = false;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_26166 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesMisnestedTagsBP_cf117226__9 = // StatementAdderMethod cloned existing statement
vc_26166.unescapeEntities(h, vc_26170);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_handlesMisnestedTagsBP_cf117226__9;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "<b-1<p>2</b>3</p>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_26230 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_26230);
            // StatementAdderMethod cloned existing statement
            vc_26166.unescapeEntities(vc_26230, vc_26170);
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.body().html();
            org.junit.Assert.fail("handlesMisnestedTagsBP_cf117226_cf117431 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBP */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBP_cf117227 */
    @org.junit.Test(timeout = 10000)
    public void handlesMisnestedTagsBP_cf117227_cf117726_failAssert15_literalMutation119584() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: <b><p></b></p>
            java.lang.String h = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_26170 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_26166 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesMisnestedTagsBP_cf117227__12 = // StatementAdderMethod cloned existing statement
vc_26166.unescapeEntities(rendered, vc_26170);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_handlesMisnestedTagsBP_cf117227__12;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, "<html>\n <head></head>\n <body></body>\n</html>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_26292 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_26292);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_26290 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_26290);
            // StatementAdderMethod cloned existing statement
            vc_26290.unescapeEntities(vc_26292, vc_26170);
            // MethodAssertGenerator build local variable
            Object o_22_0 = doc.body().html();
            org.junit.Assert.fail("handlesMisnestedTagsBP_cf117227_cf117726 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBP */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMisnestedTagsBP_cf117227 */
    @org.junit.Test(timeout = 10000)
    public void handlesMisnestedTagsBP_cf117227_cf117995_failAssert3_literalMutation119541() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: <b><p></b></p>
            java.lang.String h = "<b>1<p>2</b>3<p>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<b>1<p>2</b>3<p>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_26170 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_26166 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesMisnestedTagsBP_cf117227__12 = // StatementAdderMethod cloned existing statement
vc_26166.unescapeEntities(rendered, vc_26170);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_handlesMisnestedTagsBP_cf117227__12;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, "<html>\n <head></head>\n <body>\n  <b>1</b>\n  <p><b>2</b>3</p>\n  <p></p>\n </body>\n</html>");
            // StatementAdderOnAssert create random local variable
            int vc_26337 = 1450134983;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_26337, 1450134983);
            // StatementAdderMethod cloned existing statement
            vc_26166.setTrackErrors(vc_26337);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.body().html();
            org.junit.Assert.fail("handlesMisnestedTagsBP_cf117227_cf117995 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMultiClosingBody */
    @org.junit.Test(timeout = 10000)
    public void handlesMultiClosingBody_cf119628_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<body><p>Hello</body><p>there</p></body></body></html><p>now";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.select("p").size();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_26722 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_26722.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.body().children().size();
            org.junit.Assert.fail("handlesMultiClosingBody_cf119628 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMultiClosingBody */
    @org.junit.Test(timeout = 10000)
    public void handlesMultiClosingBody_cf119630_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<body><p>Hello</body><p>there</p></body></body></html><p>now";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.select("p").size();
            // StatementAdderOnAssert create random local variable
            boolean vc_26728 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_26726 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_26724 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_26724.unescapeEntities(vc_26726, vc_26728);
            // MethodAssertGenerator build local variable
            Object o_15_0 = doc.body().children().size();
            org.junit.Assert.fail("handlesMultiClosingBody_cf119630 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMultiClosingBody */
    @org.junit.Test(timeout = 10000)
    public void handlesMultiClosingBody_cf119632() {
        java.lang.String h = "<body><p>Hello</body><p>there</p></body></body></html><p>now";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals(3, doc.select("p").size());
        // StatementAdderOnAssert create random local variable
        boolean vc_26728 = false;
        // StatementAddOnAssert local variable replacement
        java.lang.String out = doc.body().html();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_26724 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_handlesMultiClosingBody_cf119632__15 = // StatementAdderMethod cloned existing statement
vc_26724.unescapeEntities(out, vc_26728);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesMultiClosingBody_cf119632__15, "<p>Hello</p>\n<p>there</p>\n<p>now</p>");
        org.junit.Assert.assertEquals(3, doc.body().children().size());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMultiClosingBody */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesMultiClosingBody_cf119633 */
    @org.junit.Test(timeout = 10000)
    public void handlesMultiClosingBody_cf119633_cf120452_failAssert19_literalMutation123077() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "u@D;>GVQWOe^NM[F9Z[H.FfPi6NN%4PvJl*$ps8 >b-_gH1`13k`IDXPA<!d";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "u@D;>GVQWOe^NM[F9Z[H.FfPi6NN%4PvJl*$ps8 >b-_gH1`13k`IDXPA<!d");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.select("p").size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_4_0, 0);
            // StatementAdderOnAssert create random local variable
            boolean vc_26728 = false;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_4037 = "p";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_26724 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesMultiClosingBody_cf119633__13 = // StatementAdderMethod cloned existing statement
vc_26724.unescapeEntities(String_vc_4037, vc_26728);
            // MethodAssertGenerator build local variable
            Object o_15_0 = o_handlesMultiClosingBody_cf119633__13;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_15_0, "p");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_4067 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(boolean_vc_4067);
            // StatementAdderOnAssert create null value
            java.lang.String vc_26912 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_26912);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_26910 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_26910);
            // StatementAdderMethod cloned existing statement
            vc_26910.unescapeEntities(vc_26912, boolean_vc_4067);
            // MethodAssertGenerator build local variable
            Object o_25_0 = doc.body().children().size();
            org.junit.Assert.fail("handlesMultiClosingBody_cf119633_cf120452 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNestedImplicitTable */
    @org.junit.Test(timeout = 10000)
    public void handlesNestedImplicitTable_cf123245() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_27648 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesNestedImplicitTable_cf123245__5 = // StatementAdderMethod cloned existing statement
vc_27648.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesNestedImplicitTable_cf123245__5).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesNestedImplicitTable_cf123245__5).getErrors());
        org.junit.Assert.assertEquals("<table><tbody><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tbody><tr><td>3</td> <td>4</td></tr></tbody></table> </td></tr><tr><td>5</td></tr></tbody></table>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNestedImplicitTable */
    @org.junit.Test(timeout = 10000)
    public void handlesNestedImplicitTable_cf123109_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>");
            // StatementAdderOnAssert create random local variable
            boolean vc_27596 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_27594 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_27592 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_27592.unescapeEntities(vc_27594, vc_27596);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesNestedImplicitTable_cf123109 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNestedImplicitTable */
    @org.junit.Test(timeout = 10000)
    public void handlesNestedImplicitTable_cf123107_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_27590 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_27590.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesNestedImplicitTable_cf123107 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNestedImplicitTable */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNestedImplicitTable_cf123110 */
    @org.junit.Test(timeout = 10000)
    public void handlesNestedImplicitTable_cf123110_cf123544_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>");
            // StatementAdderOnAssert create random local variable
            boolean vc_27596 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_27592 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesNestedImplicitTable_cf123110__10 = // StatementAdderMethod cloned existing statement
vc_27592.unescapeEntities(html, vc_27596);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_handlesNestedImplicitTable_cf123110__10;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_27708 = (org.jsoup.parser.ParseSettings)null;
            // StatementAdderMethod cloned existing statement
            vc_27592.settings(vc_27708);
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesNestedImplicitTable_cf123110_cf123544 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNestedImplicitTable */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNestedImplicitTable_cf123109 */
    @org.junit.Test(timeout = 10000)
    public void handlesNestedImplicitTable_cf123109_failAssert6_literalMutation124610() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>");
            // StatementAdderOnAssert create random local variable
            boolean vc_27596 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(vc_27596);
            // StatementAdderOnAssert create null value
            java.lang.String vc_27594 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_27592 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_27592.unescapeEntities(vc_27594, vc_27596);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesNestedImplicitTable_cf123109 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNestedImplicitTable */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNestedImplicitTable_cf123233 */
    @org.junit.Test(timeout = 10000)
    public void handlesNestedImplicitTable_cf123233_cf124174_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_27635 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_handlesNestedImplicitTable_cf123233__5 = // StatementAdderMethod cloned existing statement
vc_27635.htmlParser();
            // MethodAssertGenerator build local variable
            Object o_7_0 = ((org.jsoup.parser.Parser)o_handlesNestedImplicitTable_cf123233__5).getErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_27844 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_27842 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_27840 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_27840.unescapeEntities(vc_27842, vc_27844);
            // MethodAssertGenerator build local variable
            Object o_17_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesNestedImplicitTable_cf123233_cf124174 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNestedImplicitTable */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNestedImplicitTable_cf123112 */
    @org.junit.Test(timeout = 10000)
    public void handlesNestedImplicitTable_cf123112_cf123877_failAssert15_literalMutation124836() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>");
            // StatementAdderOnAssert create random local variable
            boolean vc_27596 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_27595 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_27592 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesNestedImplicitTable_cf123112__9 = // StatementAdderMethod cloned existing statement
vc_27592.unescapeEntities(vc_27595, vc_27596);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_handlesNestedImplicitTable_cf123112__9;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "");
            // StatementAdderOnAssert create random local variable
            boolean vc_27782 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_27782);
            // StatementAdderOnAssert create null value
            java.lang.String vc_27780 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_27780);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_27778 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_27778);
            // StatementAdderMethod cloned existing statement
            vc_27778.unescapeEntities(vc_27780, vc_27782);
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesNestedImplicitTable_cf123112_cf123877 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNewlinesAndWhitespaceInTag */
    @org.junit.Test(timeout = 10000)
    public void handlesNewlinesAndWhitespaceInTag_cf124986() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<a \n href=\"one\" \r\n id=\"two\" \f >");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_28069 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesNewlinesAndWhitespaceInTag_cf124986__5 = // StatementAdderMethod cloned existing statement
vc_28069.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesNewlinesAndWhitespaceInTag_cf124986__5).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesNewlinesAndWhitespaceInTag_cf124986__5).isTrackErrors());
        org.junit.Assert.assertEquals("<a href=\"one\" id=\"two\"></a>", doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNewlinesAndWhitespaceInTag */
    @org.junit.Test(timeout = 10000)
    public void handlesNewlinesAndWhitespaceInTag_cf124864() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<a \n href=\"one\" \r\n id=\"two\" \f >");
        // StatementAdderOnAssert create random local variable
        boolean vc_28030 = false;
        // StatementAdderOnAssert create literal from method
        java.lang.String String_vc_4235 = "<a \n href=\"one\" \r\n id=\"two\" \f >";
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_28026 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_handlesNewlinesAndWhitespaceInTag_cf124864__9 = // StatementAdderMethod cloned existing statement
vc_28026.unescapeEntities(String_vc_4235, vc_28030);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesNewlinesAndWhitespaceInTag_cf124864__9, "<a \n href=\"one\" \r\n id=\"two\" \f >");
        org.junit.Assert.assertEquals("<a href=\"one\" id=\"two\"></a>", doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNewlinesAndWhitespaceInTag */
    @org.junit.Test(timeout = 10000)
    public void handlesNewlinesAndWhitespaceInTag_cf124860_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<a \n href=\"one\" \r\n id=\"two\" \f >");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_28024 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_28024.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.body().html();
            org.junit.Assert.fail("handlesNewlinesAndWhitespaceInTag_cf124860 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNewlinesAndWhitespaceInTag */
    @org.junit.Test(timeout = 10000)
    public void handlesNewlinesAndWhitespaceInTag_cf124862_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<a \n href=\"one\" \r\n id=\"two\" \f >");
            // StatementAdderOnAssert create random local variable
            boolean vc_28030 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_28028 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_28026 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_28026.unescapeEntities(vc_28028, vc_28030);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.body().html();
            org.junit.Assert.fail("handlesNewlinesAndWhitespaceInTag_cf124862 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNewlinesAndWhitespaceInTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNewlinesAndWhitespaceInTag_cf124863 */
    @org.junit.Test(timeout = 10000)
    public void handlesNewlinesAndWhitespaceInTag_cf124863_cf125033_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<a \n href=\"one\" \r\n id=\"two\" \f >");
            // StatementAdderOnAssert create random local variable
            boolean vc_28030 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_28026 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesNewlinesAndWhitespaceInTag_cf124863__10 = // StatementAdderMethod cloned existing statement
vc_28026.unescapeEntities(rendered, vc_28030);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_handlesNewlinesAndWhitespaceInTag_cf124863__10;
            // StatementAdderOnAssert create random local variable
            boolean vc_28092 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_28090 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_28026.unescapeEntities(vc_28090, vc_28092);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.body().html();
            org.junit.Assert.fail("handlesNewlinesAndWhitespaceInTag_cf124863_cf125033 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNewlinesAndWhitespaceInTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNewlinesAndWhitespaceInTag_cf124864 */
    @org.junit.Test(timeout = 10000)
    public void handlesNewlinesAndWhitespaceInTag_cf124864_cf125341_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<a \n href=\"one\" \r\n id=\"two\" \f >");
            // StatementAdderOnAssert create random local variable
            boolean vc_28030 = false;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_4235 = "<a \n href=\"one\" \r\n id=\"two\" \f >";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_28026 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesNewlinesAndWhitespaceInTag_cf124864__9 = // StatementAdderMethod cloned existing statement
vc_28026.unescapeEntities(String_vc_4235, vc_28030);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_handlesNewlinesAndWhitespaceInTag_cf124864__9;
            // StatementAdderOnAssert create null value
            java.lang.String vc_28152 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_28026.unescapeEntities(vc_28152, vc_28030);
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.body().html();
            org.junit.Assert.fail("handlesNewlinesAndWhitespaceInTag_cf124864_cf125341 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNewlinesAndWhitespaceInTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNewlinesAndWhitespaceInTag_cf124863 */
    @org.junit.Test(timeout = 10000)
    public void handlesNewlinesAndWhitespaceInTag_cf124863_cf125282_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<a \n href=\"one\" \r\n id=\"two\" \f >");
            // StatementAdderOnAssert create random local variable
            boolean vc_28030 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_28026 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesNewlinesAndWhitespaceInTag_cf124863__10 = // StatementAdderMethod cloned existing statement
vc_28026.unescapeEntities(rendered, vc_28030);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_handlesNewlinesAndWhitespaceInTag_cf124863__10;
            // StatementAdderOnAssert create random local variable
            int vc_28135 = 1506431247;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_28133 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_28133.setTrackErrors(vc_28135);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.body().html();
            org.junit.Assert.fail("handlesNewlinesAndWhitespaceInTag_cf124863_cf125282 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNewlinesAndWhitespaceInTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNewlinesAndWhitespaceInTag_cf124988 */
    @org.junit.Test(timeout = 10000)
    public void handlesNewlinesAndWhitespaceInTag_cf124988_failAssert9_literalMutation126369_cf126381_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_16_1 = -1051907248;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<a \n href=\"one\" \r\n id=\"two\" \f >");
                // StatementAdderOnAssert create random local variable
                int vc_28073 = -1051907248;
                // StatementAdderOnAssert create random local variable
                boolean vc_28402 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_28400 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_28398 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_28398.unescapeEntities(vc_28400, vc_28402);
                // MethodAssertGenerator build local variable
                Object o_16_0 = vc_28073;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_28071 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_28071.setTrackErrors(vc_28073);
                // MethodAssertGenerator build local variable
                Object o_9_0 = doc.body().html();
                org.junit.Assert.fail("handlesNewlinesAndWhitespaceInTag_cf124988 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesNewlinesAndWhitespaceInTag_cf124988_failAssert9_literalMutation126369_cf126381 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInComments */
    @org.junit.Test(timeout = 10000)
    public void handlesNullInComments_cf126577_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><!--     -->");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_28458 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_28458.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.body().html();
            org.junit.Assert.fail("handlesNullInComments_cf126577 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInComments */
    @org.junit.Test(timeout = 10000)
    public void handlesNullInComments_cf126703() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><!--     -->");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_28503 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesNullInComments_cf126703__5 = // StatementAdderMethod cloned existing statement
vc_28503.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesNullInComments_cf126703__5).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesNullInComments_cf126703__5).isTrackErrors());
        org.junit.Assert.assertEquals("<!-- \ufffd \ufffd -->", doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInComments */
    @org.junit.Test(timeout = 10000)
    public void handlesNullInComments_cf126579_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><!--     -->");
            // StatementAdderOnAssert create random local variable
            boolean vc_28464 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_28462 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_28460 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_28460.unescapeEntities(vc_28462, vc_28464);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.body().html();
            org.junit.Assert.fail("handlesNullInComments_cf126579 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInComments */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInComments_cf126580 */
    @org.junit.Test(timeout = 10000)
    public void handlesNullInComments_cf126580_cf126731_failAssert24() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><!--     -->");
            // StatementAdderOnAssert create random local variable
            boolean vc_28464 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_28460 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesNullInComments_cf126580__10 = // StatementAdderMethod cloned existing statement
vc_28460.unescapeEntities(rendered, vc_28464);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_handlesNullInComments_cf126580__10;
            // StatementAdderMethod cloned existing statement
            vc_28460.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_16_0 = doc.body().html();
            org.junit.Assert.fail("handlesNullInComments_cf126580_cf126731 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInComments */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInComments_cf126582 */
    @org.junit.Test(timeout = 10000)
    public void handlesNullInComments_cf126582_cf127347_failAssert21() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><!--     -->");
            // StatementAdderOnAssert create random local variable
            boolean vc_28464 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_28463 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_28460 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesNullInComments_cf126582__9 = // StatementAdderMethod cloned existing statement
vc_28460.unescapeEntities(vc_28463, vc_28464);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_handlesNullInComments_cf126582__9;
            // StatementAdderOnAssert create random local variable
            boolean vc_28650 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_28648 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_28646 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_28646.unescapeEntities(vc_28648, vc_28650);
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.body().html();
            org.junit.Assert.fail("handlesNullInComments_cf126582_cf127347 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInComments */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInComments_cf126582 */
    @org.junit.Test(timeout = 10000)
    public void handlesNullInComments_cf126582_cf127360_failAssert0_add128393() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><!--     -->");
            // StatementAdderOnAssert create random local variable
            boolean vc_28464 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_28463 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_28460 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesNullInComments_cf126582__9 = // StatementAdderMethod cloned existing statement
vc_28460.unescapeEntities(vc_28463, vc_28464);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_handlesNullInComments_cf126582__9;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "");
            // StatementAdderOnAssert create null value
            java.lang.String vc_28648 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_28648);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_28460.unescapeEntities(vc_28648, vc_28464);
            // StatementAdderMethod cloned existing statement
            vc_28460.unescapeEntities(vc_28648, vc_28464);
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.body().html();
            org.junit.Assert.fail("handlesNullInComments_cf126582_cf127360 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInData */
    @org.junit.Test(timeout = 10000)
    public void handlesNullInData_cf128512_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p id= >Blah  </p>");
            // StatementAdderOnAssert create random local variable
            boolean vc_28960 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_28958 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_28956 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_28956.unescapeEntities(vc_28958, vc_28960);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.body().html();
            org.junit.Assert.fail("handlesNullInData_cf128512 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInData */
    @org.junit.Test(timeout = 10000)
    public void handlesNullInData_cf128515() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p id= >Blah  </p>");
        // StatementAdderOnAssert create random local variable
        boolean vc_28960 = true;
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_28959 = new java.lang.String();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_28956 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_handlesNullInData_cf128515__9 = // StatementAdderMethod cloned existing statement
vc_28956.unescapeEntities(vc_28959, vc_28960);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesNullInData_cf128515__9, "");
        org.junit.Assert.assertEquals("<p id=\"\ufffd\">Blah  </p>", doc.body().html());// replaced in attr, NOT replaced in data
        
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInData */
    @org.junit.Test(timeout = 10000)
    public void handlesNullInData_cf128636() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p id= >Blah  </p>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_28999 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesNullInData_cf128636__5 = // StatementAdderMethod cloned existing statement
vc_28999.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesNullInData_cf128636__5).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesNullInData_cf128636__5).isTrackErrors());
        org.junit.Assert.assertEquals("<p id=\"\ufffd\">Blah  </p>", doc.body().html());// replaced in attr, NOT replaced in data
        
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInData */
    @org.junit.Test(timeout = 10000)
    public void handlesNullInData_cf128510_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p id= >Blah  </p>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_28954 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_28954.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.body().html();
            org.junit.Assert.fail("handlesNullInData_cf128510 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInData */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInData_cf128513 */
    @org.junit.Test(timeout = 10000)
    public void handlesNullInData_cf128513_cf128682_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p id= >Blah  </p>");
            // StatementAdderOnAssert create random local variable
            boolean vc_28960 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_28956 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesNullInData_cf128513__11 = // StatementAdderMethod cloned existing statement
vc_28956.unescapeEntities(out, vc_28960);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_handlesNullInData_cf128513__11;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_4383 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_29020 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_28956.unescapeEntities(vc_29020, boolean_vc_4383);
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.body().html();
            org.junit.Assert.fail("handlesNullInData_cf128513_cf128682 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInData */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInData_cf128513 */
    @org.junit.Test(timeout = 10000)
    public void handlesNullInData_cf128513_cf128945_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p id= >Blah  </p>");
            // StatementAdderOnAssert create random local variable
            boolean vc_28960 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_28956 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesNullInData_cf128513__11 = // StatementAdderMethod cloned existing statement
vc_28956.unescapeEntities(out, vc_28960);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_handlesNullInData_cf128513__11;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_29072 = (org.jsoup.parser.ParseSettings)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_29070 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_29070.settings(vc_29072);
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.body().html();
            org.junit.Assert.fail("handlesNullInData_cf128513_cf128945 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInData */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesNullInData_cf128515 */
    @org.junit.Test(timeout = 10000)
    public void handlesNullInData_cf128515_cf129294_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p id= >Blah  </p>");
            // StatementAdderOnAssert create random local variable
            boolean vc_28960 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_28959 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_28956 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesNullInData_cf128515__9 = // StatementAdderMethod cloned existing statement
vc_28956.unescapeEntities(vc_28959, vc_28960);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_handlesNullInData_cf128515__9;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_4403 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_29144 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_28956.unescapeEntities(vc_29144, boolean_vc_4403);
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.body().html();
            org.junit.Assert.fail("handlesNullInData_cf128515_cf129294 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesProtocolRelativeUrl */
    @org.junit.Test(timeout = 10000)
    public void handlesProtocolRelativeUrl_cf130254() {
        java.lang.String base = "https://example.com/";
        java.lang.String html = "<img src='//example.net/img.jpg'>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, base);
        org.jsoup.nodes.Element el = doc.select("img").first();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_29384 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_29384);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesProtocolRelativeUrl_cf130254__10 = // StatementAdderMethod cloned existing statement
vc_29384.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesProtocolRelativeUrl_cf130254__10).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesProtocolRelativeUrl_cf130254__10).isTrackErrors());
        org.junit.Assert.assertEquals("https://example.net/img.jpg", el.absUrl("src"));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesProtocolRelativeUrl */
    @org.junit.Test(timeout = 10000)
    public void handlesProtocolRelativeUrl_cf130060_cf131479_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String base = "https://example.com/";
            java.lang.String html = "<img src='//example.net/img.jpg'>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, base);
            org.jsoup.nodes.Element el = doc.select("img").first();
            // StatementAdderOnAssert create random local variable
            boolean vc_29332 = true;
            // MethodAssertGenerator build local variable
            Object o_10_0 = vc_29332;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_29331 = new java.lang.String();
            // MethodAssertGenerator build local variable
            Object o_14_0 = vc_29331;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_29328 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_18_0 = vc_29328;
            // AssertGenerator replace invocation
            java.lang.String o_handlesProtocolRelativeUrl_cf130060__14 = // StatementAdderMethod cloned existing statement
vc_29328.unescapeEntities(vc_29331, vc_29332);
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_handlesProtocolRelativeUrl_cf130060__14;
            // StatementAdderOnAssert create null value
            java.lang.String vc_29640 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_29328.unescapeEntities(vc_29640, vc_29332);
            // MethodAssertGenerator build local variable
            Object o_28_0 = el.absUrl("src");
            org.junit.Assert.fail("handlesProtocolRelativeUrl_cf130060_cf131479 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesProtocolRelativeUrl */
    @org.junit.Test(timeout = 10000)
    public void handlesProtocolRelativeUrl_cf130246_failAssert1_add132818_cf134221_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String base = "https://example.com/";
                java.lang.String html = "<img src='//example.net/img.jpg'>";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, base);
                org.jsoup.nodes.Element el = doc.select("img").first();
                // StatementAdderOnAssert create null value
                org.jsoup.parser.TreeBuilder vc_29378 = (org.jsoup.parser.TreeBuilder)null;
                // MethodAssertGenerator build local variable
                Object o_12_0 = vc_29378;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_29376 = (org.jsoup.parser.Parser)null;
                // StatementAdderOnAssert create random local variable
                boolean vc_30138 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_30136 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                vc_29376.unescapeEntities(vc_30136, vc_30138);
                // MethodAssertGenerator build local variable
                Object o_22_0 = vc_29376;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                vc_29376.setTreeBuilder(vc_29378);
                // StatementAdderMethod cloned existing statement
                vc_29376.setTreeBuilder(vc_29378);
                // MethodAssertGenerator build local variable
                Object o_14_0 = el.absUrl("src");
                org.junit.Assert.fail("handlesProtocolRelativeUrl_cf130246 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesProtocolRelativeUrl_cf130246_failAssert1_add132818_cf134221 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesQuotesInCommentsInScripts */
    @org.junit.Test(timeout = 10000)
    public void handlesQuotesInCommentsInScripts_cf135009() {
        java.lang.String html = "<script>\n" + ((("  <!--\n" + "    document.write(\'</scr\' + \'ipt>\');\n") + "  // -->\n") + "</script>");
        org.jsoup.nodes.Document node = org.jsoup.Jsoup.parseBodyFragment(html);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_30301 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_30301);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesQuotesInCommentsInScripts_cf135009__6 = // StatementAdderMethod cloned existing statement
vc_30301.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesQuotesInCommentsInScripts_cf135009__6).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesQuotesInCommentsInScripts_cf135009__6).isTrackErrors());
        org.junit.Assert.assertEquals(("<script>\n" + ((("  <!--\n" + "    document.write(\'</scr\' + \'ipt>\');\n") + "  // -->\n") + "</script>")), node.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesQuotesInCommentsInScripts */
    @org.junit.Test(timeout = 10000)
    public void handlesQuotesInCommentsInScripts_cf134856() {
        java.lang.String html = "<script>\n" + ((("  <!--\n" + "    document.write(\'</scr\' + \'ipt>\');\n") + "  // -->\n") + "</script>");
        org.jsoup.nodes.Document node = org.jsoup.Jsoup.parseBodyFragment(html);
        // StatementAdderOnAssert create random local variable
        boolean vc_30262 = false;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(vc_30262);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_30258 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_30258);
        // AssertGenerator replace invocation
        java.lang.String o_handlesQuotesInCommentsInScripts_cf134856__8 = // StatementAdderMethod cloned existing statement
vc_30258.unescapeEntities(html, vc_30262);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesQuotesInCommentsInScripts_cf134856__8, "<script>\n  <!--\n    document.write(\'</scr\' + \'ipt>\');\n  // -->\n</script>");
        org.junit.Assert.assertEquals(("<script>\n" + ((("  <!--\n" + "    document.write(\'</scr\' + \'ipt>\');\n") + "  // -->\n") + "</script>")), node.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSolidusAtAttributeEnd */
    @org.junit.Test(timeout = 10000)
    public void handlesSolidusAtAttributeEnd_cf211029_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // this test makes sure [<a href=/>link</a>] is parsed as [<a href="/">link</a>], not [<a href="" /><a>link</a>]
            java.lang.String h = "<a href=/>link</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_43034 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_43032 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_43030 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_43030.unescapeEntities(vc_43032, vc_43034);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.body().html();
            org.junit.Assert.fail("handlesSolidusAtAttributeEnd_cf211029 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSolidusAtAttributeEnd */
    @org.junit.Test(timeout = 10000)
    public void handlesSolidusAtAttributeEnd_cf211027_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // this test makes sure [<a href=/>link</a>] is parsed as [<a href="/">link</a>], not [<a href="" /><a>link</a>]
            java.lang.String h = "<a href=/>link</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_43028 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_43028.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.body().html();
            org.junit.Assert.fail("handlesSolidusAtAttributeEnd_cf211027 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSolidusAtAttributeEnd */
    @org.junit.Test(timeout = 10000)
    public void handlesSolidusAtAttributeEnd_cf211033() {
        // this test makes sure [<a href=/>link</a>] is parsed as [<a href="/">link</a>], not [<a href="" /><a>link</a>]
        java.lang.String h = "<a href=/>link</a>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create random local variable
        boolean vc_43034 = false;
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_43033 = new java.lang.String();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_43030 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_handlesSolidusAtAttributeEnd_cf211033__11 = // StatementAdderMethod cloned existing statement
vc_43030.unescapeEntities(vc_43033, vc_43034);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesSolidusAtAttributeEnd_cf211033__11, "");
        org.junit.Assert.assertEquals("<a href=\"/\">link</a>", doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSolidusAtAttributeEnd */
    @org.junit.Test(timeout = 10000)
    public void handlesSolidusAtAttributeEnd_cf211197() {
        // this test makes sure [<a href=/>link</a>] is parsed as [<a href="/">link</a>], not [<a href="" /><a>link</a>]
        java.lang.String h = "<a href=/>link</a>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_43086 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesSolidusAtAttributeEnd_cf211197__7 = // StatementAdderMethod cloned existing statement
vc_43086.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesSolidusAtAttributeEnd_cf211197__7).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesSolidusAtAttributeEnd_cf211197__7).getErrors());
        org.junit.Assert.assertEquals("<a href=\"/\">link</a>", doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSolidusAtAttributeEnd */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSolidusAtAttributeEnd_cf211030 */
    @org.junit.Test(timeout = 10000)
    public void handlesSolidusAtAttributeEnd_cf211030_cf211235_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // this test makes sure [<a href=/>link</a>] is parsed as [<a href="/">link</a>], not [<a href="" /><a>link</a>]
            java.lang.String h = "<a href=/>link</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_43034 = false;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_43030 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesSolidusAtAttributeEnd_cf211030__9 = // StatementAdderMethod cloned existing statement
vc_43030.unescapeEntities(h, vc_43034);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_handlesSolidusAtAttributeEnd_cf211030__9;
            // StatementAdderOnAssert create null value
            java.lang.String vc_43094 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_43030.unescapeEntities(vc_43094, vc_43034);
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.body().html();
            org.junit.Assert.fail("handlesSolidusAtAttributeEnd_cf211030_cf211235 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSolidusAtAttributeEnd */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSolidusAtAttributeEnd_cf211031 */
    @org.junit.Test(timeout = 10000)
    public void handlesSolidusAtAttributeEnd_cf211031_cf211811_failAssert3_literalMutation213910() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // this test makes sure [<a href=/>link</a>] is parsed as [<a href="/">link</a>], not [<a href="" /><a>link</a>]
            java.lang.String h = "O<|JKL^Whj!SCj]8kq";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "O<|JKL^Whj!SCj]8kq");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_43034 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_43030 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesSolidusAtAttributeEnd_cf211031__12 = // StatementAdderMethod cloned existing statement
vc_43030.unescapeEntities(html, vc_43034);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_handlesSolidusAtAttributeEnd_cf211031__12;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, "<html>\n <head></head>\n <body>\n  O<|JKL^Whj!SCj]8kq\n </body>\n</html>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_43208 = (org.jsoup.parser.ParseSettings)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_43208);
            // StatementAdderMethod cloned existing statement
            vc_43030.settings(vc_43208);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.body().html();
            org.junit.Assert.fail("handlesSolidusAtAttributeEnd_cf211031_cf211811 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSolidusAtAttributeEnd */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSolidusAtAttributeEnd_cf211032 */
    @org.junit.Test(timeout = 10000)
    public void handlesSolidusAtAttributeEnd_cf211032_cf211890_failAssert13_literalMutation213962() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // this test makes sure [<a href=/>link</a>] is parsed as [<a href="/">link</a>], not [<a href="" /><a>link</a>]
            java.lang.String h = ";TS#ybM>gs&oQ8[+I&";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, ";TS#ybM>gs&oQ8[+I&");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_43034 = false;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_6520 = "<a href=/>link</a>";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_43030 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesSolidusAtAttributeEnd_cf211032__11 = // StatementAdderMethod cloned existing statement
vc_43030.unescapeEntities(String_vc_6520, vc_43034);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_handlesSolidusAtAttributeEnd_cf211032__11;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_13_0, "<a href=/>link</a>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_43221 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_43221);
            // StatementAdderMethod cloned existing statement
            vc_43221.getErrors();
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.body().html();
            org.junit.Assert.fail("handlesSolidusAtAttributeEnd_cf211032_cf211890 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSolidusInA */
    @org.junit.Test(timeout = 10000)
    public void handlesSolidusInA_cf214025_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for bug #66
            java.lang.String h = "<a class=lp href=/lib/14160711/>link text</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.nodes.Element a = doc.select("a").first();
            // MethodAssertGenerator build local variable
            Object o_8_0 = a.text();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_43834 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_43834.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_14_0 = a.attr("href");
            org.junit.Assert.fail("handlesSolidusInA_cf214025 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSolidusInA */
    @org.junit.Test(timeout = 10000)
    public void handlesSolidusInA_cf214027_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for bug #66
            java.lang.String h = "<a class=lp href=/lib/14160711/>link text</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.nodes.Element a = doc.select("a").first();
            // MethodAssertGenerator build local variable
            Object o_8_0 = a.text();
            // StatementAdderOnAssert create random local variable
            boolean vc_43840 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_43838 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_43836 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_43836.unescapeEntities(vc_43838, vc_43840);
            // MethodAssertGenerator build local variable
            Object o_18_0 = a.attr("href");
            org.junit.Assert.fail("handlesSolidusInA_cf214027 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSolidusInA */
    @org.junit.Test(timeout = 10000)
    public void handlesSolidusInA_cf214225() {
        // test for bug #66
        java.lang.String h = "<a class=lp href=/lib/14160711/>link text</a>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.jsoup.nodes.Element a = doc.select("a").first();
        org.junit.Assert.assertEquals("link text", a.text());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_43892 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_43892);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesSolidusInA_cf214225__12 = // StatementAdderMethod cloned existing statement
vc_43892.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesSolidusInA_cf214225__12).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesSolidusInA_cf214225__12).isTrackErrors());
        org.junit.Assert.assertEquals("/lib/14160711/", a.attr("href"));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSolidusInA */
    @org.junit.Test(timeout = 10000)
    public void handlesSolidusInA_cf214029() {
        // test for bug #66
        java.lang.String h = "<a class=lp href=/lib/14160711/>link text</a>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.jsoup.nodes.Element a = doc.select("a").first();
        org.junit.Assert.assertEquals("link text", a.text());
        // StatementAdderOnAssert create random local variable
        boolean vc_43840 = false;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(vc_43840);
        // StatementAddOnAssert local variable replacement
        java.lang.String html = doc.outerHtml();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(html, "<html>\n <head></head>\n <body>\n  <a class=\"lp\" href=\"/lib/14160711/\">link text</a>\n </body>\n</html>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_43836 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_43836);
        // AssertGenerator replace invocation
        java.lang.String o_handlesSolidusInA_cf214029__17 = // StatementAdderMethod cloned existing statement
vc_43836.unescapeEntities(html, vc_43840);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesSolidusInA_cf214029__17, "<html>\n <head></head>\n <body>\n  <a class=\"lp\" href=\"/lib/14160711/\">link text</a>\n </body>\n</html>");
        org.junit.Assert.assertEquals("/lib/14160711/", a.attr("href"));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSolidusInA */
    @org.junit.Test(timeout = 10000)
    public void handlesSolidusInA_cf214027_failAssert13_add216587() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for bug #66
            java.lang.String h = "<a class=lp href=/lib/14160711/>link text</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.nodes.Element a = doc.select("a").first();
            // MethodAssertGenerator build local variable
            Object o_8_0 = a.text();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_8_0, "link text");
            // StatementAdderOnAssert create random local variable
            boolean vc_43840 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(vc_43840);
            // StatementAdderOnAssert create null value
            java.lang.String vc_43838 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_43838);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_43836 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_43836);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_43836.unescapeEntities(vc_43838, vc_43840);
            // StatementAdderMethod cloned existing statement
            vc_43836.unescapeEntities(vc_43838, vc_43840);
            // MethodAssertGenerator build local variable
            Object o_18_0 = a.attr("href");
            org.junit.Assert.fail("handlesSolidusInA_cf214027 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSolidusInA */
    @org.junit.Test(timeout = 10000)
    public void handlesSolidusInA_cf214217_failAssert11_literalMutation216585_cf217314_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // test for bug #66
                java.lang.String h = "<a class=lp hrief=/lib/14160711/>link text</a>";
                // MethodAssertGenerator build local variable
                Object o_5_0 = h;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                org.jsoup.nodes.Element a = doc.select("a").first();
                // MethodAssertGenerator build local variable
                Object o_8_0 = a.text();
                // MethodAssertGenerator build local variable
                Object o_15_0 = o_8_0;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.TreeBuilder vc_43886 = (org.jsoup.parser.TreeBuilder)null;
                // MethodAssertGenerator build local variable
                Object o_19_0 = vc_43886;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_43884 = (org.jsoup.parser.Parser)null;
                // StatementAdderOnAssert create random local variable
                boolean vc_44460 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_44458 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_44456 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_44456.unescapeEntities(vc_44458, vc_44460);
                // MethodAssertGenerator build local variable
                Object o_31_0 = vc_43884;
                // StatementAdderMethod cloned existing statement
                vc_43884.setTreeBuilder(vc_43886);
                // MethodAssertGenerator build local variable
                Object o_16_0 = a.attr("href");
                org.junit.Assert.fail("handlesSolidusInA_cf214217 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesSolidusInA_cf214217_failAssert11_literalMutation216585_cf217314 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSpanInTbody */
    @org.junit.Test(timeout = 10000)
    public void handlesSpanInTbody_cf218099() {
        // test for bug 64
        java.lang.String h = "<table><tbody><span class='1'><tr><td>One</td></tr><tr><td>Two</td></tr></span></tbody></table>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals(doc.select("span").first().children().size(), 0);// the span gets closed
        
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_44685 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesSpanInTbody_cf218099__13 = // StatementAdderMethod cloned existing statement
vc_44685.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesSpanInTbody_cf218099__13).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesSpanInTbody_cf218099__13).isTrackErrors());
        org.junit.Assert.assertEquals(doc.select("table").size(), 1);// only one table
        
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSpanInTbody */
    @org.junit.Test(timeout = 10000)
    public void handlesSpanInTbody_cf217945_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for bug 64
            java.lang.String h = "<table><tbody><span class='1'><tr><td>One</td></tr><tr><td>Two</td></tr></span></tbody></table>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.select("span").first().children().size();
            // StatementAdderOnAssert create random local variable
            boolean vc_44646 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_44644 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_44642 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_44642.unescapeEntities(vc_44644, vc_44646);
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.select("table").size();
            org.junit.Assert.fail("handlesSpanInTbody_cf217945 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSpanInTbody */
    @org.junit.Test(timeout = 10000)
    public void handlesSpanInTbody_cf217947() {
        // test for bug 64
        java.lang.String h = "<table><tbody><span class='1'><tr><td>One</td></tr><tr><td>Two</td></tr></span></tbody></table>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals(doc.select("span").first().children().size(), 0);// the span gets closed
        
        // StatementAdderOnAssert create random local variable
        boolean vc_44646 = true;
        // StatementAddOnAssert local variable replacement
        java.lang.String rendered = doc.toString();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_44642 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_handlesSpanInTbody_cf217947__18 = // StatementAdderMethod cloned existing statement
vc_44642.unescapeEntities(rendered, vc_44646);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesSpanInTbody_cf217947__18, "<html>\n <head></head>\n <body>\n  <span class=\"1\"></span>\n  <table>\n   <tbody>\n    <tr>\n     <td>One</td>\n    </tr>\n    <tr>\n     <td>Two</td>\n    </tr>\n   </tbody>\n  </table>\n </body>\n</html>");
        org.junit.Assert.assertEquals(doc.select("table").size(), 1);// only one table
        
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSpanInTbody */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSpanInTbody_cf218099 */
    @org.junit.Test(timeout = 10000)
    public void handlesSpanInTbody_cf218099_cf219384_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for bug 64
            java.lang.String h = "<table><tbody><span class='1'><tr><td>One</td></tr><tr><td>Two</td></tr></span></tbody></table>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.select("span").first().children().size();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_44685 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_handlesSpanInTbody_cf218099__13 = // StatementAdderMethod cloned existing statement
vc_44685.htmlParser();
            // MethodAssertGenerator build local variable
            Object o_15_0 = ((org.jsoup.parser.Parser)o_handlesSpanInTbody_cf218099__13).getErrors();
            // MethodAssertGenerator build local variable
            Object o_17_0 = ((org.jsoup.parser.Parser)o_handlesSpanInTbody_cf218099__13).isTrackErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_44956 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_44954 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_44685.unescapeEntities(vc_44954, vc_44956);
            // MethodAssertGenerator build local variable
            Object o_25_0 = doc.select("table").size();
            org.junit.Assert.fail("handlesSpanInTbody_cf218099_cf219384 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSpanInTbody */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSpanInTbody_cf217955 */
    @org.junit.Test(timeout = 10000)
    public void handlesSpanInTbody_cf217955_failAssert9_literalMutation219936() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for bug 64
            java.lang.String h = "<table><tbody><span class=\'1\'><t7><td>One</td></tr><tr><td>Two</td></tr></span></tbody></table>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<table><tbody><span class=\'1\'><t7><td>One</td></tr><tr><td>Two</td></tr></span></tbody></table>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.select("span").first().children().size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_5_0, 1);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_44647 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_44647.getErrors();
            // MethodAssertGenerator build local variable
            Object o_15_0 = doc.select("table").size();
            org.junit.Assert.fail("handlesSpanInTbody_cf217955 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSpanInTbody */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSpanInTbody_cf218103 */
    @org.junit.Test(timeout = 10000)
    public void handlesSpanInTbody_cf218103_failAssert12_literalMutation219958() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for bug 64
            java.lang.String h = "<table><tbody><span class=\'1\'><tr><td>One</td></tr><tr><d>Two</td></tr></span></tbody></table>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<table><tbody><span class=\'1\'><tr><td>One</td></tr><tr><d>Two</td></tr></span></tbody></table>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.select("span").first().children().size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_5_0, 0);
            // StatementAdderOnAssert create random local variable
            int vc_44689 = -1261895164;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_44687 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_44687.setTrackErrors(vc_44689);
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.select("table").size();
            org.junit.Assert.fail("handlesSpanInTbody_cf218103 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSpanInTbody */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSpanInTbody_literalMutation217934 */
    @org.junit.Test(timeout = 10000)
    public void handlesSpanInTbody_literalMutation217934_failAssert1_literalMutation219918_cf220876_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // test for bug 64
                java.lang.String h = "+Vqnu&nz;N&;vgn`k|[(86l#nYAn:Ynq=hcuB|]b;6iPws|,,yN#>[K(Ka3w^q5kd|*:,vrPWF2pssaO_F5-ygR-N&9|,f%d";
                // StatementAdderOnAssert create random local variable
                boolean vc_45390 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_45388 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_45386 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_45386.unescapeEntities(vc_45388, vc_45390);
                // MethodAssertGenerator build local variable
                Object o_13_0 = h;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                // MethodAssertGenerator build local variable
                Object o_5_0 = doc.select("span").first().children().size();
                // MethodAssertGenerator build local variable
                Object o_11_0 = doc.select("table").size();
                org.junit.Assert.fail("handlesSpanInTbody_literalMutation217934 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesSpanInTbody_literalMutation217934_failAssert1_literalMutation219918_cf220876 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSpanInTbody */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSpanInTbody_cf217948 */
    @org.junit.Test(timeout = 10000)
    public void handlesSpanInTbody_cf217948_cf219035_failAssert10_literalMutation221553() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for bug 64
            java.lang.String h = "<table><tbody><span class=\'1\'><tr><td>One</td></tr><tr><td>Two</td></t&></span></tbody></table>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<table><tbody><span class=\'1\'><tr><td>One</td></tr><tr><td>Two</td></t&></span></tbody></table>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.select("span").first().children().size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_5_0, 0);
            // StatementAdderOnAssert create random local variable
            boolean vc_44646 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_6760 = "table";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_44642 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesSpanInTbody_cf217948__17 = // StatementAdderMethod cloned existing statement
vc_44642.unescapeEntities(String_vc_6760, vc_44646);
            // MethodAssertGenerator build local variable
            Object o_19_0 = o_handlesSpanInTbody_cf217948__17;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_19_0, "table");
            // StatementAdderOnAssert create random local variable
            int vc_44875 = 1522537014;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_44875, 1522537014);
            // StatementAdderMethod cloned existing statement
            vc_44642.setTrackErrors(vc_44875);
            // MethodAssertGenerator build local variable
            Object o_25_0 = doc.select("table").size();
            org.junit.Assert.fail("handlesSpanInTbody_cf217948_cf219035 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSpanInTbody */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSpanInTbody_cf217947 */
    @org.junit.Test(timeout = 10000)
    public void handlesSpanInTbody_cf217947_cf218725_failAssert1_literalMutation221508() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for bug 64
            java.lang.String h = "<table><tbody><span class='1'><tr><td>One</td></tr><tr><td>Two</td></tr></span></tbody></table>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.select("span").first().children().size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_5_0, 0);
            // StatementAdderOnAssert create random local variable
            boolean vc_44646 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(vc_44646);
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_44642 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesSpanInTbody_cf217947__18 = // StatementAdderMethod cloned existing statement
vc_44642.unescapeEntities(rendered, vc_44646);
            // MethodAssertGenerator build local variable
            Object o_20_0 = o_handlesSpanInTbody_cf217947__18;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_20_0, "<html>\n <head></head>\n <body>\n  <span class=\"1\"></span>\n  <table>\n   <tbody>\n    <tr>\n     <td>One</td>\n    </tr>\n    <tr>\n     <td>Two</td>\n    </tr>\n   </tbody>\n  </table>\n </body>\n</html>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_44816 = (org.jsoup.parser.TreeBuilder)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_44816);
            // StatementAdderMethod cloned existing statement
            vc_44642.setTreeBuilder(vc_44816);
            // MethodAssertGenerator build local variable
            Object o_26_0 = doc.select("table").size();
            org.junit.Assert.fail("handlesSpanInTbody_cf217947_cf218725 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSpanInTbody */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesSpanInTbody_cf217947 */
    @org.junit.Test(timeout = 10000)
    public void handlesSpanInTbody_cf217947_cf218708_failAssert18_literalMutation221609() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for bug 64
            java.lang.String h = "<table><tbody><span class=\'1\'><tr><td>One</td></tr><tr><td>Two</td></tr></span><tbody></table>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<table><tbody><span class=\'1\'><tr><td>One</td></tr><tr><td>Two</td></tr></span><tbody></table>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.select("span").first().children().size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_5_0, 0);
            // StatementAdderOnAssert create random local variable
            boolean vc_44646 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_44642 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesSpanInTbody_cf217947__18 = // StatementAdderMethod cloned existing statement
vc_44642.unescapeEntities(rendered, vc_44646);
            // MethodAssertGenerator build local variable
            Object o_20_0 = o_handlesSpanInTbody_cf217947__18;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_20_0, "<html>\n <head></head>\n <body>\n  <span class=\"1\"></span>\n  <table>\n   <tbody>\n    <tr>\n     <td>One</td>\n    </tr>\n    <tr>\n     <td>Two</td>\n    </tr>\n   </tbody>\n   <tbody></tbody>\n  </table>\n </body>\n</html>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_44807 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_44807);
            // StatementAdderMethod cloned existing statement
            vc_44807.settings();
            // MethodAssertGenerator build local variable
            Object o_26_0 = doc.select("table").size();
            org.junit.Assert.fail("handlesSpanInTbody_cf217947_cf218708 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTagsInTextarea */
    @org.junit.Test(timeout = 10000)
    public void handlesTagsInTextarea_cf221779() {
        java.lang.String html = "<textarea><p>Jsoup</p></textarea>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_45677 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesTagsInTextarea_cf221779__6 = // StatementAdderMethod cloned existing statement
vc_45677.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesTagsInTextarea_cf221779__6).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesTagsInTextarea_cf221779__6).isTrackErrors());
        org.junit.Assert.assertEquals("<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>", doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTagsInTextarea */
    @org.junit.Test(timeout = 10000)
    public void handlesTagsInTextarea_cf221628() {
        java.lang.String html = "<textarea><p>Jsoup</p></textarea>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        // StatementAdderOnAssert create random local variable
        boolean vc_45638 = false;
        // StatementAdderOnAssert create literal from method
        java.lang.String String_vc_6906 = "<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>";
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_45634 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_handlesTagsInTextarea_cf221628__10 = // StatementAdderMethod cloned existing statement
vc_45634.unescapeEntities(String_vc_6906, vc_45638);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesTagsInTextarea_cf221628__10, "<textarea><p>Jsoup</p></textarea>");
        org.junit.Assert.assertEquals("<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>", doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTagsInTextarea */
    @org.junit.Test(timeout = 10000)
    public void handlesTagsInTextarea_cf221777_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<textarea><p>Jsoup</p></textarea>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_45675 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_45675.settings();
            // MethodAssertGenerator build local variable
            Object o_8_0 = doc.body().html();
            org.junit.Assert.fail("handlesTagsInTextarea_cf221777 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTagsInTextarea */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTagsInTextarea_cf221629 */
    @org.junit.Test(timeout = 10000)
    public void handlesTagsInTextarea_cf221629_cf222748_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<textarea><p>Jsoup</p></textarea>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_45638 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_45637 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_45634 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesTagsInTextarea_cf221629__10 = // StatementAdderMethod cloned existing statement
vc_45634.unescapeEntities(vc_45637, vc_45638);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_handlesTagsInTextarea_cf221629__10;
            // StatementAdderOnAssert create null value
            java.lang.String vc_45884 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_45882 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_45882.unescapeEntities(vc_45884, vc_45638);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.body().html();
            org.junit.Assert.fail("handlesTagsInTextarea_cf221629_cf222748 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTagsInTextarea */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTagsInTextarea_cf221629 */
    @org.junit.Test(timeout = 10000)
    public void handlesTagsInTextarea_cf221629_cf222794_failAssert2_literalMutation224185() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "J{1pxh6k4I&#-$A1_+EtUsw#/N_+v$^vz";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "J{1pxh6k4I&#-$A1_+EtUsw#/N_+v$^vz");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_45638 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_45637 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_45634 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesTagsInTextarea_cf221629__10 = // StatementAdderMethod cloned existing statement
vc_45634.unescapeEntities(vc_45637, vc_45638);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_handlesTagsInTextarea_cf221629__10;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, "");
            // StatementAdderMethod cloned existing statement
            vc_45634.getErrors();
            // MethodAssertGenerator build local variable
            Object o_16_0 = doc.body().html();
            org.junit.Assert.fail("handlesTagsInTextarea_cf221629_cf222794 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTagsInTextarea */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTagsInTextarea_cf221627 */
    @org.junit.Test(timeout = 10000)
    public void handlesTagsInTextarea_cf221627_cf222405_failAssert1_literalMutation224177() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<textrea><p>Jsoup</p></textarea>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<textrea><p>Jsoup</p></textarea>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_45638 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_45634 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesTagsInTextarea_cf221627__11 = // StatementAdderMethod cloned existing statement
vc_45634.unescapeEntities(rendered, vc_45638);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_handlesTagsInTextarea_cf221627__11;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_13_0, "<html>\n <head></head>\n <body>\n  <textrea>\n   <p>Jsoup</p>\n  </textrea>\n </body>\n</html>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_45812 = (org.jsoup.parser.ParseSettings)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_45812);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_45810 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_45810);
            // StatementAdderMethod cloned existing statement
            vc_45810.settings(vc_45812);
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.body().html();
            org.junit.Assert.fail("handlesTagsInTextarea_cf221627_cf222405 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTagsInTextarea */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTagsInTextarea_cf221629 */
    @org.junit.Test(timeout = 10000)
    public void handlesTagsInTextarea_cf221629_cf222748_failAssert17_literalMutation224260() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "1l=`]4nZ{Tx!+e>/NY01w):>7+F(n! @&";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "1l=`]4nZ{Tx!+e>/NY01w):>7+F(n! @&");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_45638 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_45637 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_45634 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesTagsInTextarea_cf221629__10 = // StatementAdderMethod cloned existing statement
vc_45634.unescapeEntities(vc_45637, vc_45638);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_handlesTagsInTextarea_cf221629__10;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, "");
            // StatementAdderOnAssert create null value
            java.lang.String vc_45884 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_45884);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_45882 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_45882);
            // StatementAdderMethod cloned existing statement
            vc_45882.unescapeEntities(vc_45884, vc_45638);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.body().html();
            org.junit.Assert.fail("handlesTagsInTextarea_cf221629_cf222748 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTagsInTextarea */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTagsInTextarea_cf221785 */
    @org.junit.Test(timeout = 10000)
    public void handlesTagsInTextarea_cf221785_failAssert15_literalMutation223623_cf223647_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "";
                // StatementAdderOnAssert create random local variable
                boolean vc_46072 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_46070 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_46068 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_46068.unescapeEntities(vc_46070, vc_46072);
                // MethodAssertGenerator build local variable
                Object o_12_0 = html;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                // StatementAdderOnAssert create null value
                org.jsoup.parser.TreeBuilder vc_45684 = (org.jsoup.parser.TreeBuilder)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_45682 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_45682.setTreeBuilder(vc_45684);
                // MethodAssertGenerator build local variable
                Object o_10_0 = doc.body().html();
                org.junit.Assert.fail("handlesTagsInTextarea_cf221785 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesTagsInTextarea_cf221785_failAssert15_literalMutation223623_cf223647 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTbodyTable */
    @org.junit.Test(timeout = 10000)
    public void handlesTbodyTable_cf224268_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head></head><body><table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table></body></html>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_46314 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_46314.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesTbodyTable_cf224268 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTbodyTable */
    @org.junit.Test(timeout = 10000)
    public void handlesTbodyTable_cf224270_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head></head><body><table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table></body></html>");
            // StatementAdderOnAssert create random local variable
            boolean vc_46320 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_46318 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_46316 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_46316.unescapeEntities(vc_46318, vc_46320);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesTbodyTable_cf224270 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTbodyTable */
    @org.junit.Test(timeout = 10000)
    public void handlesTbodyTable_cf224406() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head></head><body><table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table></body></html>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_46372 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesTbodyTable_cf224406__5 = // StatementAdderMethod cloned existing statement
vc_46372.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesTbodyTable_cf224406__5).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesTbodyTable_cf224406__5).isTrackErrors());
        org.junit.Assert.assertEquals("<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTbodyTable */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTbodyTable_cf224271 */
    @org.junit.Test(timeout = 10000)
    public void handlesTbodyTable_cf224271_cf224425_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head></head><body><table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table></body></html>");
            // StatementAdderOnAssert create random local variable
            boolean vc_46320 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_46316 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesTbodyTable_cf224271__11 = // StatementAdderMethod cloned existing statement
vc_46316.unescapeEntities(out, vc_46320);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_handlesTbodyTable_cf224271__11;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_7018 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_46380 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_46378 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_46378.unescapeEntities(vc_46380, boolean_vc_7018);
            // MethodAssertGenerator build local variable
            Object o_23_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesTbodyTable_cf224271_cf224425 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTbodyTable */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTbodyTable_cf224271 */
    @org.junit.Test(timeout = 10000)
    public void handlesTbodyTable_cf224271_cf224690_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head></head><body><table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table></body></html>");
            // StatementAdderOnAssert create random local variable
            boolean vc_46320 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_46316 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesTbodyTable_cf224271__11 = // StatementAdderMethod cloned existing statement
vc_46316.unescapeEntities(out, vc_46320);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_handlesTbodyTable_cf224271__11;
            // StatementAdderOnAssert create random local variable
            int vc_46425 = -1037689975;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_46423 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_46423.setTrackErrors(vc_46425);
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesTbodyTable_cf224271_cf224690 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTbodyTable */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTbodyTable_cf224272 */
    @org.junit.Test(timeout = 10000)
    public void handlesTbodyTable_cf224272_cf224735_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head></head><body><table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table></body></html>");
            // StatementAdderOnAssert create random local variable
            boolean vc_46320 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_7009 = "<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_46316 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesTbodyTable_cf224272__9 = // StatementAdderMethod cloned existing statement
vc_46316.unescapeEntities(String_vc_7009, vc_46320);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_handlesTbodyTable_cf224272__9;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_7028 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_46442 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_46440 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_46440.unescapeEntities(vc_46442, boolean_vc_7028);
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesTbodyTable_cf224272_cf224735 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTbodyTable */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTbodyTable_cf224396 */
    @org.junit.Test(timeout = 10000)
    public void handlesTbodyTable_cf224396_failAssert9_literalMutation225776_cf225940_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_16_1 = -1410460764;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head></head><body><table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table></body></html>");
                // StatementAdderOnAssert create random local variable
                int vc_46363 = -1410460764;
                // StatementAdderOnAssert create random local variable
                boolean vc_46754 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_46752 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_46750 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_46750.unescapeEntities(vc_46752, vc_46754);
                // MethodAssertGenerator build local variable
                Object o_16_0 = vc_46363;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_46361 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_46361.setTrackErrors(vc_46363);
                // MethodAssertGenerator build local variable
                Object o_9_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.junit.Assert.fail("handlesTbodyTable_cf224396 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesTbodyTable_cf224396_failAssert9_literalMutation225776_cf225940 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextAfterData */
    @org.junit.Test(timeout = 10000)
    public void handlesTextAfterData_cf226152_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><body>pre <script>inner</script> aft</body></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_46816 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_46814 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_46812 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_46812.unescapeEntities(vc_46814, vc_46816);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("handlesTextAfterData_cf226152 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextAfterData */
    @org.junit.Test(timeout = 10000)
    public void handlesTextAfterData_cf226150_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><body>pre <script>inner</script> aft</body></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_46810 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_46810.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("handlesTextAfterData_cf226150 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextAfterData */
    @org.junit.Test(timeout = 10000)
    public void handlesTextAfterData_cf226306() {
        java.lang.String h = "<html><body>pre <script>inner</script> aft</body></html>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_46855 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesTextAfterData_cf226306__6 = // StatementAdderMethod cloned existing statement
vc_46855.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesTextAfterData_cf226306__6).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesTextAfterData_cf226306__6).getErrors());
        org.junit.Assert.assertEquals("<html><head></head><body>pre <script>inner</script> aft</body></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextAfterData */
    @org.junit.Test(timeout = 10000)
    public void handlesTextAfterData_cf226156() {
        java.lang.String h = "<html><body>pre <script>inner</script> aft</body></html>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create random local variable
        boolean vc_46816 = false;
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_46815 = new java.lang.String();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_46812 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_handlesTextAfterData_cf226156__10 = // StatementAdderMethod cloned existing statement
vc_46812.unescapeEntities(vc_46815, vc_46816);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesTextAfterData_cf226156__10, "");
        org.junit.Assert.assertEquals("<html><head></head><body>pre <script>inner</script> aft</body></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextAfterData */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextAfterData_cf226154 */
    @org.junit.Test(timeout = 10000)
    public void handlesTextAfterData_cf226154_cf226911_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><body>pre <script>inner</script> aft</body></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_46816 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_46812 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesTextAfterData_cf226154__11 = // StatementAdderMethod cloned existing statement
vc_46812.unescapeEntities(html, vc_46816);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_handlesTextAfterData_cf226154__11;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_46977 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_46977.settings();
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("handlesTextAfterData_cf226154_cf226911 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextAfterData */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextAfterData_cf226156 */
    @org.junit.Test(timeout = 10000)
    public void handlesTextAfterData_cf226156_cf227291_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><body>pre <script>inner</script> aft</body></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_46816 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_46815 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_46812 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesTextAfterData_cf226156__10 = // StatementAdderMethod cloned existing statement
vc_46812.unescapeEntities(vc_46815, vc_46816);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_handlesTextAfterData_cf226156__10;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_7122 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_47062 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_46812.unescapeEntities(vc_47062, boolean_vc_7122);
            // MethodAssertGenerator build local variable
            Object o_20_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("handlesTextAfterData_cf226156_cf227291 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextAfterData */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextAfterData_cf226162 */
    @org.junit.Test(timeout = 10000)
    public void handlesTextAfterData_cf226162_failAssert12_literalMutation228128_cf228704_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String h = "";
                // StatementAdderOnAssert create random local variable
                boolean vc_47498 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_47496 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_47494 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_47494.unescapeEntities(vc_47496, vc_47498);
                // MethodAssertGenerator build local variable
                Object o_12_0 = h;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_46817 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_46817.getErrors();
                // MethodAssertGenerator build local variable
                Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
                org.junit.Assert.fail("handlesTextAfterData_cf226162 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesTextAfterData_cf226162_failAssert12_literalMutation228128_cf228704 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextAfterData */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextAfterData_cf226154 */
    @org.junit.Test(timeout = 10000)
    public void handlesTextAfterData_cf226154_cf226922_failAssert18_literalMutation229309() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "01?/,/5/}BP =r)-i<qVCr#kOM{HyE-37h*0r^rg=5.%]NH,(`-juir%";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "01?/,/5/}BP =r)-i<qVCr#kOM{HyE-37h*0r^rg=5.%]NH,(`-juir%");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_46816 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_46812 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesTextAfterData_cf226154__11 = // StatementAdderMethod cloned existing statement
vc_46812.unescapeEntities(html, vc_46816);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_handlesTextAfterData_cf226154__11;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_13_0, "<html>\n <head></head>\n <body>\n  01?/,/5/}BP =r)-i\n </body>\n</html>");
            // StatementAdderOnAssert create random local variable
            int vc_46983 = -1785603850;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_46983, -1785603850);
            // StatementAdderMethod cloned existing statement
            vc_46812.setTrackErrors(vc_46983);
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("handlesTextAfterData_cf226154_cf226922 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextAfterData */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextAfterData_cf226153 */
    @org.junit.Test(timeout = 10000)
    public void handlesTextAfterData_cf226153_cf226602_failAssert4_add229234() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><body>pre <script>inner</script> aft</body></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_46816 = false;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_46812 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesTextAfterData_cf226153__8 = // StatementAdderMethod cloned existing statement
vc_46812.unescapeEntities(h, vc_46816);
            // MethodAssertGenerator build local variable
            Object o_10_0 = o_handlesTextAfterData_cf226153__8;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_10_0, "<html><body>pre <script>inner</script> aft</body></html>");
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_46812.settings();
            // StatementAdderMethod cloned existing statement
            vc_46812.settings();
            // MethodAssertGenerator build local variable
            Object o_14_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("handlesTextAfterData_cf226153_cf226602 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextArea */
    @org.junit.Test(timeout = 10000)
    public void handlesTextArea_cf229394_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>Hello</textarea>");
            org.jsoup.select.Elements els = doc.select("textarea");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.text();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_47740 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_47740.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_11_0 = els.val();
            org.junit.Assert.fail("handlesTextArea_cf229394 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextArea */
    @org.junit.Test(timeout = 10000)
    public void handlesTextArea_cf229520() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>Hello</textarea>");
        org.jsoup.select.Elements els = doc.select("textarea");
        org.junit.Assert.assertEquals("Hello", els.text());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_47785 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesTextArea_cf229520__9 = // StatementAdderMethod cloned existing statement
vc_47785.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesTextArea_cf229520__9).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesTextArea_cf229520__9).getErrors());
        org.junit.Assert.assertEquals("Hello", els.val());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextArea */
    @org.junit.Test(timeout = 10000)
    public void handlesTextArea_cf229397() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>Hello</textarea>");
        org.jsoup.select.Elements els = doc.select("textarea");
        org.junit.Assert.assertEquals("Hello", els.text());
        // StatementAdderOnAssert create random local variable
        boolean vc_47746 = false;
        // StatementAddOnAssert local variable replacement
        java.lang.String html = doc.outerHtml();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_47742 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_handlesTextArea_cf229397__14 = // StatementAdderMethod cloned existing statement
vc_47742.unescapeEntities(html, vc_47746);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesTextArea_cf229397__14, "<html>\n <head></head>\n <body>\n  <textarea>Hello</textarea>\n </body>\n</html>");
        org.junit.Assert.assertEquals("Hello", els.val());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextArea */
    @org.junit.Test(timeout = 10000)
    public void handlesTextArea_cf229396_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>Hello</textarea>");
            org.jsoup.select.Elements els = doc.select("textarea");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.text();
            // StatementAdderOnAssert create random local variable
            boolean vc_47746 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_47744 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_47742 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_47742.unescapeEntities(vc_47744, vc_47746);
            // MethodAssertGenerator build local variable
            Object o_15_0 = els.val();
            org.junit.Assert.fail("handlesTextArea_cf229396 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextArea */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextArea_cf229397 */
    @org.junit.Test(timeout = 10000)
    public void handlesTextArea_cf229397_cf229555_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>Hello</textarea>");
            org.jsoup.select.Elements els = doc.select("textarea");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.text();
            // StatementAdderOnAssert create random local variable
            boolean vc_47746 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_47742 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesTextArea_cf229397__14 = // StatementAdderMethod cloned existing statement
vc_47742.unescapeEntities(html, vc_47746);
            // MethodAssertGenerator build local variable
            Object o_16_0 = o_handlesTextArea_cf229397__14;
            // StatementAdderOnAssert create null value
            java.lang.String vc_47806 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_47804 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_47804.unescapeEntities(vc_47806, vc_47746);
            // MethodAssertGenerator build local variable
            Object o_24_0 = els.val();
            org.junit.Assert.fail("handlesTextArea_cf229397_cf229555 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextArea */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesTextArea_cf229522 */
    @org.junit.Test(timeout = 10000)
    public void handlesTextArea_cf229522_failAssert14_literalMutation230928_cf231714_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_23_1 = 1002478615;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>Hello</textarea>");
                org.jsoup.select.Elements els = doc.select("textarea");
                // MethodAssertGenerator build local variable
                Object o_5_0 = els.text();
                // MethodAssertGenerator build local variable
                Object o_10_0 = o_5_0;
                // StatementAdderOnAssert create random local variable
                int vc_47789 = 1002478615;
                // StatementAdderOnAssert create random local variable
                boolean vc_48428 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_48426 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_48424 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_48424.unescapeEntities(vc_48426, vc_48428);
                // MethodAssertGenerator build local variable
                Object o_23_0 = vc_47789;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_47787 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_47787.setTrackErrors(vc_47789);
                // MethodAssertGenerator build local variable
                Object o_13_0 = els.val();
                org.junit.Assert.fail("handlesTextArea_cf229522 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesTextArea_cf229522_failAssert14_literalMutation230928_cf231714 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedAnchors */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedAnchors_cf231907_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<a href='http://example.com/'>Link<p>Error link</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            java.lang.String want = "<a href=\"http://example.com/\">Link</a>\n<p><a href=\"http://example.com/\">Error link</a></p>";
            // StatementAdderOnAssert create random local variable
            boolean vc_48490 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_48488 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_48486 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_48486.unescapeEntities(vc_48488, vc_48490);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.body().html();
            org.junit.Assert.fail("handlesUnclosedAnchors_cf231907 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedAnchors */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedAnchors_cf232061() {
        java.lang.String h = "<a href='http://example.com/'>Link<p>Error link</a>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        java.lang.String want = "<a href=\"http://example.com/\">Link</a>\n<p><a href=\"http://example.com/\">Error link</a></p>";
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_48529 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesUnclosedAnchors_cf232061__7 = // StatementAdderMethod cloned existing statement
vc_48529.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesUnclosedAnchors_cf232061__7).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesUnclosedAnchors_cf232061__7).getErrors());
        org.junit.Assert.assertEquals(want, doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedAnchors */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedAnchors_cf231905_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<a href='http://example.com/'>Link<p>Error link</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            java.lang.String want = "<a href=\"http://example.com/\">Link</a>\n<p><a href=\"http://example.com/\">Error link</a></p>";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_48484 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_48484.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.body().html();
            org.junit.Assert.fail("handlesUnclosedAnchors_cf231905 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedAnchors */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedAnchors_cf231909 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedAnchors_cf231909_cf232667_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<a href='http://example.com/'>Link<p>Error link</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            java.lang.String want = "<a href=\"http://example.com/\">Link</a>\n<p><a href=\"http://example.com/\">Error link</a></p>";
            // StatementAdderOnAssert create random local variable
            boolean vc_48490 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_48486 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnclosedAnchors_cf231909__12 = // StatementAdderMethod cloned existing statement
vc_48486.unescapeEntities(rendered, vc_48490);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_handlesUnclosedAnchors_cf231909__12;
            // StatementAdderMethod cloned existing statement
            vc_48486.settings();
            // MethodAssertGenerator build local variable
            Object o_18_0 = doc.body().html();
            org.junit.Assert.fail("handlesUnclosedAnchors_cf231909_cf232667 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedAnchors */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedAnchors_cf231908 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedAnchors_cf231908_cf232098_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<a href='http://example.com/'>Link<p>Error link</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            java.lang.String want = "<a href=\"http://example.com/\">Link</a>\n<p><a href=\"http://example.com/\">Error link</a></p>";
            // StatementAdderOnAssert create random local variable
            boolean vc_48490 = true;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_48486 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnclosedAnchors_cf231908__9 = // StatementAdderMethod cloned existing statement
vc_48486.unescapeEntities(want, vc_48490);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_handlesUnclosedAnchors_cf231908__9;
            // StatementAdderOnAssert create null value
            java.lang.String vc_48550 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_48548 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_48548.unescapeEntities(vc_48550, vc_48490);
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.body().html();
            org.junit.Assert.fail("handlesUnclosedAnchors_cf231908_cf232098 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedAnchors */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedAnchors_cf232071 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedAnchors_cf232071_failAssert16_literalMutation233943_cf233980_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String h = "<a href=\'http://example.com/\'>Link<p>Error link$</a>";
                // StatementAdderOnAssert create random local variable
                boolean vc_48924 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_48922 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_48920 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_48920.unescapeEntities(vc_48922, vc_48924);
                // MethodAssertGenerator build local variable
                Object o_12_0 = h;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                java.lang.String want = "<a href=\"http://example.com/\">Link</a>\n<p><a href=\"http://example.com/\">Error link</a></p>";
                // StatementAdderOnAssert create null value
                org.jsoup.parser.ParseSettings vc_48540 = (org.jsoup.parser.ParseSettings)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_48538 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_48538.settings(vc_48540);
                // MethodAssertGenerator build local variable
                Object o_11_0 = doc.body().html();
                org.junit.Assert.fail("handlesUnclosedAnchors_cf232071 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesUnclosedAnchors_cf232071_failAssert16_literalMutation233943_cf233980 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedCdataAtEOF */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedCdataAtEOF_cf235748() {
        // https://github.com/jhy/jsoup/issues/349 would crash, as character reader would try to seek past EOF
        java.lang.String h = "<![CDATA[]]";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_49521 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesUnclosedCdataAtEOF_cf235748__7 = // StatementAdderMethod cloned existing statement
vc_49521.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesUnclosedCdataAtEOF_cf235748__7).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesUnclosedCdataAtEOF_cf235748__7).isTrackErrors());
        org.junit.Assert.assertEquals(1, doc.body().childNodeSize());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedCdataAtEOF */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedCdataAtEOF_cf235592_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // https://github.com/jhy/jsoup/issues/349 would crash, as character reader would try to seek past EOF
            java.lang.String h = "<![CDATA[]]";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_49476 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_49476.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.body().childNodeSize();
            org.junit.Assert.fail("handlesUnclosedCdataAtEOF_cf235592 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedCdataAtEOF */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedCdataAtEOF_cf235596() {
        // https://github.com/jhy/jsoup/issues/349 would crash, as character reader would try to seek past EOF
        java.lang.String h = "<![CDATA[]]";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create random local variable
        boolean vc_49482 = true;
        // StatementAddOnAssert local variable replacement
        java.lang.String out = doc.body().html();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_49478 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_handlesUnclosedCdataAtEOF_cf235596__13 = // StatementAdderMethod cloned existing statement
vc_49478.unescapeEntities(out, vc_49482);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesUnclosedCdataAtEOF_cf235596__13, "]]");
        org.junit.Assert.assertEquals(1, doc.body().childNodeSize());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedCdataAtEOF */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedCdataAtEOF_cf235594_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // https://github.com/jhy/jsoup/issues/349 would crash, as character reader would try to seek past EOF
            java.lang.String h = "<![CDATA[]]";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_49482 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_49480 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_49478 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_49478.unescapeEntities(vc_49480, vc_49482);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.body().childNodeSize();
            org.junit.Assert.fail("handlesUnclosedCdataAtEOF_cf235594 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedCdataAtEOF */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedCdataAtEOF_cf235594 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedCdataAtEOF_cf235594_failAssert8_literalMutation237555_cf237792_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // https://github.com/jhy/jsoup/issues/349 would crash, as character reader would try to seek past EOF
                java.lang.String h = "<![CDATA[]]";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                // StatementAdderOnAssert create random local variable
                boolean vc_49482 = false;
                // StatementAdderOnAssert create random local variable
                int vc_49959 = 527778779;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_49957 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_49957.setTrackErrors(vc_49959);
                // MethodAssertGenerator build local variable
                Object o_16_0 = vc_49482;
                // StatementAdderOnAssert create null value
                java.lang.String vc_49480 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_49478 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_49478.unescapeEntities(vc_49480, vc_49482);
                // MethodAssertGenerator build local variable
                Object o_13_0 = doc.body().childNodeSize();
                org.junit.Assert.fail("handlesUnclosedCdataAtEOF_cf235594 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("handlesUnclosedCdataAtEOF_cf235594_failAssert8_literalMutation237555_cf237792 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedCdataAtEOF */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedCdataAtEOF_cf235596 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedCdataAtEOF_cf235596_cf236365_failAssert3_literalMutation239122() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // https://github.com/jhy/jsoup/issues/349 would crash, as character reader would try to seek past EOF
            java.lang.String h = "<![CDATAu]]";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<![CDATAu]]");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_49482 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_49478 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnclosedCdataAtEOF_cf235596__13 = // StatementAdderMethod cloned existing statement
vc_49478.unescapeEntities(out, vc_49482);
            // MethodAssertGenerator build local variable
            Object o_15_0 = o_handlesUnclosedCdataAtEOF_cf235596__13;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_15_0, "");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_49652 = (org.jsoup.parser.TreeBuilder)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_49652);
            // StatementAdderMethod cloned existing statement
            vc_49478.setTreeBuilder(vc_49652);
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.body().childNodeSize();
            org.junit.Assert.fail("handlesUnclosedCdataAtEOF_cf235596_cf236365 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedCdataAtEOF */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedCdataAtEOF_cf235595 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedCdataAtEOF_cf235595_cf235800_failAssert8_literalMutation239152() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // https://github.com/jhy/jsoup/issues/349 would crash, as character reader would try to seek past EOF
            java.lang.String h = "<!m[CDATA[]]";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<!m[CDATA[]]");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_49482 = true;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_49478 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnclosedCdataAtEOF_cf235595__9 = // StatementAdderMethod cloned existing statement
vc_49478.unescapeEntities(h, vc_49482);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_handlesUnclosedCdataAtEOF_cf235595__9;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "<!m[CDATA[]]");
            // StatementAdderOnAssert create null value
            java.lang.String vc_49542 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_49542);
            // StatementAdderMethod cloned existing statement
            vc_49478.unescapeEntities(vc_49542, vc_49482);
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.body().childNodeSize();
            org.junit.Assert.fail("handlesUnclosedCdataAtEOF_cf235595_cf235800 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedDefinitionLists */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedDefinitionLists_cf239199() {
        // jsoup used to create a <dl>, but that's not to spec
        java.lang.String h = "<dt>Foo<dd>Bar<dt>Qux<dd>Zug";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals(0, doc.select("dl").size());// no auto dl
        
        org.junit.Assert.assertEquals(4, doc.select("dt, dd").size());
        org.jsoup.select.Elements dts = doc.select("dt");
        org.junit.Assert.assertEquals(2, dts.size());
        // StatementAdderOnAssert create random local variable
        boolean vc_50536 = false;
        // StatementAddOnAssert local variable replacement
        java.lang.String rendered = doc.toString();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_50532 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_handlesUnclosedDefinitionLists_cf239199__23 = // StatementAdderMethod cloned existing statement
vc_50532.unescapeEntities(rendered, vc_50536);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesUnclosedDefinitionLists_cf239199__23, "<html>\n <head></head>\n <body>\n  <dt>\n   Foo\n  </dt>\n  <dd>\n   Bar\n  </dd>\n  <dt>\n   Qux\n  </dt>\n  <dd>\n   Zug\n  </dd>\n </body>\n</html>");
        org.junit.Assert.assertEquals("Zug", dts.get(1).nextElementSibling().text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedDefinitionLists */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedDefinitionLists_cf239195_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to create a <dl>, but that's not to spec
            java.lang.String h = "<dt>Foo<dd>Bar<dt>Qux<dd>Zug";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.select("dl").size();
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.select("dt, dd").size();
            org.jsoup.select.Elements dts = doc.select("dt");
            // MethodAssertGenerator build local variable
            Object o_14_0 = dts.size();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_50530 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_50530.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_20_0 = dts.get(1).nextElementSibling().text();
            org.junit.Assert.fail("handlesUnclosedDefinitionLists_cf239195 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedDefinitionLists */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedDefinitionLists_cf239351() {
        // jsoup used to create a <dl>, but that's not to spec
        java.lang.String h = "<dt>Foo<dd>Bar<dt>Qux<dd>Zug";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals(0, doc.select("dl").size());// no auto dl
        
        org.junit.Assert.assertEquals(4, doc.select("dt, dd").size());
        org.jsoup.select.Elements dts = doc.select("dt");
        org.junit.Assert.assertEquals(2, dts.size());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_50575 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesUnclosedDefinitionLists_cf239351__18 = // StatementAdderMethod cloned existing statement
vc_50575.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesUnclosedDefinitionLists_cf239351__18).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesUnclosedDefinitionLists_cf239351__18).getErrors());
        org.junit.Assert.assertEquals("Zug", dts.get(1).nextElementSibling().text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedDefinitionLists */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedDefinitionLists_cf239197_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to create a <dl>, but that's not to spec
            java.lang.String h = "<dt>Foo<dd>Bar<dt>Qux<dd>Zug";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.select("dl").size();
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.select("dt, dd").size();
            org.jsoup.select.Elements dts = doc.select("dt");
            // MethodAssertGenerator build local variable
            Object o_14_0 = dts.size();
            // StatementAdderOnAssert create random local variable
            boolean vc_50536 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_50534 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_50532 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_50532.unescapeEntities(vc_50534, vc_50536);
            // MethodAssertGenerator build local variable
            Object o_24_0 = dts.get(1).nextElementSibling().text();
            org.junit.Assert.fail("handlesUnclosedDefinitionLists_cf239197 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedDefinitionLists */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedDefinitionLists_cf239359 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedDefinitionLists_cf239359_failAssert23_literalMutation241281() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to create a <dl>, but that's not to spec
            java.lang.String h = "<dt>Foo<dx>Bar<dt>Qux<dd>Zug";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<dt>Foo<dx>Bar<dt>Qux<dd>Zug");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.select("dl").size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_5_0, 0);
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.select("dt, dd").size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_9_0, 3);
            org.jsoup.select.Elements dts = doc.select("dt");
            // MethodAssertGenerator build local variable
            Object o_14_0 = dts.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, 2);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_50582 = (org.jsoup.parser.TreeBuilder)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_50580 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_50580.setTreeBuilder(vc_50582);
            // MethodAssertGenerator build local variable
            Object o_22_0 = dts.get(1).nextElementSibling().text();
            org.junit.Assert.fail("handlesUnclosedDefinitionLists_cf239359 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedDefinitionLists */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedDefinitionLists_cf239200 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedDefinitionLists_cf239200_cf240046_failAssert1_literalMutation242815() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to create a <dl>, but that's not to spec
            java.lang.String h = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.select("dl").size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_5_0, 0);
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.select("dt, dd").size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_9_0, 0);
            org.jsoup.select.Elements dts = doc.select("dt");
            // MethodAssertGenerator build local variable
            Object o_14_0 = dts.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, 0);
            // StatementAdderOnAssert create random local variable
            boolean vc_50536 = false;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_7637 = "Zug";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_50532 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnclosedDefinitionLists_cf239200__22 = // StatementAdderMethod cloned existing statement
vc_50532.unescapeEntities(String_vc_7637, vc_50536);
            // MethodAssertGenerator build local variable
            Object o_24_0 = o_handlesUnclosedDefinitionLists_cf239200__22;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_24_0, "Zug");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_7667 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(boolean_vc_7667);
            // StatementAdderOnAssert create null value
            java.lang.String vc_50720 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_50720);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_50718 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_50718);
            // StatementAdderMethod cloned existing statement
            vc_50718.unescapeEntities(vc_50720, boolean_vc_7667);
            // MethodAssertGenerator build local variable
            Object o_34_0 = dts.get(1).nextElementSibling().text();
            org.junit.Assert.fail("handlesUnclosedDefinitionLists_cf239200_cf240046 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedFormattingElements */
    @org.junit.Test
    public void handlesUnclosedFormattingElements_literalMutation242941() {
        // whatwg: formatting elements get collected and applied, but excess elements are thrown away
        java.lang.String h = "<!DOCTYPEPhtml>\n" + ((("<p><b class=x><b class=x><b><b class=x><b class=x><b>X\n" + "<p>X\n") + "<p><b><b class=x><b>X\n") + "<p></b></b></b></b></b></b>X");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(h, "<!DOCTYPEPhtml>\n<p><b class=x><b class=x><b><b class=x><b class=x><b>X\n<p>X\n<p><b><b class=x><b>X\n<p></b></b></b></b></b></b>X");
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        doc.outputSettings().indentAmount(0);
        java.lang.String want = "<!doctype html>\n" + (((((((("<html>\n" + "<head></head>\n") + "<body>\n") + "<p><b class=\"x\"><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></b></p>\n") + "<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></p>\n") + "<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b><b><b class=\"x\"><b>X </b></b></b></b></b></b></b></b></p>\n") + "<p>X</p>\n") + "</body>\n") + "</html>");
        org.junit.Assert.assertEquals(want, doc.html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedFormattingElements */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedFormattingElements_cf243013_failAssert22() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: formatting elements get collected and applied, but excess elements are thrown away
            java.lang.String h = "<!DOCTYPE html>\n" + ((("<p><b class=x><b class=x><b><b class=x><b class=x><b>X\n" + "<p>X\n") + "<p><b><b class=x><b>X\n") + "<p></b></b></b></b></b></b>X");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            doc.outputSettings().indentAmount(0);
            java.lang.String want = "<!doctype html>\n" + (((((((("<html>\n" + "<head></head>\n") + "<body>\n") + "<p><b class=\"x\"><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></b></p>\n") + "<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></p>\n") + "<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b><b><b class=\"x\"><b>X </b></b></b></b></b></b></b></b></p>\n") + "<p>X</p>\n") + "</body>\n") + "</html>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_51460 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_51460.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.html();
            org.junit.Assert.fail("handlesUnclosedFormattingElements_cf243013 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedFormattingElements */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedFormattingElements_cf243173_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: formatting elements get collected and applied, but excess elements are thrown away
            java.lang.String h = "<!DOCTYPE html>\n" + ((("<p><b class=x><b class=x><b><b class=x><b class=x><b>X\n" + "<p>X\n") + "<p><b><b class=x><b>X\n") + "<p></b></b></b></b></b></b>X");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            doc.outputSettings().indentAmount(0);
            java.lang.String want = "<!doctype html>\n" + (((((((("<html>\n" + "<head></head>\n") + "<body>\n") + "<p><b class=\"x\"><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></b></p>\n") + "<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></p>\n") + "<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b><b><b class=\"x\"><b>X </b></b></b></b></b></b></b></b></p>\n") + "<p>X</p>\n") + "</body>\n") + "</html>");
            // StatementAdderOnAssert create random local variable
            int vc_51509 = -1542036049;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_51507 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_51507.setTrackErrors(vc_51509);
            // MethodAssertGenerator build local variable
            Object o_14_0 = doc.html();
            org.junit.Assert.fail("handlesUnclosedFormattingElements_cf243173 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedFormattingElements */
    @org.junit.Test
    public void handlesUnclosedFormattingElements_literalMutation242938() {
        // whatwg: formatting elements get collected and applied, but excess elements are thrown away
        java.lang.String h = "<!DOCTYPE{ html>\n" + ((("<p><b class=x><b class=x><b><b class=x><b class=x><b>X\n" + "<p>X\n") + "<p><b><b class=x><b>X\n") + "<p></b></b></b></b></b></b>X");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(h, "<!DOCTYPE{ html>\n<p><b class=x><b class=x><b><b class=x><b class=x><b>X\n<p>X\n<p><b><b class=x><b>X\n<p></b></b></b></b></b></b>X");
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        doc.outputSettings().indentAmount(0);
        java.lang.String want = "<!doctype html>\n" + (((((((("<html>\n" + "<head></head>\n") + "<body>\n") + "<p><b class=\"x\"><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></b></p>\n") + "<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></p>\n") + "<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b><b><b class=\"x\"><b>X </b></b></b></b></b></b></b></b></p>\n") + "<p>X</p>\n") + "</body>\n") + "</html>");
        org.junit.Assert.assertEquals(want, doc.html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedFormattingElements */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedFormattingElements_cf243015_failAssert47_literalMutation245152() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: formatting elements get collected and applied, but excess elements are thrown away
            java.lang.String h = "<!DOCTYPE html>\n" + ((("<p><b class=x><b class=x><b><b class=x><b class=x><b>X\n" + "<p>X\n") + "<p><b><b class=x><b>X\n") + "<p></b></b></b></b></b></b>X");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            doc.outputSettings().indentAmount(0);
            java.lang.String want = "<!doctype html>\n" + (((((((("<html>\n" + "<head></head>\n") + "<body>\n") + "<p><b class=\"x\"><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></b></p>\n") + "<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></p>\n") + "UT$WM,3c*9/y_w!-ywZ6=#k5Usx(8mh&5T&s;MvU<>r*k/}BP]KasOLIG#-!^zXLDP&@/l<[d.K|R<XF/ct*B|Lc[b9g&[s{Xkm&U<ChUq") + "<p>X</p>\n") + "</body>\n") + "</html>");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(want, "<!doctype html>\n<html>\n<head></head>\n<body>\n<p><b class=\"x\"><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></b></p>\n<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></p>\nUT$WM,3c*9/y_w!-ywZ6=#k5Usx(8mh&5T&s;MvU<>r*k/}BP]KasOLIG#-!^zXLDP&@/l<[d.K|R<XF/ct*B|Lc[b9g&[s{Xkm&U<ChUq<p>X</p>\n</body>\n</html>");
            // StatementAdderOnAssert create random local variable
            boolean vc_51466 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_51466);
            // StatementAdderOnAssert create null value
            java.lang.String vc_51464 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_51464);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_51462 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_51462);
            // StatementAdderMethod cloned existing statement
            vc_51462.unescapeEntities(vc_51464, vc_51466);
            // MethodAssertGenerator build local variable
            Object o_16_0 = doc.html();
            org.junit.Assert.fail("handlesUnclosedFormattingElements_cf243015 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedFormattingElements */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedFormattingElements_literalMutation242941_cf243438_failAssert17_literalMutation270158() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg: formatting elements get collected and applied, but excess elements are thrown away
            java.lang.String h = "<!DOCTYPEPhtml>\n" + ((("<p><b class=x><b class=x><b><b class=x><b class=x><b>X\n" + "<p>X\n") + "<p><b><b class=x><b>X\n") + "<p></b></b></b></b></b></b>X");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<!DOCTYPEPhtml>\n<p><b class=x><b class=x><b><b class=x><b class=x><b>X\n<p>X\n<p><b><b class=x><b>X\n<p></b></b></b></b></b></b>X");
            // MethodAssertGenerator build local variable
            Object o_3_0 = h;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_3_0, "<!DOCTYPEPhtml>\n<p><b class=x><b class=x><b><b class=x><b class=x><b>X\n<p>X\n<p><b><b class=x><b>X\n<p></b></b></b></b></b></b>X");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            doc.outputSettings().indentAmount(0);
            java.lang.String want = "<!doctype html>\n" + (((((((("<html>\n" + "<head></head>\n") + "<body>\n") + "<p><b class=\"x\"><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></b></p>\n") + "<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b</p>\n") + "<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b><b><b class=\"x\"><b>X </b></b></b></b></b></b></b></b></p>\n") + "<p>X</p>\n") + "</body>\n") + "</html>");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(want, "<!doctype html>\n<html>\n<head></head>\n<body>\n<p><b class=\"x\"><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b></b></p>\n<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b>X </b></b></b></b></b</p>\n<p><b class=\"x\"><b><b class=\"x\"><b class=\"x\"><b><b><b class=\"x\"><b>X </b></b></b></b></b></b></b></b></p>\n<p>X</p>\n</body>\n</html>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_51578 = (org.jsoup.parser.ParseSettings)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_51578);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_51576 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_51576);
            // StatementAdderMethod cloned existing statement
            vc_51576.settings(vc_51578);
            // MethodAssertGenerator build local variable
            Object o_16_0 = doc.html();
            org.junit.Assert.fail("handlesUnclosedFormattingElements_literalMutation242941_cf243438 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedRawtextAtEof */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedRawtextAtEof_cf270791_failAssert41() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // MethodAssertGenerator build local variable
            Object o_1_0 = org.jsoup.Jsoup.parse("<style>Data").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.Jsoup.parse("<style>Data</st").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.Jsoup.parse("<style>Data</style>").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.Jsoup.parse("<style>Data</style").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.Jsoup.parse("<style>Data</-style").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_26_0 = org.jsoup.Jsoup.parse("<style>Data</style-").select("style").first().data();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_56166 = (org.jsoup.parser.ParseSettings)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_56164 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_56164.settings(vc_56166);
            // MethodAssertGenerator build local variable
            Object o_37_0 = org.jsoup.Jsoup.parse("<style>Data</style--").select("style").first().data();
            org.junit.Assert.fail("handlesUnclosedRawtextAtEof_cf270791 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedRawtextAtEof */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedRawtextAtEof_cf270783() {
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<style>Data").select("style").first().data());
        org.junit.Assert.assertEquals("Data</st", org.jsoup.Jsoup.parse("<style>Data</st").select("style").first().data());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<style>Data</style>").select("style").first().data());
        org.junit.Assert.assertEquals("Data</style", org.jsoup.Jsoup.parse("<style>Data</style").select("style").first().data());
        org.junit.Assert.assertEquals("Data</-style", org.jsoup.Jsoup.parse("<style>Data</-style").select("style").first().data());
        org.junit.Assert.assertEquals("Data</style-", org.jsoup.Jsoup.parse("<style>Data</style-").select("style").first().data());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_56155 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesUnclosedRawtextAtEof_cf270783__33 = // StatementAdderMethod cloned existing statement
vc_56155.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesUnclosedRawtextAtEof_cf270783__33).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesUnclosedRawtextAtEof_cf270783__33).isTrackErrors());
        org.junit.Assert.assertEquals("Data</style--", org.jsoup.Jsoup.parse("<style>Data</style--").select("style").first().data());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedRawtextAtEof */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedRawtextAtEof_cf270705_failAssert35() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // MethodAssertGenerator build local variable
            Object o_1_0 = org.jsoup.Jsoup.parse("<style>Data").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.Jsoup.parse("<style>Data</st").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.Jsoup.parse("<style>Data</style>").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.Jsoup.parse("<style>Data</style").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.Jsoup.parse("<style>Data</-style").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_26_0 = org.jsoup.Jsoup.parse("<style>Data</style-").select("style").first().data();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_56110 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_56110.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_35_0 = org.jsoup.Jsoup.parse("<style>Data</style--").select("style").first().data();
            org.junit.Assert.fail("handlesUnclosedRawtextAtEof_cf270705 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedRawtextAtEof */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedRawtextAtEof_cf270708 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedRawtextAtEof_cf270708_cf270846_failAssert37() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // MethodAssertGenerator build local variable
            Object o_1_0 = org.jsoup.Jsoup.parse("<style>Data").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.Jsoup.parse("<style>Data</st").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.Jsoup.parse("<style>Data</style>").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.Jsoup.parse("<style>Data</style").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.Jsoup.parse("<style>Data</-style").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_26_0 = org.jsoup.Jsoup.parse("<style>Data</style-").select("style").first().data();
            // StatementAdderOnAssert create random local variable
            boolean vc_56116 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_8464 = "<style>Data</-style";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_56112 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnclosedRawtextAtEof_cf270708__37 = // StatementAdderMethod cloned existing statement
vc_56112.unescapeEntities(String_vc_8464, vc_56116);
            // MethodAssertGenerator build local variable
            Object o_39_0 = o_handlesUnclosedRawtextAtEof_cf270708__37;
            // StatementAdderMethod cloned existing statement
            vc_56112.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_43_0 = org.jsoup.Jsoup.parse("<style>Data</style--").select("style").first().data();
            org.junit.Assert.fail("handlesUnclosedRawtextAtEof_cf270708_cf270846 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedRawtextAtEof */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedRawtextAtEof_cf270783 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedRawtextAtEof_cf270783_cf271335_failAssert35() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // MethodAssertGenerator build local variable
            Object o_1_0 = org.jsoup.Jsoup.parse("<style>Data").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.Jsoup.parse("<style>Data</st").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.Jsoup.parse("<style>Data</style>").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.Jsoup.parse("<style>Data</style").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.Jsoup.parse("<style>Data</-style").select("style").first().data();
            // MethodAssertGenerator build local variable
            Object o_26_0 = org.jsoup.Jsoup.parse("<style>Data</style-").select("style").first().data();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_56155 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_handlesUnclosedRawtextAtEof_cf270783__33 = // StatementAdderMethod cloned existing statement
vc_56155.htmlParser();
            // MethodAssertGenerator build local variable
            Object o_35_0 = ((org.jsoup.parser.Parser)o_handlesUnclosedRawtextAtEof_cf270783__33).getErrors();
            // MethodAssertGenerator build local variable
            Object o_37_0 = ((org.jsoup.parser.Parser)o_handlesUnclosedRawtextAtEof_cf270783__33).isTrackErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_56302 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_56300 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_56298 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_56298.unescapeEntities(vc_56300, vc_56302);
            // MethodAssertGenerator build local variable
            Object o_47_0 = org.jsoup.Jsoup.parse("<style>Data</style--").select("style").first().data();
            org.junit.Assert.fail("handlesUnclosedRawtextAtEof_cf270783_cf271335 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedRawtextAtEof */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedRawtextAtEof_cf270709 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedRawtextAtEof_cf270709_cf271106_failAssert45_add272152() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // MethodAssertGenerator build local variable
            Object o_1_0 = org.jsoup.Jsoup.parse("<style>Data").select("style").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_1_0, "Data");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.Jsoup.parse("<style>Data</st").select("style").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_6_0, "Data</st");
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.Jsoup.parse("<style>Data</style>").select("style").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "Data");
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.Jsoup.parse("<style>Data</style").select("style").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_16_0, "Data</style");
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.Jsoup.parse("<style>Data</-style").select("style").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_21_0, "Data</-style");
            // MethodAssertGenerator build local variable
            Object o_26_0 = org.jsoup.Jsoup.parse("<style>Data</style-").select("style").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_26_0, "Data</style-");
            // StatementAdderOnAssert create random local variable
            boolean vc_56116 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_56115 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_56112 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnclosedRawtextAtEof_cf270709__37 = // StatementAdderMethod cloned existing statement
vc_56112.unescapeEntities(vc_56115, vc_56116);
            // MethodAssertGenerator build local variable
            Object o_39_0 = o_handlesUnclosedRawtextAtEof_cf270709__37;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_39_0, "");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_8483 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(boolean_vc_8483);
            // StatementAdderOnAssert create null value
            java.lang.String vc_56238 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_56238);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_56112.unescapeEntities(vc_56238, boolean_vc_8483);
            // StatementAdderMethod cloned existing statement
            vc_56112.unescapeEntities(vc_56238, boolean_vc_8483);
            // MethodAssertGenerator build local variable
            Object o_47_0 = org.jsoup.Jsoup.parse("<style>Data</style--").select("style").first().data();
            org.junit.Assert.fail("handlesUnclosedRawtextAtEof_cf270709_cf271106 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedScriptAtEof */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedScriptAtEof_cf272246_failAssert66() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // MethodAssertGenerator build local variable
            Object o_1_0 = org.jsoup.Jsoup.parse("<script>Data").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.Jsoup.parse("<script>Data<").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.Jsoup.parse("<script>Data</sc").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.Jsoup.parse("<script>Data</-sc").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.Jsoup.parse("<script>Data</sc-").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_26_0 = org.jsoup.Jsoup.parse("<script>Data</sc--").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_31_0 = org.jsoup.Jsoup.parse("<script>Data</script>").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_36_0 = org.jsoup.Jsoup.parse("<script>Data</script").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_41_0 = org.jsoup.Jsoup.parse("<script>Data</script ").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_46_0 = org.jsoup.Jsoup.parse("<script>Data</script n").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_51_0 = org.jsoup.Jsoup.parse("<script>Data</script n=").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_56_0 = org.jsoup.Jsoup.parse("<script>Data</script n=\"").select("script").first().data();
            // StatementAdderOnAssert create random local variable
            boolean vc_56612 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_56610 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_56608 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_56608.unescapeEntities(vc_56610, vc_56612);
            // MethodAssertGenerator build local variable
            Object o_69_0 = org.jsoup.Jsoup.parse("<script>Data</script n=\"p").select("script").first().data();
            org.junit.Assert.fail("handlesUnclosedScriptAtEof_cf272246 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedScriptAtEof */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedScriptAtEof_cf272334() {
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<script>Data").select("script").first().data());
        org.junit.Assert.assertEquals("Data<", org.jsoup.Jsoup.parse("<script>Data<").select("script").first().data());
        org.junit.Assert.assertEquals("Data</sc", org.jsoup.Jsoup.parse("<script>Data</sc").select("script").first().data());
        org.junit.Assert.assertEquals("Data</-sc", org.jsoup.Jsoup.parse("<script>Data</-sc").select("script").first().data());
        org.junit.Assert.assertEquals("Data</sc-", org.jsoup.Jsoup.parse("<script>Data</sc-").select("script").first().data());
        org.junit.Assert.assertEquals("Data</sc--", org.jsoup.Jsoup.parse("<script>Data</sc--").select("script").first().data());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<script>Data</script>").select("script").first().data());
        org.junit.Assert.assertEquals("Data</script", org.jsoup.Jsoup.parse("<script>Data</script").select("script").first().data());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<script>Data</script ").select("script").first().data());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<script>Data</script n").select("script").first().data());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<script>Data</script n=").select("script").first().data());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<script>Data</script n=\"").select("script").first().data());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_56664 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesUnclosedScriptAtEof_cf272334__63 = // StatementAdderMethod cloned existing statement
vc_56664.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesUnclosedScriptAtEof_cf272334__63).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesUnclosedScriptAtEof_cf272334__63).isTrackErrors());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<script>Data</script n=\"p").select("script").first().data());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedScriptAtEof */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedScriptAtEof_cf272244_failAssert65() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // MethodAssertGenerator build local variable
            Object o_1_0 = org.jsoup.Jsoup.parse("<script>Data").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.Jsoup.parse("<script>Data<").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.Jsoup.parse("<script>Data</sc").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.Jsoup.parse("<script>Data</-sc").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.Jsoup.parse("<script>Data</sc-").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_26_0 = org.jsoup.Jsoup.parse("<script>Data</sc--").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_31_0 = org.jsoup.Jsoup.parse("<script>Data</script>").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_36_0 = org.jsoup.Jsoup.parse("<script>Data</script").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_41_0 = org.jsoup.Jsoup.parse("<script>Data</script ").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_46_0 = org.jsoup.Jsoup.parse("<script>Data</script n").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_51_0 = org.jsoup.Jsoup.parse("<script>Data</script n=").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_56_0 = org.jsoup.Jsoup.parse("<script>Data</script n=\"").select("script").first().data();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_56606 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_56606.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_65_0 = org.jsoup.Jsoup.parse("<script>Data</script n=\"p").select("script").first().data();
            org.junit.Assert.fail("handlesUnclosedScriptAtEof_cf272244 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedScriptAtEof */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedScriptAtEof_cf272322 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedScriptAtEof_cf272322_cf272967_failAssert56() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // MethodAssertGenerator build local variable
            Object o_1_0 = org.jsoup.Jsoup.parse("<script>Data").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.Jsoup.parse("<script>Data<").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.Jsoup.parse("<script>Data</sc").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.Jsoup.parse("<script>Data</-sc").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.Jsoup.parse("<script>Data</sc-").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_26_0 = org.jsoup.Jsoup.parse("<script>Data</sc--").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_31_0 = org.jsoup.Jsoup.parse("<script>Data</script>").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_36_0 = org.jsoup.Jsoup.parse("<script>Data</script").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_41_0 = org.jsoup.Jsoup.parse("<script>Data</script ").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_46_0 = org.jsoup.Jsoup.parse("<script>Data</script n").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_51_0 = org.jsoup.Jsoup.parse("<script>Data</script n=").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_56_0 = org.jsoup.Jsoup.parse("<script>Data</script n=\"").select("script").first().data();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_56651 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_handlesUnclosedScriptAtEof_cf272322__63 = // StatementAdderMethod cloned existing statement
vc_56651.htmlParser();
            // MethodAssertGenerator build local variable
            Object o_65_0 = ((org.jsoup.parser.Parser)o_handlesUnclosedScriptAtEof_cf272322__63).isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_67_0 = ((org.jsoup.parser.Parser)o_handlesUnclosedScriptAtEof_cf272322__63).getErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_56798 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_56796 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_56651.unescapeEntities(vc_56796, vc_56798);
            // MethodAssertGenerator build local variable
            Object o_75_0 = org.jsoup.Jsoup.parse("<script>Data</script n=\"p").select("script").first().data();
            org.junit.Assert.fail("handlesUnclosedScriptAtEof_cf272322_cf272967 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedScriptAtEof */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedScriptAtEof_cf272247 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedScriptAtEof_cf272247_cf272419_failAssert37() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // MethodAssertGenerator build local variable
            Object o_1_0 = org.jsoup.Jsoup.parse("<script>Data").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.Jsoup.parse("<script>Data<").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.Jsoup.parse("<script>Data</sc").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.Jsoup.parse("<script>Data</-sc").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.Jsoup.parse("<script>Data</sc-").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_26_0 = org.jsoup.Jsoup.parse("<script>Data</sc--").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_31_0 = org.jsoup.Jsoup.parse("<script>Data</script>").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_36_0 = org.jsoup.Jsoup.parse("<script>Data</script").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_41_0 = org.jsoup.Jsoup.parse("<script>Data</script ").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_46_0 = org.jsoup.Jsoup.parse("<script>Data</script n").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_51_0 = org.jsoup.Jsoup.parse("<script>Data</script n=").select("script").first().data();
            // MethodAssertGenerator build local variable
            Object o_56_0 = org.jsoup.Jsoup.parse("<script>Data</script n=\"").select("script").first().data();
            // StatementAdderOnAssert create random local variable
            boolean vc_56612 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_8537 = "Data</sc-";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_56608 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnclosedScriptAtEof_cf272247__67 = // StatementAdderMethod cloned existing statement
vc_56608.unescapeEntities(String_vc_8537, vc_56612);
            // MethodAssertGenerator build local variable
            Object o_69_0 = o_handlesUnclosedScriptAtEof_cf272247__67;
            // StatementAdderOnAssert create random local variable
            boolean vc_56674 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_56672 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_56670 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_56670.unescapeEntities(vc_56672, vc_56674);
            // MethodAssertGenerator build local variable
            Object o_79_0 = org.jsoup.Jsoup.parse("<script>Data</script n=\"p").select("script").first().data();
            org.junit.Assert.fail("handlesUnclosedScriptAtEof_cf272247_cf272419 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedScriptAtEof */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedScriptAtEof_cf272248 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedScriptAtEof_cf272248_cf272706_failAssert65_literalMutation273706() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // MethodAssertGenerator build local variable
            Object o_1_0 = org.jsoup.Jsoup.parse("<script>Data").select("script").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_1_0, "Data");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.Jsoup.parse("<script>Data<").select("script").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_6_0, "Data<");
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.Jsoup.parse("<script>Data</sc").select("script").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "Data</sc");
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.Jsoup.parse("<script>Data</-sc").select("script").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_16_0, "Data</-sc");
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.Jsoup.parse("<script>Data</sc-").select("script").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_21_0, "Data</sc-");
            // MethodAssertGenerator build local variable
            Object o_26_0 = org.jsoup.Jsoup.parse("<script>Data</sc--").select("script").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_26_0, "Data</sc--");
            // MethodAssertGenerator build local variable
            Object o_31_0 = org.jsoup.Jsoup.parse("<script>Data</script>").select("script").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_31_0, "Data");
            // MethodAssertGenerator build local variable
            Object o_36_0 = org.jsoup.Jsoup.parse("<script>Data</script").select("script").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_36_0, "Data</script");
            // MethodAssertGenerator build local variable
            Object o_41_0 = org.jsoup.Jsoup.parse("<script>Data</script ").select("script").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_41_0, "Data");
            // MethodAssertGenerator build local variable
            Object o_46_0 = org.jsoup.Jsoup.parse("<script>Data</script n").select("script").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_46_0, "Data");
            // MethodAssertGenerator build local variable
            Object o_51_0 = org.jsoup.Jsoup.parse("<script>Data</script n=").select("script").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_51_0, "Data");
            // MethodAssertGenerator build local variable
            Object o_56_0 = org.jsoup.Jsoup.parse("<script>Data</script n=\"").select("script").first().data();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_56_0, "Data");
            // StatementAdderOnAssert create random local variable
            boolean vc_56612 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(vc_56612);
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_56611 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_56608 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnclosedScriptAtEof_cf272248__67 = // StatementAdderMethod cloned existing statement
vc_56608.unescapeEntities(vc_56611, vc_56612);
            // MethodAssertGenerator build local variable
            Object o_69_0 = o_handlesUnclosedScriptAtEof_cf272248__67;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_69_0, "");
            // StatementAdderOnAssert create random local variable
            boolean vc_56736 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_56736);
            // StatementAdderOnAssert create null value
            java.lang.String vc_56734 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_56734);
            // StatementAdderMethod cloned existing statement
            vc_56608.unescapeEntities(vc_56734, vc_56736);
            // MethodAssertGenerator build local variable
            Object o_77_0 = org.jsoup.Jsoup.parse("<script>Data</script n=\"p").select("script").first().data();
            org.junit.Assert.fail("handlesUnclosedScriptAtEof_cf272248_cf272706 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitle */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedTitle_cf273734_failAssert20() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document one = org.jsoup.Jsoup.parse("<title>One <b>Two <b>Three</TITLE><p>Test</p>");// has title, so <b> is plain text
            
            // MethodAssertGenerator build local variable
            Object o_4_0 = one.title();
            // MethodAssertGenerator build local variable
            Object o_6_0 = one.select("p").first().text();
            org.jsoup.nodes.Document two = org.jsoup.Jsoup.parse("<title>One<b>Two <p>Test</p>");// no title, so <b> causes </title> breakout
            
            // MethodAssertGenerator build local variable
            Object o_13_0 = two.title();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_57040 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_57040.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_19_0 = two.body().html();
            org.junit.Assert.fail("handlesUnclosedTitle_cf273734 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitle */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedTitle_cf273736_failAssert21() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document one = org.jsoup.Jsoup.parse("<title>One <b>Two <b>Three</TITLE><p>Test</p>");// has title, so <b> is plain text
            
            // MethodAssertGenerator build local variable
            Object o_4_0 = one.title();
            // MethodAssertGenerator build local variable
            Object o_6_0 = one.select("p").first().text();
            org.jsoup.nodes.Document two = org.jsoup.Jsoup.parse("<title>One<b>Two <p>Test</p>");// no title, so <b> causes </title> breakout
            
            // MethodAssertGenerator build local variable
            Object o_13_0 = two.title();
            // StatementAdderOnAssert create random local variable
            boolean vc_57046 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_57044 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_57042 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_57042.unescapeEntities(vc_57044, vc_57046);
            // MethodAssertGenerator build local variable
            Object o_23_0 = two.body().html();
            org.junit.Assert.fail("handlesUnclosedTitle_cf273736 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitle */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedTitle_cf273872() {
        org.jsoup.nodes.Document one = org.jsoup.Jsoup.parse("<title>One <b>Two <b>Three</TITLE><p>Test</p>");// has title, so <b> is plain text
        
        org.junit.Assert.assertEquals("One <b>Two <b>Three", one.title());
        org.junit.Assert.assertEquals("Test", one.select("p").first().text());
        org.jsoup.nodes.Document two = org.jsoup.Jsoup.parse("<title>One<b>Two <p>Test</p>");// no title, so <b> causes </title> breakout
        
        org.junit.Assert.assertEquals("One", two.title());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_57098 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesUnclosedTitle_cf273872__17 = // StatementAdderMethod cloned existing statement
vc_57098.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesUnclosedTitle_cf273872__17).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesUnclosedTitle_cf273872__17).isTrackErrors());
        org.junit.Assert.assertEquals("<b>Two <p>Test</p></b>", two.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitle */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitle_cf273872 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedTitle_cf273872_cf274777_failAssert19() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document one = org.jsoup.Jsoup.parse("<title>One <b>Two <b>Three</TITLE><p>Test</p>");// has title, so <b> is plain text
            
            // MethodAssertGenerator build local variable
            Object o_4_0 = one.title();
            // MethodAssertGenerator build local variable
            Object o_6_0 = one.select("p").first().text();
            org.jsoup.nodes.Document two = org.jsoup.Jsoup.parse("<title>One<b>Two <p>Test</p>");// no title, so <b> causes </title> breakout
            
            // MethodAssertGenerator build local variable
            Object o_13_0 = two.title();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_57098 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_handlesUnclosedTitle_cf273872__17 = // StatementAdderMethod cloned existing statement
vc_57098.xmlParser();
            // MethodAssertGenerator build local variable
            Object o_19_0 = ((org.jsoup.parser.Parser)o_handlesUnclosedTitle_cf273872__17).getErrors();
            // MethodAssertGenerator build local variable
            Object o_21_0 = ((org.jsoup.parser.Parser)o_handlesUnclosedTitle_cf273872__17).isTrackErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_57294 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_57292 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_57290 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_57290.unescapeEntities(vc_57292, vc_57294);
            // MethodAssertGenerator build local variable
            Object o_31_0 = two.body().html();
            org.junit.Assert.fail("handlesUnclosedTitle_cf273872_cf274777 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitle */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitle_cf273736 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedTitle_cf273736_failAssert21_literalMutation274992_cf275368_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document one = org.jsoup.Jsoup.parse("<title>One <b>Two <b>Three</TITLE><p>Test</p>");// has title, so <b> is plain text
                
                // MethodAssertGenerator build local variable
                Object o_4_0 = one.title();
                // MethodAssertGenerator build local variable
                Object o_9_0 = o_4_0;
                // MethodAssertGenerator build local variable
                Object o_6_0 = one.select("p").first().text();
                // MethodAssertGenerator build local variable
                Object o_16_0 = o_6_0;
                org.jsoup.nodes.Document two = org.jsoup.Jsoup.parse("<title>One<b>Two <p>Test</p>");// no title, so <b> causes </title> breakout
                
                // MethodAssertGenerator build local variable
                Object o_13_0 = two.title();
                // MethodAssertGenerator build local variable
                Object o_24_0 = o_13_0;
                // StatementAdderOnAssert create random local variable
                boolean vc_57046 = false;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_57481 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_57481.getErrors();
                // MethodAssertGenerator build local variable
                Object o_33_0 = vc_57046;
                // StatementAdderOnAssert create null value
                java.lang.String vc_57044 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_57042 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_57042.unescapeEntities(vc_57044, vc_57046);
                // MethodAssertGenerator build local variable
                Object o_23_0 = two.body().html();
                org.junit.Assert.fail("handlesUnclosedTitle_cf273736 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("handlesUnclosedTitle_cf273736_failAssert21_literalMutation274992_cf275368 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitle */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitle_cf273738 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedTitle_cf273738_cf273925_failAssert4_literalMutation275512() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document one = org.jsoup.Jsoup.parse("<title>One <b>Two <b>Three</TITLE><p>Test</p>");// has title, so <b> is plain text
            
            // MethodAssertGenerator build local variable
            Object o_4_0 = one.title();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_4_0, "One <b>Two <b>Three");
            // MethodAssertGenerator build local variable
            Object o_6_0 = one.select("p").first().text();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_6_0, "Test");
            org.jsoup.nodes.Document two = org.jsoup.Jsoup.parse("<title>One<b>Two <p>Test</p>");// no title, so <b> causes </title> breakout
            
            // MethodAssertGenerator build local variable
            Object o_13_0 = two.title();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_13_0, "One");
            // StatementAdderOnAssert create random local variable
            boolean vc_57046 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_8601 = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_8601, "");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_57042 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnclosedTitle_cf273738__21 = // StatementAdderMethod cloned existing statement
vc_57042.unescapeEntities(String_vc_8601, vc_57046);
            // MethodAssertGenerator build local variable
            Object o_23_0 = o_handlesUnclosedTitle_cf273738__21;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_23_0, "");
            // StatementAdderOnAssert create null value
            java.lang.String vc_57106 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_57106);
            // StatementAdderMethod cloned existing statement
            vc_57042.unescapeEntities(vc_57106, vc_57046);
            // MethodAssertGenerator build local variable
            Object o_29_0 = two.body().html();
            org.junit.Assert.fail("handlesUnclosedTitle_cf273738_cf273925 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitleAtEof */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedTitleAtEof_cf275591_failAssert36() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // MethodAssertGenerator build local variable
            Object o_1_0 = org.jsoup.Jsoup.parse("<title>Data").title();
            // MethodAssertGenerator build local variable
            Object o_4_0 = org.jsoup.Jsoup.parse("<title>Data<").title();
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.Jsoup.parse("<title>Data</").title();
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.Jsoup.parse("<title>Data</t").title();
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.Jsoup.parse("<title>Data</ti").title();
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.Jsoup.parse("<title>Data</title>").title();
            // StatementAdderOnAssert create random local variable
            boolean vc_57542 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_57540 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_57538 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_57538.unescapeEntities(vc_57540, vc_57542);
            // MethodAssertGenerator build local variable
            Object o_27_0 = org.jsoup.Jsoup.parse("<title>Data</title >").title();
            org.junit.Assert.fail("handlesUnclosedTitleAtEof_cf275591 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitleAtEof */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedTitleAtEof_cf275589_failAssert35() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // MethodAssertGenerator build local variable
            Object o_1_0 = org.jsoup.Jsoup.parse("<title>Data").title();
            // MethodAssertGenerator build local variable
            Object o_4_0 = org.jsoup.Jsoup.parse("<title>Data<").title();
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.Jsoup.parse("<title>Data</").title();
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.Jsoup.parse("<title>Data</t").title();
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.Jsoup.parse("<title>Data</ti").title();
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.Jsoup.parse("<title>Data</title>").title();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_57536 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_57536.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_23_0 = org.jsoup.Jsoup.parse("<title>Data</title >").title();
            org.junit.Assert.fail("handlesUnclosedTitleAtEof_cf275589 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitleAtEof */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedTitleAtEof_cf275679() {
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<title>Data").title());
        org.junit.Assert.assertEquals("Data<", org.jsoup.Jsoup.parse("<title>Data<").title());
        org.junit.Assert.assertEquals("Data</", org.jsoup.Jsoup.parse("<title>Data</").title());
        org.junit.Assert.assertEquals("Data</t", org.jsoup.Jsoup.parse("<title>Data</t").title());
        org.junit.Assert.assertEquals("Data</ti", org.jsoup.Jsoup.parse("<title>Data</ti").title());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<title>Data</title>").title());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_57594 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesUnclosedTitleAtEof_cf275679__21 = // StatementAdderMethod cloned existing statement
vc_57594.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesUnclosedTitleAtEof_cf275679__21).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesUnclosedTitleAtEof_cf275679__21).isTrackErrors());
        org.junit.Assert.assertEquals("Data", org.jsoup.Jsoup.parse("<title>Data</title >").title());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitleAtEof */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitleAtEof_cf275591 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedTitleAtEof_cf275591_failAssert36_add276540() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // MethodAssertGenerator build local variable
            Object o_1_0 = org.jsoup.Jsoup.parse("<title>Data").title();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_1_0, "Data");
            // MethodAssertGenerator build local variable
            Object o_4_0 = org.jsoup.Jsoup.parse("<title>Data<").title();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_4_0, "Data<");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.Jsoup.parse("<title>Data</").title();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_7_0, "Data</");
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.Jsoup.parse("<title>Data</t").title();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_10_0, "Data</t");
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.Jsoup.parse("<title>Data</ti").title();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_13_0, "Data</ti");
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.Jsoup.parse("<title>Data</title>").title();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_16_0, "Data");
            // StatementAdderOnAssert create random local variable
            boolean vc_57542 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_57540 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_57538 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_57538.unescapeEntities(vc_57540, vc_57542);
            // StatementAdderMethod cloned existing statement
            vc_57538.unescapeEntities(vc_57540, vc_57542);
            // MethodAssertGenerator build local variable
            Object o_27_0 = org.jsoup.Jsoup.parse("<title>Data</title >").title();
            org.junit.Assert.fail("handlesUnclosedTitleAtEof_cf275591 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitleAtEof */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitleAtEof_cf275593 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedTitleAtEof_cf275593_cf275978_failAssert33() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // MethodAssertGenerator build local variable
            Object o_1_0 = org.jsoup.Jsoup.parse("<title>Data").title();
            // MethodAssertGenerator build local variable
            Object o_4_0 = org.jsoup.Jsoup.parse("<title>Data<").title();
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.Jsoup.parse("<title>Data</").title();
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.Jsoup.parse("<title>Data</t").title();
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.Jsoup.parse("<title>Data</ti").title();
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.Jsoup.parse("<title>Data</title>").title();
            // StatementAdderOnAssert create random local variable
            boolean vc_57542 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_57541 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_57538 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnclosedTitleAtEof_cf275593__25 = // StatementAdderMethod cloned existing statement
vc_57538.unescapeEntities(vc_57541, vc_57542);
            // MethodAssertGenerator build local variable
            Object o_27_0 = o_handlesUnclosedTitleAtEof_cf275593__25;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_8694 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_57664 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_57662 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_57662.unescapeEntities(vc_57664, boolean_vc_8694);
            // MethodAssertGenerator build local variable
            Object o_37_0 = org.jsoup.Jsoup.parse("<title>Data</title >").title();
            org.junit.Assert.fail("handlesUnclosedTitleAtEof_cf275593_cf275978 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitleAtEof */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnclosedTitleAtEof_cf275592 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnclosedTitleAtEof_cf275592_cf275729_failAssert21_add277627() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // MethodAssertGenerator build local variable
            Object o_1_0 = org.jsoup.Jsoup.parse("<title>Data").title();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_1_0, "Data");
            // MethodAssertGenerator build local variable
            Object o_4_0 = org.jsoup.Jsoup.parse("<title>Data<").title();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_4_0, "Data<");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.Jsoup.parse("<title>Data</").title();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_7_0, "Data</");
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.Jsoup.parse("<title>Data</t").title();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_10_0, "Data</t");
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.Jsoup.parse("<title>Data</ti").title();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_13_0, "Data</ti");
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.Jsoup.parse("<title>Data</title>").title();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_16_0, "Data");
            // StatementAdderOnAssert create random local variable
            boolean vc_57542 = false;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_8675 = "<title>Data</title>";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_57538 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnclosedTitleAtEof_cf275592__25 = // StatementAdderMethod cloned existing statement
vc_57538.unescapeEntities(String_vc_8675, vc_57542);
            // MethodAssertGenerator build local variable
            Object o_27_0 = o_handlesUnclosedTitleAtEof_cf275592__25;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_27_0, "<title>Data</title>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_57598 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_57598);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_57598.isTrackErrors();
            // StatementAdderMethod cloned existing statement
            vc_57598.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_33_0 = org.jsoup.Jsoup.parse("<title>Data</title >").title();
            org.junit.Assert.fail("handlesUnclosedTitleAtEof_cf275592_cf275729 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnexpectedMarkupInTables */
    @org.junit.Test(timeout = 10000)
    public void handlesUnexpectedMarkupInTables_cf277697_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg - tests markers in active formatting (if they didn't work, would get in in table)
            // also tests foster parenting
            java.lang.String h = "<table><b><tr><td>aaa</td></tr>bbb</table>ccc";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_58348 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_58346 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_58344 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_58344.unescapeEntities(vc_58346, vc_58348);
            // MethodAssertGenerator build local variable
            Object o_14_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesUnexpectedMarkupInTables_cf277697 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnexpectedMarkupInTables */
    @org.junit.Test(timeout = 10000)
    public void handlesUnexpectedMarkupInTables_cf277851() {
        // whatwg - tests markers in active formatting (if they didn't work, would get in in table)
        // also tests foster parenting
        java.lang.String h = "<table><b><tr><td>aaa</td></tr>bbb</table>ccc";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_58387 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesUnexpectedMarkupInTables_cf277851__8 = // StatementAdderMethod cloned existing statement
vc_58387.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesUnexpectedMarkupInTables_cf277851__8).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesUnexpectedMarkupInTables_cf277851__8).getErrors());
        org.junit.Assert.assertEquals("<b></b><b>bbb</b><table><tbody><tr><td>aaa</td></tr></tbody></table><b>ccc</b>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnexpectedMarkupInTables */
    @org.junit.Test(timeout = 10000)
    public void handlesUnexpectedMarkupInTables_cf277695_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg - tests markers in active formatting (if they didn't work, would get in in table)
            // also tests foster parenting
            java.lang.String h = "<table><b><tr><td>aaa</td></tr>bbb</table>ccc";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_58342 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_58342.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesUnexpectedMarkupInTables_cf277695 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnexpectedMarkupInTables */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnexpectedMarkupInTables_cf277701 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnexpectedMarkupInTables_cf277701_cf278820_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg - tests markers in active formatting (if they didn't work, would get in in table)
            // also tests foster parenting
            java.lang.String h = "<table><b><tr><td>aaa</td></tr>bbb</table>ccc";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_58348 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_58347 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_58344 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnexpectedMarkupInTables_cf277701__12 = // StatementAdderMethod cloned existing statement
vc_58344.unescapeEntities(vc_58347, vc_58348);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_handlesUnexpectedMarkupInTables_cf277701__12;
            // StatementAdderOnAssert create null value
            java.lang.String vc_58594 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_58592 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_58592.unescapeEntities(vc_58594, vc_58348);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesUnexpectedMarkupInTables_cf277701_cf278820 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnexpectedMarkupInTables */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnexpectedMarkupInTables_cf277699 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnexpectedMarkupInTables_cf277699_cf278479_failAssert20_literalMutation280219() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg - tests markers in active formatting (if they didn't work, would get in in table)
            // also tests foster parenting
            java.lang.String h = "<table><b><tr><td>aaa/td></tr>bbb</table>ccc";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<table><b><tr><td>aaa/td></tr>bbb</table>ccc");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_58348 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_58344 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnexpectedMarkupInTables_cf277699__13 = // StatementAdderMethod cloned existing statement
vc_58344.unescapeEntities(rendered, vc_58348);
            // MethodAssertGenerator build local variable
            Object o_15_0 = o_handlesUnexpectedMarkupInTables_cf277699__13;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_15_0, "<html>\n <head></head>\n <body>\n  <b></b>\n  <b>bbb</b>\n  <table>\n   <tbody>\n    <tr>\n     <td>aaa/td></td>\n    </tr>\n   </tbody>\n  </table>\n  <b>ccc</b>\n </body>\n</html>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_58522 = (org.jsoup.parser.ParseSettings)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_58522);
            // StatementAdderMethod cloned existing statement
            vc_58344.settings(vc_58522);
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesUnexpectedMarkupInTables_cf277699_cf278479 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnexpectedMarkupInTables */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnexpectedMarkupInTables_cf277699 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnexpectedMarkupInTables_cf277699_cf278456_failAssert11_literalMutation280177() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg - tests markers in active formatting (if they didn't work, would get in in table)
            // also tests foster parenting
            java.lang.String h = "<tabAle><b><tr><td>aaa</td></tr>bbb</table>ccc";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<tabAle><b><tr><td>aaa</td></tr>bbb</table>ccc");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_58348 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_58344 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnexpectedMarkupInTables_cf277699__13 = // StatementAdderMethod cloned existing statement
vc_58344.unescapeEntities(rendered, vc_58348);
            // MethodAssertGenerator build local variable
            Object o_15_0 = o_handlesUnexpectedMarkupInTables_cf277699__13;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_15_0, "<html>\n <head></head>\n <body>\n  <tabale>\n   <b>aaabbbccc</b>\n  </tabale>\n </body>\n</html>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_58509 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_58509);
            // StatementAdderMethod cloned existing statement
            vc_58509.settings();
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesUnexpectedMarkupInTables_cf277699_cf278456 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnexpectedMarkupInTables */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnexpectedMarkupInTables_cf277699 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnexpectedMarkupInTables_cf277699_cf278213_failAssert17_literalMutation280188() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg - tests markers in active formatting (if they didn't work, would get in in table)
            // also tests foster parenting
            java.lang.String h = "<table><b><tr><td>aaa</td></tr>bbb<ktable>ccc";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<table><b><tr><td>aaa</td></tr>bbb<ktable>ccc");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_58348 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_58344 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnexpectedMarkupInTables_cf277699__13 = // StatementAdderMethod cloned existing statement
vc_58344.unescapeEntities(rendered, vc_58348);
            // MethodAssertGenerator build local variable
            Object o_15_0 = o_handlesUnexpectedMarkupInTables_cf277699__13;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_15_0, "<html>\n <head></head>\n <body>\n  <b></b>\n  <b>bbb\n   <ktable>\n    ccc\n   </ktable></b>\n  <table>\n   <tbody>\n    <tr>\n     <td>aaa</td>\n    </tr>\n   </tbody>\n  </table>\n </body>\n</html>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_58470 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_58470);
            // StatementAdderMethod cloned existing statement
            vc_58344.unescapeEntities(vc_58470, vc_58348);
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesUnexpectedMarkupInTables_cf277699_cf278213 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnexpectedMarkupInTables */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnexpectedMarkupInTables_cf277849 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnexpectedMarkupInTables_cf277849_failAssert13_literalMutation279680_cf279719_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // whatwg - tests markers in active formatting (if they didn't work, would get in in table)
                // also tests foster parenting
                java.lang.String h = "";
                // StatementAdderOnAssert create random local variable
                boolean vc_58782 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_58780 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_58778 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_58778.unescapeEntities(vc_58780, vc_58782);
                // MethodAssertGenerator build local variable
                Object o_14_0 = h;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_58385 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_58385.settings();
                // MethodAssertGenerator build local variable
                Object o_10_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.junit.Assert.fail("handlesUnexpectedMarkupInTables_cf277849 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesUnexpectedMarkupInTables_cf277849_failAssert13_literalMutation279680_cf279719 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnexpectedMarkupInTables */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnexpectedMarkupInTables_cf277699 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnexpectedMarkupInTables_cf277699_cf278479_failAssert20_literalMutation280220() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg - tests markers in active formatting (if they didn't work, would get in in table)
            // also tests foster parenting
            java.lang.String h = "<table><b><tr><td>aaa</td></tr>bbb</tabl2>ccc";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<table><b><tr><td>aaa</td></tr>bbb</tabl2>ccc");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_58348 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_58344 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnexpectedMarkupInTables_cf277699__13 = // StatementAdderMethod cloned existing statement
vc_58344.unescapeEntities(rendered, vc_58348);
            // MethodAssertGenerator build local variable
            Object o_15_0 = o_handlesUnexpectedMarkupInTables_cf277699__13;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_15_0, "<html>\n <head></head>\n <body>\n  <b></b>\n  <b>bbbccc</b>\n  <table>\n   <tbody>\n    <tr>\n     <td>aaa</td>\n    </tr>\n   </tbody>\n  </table>\n </body>\n</html>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_58522 = (org.jsoup.parser.ParseSettings)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_58522);
            // StatementAdderMethod cloned existing statement
            vc_58344.settings(vc_58522);
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesUnexpectedMarkupInTables_cf277699_cf278479 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnexpectedMarkupInTables */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnexpectedMarkupInTables_cf277699 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnexpectedMarkupInTables_cf277699_cf278466_failAssert18_literalMutation280198() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // whatwg - tests markers in active formatting (if they didn't work, would get in in table)
            // also tests foster parenting
            java.lang.String h = "<table><b><tr><td>aaa</td></trbbb</table>ccc";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<table><b><tr><td>aaa</td></trbbb</table>ccc");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_58348 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_58344 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnexpectedMarkupInTables_cf277699__13 = // StatementAdderMethod cloned existing statement
vc_58344.unescapeEntities(rendered, vc_58348);
            // MethodAssertGenerator build local variable
            Object o_15_0 = o_handlesUnexpectedMarkupInTables_cf277699__13;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_15_0, "<html>\n <head></head>\n <body>\n  <b></b>\n  <b>ccc</b>\n  <table>\n   <tbody>\n    <tr>\n     <td>aaa</td>\n    </tr>\n   </tbody>\n  </table>\n </body>\n</html>");
            // StatementAdderOnAssert create literal from method
            int int_vc_8822 = 10000;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(int_vc_8822, 10000);
            // StatementAdderMethod cloned existing statement
            vc_58344.setTrackErrors(int_vc_8822);
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesUnexpectedMarkupInTables_cf277699_cf278466 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownInlineTags */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownInlineTags_cf280311_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parseBodyFragment(h);
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create random local variable
            boolean vc_58968 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_58966 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_58964 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_58964.unescapeEntities(vc_58966, vc_58968);
            // MethodAssertGenerator build local variable
            Object o_15_0 = org.jsoup.TextUtil.stripNewlines(out);
            org.junit.Assert.fail("handlesUnknownInlineTags_cf280311 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownInlineTags */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownInlineTags_cf280465() {
        java.lang.String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parseBodyFragment(h);
        java.lang.String out = doc.body().html();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_59007 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesUnknownInlineTags_cf280465__9 = // StatementAdderMethod cloned existing statement
vc_59007.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesUnknownInlineTags_cf280465__9).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesUnknownInlineTags_cf280465__9).getErrors());
        org.junit.Assert.assertEquals(h, org.jsoup.TextUtil.stripNewlines(out));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownInlineTags */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownInlineTags_cf280309_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parseBodyFragment(h);
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_58962 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_58962.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(out);
            org.junit.Assert.fail("handlesUnknownInlineTags_cf280309 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownInlineTags */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownInlineTags_cf280481_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parseBodyFragment(h);
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_59022 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_59022.getTreeBuilder();
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(out);
            org.junit.Assert.fail("handlesUnknownInlineTags_cf280481 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownInlineTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownInlineTags_cf280321 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownInlineTags_cf280321_failAssert5_literalMutation282257() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<p><cust>Test</cust></p><p><cust><custFTest</cust></cust></p>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<p><cust>Test</cust></p><p><cust><custFTest</cust></cust></p>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parseBodyFragment(h);
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_58969 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_58969.getErrors();
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(out);
            org.junit.Assert.fail("handlesUnknownInlineTags_cf280321 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownInlineTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownInlineTags_cf280313 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownInlineTags_cf280313_cf280799_failAssert0_literalMutation283098() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<p><cust>Test</cust></p><p><cuOt><cust>Test</cust></cust></p>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<p><cust>Test</cust></p><p><cuOt><cust>Test</cust></cust></p>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parseBodyFragment(h);
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create random local variable
            boolean vc_58968 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_58964 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnknownInlineTags_cf280313__14 = // StatementAdderMethod cloned existing statement
vc_58964.unescapeEntities(html, vc_58968);
            // MethodAssertGenerator build local variable
            Object o_16_0 = o_handlesUnknownInlineTags_cf280313__14;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_16_0, "<html>\n <head></head>\n <body>\n  <p>\n   <cust>\n    Test\n   </cust></p>\n  <p>\n   <cuot>\n    <cust>\n     Test\n    </cust>\n   </cuot></p>\n </body>\n</html>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_59086 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_59086);
            // StatementAdderMethod cloned existing statement
            vc_59086.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(out);
            org.junit.Assert.fail("handlesUnknownInlineTags_cf280313_cf280799 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownNamespaceTags */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownNamespaceTags_cf283196_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // note that the first foo:bar should not really be allowed to be self closing, if parsed in html mode.
            java.lang.String h = "<foo:bar id='1' /><abc:def id=2>Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_59712 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_59710 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_59708 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_59708.unescapeEntities(vc_59710, vc_59712);
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesUnknownNamespaceTags_cf283196 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownNamespaceTags */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownNamespaceTags_cf283364() {
        // note that the first foo:bar should not really be allowed to be self closing, if parsed in html mode.
        java.lang.String h = "<foo:bar id='1' /><abc:def id=2>Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_59764 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesUnknownNamespaceTags_cf283364__7 = // StatementAdderMethod cloned existing statement
vc_59764.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesUnknownNamespaceTags_cf283364__7).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesUnknownNamespaceTags_cf283364__7).getErrors());
        org.junit.Assert.assertEquals("<foo:bar id=\"1\" /><abc:def id=\"2\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownNamespaceTags */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownNamespaceTags_cf283194_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // note that the first foo:bar should not really be allowed to be self closing, if parsed in html mode.
            java.lang.String h = "<foo:bar id='1' /><abc:def id=2>Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_59706 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_59706.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesUnknownNamespaceTags_cf283194 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownNamespaceTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownNamespaceTags_cf283198 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownNamespaceTags_cf283198_cf283963_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // note that the first foo:bar should not really be allowed to be self closing, if parsed in html mode.
            java.lang.String h = "<foo:bar id='1' /><abc:def id=2>Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_59712 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_59708 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnknownNamespaceTags_cf283198__12 = // StatementAdderMethod cloned existing statement
vc_59708.unescapeEntities(html, vc_59712);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_handlesUnknownNamespaceTags_cf283198__12;
            // StatementAdderOnAssert create random local variable
            int vc_59879 = -138322792;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_59877 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_59877.setTrackErrors(vc_59879);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesUnknownNamespaceTags_cf283198_cf283963 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownNamespaceTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownNamespaceTags_cf283353 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownNamespaceTags_cf283353_failAssert14_literalMutation285184() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // note that the first foo:bar should not really be allowed to be self closing, if parsed in html mode.
            java.lang.String h = "<foo:bar id=\'1\' /><abc:def id=2>Foo<p>Hello</p></abc:def><foo:bar>There</foo:ba>r>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<foo:bar id=\'1\' /><abc:def id=2>Foo<p>Hello</p></abc:def><foo:bar>There</foo:ba>r>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            int vc_59755 = 2113615908;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_59753 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_59753.setTrackErrors(vc_59755);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesUnknownNamespaceTags_cf283353 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownNamespaceTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownNamespaceTags_cf283197 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownNamespaceTags_cf283197_cf283662_failAssert16_literalMutation286099() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // note that the first foo:bar should not really be allowed to be self closing, if parsed in html mode.
            java.lang.String h = "<foo:bar id=\'1\' /><abc:defKid=2>Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<foo:bar id=\'1\' /><abc:defKid=2>Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_59712 = false;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_59708 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnknownNamespaceTags_cf283197__9 = // StatementAdderMethod cloned existing statement
vc_59708.unescapeEntities(h, vc_59712);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_handlesUnknownNamespaceTags_cf283197__9;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "<foo:bar id=\'1\' /><abc:defKid=2>Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_59820 = (org.jsoup.parser.TreeBuilder)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_59820);
            // StatementAdderMethod cloned existing statement
            vc_59708.setTreeBuilder(vc_59820);
            // MethodAssertGenerator build local variable
            Object o_17_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesUnknownNamespaceTags_cf283197_cf283662 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownNamespaceTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownNamespaceTags_cf283200 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownNamespaceTags_cf283200_cf284320_failAssert4_literalMutation286050() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // note that the first foo:bar should not really be allowed to be self closing, if parsed in html mode.
            java.lang.String h = "#!7uU,bu%?19q9gT8lej@w6WQ%P2g`g}@ZwvU}CF[aMvyt!wxPZdNg{JV/r`}%IPv=BfwFRSUCj?[; YM";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "#!7uU,bu%?19q9gT8lej@w6WQ%P2g`g}@ZwvU}CF[aMvyt!wxPZdNg{JV/r`}%IPv=BfwFRSUCj?[; YM");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_59712 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_59711 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_59708 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnknownNamespaceTags_cf283200__11 = // StatementAdderMethod cloned existing statement
vc_59708.unescapeEntities(vc_59711, vc_59712);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_handlesUnknownNamespaceTags_cf283200__11;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_13_0, "");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_9040 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(boolean_vc_9040);
            // StatementAdderOnAssert create null value
            java.lang.String vc_59958 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_59958);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_59956 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_59956);
            // StatementAdderMethod cloned existing statement
            vc_59956.unescapeEntities(vc_59958, boolean_vc_9040);
            // MethodAssertGenerator build local variable
            Object o_23_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesUnknownNamespaceTags_cf283200_cf284320 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownTags */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownTags_cf286346() {
        java.lang.String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.jsoup.select.Elements foos = doc.select("foo");
        org.junit.Assert.assertEquals(2, foos.size());
        org.junit.Assert.assertEquals("bar", foos.first().attr("title"));
        org.junit.Assert.assertEquals("qux", foos.last().attr("title"));
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_60557 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesUnknownTags_cf286346__16 = // StatementAdderMethod cloned existing statement
vc_60557.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesUnknownTags_cf286346__16).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesUnknownTags_cf286346__16).isTrackErrors());
        org.junit.Assert.assertEquals("there", foos.last().text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownTags */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownTags_cf286192_failAssert23() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.select.Elements foos = doc.select("foo");
            // MethodAssertGenerator build local variable
            Object o_6_0 = foos.size();
            // MethodAssertGenerator build local variable
            Object o_8_0 = foos.first().attr("title");
            // MethodAssertGenerator build local variable
            Object o_11_0 = foos.last().attr("title");
            // StatementAdderOnAssert create random local variable
            boolean vc_60518 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_60516 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_60514 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_60514.unescapeEntities(vc_60516, vc_60518);
            // MethodAssertGenerator build local variable
            Object o_22_0 = foos.last().text();
            org.junit.Assert.fail("handlesUnknownTags_cf286192 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownTags */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownTags_cf286194() {
        java.lang.String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.jsoup.select.Elements foos = doc.select("foo");
        org.junit.Assert.assertEquals(2, foos.size());
        org.junit.Assert.assertEquals("bar", foos.first().attr("title"));
        org.junit.Assert.assertEquals("qux", foos.last().attr("title"));
        // StatementAdderOnAssert create random local variable
        boolean vc_60518 = true;
        // StatementAddOnAssert local variable replacement
        java.lang.String out = doc.body().html();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_60514 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_handlesUnknownTags_cf286194__22 = // StatementAdderMethod cloned existing statement
vc_60514.unescapeEntities(out, vc_60518);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_handlesUnknownTags_cf286194__22, "<div>\n <foo title=\"bar\">\n  Hello\n  <foo title=\"qux\">\n   there\n  </foo>\n </foo>\n</div>");
        org.junit.Assert.assertEquals("there", foos.last().text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownTags */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownTags_cf286190_failAssert22() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.select.Elements foos = doc.select("foo");
            // MethodAssertGenerator build local variable
            Object o_6_0 = foos.size();
            // MethodAssertGenerator build local variable
            Object o_8_0 = foos.first().attr("title");
            // MethodAssertGenerator build local variable
            Object o_11_0 = foos.last().attr("title");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_60512 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_60512.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_18_0 = foos.last().text();
            org.junit.Assert.fail("handlesUnknownTags_cf286190 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownTags_cf286364 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownTags_cf286364_failAssert30_literalMutation288300() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<div><foo title=bar>Hello<fo title=qux>there</foo></div>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<div><foo title=bar>Hello<fo title=qux>there</foo></div>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.select.Elements foos = doc.select("foo");
            // MethodAssertGenerator build local variable
            Object o_6_0 = foos.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_6_0, 1);
            // MethodAssertGenerator build local variable
            Object o_8_0 = foos.first().attr("title");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_8_0, "bar");
            // MethodAssertGenerator build local variable
            Object o_11_0 = foos.last().attr("title");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "bar");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_60572 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_60572.getTreeBuilder();
            // MethodAssertGenerator build local variable
            Object o_18_0 = foos.last().text();
            org.junit.Assert.fail("handlesUnknownTags_cf286364 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownTags_cf286196 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownTags_cf286196_cf287386_failAssert29() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.select.Elements foos = doc.select("foo");
            // MethodAssertGenerator build local variable
            Object o_6_0 = foos.size();
            // MethodAssertGenerator build local variable
            Object o_8_0 = foos.first().attr("title");
            // MethodAssertGenerator build local variable
            Object o_11_0 = foos.last().attr("title");
            // StatementAdderOnAssert create random local variable
            boolean vc_60518 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_60517 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_60514 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnknownTags_cf286196__20 = // StatementAdderMethod cloned existing statement
vc_60514.unescapeEntities(vc_60517, vc_60518);
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_handlesUnknownTags_cf286196__20;
            // StatementAdderOnAssert create random local variable
            boolean vc_60766 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_60764 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_60514.unescapeEntities(vc_60764, vc_60766);
            // MethodAssertGenerator build local variable
            Object o_30_0 = foos.last().text();
            org.junit.Assert.fail("handlesUnknownTags_cf286196_cf287386 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownTags_cf286192 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownTags_cf286192_failAssert23_literalMutation288252_cf289478_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_13_1 = 2;
                java.lang.String h = "<div><foo titlf=bar>Hello<foo title=qux>there</foo></div>";
                // MethodAssertGenerator build local variable
                Object o_4_0 = h;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                org.jsoup.select.Elements foos = doc.select("foo");
                // MethodAssertGenerator build local variable
                Object o_6_0 = foos.size();
                // MethodAssertGenerator build local variable
                Object o_13_0 = o_6_0;
                // MethodAssertGenerator build local variable
                Object o_8_0 = foos.first().attr("title");
                // MethodAssertGenerator build local variable
                Object o_19_0 = o_8_0;
                // MethodAssertGenerator build local variable
                Object o_11_0 = foos.last().attr("title");
                // StatementAdderOnAssert create null value
                org.jsoup.parser.ParseSettings vc_61312 = (org.jsoup.parser.ParseSettings)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_61310 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_61310.settings(vc_61312);
                // MethodAssertGenerator build local variable
                Object o_31_0 = o_11_0;
                // StatementAdderOnAssert create random local variable
                boolean vc_60518 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_60516 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_60514 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_60514.unescapeEntities(vc_60516, vc_60518);
                // MethodAssertGenerator build local variable
                Object o_22_0 = foos.last().text();
                org.junit.Assert.fail("handlesUnknownTags_cf286192 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("handlesUnknownTags_cf286192_failAssert23_literalMutation288252_cf289478 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesUnknownTags_cf286193 */
    @org.junit.Test(timeout = 10000)
    public void handlesUnknownTags_cf286193_cf286415_failAssert1_literalMutation291034() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            org.jsoup.select.Elements foos = doc.select("foo");
            // MethodAssertGenerator build local variable
            Object o_6_0 = foos.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_6_0, 2);
            // MethodAssertGenerator build local variable
            Object o_8_0 = foos.first().attr("title");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_8_0, "bar");
            // MethodAssertGenerator build local variable
            Object o_11_0 = foos.last().attr("title");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "qux");
            // StatementAdderOnAssert create random local variable
            boolean vc_60518 = true;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_60514 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesUnknownTags_cf286193__18 = // StatementAdderMethod cloned existing statement
vc_60514.unescapeEntities(h, vc_60518);
            // MethodAssertGenerator build local variable
            Object o_20_0 = o_handlesUnknownTags_cf286193__18;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_20_0, "<div><foo title=bar>Hello<foo title=qux>there</foo></div>");
            // StatementAdderOnAssert create random local variable
            boolean vc_60580 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_60580);
            // StatementAdderOnAssert create null value
            java.lang.String vc_60578 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_60578);
            // StatementAdderMethod cloned existing statement
            vc_60514.unescapeEntities(vc_60578, vc_60580);
            // MethodAssertGenerator build local variable
            Object o_28_0 = foos.last().text();
            org.junit.Assert.fail("handlesUnknownTags_cf286193_cf286415 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesWhatWgExpensesTableExample */
    @org.junit.Test(timeout = 10000)
    public void handlesWhatWgExpensesTableExample_cf291193_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#examples-0
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling, general, and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_61814 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_61814.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesWhatWgExpensesTableExample_cf291193 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesWhatWgExpensesTableExample */
    @org.junit.Test(timeout = 10000)
    public void handlesWhatWgExpensesTableExample_cf291195_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#examples-0
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling, general, and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>");
            // StatementAdderOnAssert create random local variable
            boolean vc_61820 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_61818 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_61816 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_61816.unescapeEntities(vc_61818, vc_61820);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesWhatWgExpensesTableExample_cf291195 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesWhatWgExpensesTableExample */
    @org.junit.Test(timeout = 10000)
    public void handlesWhatWgExpensesTableExample_cf291331() {
        // http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#examples-0
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling, general, and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_61872 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesWhatWgExpensesTableExample_cf291331__6 = // StatementAdderMethod cloned existing statement
vc_61872.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesWhatWgExpensesTableExample_cf291331__6).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesWhatWgExpensesTableExample_cf291331__6).getErrors());
        org.junit.Assert.assertEquals("<table> <colgroup> <col> </colgroup><colgroup> <col> <col> <col> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\"rowgroup\"> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 3.4% </td><td> 3.3% </td><td> 3.7% </td></tr></tbody><tbody> <tr> <th scope=\"rowgroup\"> Selling, general, and administrative </th><td> $ 3,761 </td><td> $ 2,963 </td><td> $ 2,433 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 11.6% </td><td> 12.3% </td><td> 12.6% </td></tr></tbody></table>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesWhatWgExpensesTableExample */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesWhatWgExpensesTableExample_cf291197 */
    @org.junit.Test(timeout = 10000)
    public void handlesWhatWgExpensesTableExample_cf291197_cf291918_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#examples-0
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling, general, and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>");
            // StatementAdderOnAssert create random local variable
            boolean vc_61820 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_9315 = "<table> <colgroup> <col> </colgroup><colgroup> <col> <col> <col> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\"rowgroup\"> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 3.4% </td><td> 3.3% </td><td> 3.7% </td></tr></tbody><tbody> <tr> <th scope=\"rowgroup\"> Selling, general, and administrative </th><td> $ 3,761 </td><td> $ 2,963 </td><td> $ 2,433 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 11.6% </td><td> 12.3% </td><td> 12.6% </td></tr></tbody></table>";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_61816 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesWhatWgExpensesTableExample_cf291197__10 = // StatementAdderMethod cloned existing statement
vc_61816.unescapeEntities(String_vc_9315, vc_61820);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_handlesWhatWgExpensesTableExample_cf291197__10;
            // StatementAdderMethod cloned existing statement
            vc_61816.settings();
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesWhatWgExpensesTableExample_cf291197_cf291918 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesWhatWgExpensesTableExample */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesWhatWgExpensesTableExample_cf291331 */
    @org.junit.Test(timeout = 10000)
    public void handlesWhatWgExpensesTableExample_cf291331_cf292485_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#examples-0
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling, general, and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_61872 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_handlesWhatWgExpensesTableExample_cf291331__6 = // StatementAdderMethod cloned existing statement
vc_61872.xmlParser();
            // MethodAssertGenerator build local variable
            Object o_8_0 = ((org.jsoup.parser.Parser)o_handlesWhatWgExpensesTableExample_cf291331__6).isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_10_0 = ((org.jsoup.parser.Parser)o_handlesWhatWgExpensesTableExample_cf291331__6).getErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_62130 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_62128 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_61872.unescapeEntities(vc_62128, vc_62130);
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("handlesWhatWgExpensesTableExample_cf291331_cf292485 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesWhitespaceInoDocType */
    @org.junit.Test(timeout = 10000)
    public void handlesWhitespaceInoDocType_cf292758_failAssert20() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<!DOCTYPE html\r\n" + ("      PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\r\n" + "      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_62186 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_62186.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = doc.childNode(0).outerHtml();
            org.junit.Assert.fail("handlesWhitespaceInoDocType_cf292758 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesWhitespaceInoDocType */
    @org.junit.Test(timeout = 10000)
    public void handlesWhitespaceInoDocType_cf292914() {
        java.lang.String html = "<!DOCTYPE html\r\n" + ("      PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\r\n" + "      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_62231 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesWhitespaceInoDocType_cf292914__6 = // StatementAdderMethod cloned existing statement
vc_62231.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesWhitespaceInoDocType_cf292914__6).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesWhitespaceInoDocType_cf292914__6).getErrors());
        org.junit.Assert.assertEquals("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">", doc.childNode(0).outerHtml());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesWhitespaceInoDocType */
    @org.junit.Test(timeout = 10000)
    public void handlesWhitespaceInoDocType_cf292760_failAssert21() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<!DOCTYPE html\r\n" + ("      PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\r\n" + "      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_62192 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_62190 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_62188 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_62188.unescapeEntities(vc_62190, vc_62192);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.childNode(0).outerHtml();
            org.junit.Assert.fail("handlesWhitespaceInoDocType_cf292760 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesWhitespaceInoDocType */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesWhitespaceInoDocType_cf292762 */
    @org.junit.Test(timeout = 10000)
    public void handlesWhitespaceInoDocType_cf292762_cf293568_failAssert8_literalMutation297858() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<!DOC3YPE html\r\n" + ("      PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\r\n" + "      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<!DOC3YPE html\r\n      PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\r\n      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_62192 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_62188 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesWhitespaceInoDocType_cf292762__12 = // StatementAdderMethod cloned existing statement
vc_62188.unescapeEntities(out, vc_62192);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_handlesWhitespaceInoDocType_cf292762__12;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, "");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_62370 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_62370);
            // StatementAdderMethod cloned existing statement
            vc_62370.getTreeBuilder();
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.childNode(0).outerHtml();
            org.junit.Assert.fail("handlesWhitespaceInoDocType_cf292762_cf293568 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesWhitespaceInoDocType */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesWhitespaceInoDocType_cf292912 */
    @org.junit.Test(timeout = 10000)
    public void handlesWhitespaceInoDocType_cf292912_failAssert23_literalMutation294831_cf297677_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "" + ("      PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\r\n" + "      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
                // StatementAdderOnAssert create random local variable
                boolean vc_63804 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_63802 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_63800 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_63800.unescapeEntities(vc_63802, vc_63804);
                // MethodAssertGenerator build local variable
                Object o_12_0 = html;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_62229 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_62229.settings();
                // MethodAssertGenerator build local variable
                Object o_8_0 = doc.childNode(0).outerHtml();
                org.junit.Assert.fail("handlesWhitespaceInoDocType_cf292912 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesWhitespaceInoDocType_cf292912_failAssert23_literalMutation294831_cf297677 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesXmlDeclarationAsBogusComment */
    @org.junit.Test(timeout = 10000)
    public void handlesXmlDeclarationAsBogusComment_cf297933_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<?xml encoding='UTF-8' ?><body>One</body>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_63866 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_63864 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_63862 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_63862.unescapeEntities(vc_63864, vc_63866);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("handlesXmlDeclarationAsBogusComment_cf297933 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesXmlDeclarationAsBogusComment */
    @org.junit.Test(timeout = 10000)
    public void handlesXmlDeclarationAsBogusComment_cf298087() {
        java.lang.String html = "<?xml encoding='UTF-8' ?><body>One</body>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_63905 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_handlesXmlDeclarationAsBogusComment_cf298087__6 = // StatementAdderMethod cloned existing statement
vc_63905.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_handlesXmlDeclarationAsBogusComment_cf298087__6).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_handlesXmlDeclarationAsBogusComment_cf298087__6).isTrackErrors());
        org.junit.Assert.assertEquals("<!--?xml encoding='UTF-8' ?--> <html> <head></head> <body> One </body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesXmlDeclarationAsBogusComment */
    @org.junit.Test(timeout = 10000)
    public void handlesXmlDeclarationAsBogusComment_cf297931_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<?xml encoding='UTF-8' ?><body>One</body>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_63860 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_63860.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("handlesXmlDeclarationAsBogusComment_cf297931 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesXmlDeclarationAsBogusComment */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesXmlDeclarationAsBogusComment_cf297935 */
    @org.junit.Test(timeout = 10000)
    public void handlesXmlDeclarationAsBogusComment_cf297935_cf298703_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<?xml encoding='UTF-8' ?><body>One</body>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_63866 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_63862 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_handlesXmlDeclarationAsBogusComment_cf297935__12 = // StatementAdderMethod cloned existing statement
vc_63862.unescapeEntities(out, vc_63866);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_handlesXmlDeclarationAsBogusComment_cf297935__12;
            // StatementAdderOnAssert create random local variable
            int vc_64033 = -1112260772;
            // StatementAdderMethod cloned existing statement
            vc_63862.setTrackErrors(vc_64033);
            // MethodAssertGenerator build local variable
            Object o_20_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("handlesXmlDeclarationAsBogusComment_cf297935_cf298703 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesXmlDeclarationAsBogusComment */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesXmlDeclarationAsBogusComment_cf297933 */
    @org.junit.Test(timeout = 10000)
    public void handlesXmlDeclarationAsBogusComment_cf297933_failAssert10_literalMutation299905() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<?xml encoding=\'UTF-8\' ?><?ody>One</body>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<?xml encoding=\'UTF-8\' ?><?ody>One</body>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_63866 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_63864 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_63862 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_63862.unescapeEntities(vc_63864, vc_63866);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("handlesXmlDeclarationAsBogusComment_cf297933 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#handlesXmlDeclarationAsBogusComment */
    /* amplification of org.jsoup.parser.HtmlParserTest#handlesXmlDeclarationAsBogusComment_cf298103 */
    @org.junit.Test(timeout = 10000)
    public void handlesXmlDeclarationAsBogusComment_cf298103_failAssert16_literalMutation299946_cf300557_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "<?xml encoding=\'UTF-8\' ?><body>@ne</body>";
                // StatementAdderOnAssert create random local variable
                boolean vc_64548 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_64546 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_64544 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_64544.unescapeEntities(vc_64546, vc_64548);
                // MethodAssertGenerator build local variable
                Object o_12_0 = html;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_63920 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_63920.getTreeBuilder();
                // MethodAssertGenerator build local variable
                Object o_8_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
                org.junit.Assert.fail("handlesXmlDeclarationAsBogusComment_cf298103 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("handlesXmlDeclarationAsBogusComment_cf298103_failAssert16_literalMutation299946_cf300557 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresContentAfterFrameset */
    @org.junit.Test(timeout = 10000)
    public void ignoresContentAfterFrameset_cf300967() {
        java.lang.String h = "<html><head><title>One</title></head><frameset><frame /><frame /></frameset><table></table></html>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_64649 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_ignoresContentAfterFrameset_cf300967__6 = // StatementAdderMethod cloned existing statement
vc_64649.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_ignoresContentAfterFrameset_cf300967__6).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_ignoresContentAfterFrameset_cf300967__6).isTrackErrors());
        org.junit.Assert.assertEquals("<html><head><title>One</title></head><frameset><frame><frame></frameset></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
        // no body, no table. No crash!
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresContentAfterFrameset */
    @org.junit.Test(timeout = 10000)
    public void ignoresContentAfterFrameset_cf300817() {
        java.lang.String h = "<html><head><title>One</title></head><frameset><frame /><frame /></frameset><table></table></html>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create random local variable
        boolean vc_64610 = false;
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_64609 = new java.lang.String();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_64606 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_ignoresContentAfterFrameset_cf300817__10 = // StatementAdderMethod cloned existing statement
vc_64606.unescapeEntities(vc_64609, vc_64610);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_ignoresContentAfterFrameset_cf300817__10, "");
        org.junit.Assert.assertEquals("<html><head><title>One</title></head><frameset><frame><frame></frameset></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
        // no body, no table. No crash!
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresContentAfterFrameset */
    @org.junit.Test(timeout = 10000)
    public void ignoresContentAfterFrameset_cf300811_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><head><title>One</title></head><frameset><frame /><frame /></frameset><table></table></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_64604 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_64604.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // no body, no table. No crash!
            org.junit.Assert.fail("ignoresContentAfterFrameset_cf300811 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresContentAfterFrameset */
    @org.junit.Test(timeout = 10000)
    public void ignoresContentAfterFrameset_cf300813_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><head><title>One</title></head><frameset><frame /><frame /></frameset><table></table></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_64610 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_64608 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_64606 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_64606.unescapeEntities(vc_64608, vc_64610);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // no body, no table. No crash!
            org.junit.Assert.fail("ignoresContentAfterFrameset_cf300813 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresContentAfterFrameset */
    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresContentAfterFrameset_cf300967 */
    @org.junit.Test(timeout = 10000)
    public void ignoresContentAfterFrameset_cf300967_cf302240_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><head><title>One</title></head><frameset><frame /><frame /></frameset><table></table></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_64649 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_ignoresContentAfterFrameset_cf300967__6 = // StatementAdderMethod cloned existing statement
vc_64649.htmlParser();
            // MethodAssertGenerator build local variable
            Object o_8_0 = ((org.jsoup.parser.Parser)o_ignoresContentAfterFrameset_cf300967__6).getErrors();
            // MethodAssertGenerator build local variable
            Object o_10_0 = ((org.jsoup.parser.Parser)o_ignoresContentAfterFrameset_cf300967__6).isTrackErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_64920 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_64918 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_64916 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_64916.unescapeEntities(vc_64918, vc_64920);
            // MethodAssertGenerator build local variable
            Object o_20_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // no body, no table. No crash!
            org.junit.Assert.fail("ignoresContentAfterFrameset_cf300967_cf302240 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresContentAfterFrameset */
    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresContentAfterFrameset_cf300823 */
    @org.junit.Test(timeout = 10000)
    public void ignoresContentAfterFrameset_cf300823_failAssert12_literalMutation302791() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><head><title>One</title></head><framese><frame /><frame /></frameset><table></table></html>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<html><head><title>One</title></head><framese><frame /><frame /></frameset><table></table></html>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_64611 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_64611.getErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // no body, no table. No crash!
            org.junit.Assert.fail("ignoresContentAfterFrameset_cf300823 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresContentAfterFrameset */
    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresContentAfterFrameset_cf300816 */
    @org.junit.Test(timeout = 10000)
    public void ignoresContentAfterFrameset_cf300816_cf301908_failAssert10_literalMutation303861() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><head><title>One</title></head><frameset><frame /><frame /></frame3et><table></table></html>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<html><head><title>One</title></head><frameset><frame /><frame /></frame3et><table></table></html>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_64610 = false;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_9732 = "<html><head><title>One</title></head><frameset><frame><frame></frameset></html>";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_64606 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_ignoresContentAfterFrameset_cf300816__10 = // StatementAdderMethod cloned existing statement
vc_64606.unescapeEntities(String_vc_9732, vc_64610);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_ignoresContentAfterFrameset_cf300816__10;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, "<html><head><title>One</title></head><frameset><frame><frame></frameset></html>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_64846 = (org.jsoup.parser.ParseSettings)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_64846);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_64844 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_64844);
            // StatementAdderMethod cloned existing statement
            vc_64844.settings(vc_64846);
            // MethodAssertGenerator build local variable
            Object o_20_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // no body, no table. No crash!
            org.junit.Assert.fail("ignoresContentAfterFrameset_cf300816_cf301908 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresContentAfterFrameset */
    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresContentAfterFrameset_cf300973 */
    @org.junit.Test(timeout = 10000)
    public void ignoresContentAfterFrameset_cf300973_failAssert15_literalMutation302812_cf303431_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String h = "";
                // StatementAdderOnAssert create random local variable
                boolean vc_65292 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_65290 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_65288 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_65288.unescapeEntities(vc_65290, vc_65292);
                // MethodAssertGenerator build local variable
                Object o_12_0 = h;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                // StatementAdderOnAssert create null value
                org.jsoup.parser.TreeBuilder vc_64656 = (org.jsoup.parser.TreeBuilder)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_64654 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_64654.setTreeBuilder(vc_64656);
                // MethodAssertGenerator build local variable
                Object o_10_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
                // no body, no table. No crash!
                org.junit.Assert.fail("ignoresContentAfterFrameset_cf300973 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("ignoresContentAfterFrameset_cf300973_failAssert15_literalMutation302812_cf303431 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresContentAfterFrameset */
    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresContentAfterFrameset_cf300814 */
    @org.junit.Test(timeout = 10000)
    public void ignoresContentAfterFrameset_cf300814_cf301283_failAssert12_literalMutation303881() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<html><head><title>One</title></head><framesht><frame /><frame /></frameset><table></table></html>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<html><head><title>One</title></head><framesht><frame /><frame /></frameset><table></table></html>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_64610 = false;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_64606 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_ignoresContentAfterFrameset_cf300814__8 = // StatementAdderMethod cloned existing statement
vc_64606.unescapeEntities(h, vc_64610);
            // MethodAssertGenerator build local variable
            Object o_10_0 = o_ignoresContentAfterFrameset_cf300814__8;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_10_0, "<html><head><title>One</title></head><framesht><frame /><frame /></frameset><table></table></html>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_64722 = (org.jsoup.parser.ParseSettings)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_64722);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_64720 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_64720);
            // StatementAdderMethod cloned existing statement
            vc_64720.settings(vc_64722);
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // no body, no table. No crash!
            org.junit.Assert.fail("ignoresContentAfterFrameset_cf300814_cf301283 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresDupeEndTrTag */
    @org.junit.Test(timeout = 10000)
    public void ignoresDupeEndTrTag_cf303911_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>One</td><td><table><tr><td>Two</td></tr></tr></table></td><td>Three</td></tr></table>");// two </tr></tr>, must ignore or will close table
            
            // StatementAdderOnAssert create random local variable
            boolean vc_65478 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_65476 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_65474 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_65474.unescapeEntities(vc_65476, vc_65478);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("ignoresDupeEndTrTag_cf303911 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresDupeEndTrTag */
    @org.junit.Test(timeout = 10000)
    public void ignoresDupeEndTrTag_cf304035() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>One</td><td><table><tr><td>Two</td></tr></tr></table></td><td>Three</td></tr></table>");// two </tr></tr>, must ignore or will close table
        
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_65517 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_ignoresDupeEndTrTag_cf304035__6 = // StatementAdderMethod cloned existing statement
vc_65517.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_ignoresDupeEndTrTag_cf304035__6).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_ignoresDupeEndTrTag_cf304035__6).isTrackErrors());
        org.junit.Assert.assertEquals("<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table></td><td>Three</td></tr></tbody></table>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresDupeEndTrTag */
    @org.junit.Test(timeout = 10000)
    public void ignoresDupeEndTrTag_cf303909_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>One</td><td><table><tr><td>Two</td></tr></tr></table></td><td>Three</td></tr></table>");// two </tr></tr>, must ignore or will close table
            
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_65472 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_65472.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("ignoresDupeEndTrTag_cf303909 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresDupeEndTrTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresDupeEndTrTag_cf303912 */
    @org.junit.Test(timeout = 10000)
    public void ignoresDupeEndTrTag_cf303912_cf304353_failAssert22() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>One</td><td><table><tr><td>Two</td></tr></tr></table></td><td>Three</td></tr></table>");// two </tr></tr>, must ignore or will close table
            
            // StatementAdderOnAssert create random local variable
            boolean vc_65478 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_65474 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_ignoresDupeEndTrTag_cf303912__11 = // StatementAdderMethod cloned existing statement
vc_65474.unescapeEntities(rendered, vc_65478);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_ignoresDupeEndTrTag_cf303912__11;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_65594 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_65594.getTreeBuilder();
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("ignoresDupeEndTrTag_cf303912_cf304353 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresDupeEndTrTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresDupeEndTrTag_cf303912 */
    @org.junit.Test(timeout = 10000)
    public void ignoresDupeEndTrTag_cf303912_cf304067_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>One</td><td><table><tr><td>Two</td></tr></tr></table></td><td>Three</td></tr></table>");// two </tr></tr>, must ignore or will close table
            
            // StatementAdderOnAssert create random local variable
            boolean vc_65478 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_65474 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_ignoresDupeEndTrTag_cf303912__11 = // StatementAdderMethod cloned existing statement
vc_65474.unescapeEntities(rendered, vc_65478);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_ignoresDupeEndTrTag_cf303912__11;
            // StatementAdderOnAssert create random local variable
            boolean vc_65540 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_65538 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_65536 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_65536.unescapeEntities(vc_65538, vc_65540);
            // MethodAssertGenerator build local variable
            Object o_23_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("ignoresDupeEndTrTag_cf303912_cf304067 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresDupeEndTrTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#ignoresDupeEndTrTag_cf303914 */
    @org.junit.Test(timeout = 10000)
    public void ignoresDupeEndTrTag_cf303914_cf304678_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>One</td><td><table><tr><td>Two</td></tr></tr></table></td><td>Three</td></tr></table>");// two </tr></tr>, must ignore or will close table
            
            // StatementAdderOnAssert create random local variable
            boolean vc_65478 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_65477 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_65474 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_ignoresDupeEndTrTag_cf303914__10 = // StatementAdderMethod cloned existing statement
vc_65474.unescapeEntities(vc_65477, vc_65478);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_ignoresDupeEndTrTag_cf303914__10;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_9891 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_65662 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_65660 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_65660.unescapeEntities(vc_65662, boolean_vc_9891);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("ignoresDupeEndTrTag_cf303914_cf304678 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noErrorsByDefault */
    @org.junit.Test
    public void noErrorsByDefault_literalMutation305645() {
        java.lang.String html = "#(t(ev>X@d|[?:(8NmEJqL#ckY.@6#<9Z;C?!#uP4-.]:";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(html, "#(t(ev>X@d|[?:(8NmEJqL#ckY.@6#<9Z;C?!#uP4-.]:");
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com", parser);
        java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
        org.junit.Assert.assertEquals(0, errors.size());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noErrorsByDefault */
    @org.junit.Test(timeout = 10000)
    public void noErrorsByDefault_cf305930() {
        java.lang.String html = "<p>One</p href='no'>&arrgh;<font /><br /><foo";
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com", parser);
        java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_65951 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_65951);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_noErrorsByDefault_cf305930__10 = // StatementAdderMethod cloned existing statement
vc_65951.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_noErrorsByDefault_cf305930__10).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_noErrorsByDefault_cf305930__10).isTrackErrors());
        org.junit.Assert.assertEquals(0, errors.size());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noErrorsByDefault */
    @org.junit.Test(timeout = 10000)
    public void noErrorsByDefault_cf305661() {
        java.lang.String html = "<p>One</p href='no'>&arrgh;<font /><br /><foo";
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com", parser);
        java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
        // StatementAdderOnAssert create random local variable
        boolean vc_65912 = true;
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(vc_65912);
        // StatementAddOnAssert local variable replacement
        java.lang.String rendered = doc.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(rendered, "<html>\n <head></head>\n <body>\n  <p>One</p>&amp;arrgh;\n  <font></font>\n  <br>\n </body>\n</html>");
        // AssertGenerator replace invocation
        java.lang.String o_noErrorsByDefault_cf305661__13 = // StatementAdderMethod cloned existing statement
parser.unescapeEntities(rendered, vc_65912);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_noErrorsByDefault_cf305661__13, "<html>\n <head></head>\n <body>\n  <p>One</p>&arrgh;\n  <font></font>\n  <br>\n </body>\n</html>");
        org.junit.Assert.assertEquals(0, errors.size());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noErrorsByDefault */
    @org.junit.Test(timeout = 10000)
    public void noErrorsByDefault_cf305659_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<p>One</p href='no'>&arrgh;<font /><br /><foo";
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com", parser);
            java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_65912 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_65910 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            parser.unescapeEntities(vc_65910, vc_65912);
            // MethodAssertGenerator build local variable
            Object o_14_0 = errors.size();
            org.junit.Assert.fail("noErrorsByDefault_cf305659 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noErrorsByDefault */
    @org.junit.Test(timeout = 10000)
    public void noErrorsByDefault_literalMutation305645_cf308875_failAssert7_add311737() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "#(t(ev>X@d|[?:(8NmEJqL#ckY.@6#<9Z;C?!#uP4-.]:";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "#(t(ev>X@d|[?:(8NmEJqL#ckY.@6#<9Z;C?!#uP4-.]:");
            // MethodAssertGenerator build local variable
            Object o_2_0 = html;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_2_0, "#(t(ev>X@d|[?:(8NmEJqL#ckY.@6#<9Z;C?!#uP4-.]:");
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser();
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com", parser);
            java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_66516 = (org.jsoup.parser.TreeBuilder)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_66516);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_66514 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_66514);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_66514.setTreeBuilder(vc_66516);
            // StatementAdderMethod cloned existing statement
            vc_66514.setTreeBuilder(vc_66516);
            // MethodAssertGenerator build local variable
            Object o_16_0 = errors.size();
            org.junit.Assert.fail("noErrorsByDefault_literalMutation305645_cf308875 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noImplicitFormForTextAreas */
    @org.junit.Test(timeout = 10000)
    public void noImplicitFormForTextAreas_cf311748_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // old jsoup parser would create implicit forms for form children like <textarea>, but no more
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>One</textarea>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67022 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_67022.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = doc.body().html();
            org.junit.Assert.fail("noImplicitFormForTextAreas_cf311748 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noImplicitFormForTextAreas */
    @org.junit.Test(timeout = 10000)
    public void noImplicitFormForTextAreas_cf311750_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // old jsoup parser would create implicit forms for form children like <textarea>, but no more
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>One</textarea>");
            // StatementAdderOnAssert create random local variable
            boolean vc_67028 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_67026 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67024 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_67024.unescapeEntities(vc_67026, vc_67028);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.body().html();
            org.junit.Assert.fail("noImplicitFormForTextAreas_cf311750 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noImplicitFormForTextAreas */
    @org.junit.Test(timeout = 10000)
    public void noImplicitFormForTextAreas_cf311753() {
        // old jsoup parser would create implicit forms for form children like <textarea>, but no more
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>One</textarea>");
        // StatementAdderOnAssert create random local variable
        boolean vc_67028 = true;
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_67027 = new java.lang.String();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_67024 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_noImplicitFormForTextAreas_cf311753__10 = // StatementAdderMethod cloned existing statement
vc_67024.unescapeEntities(vc_67027, vc_67028);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_noImplicitFormForTextAreas_cf311753__10, "");
        org.junit.Assert.assertEquals("<textarea>One</textarea>", doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noImplicitFormForTextAreas */
    @org.junit.Test(timeout = 10000)
    public void noImplicitFormForTextAreas_cf311874() {
        // old jsoup parser would create implicit forms for form children like <textarea>, but no more
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>One</textarea>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_67067 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_noImplicitFormForTextAreas_cf311874__6 = // StatementAdderMethod cloned existing statement
vc_67067.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_noImplicitFormForTextAreas_cf311874__6).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_noImplicitFormForTextAreas_cf311874__6).isTrackErrors());
        org.junit.Assert.assertEquals("<textarea>One</textarea>", doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noImplicitFormForTextAreas */
    /* amplification of org.jsoup.parser.HtmlParserTest#noImplicitFormForTextAreas_cf311752 */
    @org.junit.Test(timeout = 10000)
    public void noImplicitFormForTextAreas_cf311752_cf312231_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // old jsoup parser would create implicit forms for form children like <textarea>, but no more
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>One</textarea>");
            // StatementAdderOnAssert create random local variable
            boolean vc_67028 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_10096 = "<textarea>One</textarea>";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67024 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_noImplicitFormForTextAreas_cf311752__10 = // StatementAdderMethod cloned existing statement
vc_67024.unescapeEntities(String_vc_10096, vc_67028);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_noImplicitFormForTextAreas_cf311752__10;
            // StatementAdderOnAssert create random local variable
            boolean vc_67152 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_67150 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_67024.unescapeEntities(vc_67150, vc_67152);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.body().html();
            org.junit.Assert.fail("noImplicitFormForTextAreas_cf311752_cf312231 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noImplicitFormForTextAreas */
    /* amplification of org.jsoup.parser.HtmlParserTest#noImplicitFormForTextAreas_cf311751 */
    @org.junit.Test(timeout = 10000)
    public void noImplicitFormForTextAreas_cf311751_cf311901_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // old jsoup parser would create implicit forms for form children like <textarea>, but no more
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>One</textarea>");
            // StatementAdderOnAssert create random local variable
            boolean vc_67028 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67024 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_noImplicitFormForTextAreas_cf311751__11 = // StatementAdderMethod cloned existing statement
vc_67024.unescapeEntities(rendered, vc_67028);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_noImplicitFormForTextAreas_cf311751__11;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67084 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_67084.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.body().html();
            org.junit.Assert.fail("noImplicitFormForTextAreas_cf311751_cf311901 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noImplicitFormForTextAreas */
    /* amplification of org.jsoup.parser.HtmlParserTest#noImplicitFormForTextAreas_cf311751 */
    @org.junit.Test(timeout = 10000)
    public void noImplicitFormForTextAreas_cf311751_cf311921_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // old jsoup parser would create implicit forms for form children like <textarea>, but no more
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>One</textarea>");
            // StatementAdderOnAssert create random local variable
            boolean vc_67028 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67024 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_noImplicitFormForTextAreas_cf311751__11 = // StatementAdderMethod cloned existing statement
vc_67024.unescapeEntities(rendered, vc_67028);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_noImplicitFormForTextAreas_cf311751__11;
            // StatementAdderOnAssert create random local variable
            boolean vc_67090 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_67088 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_67024.unescapeEntities(vc_67088, vc_67090);
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.body().html();
            org.junit.Assert.fail("noImplicitFormForTextAreas_cf311751_cf311921 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noImplicitFormForTextAreas */
    /* amplification of org.jsoup.parser.HtmlParserTest#noImplicitFormForTextAreas_cf311876 */
    @org.junit.Test(timeout = 10000)
    public void noImplicitFormForTextAreas_cf311876_failAssert9_literalMutation313257_cf313269_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_17_1 = 439328158;
                // old jsoup parser would create implicit forms for form children like <textarea>, but no more
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>One</textarea>");
                // StatementAdderOnAssert create random local variable
                int vc_67071 = 439328158;
                // StatementAdderOnAssert create random local variable
                boolean vc_67400 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_67398 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_67396 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_67396.unescapeEntities(vc_67398, vc_67400);
                // MethodAssertGenerator build local variable
                Object o_17_0 = vc_67071;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_67069 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_67069.setTrackErrors(vc_67071);
                // MethodAssertGenerator build local variable
                Object o_10_0 = doc.body().html();
                org.junit.Assert.fail("noImplicitFormForTextAreas_cf311876 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("noImplicitFormForTextAreas_cf311876_failAssert9_literalMutation313257_cf313269 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noTableDirectInTable */
    @org.junit.Test(timeout = 10000)
    public void noTableDirectInTable_cf313468_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table> <td>One <td><table><td>Two</table> <table><td>Three");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67456 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_67456.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("noTableDirectInTable_cf313468 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noTableDirectInTable */
    @org.junit.Test(timeout = 10000)
    public void noTableDirectInTable_cf313470_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table> <td>One <td><table><td>Two</table> <table><td>Three");
            // StatementAdderOnAssert create random local variable
            boolean vc_67462 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_67460 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67458 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_67458.unescapeEntities(vc_67460, vc_67462);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("noTableDirectInTable_cf313470 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noTableDirectInTable */
    @org.junit.Test(timeout = 10000)
    public void noTableDirectInTable_cf313594() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table> <td>One <td><table><td>Two</table> <table><td>Three");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_67501 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_noTableDirectInTable_cf313594__5 = // StatementAdderMethod cloned existing statement
vc_67501.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_noTableDirectInTable_cf313594__5).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_noTableDirectInTable_cf313594__5).getErrors());
        org.junit.Assert.assertEquals("<table> <tbody><tr><td>One </td><td><table><tbody><tr><td>Two</td></tr></tbody></table> <table><tbody><tr><td>Three</td></tr></tbody></table></td></tr></tbody></table>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noTableDirectInTable */
    /* amplification of org.jsoup.parser.HtmlParserTest#noTableDirectInTable_cf313471 */
    @org.junit.Test(timeout = 10000)
    public void noTableDirectInTable_cf313471_cf313897_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table> <td>One <td><table><td>Two</table> <table><td>Three");
            // StatementAdderOnAssert create random local variable
            boolean vc_67462 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67458 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_noTableDirectInTable_cf313471__10 = // StatementAdderMethod cloned existing statement
vc_67458.unescapeEntities(rendered, vc_67462);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_noTableDirectInTable_cf313471__10;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_67570 = (org.jsoup.parser.TreeBuilder)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67568 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_67568.setTreeBuilder(vc_67570);
            // MethodAssertGenerator build local variable
            Object o_20_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("noTableDirectInTable_cf313471_cf313897 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noTableDirectInTable */
    /* amplification of org.jsoup.parser.HtmlParserTest#noTableDirectInTable_cf313594 */
    @org.junit.Test(timeout = 10000)
    public void noTableDirectInTable_cf313594_cf314539_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table> <td>One <td><table><td>Two</table> <table><td>Three");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67501 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_noTableDirectInTable_cf313594__5 = // StatementAdderMethod cloned existing statement
vc_67501.htmlParser();
            // MethodAssertGenerator build local variable
            Object o_7_0 = ((org.jsoup.parser.Parser)o_noTableDirectInTable_cf313594__5).isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = ((org.jsoup.parser.Parser)o_noTableDirectInTable_cf313594__5).getErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_67710 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_67708 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_67501.unescapeEntities(vc_67708, vc_67710);
            // MethodAssertGenerator build local variable
            Object o_17_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("noTableDirectInTable_cf313594_cf314539 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noTableDirectInTable */
    /* amplification of org.jsoup.parser.HtmlParserTest#noTableDirectInTable_cf313470 */
    @org.junit.Test(timeout = 10000)
    public void noTableDirectInTable_cf313470_failAssert6_literalMutation314971() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table> <td>One <td><table><td>Two</table> <table><td>Three");
            // StatementAdderOnAssert create random local variable
            boolean vc_67462 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(vc_67462);
            // StatementAdderOnAssert create null value
            java.lang.String vc_67460 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67458 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_67458.unescapeEntities(vc_67460, vc_67462);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("noTableDirectInTable_cf313470 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#noTableDirectInTable */
    /* amplification of org.jsoup.parser.HtmlParserTest#noTableDirectInTable_cf313473 */
    @org.junit.Test(timeout = 10000)
    public void noTableDirectInTable_cf313473_cf314238_failAssert3_add315154() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table> <td>One <td><table><td>Two</table> <table><td>Three");
            // StatementAdderOnAssert create random local variable
            boolean vc_67462 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_67461 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67458 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_noTableDirectInTable_cf313473__9 = // StatementAdderMethod cloned existing statement
vc_67458.unescapeEntities(vc_67461, vc_67462);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_noTableDirectInTable_cf313473__9;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "");
            // StatementAdderOnAssert create random local variable
            boolean vc_67648 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_67648);
            // StatementAdderOnAssert create null value
            java.lang.String vc_67646 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_67646);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67644 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_67644);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_67644.unescapeEntities(vc_67646, vc_67648);
            // StatementAdderMethod cloned existing statement
            vc_67644.unescapeEntities(vc_67646, vc_67648);
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("noTableDirectInTable_cf313473_cf314238 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisedBodyAfterContent */
    @org.junit.Test(timeout = 10000)
    public void normalisedBodyAfterContent_cf315336() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<font face=Arial><body class=name><div>One</div></body></font>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_67935 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_normalisedBodyAfterContent_cf315336__5 = // StatementAdderMethod cloned existing statement
vc_67935.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_normalisedBodyAfterContent_cf315336__5).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_normalisedBodyAfterContent_cf315336__5).isTrackErrors());
        org.junit.Assert.assertEquals("<html><head></head><body class=\"name\"><font face=\"Arial\"><div>One</div></font></body></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisedBodyAfterContent */
    @org.junit.Test(timeout = 10000)
    public void normalisedBodyAfterContent_cf315210_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<font face=Arial><body class=name><div>One</div></body></font>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67890 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_67890.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisedBodyAfterContent_cf315210 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisedBodyAfterContent */
    @org.junit.Test(timeout = 10000)
    public void normalisedBodyAfterContent_cf315212_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<font face=Arial><body class=name><div>One</div></body></font>");
            // StatementAdderOnAssert create random local variable
            boolean vc_67896 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_67894 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67892 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_67892.unescapeEntities(vc_67894, vc_67896);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisedBodyAfterContent_cf315212 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisedBodyAfterContent */
    /* amplification of org.jsoup.parser.HtmlParserTest#normalisedBodyAfterContent_cf315213 */
    @org.junit.Test(timeout = 10000)
    public void normalisedBodyAfterContent_cf315213_cf315368_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<font face=Arial><body class=name><div>One</div></body></font>");
            // StatementAdderOnAssert create random local variable
            boolean vc_67896 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67892 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_normalisedBodyAfterContent_cf315213__10 = // StatementAdderMethod cloned existing statement
vc_67892.unescapeEntities(rendered, vc_67896);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_normalisedBodyAfterContent_cf315213__10;
            // StatementAdderOnAssert create random local variable
            boolean vc_67958 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_67956 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67954 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_67954.unescapeEntities(vc_67956, vc_67958);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisedBodyAfterContent_cf315213_cf315368 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisedBodyAfterContent */
    /* amplification of org.jsoup.parser.HtmlParserTest#normalisedBodyAfterContent_cf315213 */
    @org.junit.Test(timeout = 10000)
    public void normalisedBodyAfterContent_cf315213_cf315655_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<font face=Arial><body class=name><div>One</div></body></font>");
            // StatementAdderOnAssert create random local variable
            boolean vc_67896 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67892 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_normalisedBodyAfterContent_cf315213__10 = // StatementAdderMethod cloned existing statement
vc_67892.unescapeEntities(rendered, vc_67896);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_normalisedBodyAfterContent_cf315213__10;
            // StatementAdderMethod cloned existing statement
            vc_67892.getTreeBuilder();
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisedBodyAfterContent_cf315213_cf315655 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisedBodyAfterContent */
    /* amplification of org.jsoup.parser.HtmlParserTest#normalisedBodyAfterContent_cf315213 */
    @org.junit.Test(timeout = 10000)
    public void normalisedBodyAfterContent_cf315213_cf315382_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<font face=Arial><body class=name><div>One</div></body></font>");
            // StatementAdderOnAssert create random local variable
            boolean vc_67896 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_67892 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_normalisedBodyAfterContent_cf315213__10 = // StatementAdderMethod cloned existing statement
vc_67892.unescapeEntities(rendered, vc_67896);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_normalisedBodyAfterContent_cf315213__10;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_10236 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_67956 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_67892.unescapeEntities(vc_67956, boolean_vc_10236);
            // MethodAssertGenerator build local variable
            Object o_20_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisedBodyAfterContent_cf315213_cf315382 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesDocument */
    @org.junit.Test(timeout = 10000)
    public void normalisesDocument_cf316942() {
        java.lang.String h = "<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven ";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_68307 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_normalisesDocument_cf316942__6 = // StatementAdderMethod cloned existing statement
vc_68307.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_normalisesDocument_cf316942__6).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_normalisesDocument_cf316942__6).getErrors());
        org.junit.Assert.assertEquals("<!doctype html><html><head></head><body>OneTwoThree<link>FourFive Six Seven </body></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesDocument */
    @org.junit.Test(timeout = 10000)
    public void normalisesDocument_cf316786_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven ";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_68262 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_68262.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisesDocument_cf316786 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesDocument */
    @org.junit.Test(timeout = 10000)
    public void normalisesDocument_cf316788_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven ";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_68268 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_68266 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_68264 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_68264.unescapeEntities(vc_68266, vc_68268);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisesDocument_cf316788 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesDocument */
    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesDocument_cf316940 */
    @org.junit.Test(timeout = 10000)
    public void normalisesDocument_cf316940_failAssert13_literalMutation318772() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = ".e_xOM.sgwvD`uBAa$q3cui0gDv.cd$Di(2/UbL9w:$4`yF!}iN=[(N_-K>{Uh:GkC_5a6I:T%.!^^Ktj0j+`Y5o?&";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, ".e_xOM.sgwvD`uBAa$q3cui0gDv.cd$Di(2/UbL9w:$4`yF!}iN=[(N_-K>{Uh:GkC_5a6I:T%.!^^Ktj0j+`Y5o?&");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_68305 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_68305.settings();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisesDocument_cf316940 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesDocument */
    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesDocument_cf316952 */
    @org.junit.Test(timeout = 10000)
    public void normalisesDocument_cf316952_failAssert16_literalMutation318793() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<C!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven ";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<C!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven ");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_68318 = (org.jsoup.parser.ParseSettings)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_68316 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_68316.settings(vc_68318);
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisesDocument_cf316952 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesDocument */
    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesDocument_cf316792 */
    @org.junit.Test(timeout = 10000)
    public void normalisesDocument_cf316792_cf318169_failAssert14_literalMutation319555() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "jz%BuqYT<5;r>$LvgDc6&XJ#Dj>i,4*>rpbp18QQE}r>#Y8SpGId;.AcMP!?hRb(Z4H6!&#lO2mqJ/A{&F9G5V(hDU";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "jz%BuqYT<5;r>$LvgDc6&XJ#Dj>i,4*>rpbp18QQE}r>#Y8SpGId;.AcMP!?hRb(Z4H6!&#lO2mqJ/A{&F9G5V(hDU");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_68268 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_68267 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_68264 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_normalisesDocument_cf316792__10 = // StatementAdderMethod cloned existing statement
vc_68264.unescapeEntities(vc_68267, vc_68268);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_normalisesDocument_cf316792__10;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, "");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_68553 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_68553);
            // StatementAdderMethod cloned existing statement
            vc_68553.settings();
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisesDocument_cf316792_cf318169 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesDocument */
    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesDocument_cf316952 */
    @org.junit.Test(timeout = 10000)
    public void normalisesDocument_cf316952_failAssert16_literalMutation318793_cf319082_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String h = "<C!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven ";
                // StatementAdderOnAssert create random local variable
                boolean vc_68826 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_68824 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_68822 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_68822.unescapeEntities(vc_68824, vc_68826);
                // MethodAssertGenerator build local variable
                Object o_12_0 = h;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                // StatementAdderOnAssert create null value
                org.jsoup.parser.ParseSettings vc_68318 = (org.jsoup.parser.ParseSettings)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_68316 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_68316.settings(vc_68318);
                // MethodAssertGenerator build local variable
                Object o_10_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
                org.junit.Assert.fail("normalisesDocument_cf316952 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("normalisesDocument_cf316952_failAssert16_literalMutation318793_cf319082 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesDocument */
    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesDocument_cf316791 */
    @org.junit.Test(timeout = 10000)
    public void normalisesDocument_cf316791_cf317620_failAssert17_literalMutation319563() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<!doctype html>One<html>Two<head>Three<linkd></head>Four<body>Five </body>Six </html>Seven ";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<!doctype html>One<html>Two<head>Three<linkd></head>Four<body>Five </body>Six </html>Seven ");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_68268 = false;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_10283 = "<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven ";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_68264 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_normalisesDocument_cf316791__10 = // StatementAdderMethod cloned existing statement
vc_68264.unescapeEntities(String_vc_10283, vc_68268);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_normalisesDocument_cf316791__10;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, "<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven ");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_10312 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(boolean_vc_10312);
            // StatementAdderOnAssert create null value
            java.lang.String vc_68452 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_68452);
            // StatementAdderMethod cloned existing statement
            vc_68264.unescapeEntities(vc_68452, boolean_vc_10312);
            // MethodAssertGenerator build local variable
            Object o_20_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisesDocument_cf316791_cf317620 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesEmptyDocument */
    @org.junit.Test(timeout = 10000)
    public void normalisesEmptyDocument_cf319597_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("");
            // StatementAdderOnAssert create random local variable
            boolean vc_69012 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_69010 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69008 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_69008.unescapeEntities(vc_69010, vc_69012);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisesEmptyDocument_cf319597 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesEmptyDocument */
    @org.junit.Test(timeout = 10000)
    public void normalisesEmptyDocument_cf319733() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_69064 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_normalisesEmptyDocument_cf319733__5 = // StatementAdderMethod cloned existing statement
vc_69064.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_normalisesEmptyDocument_cf319733__5).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_normalisesEmptyDocument_cf319733__5).getErrors());
        org.junit.Assert.assertEquals("<html><head></head><body></body></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesEmptyDocument */
    @org.junit.Test(timeout = 10000)
    public void normalisesEmptyDocument_cf319595_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69006 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_69006.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisesEmptyDocument_cf319595 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesEmptyDocument */
    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesEmptyDocument_cf319598 */
    @org.junit.Test(timeout = 10000)
    public void normalisesEmptyDocument_cf319598_cf319746_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("");
            // StatementAdderOnAssert create random local variable
            boolean vc_69012 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69008 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_normalisesEmptyDocument_cf319598__11 = // StatementAdderMethod cloned existing statement
vc_69008.unescapeEntities(out, vc_69012);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_normalisesEmptyDocument_cf319598__11;
            // StatementAdderMethod cloned existing statement
            vc_69008.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_17_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisesEmptyDocument_cf319598_cf319746 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesEmptyDocument */
    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesEmptyDocument_cf319600 */
    @org.junit.Test(timeout = 10000)
    public void normalisesEmptyDocument_cf319600_cf320354_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("");
            // StatementAdderOnAssert create random local variable
            boolean vc_69012 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_69011 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69008 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_normalisesEmptyDocument_cf319600__9 = // StatementAdderMethod cloned existing statement
vc_69008.unescapeEntities(vc_69011, vc_69012);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_normalisesEmptyDocument_cf319600__9;
            // StatementAdderOnAssert create null value
            java.lang.String vc_69196 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69194 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_69194.unescapeEntities(vc_69196, vc_69012);
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisesEmptyDocument_cf319600_cf320354 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesEmptyDocument */
    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesEmptyDocument_cf319723 */
    @org.junit.Test(timeout = 10000)
    public void normalisesEmptyDocument_cf319723_failAssert9_literalMutation321093_cf321107_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_16_1 = 725090345;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("");
                // StatementAdderOnAssert create random local variable
                int vc_69055 = 725090345;
                // StatementAdderOnAssert create random local variable
                boolean vc_69384 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_69382 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_69380 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_69380.unescapeEntities(vc_69382, vc_69384);
                // MethodAssertGenerator build local variable
                Object o_16_0 = vc_69055;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_69053 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_69053.setTrackErrors(vc_69055);
                // MethodAssertGenerator build local variable
                Object o_9_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
                org.junit.Assert.fail("normalisesEmptyDocument_cf319723 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("normalisesEmptyDocument_cf319723_failAssert9_literalMutation321093_cf321107 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesHeadlessBody */
    @org.junit.Test(timeout = 10000)
    public void normalisesHeadlessBody_cf321295_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><body><span class=\"foo\">bar</span>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69440 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_69440.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisesHeadlessBody_cf321295 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesHeadlessBody */
    @org.junit.Test(timeout = 10000)
    public void normalisesHeadlessBody_cf321421() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><body><span class=\"foo\">bar</span>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_69485 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_normalisesHeadlessBody_cf321421__5 = // StatementAdderMethod cloned existing statement
vc_69485.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_normalisesHeadlessBody_cf321421__5).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_normalisesHeadlessBody_cf321421__5).getErrors());
        org.junit.Assert.assertEquals("<html><head></head><body><span class=\"foo\">bar</span></body></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesHeadlessBody */
    @org.junit.Test(timeout = 10000)
    public void normalisesHeadlessBody_cf321297_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><body><span class=\"foo\">bar</span>");
            // StatementAdderOnAssert create random local variable
            boolean vc_69446 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_69444 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69442 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_69442.unescapeEntities(vc_69444, vc_69446);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisesHeadlessBody_cf321297 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesHeadlessBody */
    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesHeadlessBody_cf321298 */
    @org.junit.Test(timeout = 10000)
    public void normalisesHeadlessBody_cf321298_cf321448_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><body><span class=\"foo\">bar</span>");
            // StatementAdderOnAssert create random local variable
            boolean vc_69446 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69442 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_normalisesHeadlessBody_cf321298__10 = // StatementAdderMethod cloned existing statement
vc_69442.unescapeEntities(html, vc_69446);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_normalisesHeadlessBody_cf321298__10;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69502 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_69502.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisesHeadlessBody_cf321298_cf321448 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesHeadlessBody */
    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesHeadlessBody_cf321298 */
    @org.junit.Test(timeout = 10000)
    public void normalisesHeadlessBody_cf321298_cf321719_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><body><span class=\"foo\">bar</span>");
            // StatementAdderOnAssert create random local variable
            boolean vc_69446 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69442 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_normalisesHeadlessBody_cf321298__10 = // StatementAdderMethod cloned existing statement
vc_69442.unescapeEntities(html, vc_69446);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_normalisesHeadlessBody_cf321298__10;
            // StatementAdderOnAssert create literal from method
            int int_vc_10477 = 10000;
            // StatementAdderMethod cloned existing statement
            vc_69442.setTrackErrors(int_vc_10477);
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisesHeadlessBody_cf321298_cf321719 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesHeadlessBody */
    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesHeadlessBody_cf321300 */
    @org.junit.Test(timeout = 10000)
    public void normalisesHeadlessBody_cf321300_cf322080_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><body><span class=\"foo\">bar</span>");
            // StatementAdderOnAssert create random local variable
            boolean vc_69446 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_69445 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69442 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_normalisesHeadlessBody_cf321300__9 = // StatementAdderMethod cloned existing statement
vc_69442.unescapeEntities(vc_69445, vc_69446);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_normalisesHeadlessBody_cf321300__9;
            // StatementAdderOnAssert create random local variable
            boolean vc_69632 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_69630 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_69442.unescapeEntities(vc_69630, vc_69632);
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisesHeadlessBody_cf321300_cf322080 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesHeadlessBody */
    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesHeadlessBody_cf321299 */
    @org.junit.Test(timeout = 10000)
    public void normalisesHeadlessBody_cf321299_cf321762_failAssert9_literalMutation322985() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><body><span class=\"foo\">bar</span>");
            // StatementAdderOnAssert create random local variable
            boolean vc_69446 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_10460 = "sQ{-95a9$IC7zdoa&#YDO0ty7td^->uO{7tn-V2l3Zmuz_P$Yof. QS&&)!>-m$)^[D";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_10460, "sQ{-95a9$IC7zdoa&#YDO0ty7td^->uO{7tn-V2l3Zmuz_P$Yof. QS&&)!>-m$)^[D");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69442 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_normalisesHeadlessBody_cf321299__9 = // StatementAdderMethod cloned existing statement
vc_69442.unescapeEntities(String_vc_10460, vc_69446);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_normalisesHeadlessBody_cf321299__9;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "sQ{-95a9$IC7zdoa&#YDO0ty7td^->uO{7tn-V2l3Zmuz_P$Yof. QS&&)!>-m$)^[D");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_10479 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(boolean_vc_10479);
            // StatementAdderOnAssert create null value
            java.lang.String vc_69568 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_69568);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69566 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_69566);
            // StatementAdderMethod cloned existing statement
            vc_69566.unescapeEntities(vc_69568, boolean_vc_10479);
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisesHeadlessBody_cf321299_cf321762 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesHeadlessBody */
    /* amplification of org.jsoup.parser.HtmlParserTest#normalisesHeadlessBody_cf321300 */
    @org.junit.Test(timeout = 10000)
    public void normalisesHeadlessBody_cf321300_cf322078_failAssert18_add323024() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><body><span class=\"foo\">bar</span>");
            // StatementAdderOnAssert create random local variable
            boolean vc_69446 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_69445 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69442 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_normalisesHeadlessBody_cf321300__9 = // StatementAdderMethod cloned existing statement
vc_69442.unescapeEntities(vc_69445, vc_69446);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_normalisesHeadlessBody_cf321300__9;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "");
            // StatementAdderOnAssert create null value
            java.lang.String vc_69630 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_69630);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_69442.unescapeEntities(vc_69630, vc_69446);
            // StatementAdderMethod cloned existing statement
            vc_69442.unescapeEntities(vc_69630, vc_69446);
            // MethodAssertGenerator build local variable
            Object o_17_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("normalisesHeadlessBody_cf321300_cf322078 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesBodyFragment */
    @org.junit.Test(timeout = 10000)
    public void parsesBodyFragment_cf323220() {
        java.lang.String h = "<!-- comment --><p><a href='foo'>One</a></p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parseBodyFragment(h, "http://example.com");
        org.junit.Assert.assertEquals("<body><!-- comment --><p><a href=\"foo\">One</a></p></body>", org.jsoup.TextUtil.stripNewlines(doc.body().outerHtml()));
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_69919 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_parsesBodyFragment_cf323220__10 = // StatementAdderMethod cloned existing statement
vc_69919.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_parsesBodyFragment_cf323220__10).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_parsesBodyFragment_cf323220__10).getErrors());
        org.junit.Assert.assertEquals("http://example.com/foo", doc.select("a").first().absUrl("href"));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesBodyFragment */
    @org.junit.Test(timeout = 10000)
    public void parsesBodyFragment_cf323066_failAssert16() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<!-- comment --><p><a href='foo'>One</a></p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parseBodyFragment(h, "http://example.com");
            // MethodAssertGenerator build local variable
            Object o_4_0 = org.jsoup.TextUtil.stripNewlines(doc.body().outerHtml());
            // StatementAdderOnAssert create random local variable
            boolean vc_69880 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_69878 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69876 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_69876.unescapeEntities(vc_69878, vc_69880);
            // MethodAssertGenerator build local variable
            Object o_16_0 = doc.select("a").first().absUrl("href");
            org.junit.Assert.fail("parsesBodyFragment_cf323066 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesBodyFragment */
    /* amplification of org.jsoup.parser.HtmlParserTest#parsesBodyFragment_cf323070 */
    @org.junit.Test(timeout = 10000)
    public void parsesBodyFragment_cf323070_cf324211_failAssert19() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<!-- comment --><p><a href='foo'>One</a></p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parseBodyFragment(h, "http://example.com");
            // MethodAssertGenerator build local variable
            Object o_4_0 = org.jsoup.TextUtil.stripNewlines(doc.body().outerHtml());
            // StatementAdderOnAssert create random local variable
            boolean vc_69880 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_69879 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69876 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_parsesBodyFragment_cf323070__14 = // StatementAdderMethod cloned existing statement
vc_69876.unescapeEntities(vc_69879, vc_69880);
            // MethodAssertGenerator build local variable
            Object o_16_0 = o_parsesBodyFragment_cf323070__14;
            // StatementAdderOnAssert create random local variable
            boolean vc_70128 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_70126 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_70124 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_70124.unescapeEntities(vc_70126, vc_70128);
            // MethodAssertGenerator build local variable
            Object o_26_0 = doc.select("a").first().absUrl("href");
            org.junit.Assert.fail("parsesBodyFragment_cf323070_cf324211 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesBodyFragment */
    /* amplification of org.jsoup.parser.HtmlParserTest#parsesBodyFragment_cf323226 */
    @org.junit.Test(timeout = 10000)
    public void parsesBodyFragment_cf323226_failAssert20_literalMutation325105() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<!-| comment --><p><a href=\'foo\'>One</a></p>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<!-| comment --><p><a href=\'foo\'>One</a></p>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parseBodyFragment(h, "http://example.com");
            // MethodAssertGenerator build local variable
            Object o_4_0 = org.jsoup.TextUtil.stripNewlines(doc.body().outerHtml());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_4_0, "<body><!---| comment ----><p><a href=\"foo\">One</a></p></body>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_69926 = (org.jsoup.parser.TreeBuilder)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69924 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_69924.setTreeBuilder(vc_69926);
            // MethodAssertGenerator build local variable
            Object o_14_0 = doc.select("a").first().absUrl("href");
            org.junit.Assert.fail("parsesBodyFragment_cf323226 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesBodyFragment */
    /* amplification of org.jsoup.parser.HtmlParserTest#parsesBodyFragment_cf323218 */
    @org.junit.Test(timeout = 10000)
    public void parsesBodyFragment_cf323218_failAssert18_literalMutation325086() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<!-- comment -4-><p><a href=\'foo\'>One</a></p>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<!-- comment -4-><p><a href=\'foo\'>One</a></p>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parseBodyFragment(h, "http://example.com");
            // MethodAssertGenerator build local variable
            Object o_4_0 = org.jsoup.TextUtil.stripNewlines(doc.body().outerHtml());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_4_0, "<body><!-- comment -4-><p><a href=\'foo\'>One</a></p>--></body>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69917 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_69917.settings();
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.select("a").first().absUrl("href");
            org.junit.Assert.fail("parsesBodyFragment_cf323218 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesBodyFragment */
    /* amplification of org.jsoup.parser.HtmlParserTest#parsesBodyFragment_cf323069 */
    @org.junit.Test(timeout = 10000)
    public void parsesBodyFragment_cf323069_cf323913_failAssert9_literalMutation327081() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<!-- comment --><p><a href='foo'>One</a></p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parseBodyFragment(h, "http://example.com");
            // MethodAssertGenerator build local variable
            Object o_4_0 = org.jsoup.TextUtil.stripNewlines(doc.body().outerHtml());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_4_0, "<body><!-- comment --><p><a href=\"foo\">One</a></p></body>");
            // StatementAdderOnAssert create random local variable
            boolean vc_69880 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_10525 = "http://example.om";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_10525, "http://example.om");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69876 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_parsesBodyFragment_cf323069__14 = // StatementAdderMethod cloned existing statement
vc_69876.unescapeEntities(String_vc_10525, vc_69880);
            // MethodAssertGenerator build local variable
            Object o_16_0 = o_parsesBodyFragment_cf323069__14;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_16_0, "http://example.om");
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_10554 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(boolean_vc_10554);
            // StatementAdderOnAssert create null value
            java.lang.String vc_70064 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_70064);
            // StatementAdderMethod cloned existing statement
            vc_69876.unescapeEntities(vc_70064, boolean_vc_10554);
            // MethodAssertGenerator build local variable
            Object o_24_0 = doc.select("a").first().absUrl("href");
            org.junit.Assert.fail("parsesBodyFragment_cf323069_cf323913 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesBodyFragment */
    /* amplification of org.jsoup.parser.HtmlParserTest#parsesBodyFragment_cf323070 */
    @org.junit.Test(timeout = 10000)
    public void parsesBodyFragment_cf323070_cf324478_failAssert6_literalMutation327055() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "e+mb)h}Qfi]|eM`e{?[1n0v&<o<l3BO}H|MN6<(c[_pd";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "e+mb)h}Qfi]|eM`e{?[1n0v&<o<l3BO}H|MN6<(c[_pd");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parseBodyFragment(h, "http://example.com");
            // MethodAssertGenerator build local variable
            Object o_4_0 = org.jsoup.TextUtil.stripNewlines(doc.body().outerHtml());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_4_0, "<body>e+mb)h}Qfi]|eM`e{?[1n0v&amp;</body>");
            // StatementAdderOnAssert create random local variable
            boolean vc_69880 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_69879 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69876 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_parsesBodyFragment_cf323070__14 = // StatementAdderMethod cloned existing statement
vc_69876.unescapeEntities(vc_69879, vc_69880);
            // MethodAssertGenerator build local variable
            Object o_16_0 = o_parsesBodyFragment_cf323070__14;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_16_0, "");
            // StatementAdderOnAssert create random local variable
            int vc_70171 = 936538946;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_70171, 936538946);
            // StatementAdderMethod cloned existing statement
            vc_69876.setTrackErrors(vc_70171);
            // MethodAssertGenerator build local variable
            Object o_22_0 = doc.select("a").first().absUrl("href");
            org.junit.Assert.fail("parsesBodyFragment_cf323070_cf324478 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesBodyFragment */
    /* amplification of org.jsoup.parser.HtmlParserTest#parsesBodyFragment_cf323067 */
    @org.junit.Test(timeout = 10000)
    public void parsesBodyFragment_cf323067_cf323279_failAssert0_add327018() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<!-- comment --><p><a href='foo'>One</a></p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parseBodyFragment(h, "http://example.com");
            // MethodAssertGenerator build local variable
            Object o_4_0 = org.jsoup.TextUtil.stripNewlines(doc.body().outerHtml());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_4_0, "<body><!-- comment --><p><a href=\"foo\">One</a></p></body>");
            // StatementAdderOnAssert create random local variable
            boolean vc_69880 = true;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69876 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_parsesBodyFragment_cf323067__12 = // StatementAdderMethod cloned existing statement
vc_69876.unescapeEntities(h, vc_69880);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_parsesBodyFragment_cf323067__12;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, "<!-- comment --><p><a href=\'foo\'>One</a></p>");
            // StatementAdderOnAssert create random local variable
            boolean vc_69942 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(vc_69942);
            // StatementAdderOnAssert create null value
            java.lang.String vc_69940 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_69940);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_69876.unescapeEntities(vc_69940, vc_69942);
            // StatementAdderMethod cloned existing statement
            vc_69876.unescapeEntities(vc_69940, vc_69942);
            // MethodAssertGenerator build local variable
            Object o_22_0 = doc.select("a").first().absUrl("href");
            org.junit.Assert.fail("parsesBodyFragment_cf323067_cf323279 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesBodyFragment */
    /* amplification of org.jsoup.parser.HtmlParserTest#parsesBodyFragment_cf323069 */
    @org.junit.Test(timeout = 10000)
    public void parsesBodyFragment_cf323069_cf323894_failAssert2_literalMutation327034() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<!-- comment --><p><a href=\'foo\'>One<`/a></p>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<!-- comment --><p><a href=\'foo\'>One<`/a></p>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parseBodyFragment(h, "http://example.com");
            // MethodAssertGenerator build local variable
            Object o_4_0 = org.jsoup.TextUtil.stripNewlines(doc.body().outerHtml());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_4_0, "<body><!-- comment --><p><a href=\"foo\">One&lt;`/a&gt;</a></p></body>");
            // StatementAdderOnAssert create random local variable
            boolean vc_69880 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_10525 = "http://example.com";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_69876 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_parsesBodyFragment_cf323069__14 = // StatementAdderMethod cloned existing statement
vc_69876.unescapeEntities(String_vc_10525, vc_69880);
            // MethodAssertGenerator build local variable
            Object o_16_0 = o_parsesBodyFragment_cf323069__14;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_16_0, "http://example.com");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_70060 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_70060);
            // StatementAdderMethod cloned existing statement
            vc_70060.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_22_0 = doc.select("a").first().absUrl("href");
            org.junit.Assert.fail("parsesBodyFragment_cf323069_cf323894 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesComments */
    @org.junit.Test(timeout = 10000)
    public void parsesComments_cf327322() {
        java.lang.String html = "<html><head></head><body><img src=foo><!-- <table><tr><td></table> --><p>Hello</p></body></html>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element body = doc.body();
        org.jsoup.nodes.Comment comment = ((org.jsoup.nodes.Comment) (body.childNode(1)));// comment should not be sub of img, as it's an empty tag
        
        org.junit.Assert.assertEquals(" <table><tr><td></table> ", comment.getData());
        org.jsoup.nodes.Element p = body.child(1);
        org.jsoup.nodes.TextNode text = ((org.jsoup.nodes.TextNode) (p.childNode(0)));
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_70973 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_70973);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_parsesComments_cf327322__17 = // StatementAdderMethod cloned existing statement
vc_70973.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_parsesComments_cf327322__17).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_parsesComments_cf327322__17).getErrors());
        org.junit.Assert.assertEquals("Hello", text.getWholeText());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesComments */
    @org.junit.Test(timeout = 10000)
    public void parsesComments_cf327138_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<html><head></head><body><img src=foo><!-- <table><tr><td></table> --><p>Hello</p></body></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element body = doc.body();
            org.jsoup.nodes.Comment comment = ((org.jsoup.nodes.Comment) (body.childNode(1)));// comment should not be sub of img, as it's an empty tag
            
            // MethodAssertGenerator build local variable
            Object o_9_0 = comment.getData();
            org.jsoup.nodes.Element p = body.child(1);
            org.jsoup.nodes.TextNode text = ((org.jsoup.nodes.TextNode) (p.childNode(0)));
            // StatementAdderOnAssert create random local variable
            boolean vc_70934 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_70932 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_70930 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_70930.unescapeEntities(vc_70932, vc_70934);
            // MethodAssertGenerator build local variable
            Object o_23_0 = text.getWholeText();
            org.junit.Assert.fail("parsesComments_cf327138 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesComments */
    @org.junit.Test(timeout = 10000)
    public void parsesComments_cf327325_failAssert17_literalMutation329718() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<html><head></head><body><img src=foo><!;-- <table><tr><td></table> --><p>Hello</p></body></html>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<html><head></head><body><img src=foo><!;-- <table><tr><td></table> --><p>Hello</p></body></html>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element body = doc.body();
            org.jsoup.nodes.Comment comment = ((org.jsoup.nodes.Comment) (body.childNode(1)));// comment should not be sub of img, as it's an empty tag
            
            // MethodAssertGenerator build local variable
            Object o_9_0 = comment.getData();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_9_0, ";-- <table");
            org.jsoup.nodes.Element p = body.child(1);
            org.jsoup.nodes.TextNode text = ((org.jsoup.nodes.TextNode) (p.childNode(0)));
            // StatementAdderOnAssert create literal from method
            int int_vc_10688 = 1;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(int_vc_10688, 1);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_70975 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_70975);
            // StatementAdderMethod cloned existing statement
            vc_70975.setTrackErrors(int_vc_10688);
            // MethodAssertGenerator build local variable
            Object o_21_0 = text.getWholeText();
            org.junit.Assert.fail("parsesComments_cf327325 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesComments */
    @org.junit.Test(timeout = 10000)
    public void parsesComments_cf327338_cf329369_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<html><head></head><body><img src=foo><!-- <table><tr><td></table> --><p>Hello</p></body></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element body = doc.body();
            org.jsoup.nodes.Comment comment = ((org.jsoup.nodes.Comment) (body.childNode(1)));// comment should not be sub of img, as it's an empty tag
            
            // MethodAssertGenerator build local variable
            Object o_9_0 = comment.getData();
            org.jsoup.nodes.Element p = body.child(1);
            org.jsoup.nodes.TextNode text = ((org.jsoup.nodes.TextNode) (p.childNode(0)));
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_70986 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_17_0 = vc_70986;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_parsesComments_cf327338__17 = // StatementAdderMethod cloned existing statement
vc_70986.xmlParser();
            // MethodAssertGenerator build local variable
            Object o_21_0 = ((org.jsoup.parser.Parser)o_parsesComments_cf327338__17).getErrors();
            // MethodAssertGenerator build local variable
            Object o_23_0 = ((org.jsoup.parser.Parser)o_parsesComments_cf327338__17).isTrackErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_71368 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_71366 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_70986.unescapeEntities(vc_71366, vc_71368);
            // MethodAssertGenerator build local variable
            Object o_31_0 = text.getWholeText();
            org.junit.Assert.fail("parsesComments_cf327338_cf329369 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesQuiteRoughAttributes */
    @org.junit.Test(timeout = 10000)
    public void parsesQuiteRoughAttributes_cf330664() {
        java.lang.String html = "<p =a>One<a <p>Something</p>Else";
        // this gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.junit.Assert.assertEquals(("<p =a>One<a <p>Something</a></p>\n" + "<a <p>Else</a>"), doc.body().html());
        doc = org.jsoup.Jsoup.parse("<p .....>");
        // StatementAdderOnAssert create random local variable
        boolean vc_71616 = true;
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_71612 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_parsesQuiteRoughAttributes_cf330664__14 = // StatementAdderMethod cloned existing statement
vc_71612.unescapeEntities(html, vc_71616);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_parsesQuiteRoughAttributes_cf330664__14, "<p =a>One<a <p>Something</p>Else");
        org.junit.Assert.assertEquals("<p .....></p>", doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesQuiteRoughAttributes */
    @org.junit.Test(timeout = 10000)
    public void parsesQuiteRoughAttributes_cf330817() {
        java.lang.String html = "<p =a>One<a <p>Something</p>Else";
        // this gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.junit.Assert.assertEquals(("<p =a>One<a <p>Something</a></p>\n" + "<a <p>Else</a>"), doc.body().html());
        doc = org.jsoup.Jsoup.parse("<p .....>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_71655 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_parsesQuiteRoughAttributes_cf330817__12 = // StatementAdderMethod cloned existing statement
vc_71655.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_parsesQuiteRoughAttributes_cf330817__12).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_parsesQuiteRoughAttributes_cf330817__12).isTrackErrors());
        org.junit.Assert.assertEquals("<p .....></p>", doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesRoughAttributes */
    @org.junit.Test(timeout = 10000)
    public void parsesRoughAttributes_cf402988() {
        java.lang.String html = "<html><head><title>First!</title></head><body><p class=\"foo > bar\">First post! <img src=\"foo.png\" /></p></body></html>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        // need a better way to verify these:
        org.jsoup.nodes.Element p = doc.body().child(0);
        org.junit.Assert.assertEquals("p", p.tagName());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_84489 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_84489);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_parsesRoughAttributes_cf402988__12 = // StatementAdderMethod cloned existing statement
vc_84489.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_parsesRoughAttributes_cf402988__12).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_parsesRoughAttributes_cf402988__12).getErrors());
        org.junit.Assert.assertEquals("foo > bar", p.attr("class"));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesRoughAttributes */
    @org.junit.Test(timeout = 10000)
    public void parsesRoughAttributes_cf402804_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<html><head><title>First!</title></head><body><p class=\"foo > bar\">First post! <img src=\"foo.png\" /></p></body></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // need a better way to verify these:
            org.jsoup.nodes.Element p = doc.body().child(0);
            // MethodAssertGenerator build local variable
            Object o_8_0 = p.tagName();
            // StatementAdderOnAssert create random local variable
            boolean vc_84450 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_84448 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_84446 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_84446.unescapeEntities(vc_84448, vc_84450);
            // MethodAssertGenerator build local variable
            Object o_18_0 = p.attr("class");
            org.junit.Assert.fail("parsesRoughAttributes_cf402804 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesRoughAttributes */
    @org.junit.Test(timeout = 10000)
    public void parsesRoughAttributes_cf403004_cf405455_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<html><head><title>First!</title></head><body><p class=\"foo > bar\">First post! <img src=\"foo.png\" /></p></body></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // need a better way to verify these:
            org.jsoup.nodes.Element p = doc.body().child(0);
            // MethodAssertGenerator build local variable
            Object o_8_0 = p.tagName();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_84502 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_12_0 = vc_84502;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_parsesRoughAttributes_cf403004__12 = // StatementAdderMethod cloned existing statement
vc_84502.xmlParser();
            // MethodAssertGenerator build local variable
            Object o_16_0 = ((org.jsoup.parser.Parser)o_parsesRoughAttributes_cf403004__12).isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_18_0 = ((org.jsoup.parser.Parser)o_parsesRoughAttributes_cf403004__12).getErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_85008 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_85006 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_85004 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_85004.unescapeEntities(vc_85006, vc_85008);
            // MethodAssertGenerator build local variable
            Object o_28_0 = p.attr("class");
            org.junit.Assert.fail("parsesRoughAttributes_cf403004_cf405455 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesRoughAttributes */
    @org.junit.Test(timeout = 10000)
    public void parsesRoughAttributes_cf402806_cf403569_failAssert5_literalMutation405843_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = ".]Z++;m?yA&#s{@z#m+%&G)ZP|c@7z9yh0s2{&}k}TCbbL{mE*X5Q<Dy7Hgm5x^V#HIGTz[a:r#H).R]hkBd7d]WbNR(NP%Y2[E:97c-rq!34nTF-:<G37";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                // need a better way to verify these:
                org.jsoup.nodes.Element p = doc.body().child(0);
                // MethodAssertGenerator build local variable
                Object o_8_0 = p.tagName();
                // StatementAdderOnAssert create random local variable
                boolean vc_84450 = true;
                // MethodAssertGenerator build local variable
                Object o_12_0 = vc_84450;
                // StatementAddOnAssert local variable replacement
                java.lang.String rendered = doc.toString();
                // MethodAssertGenerator build local variable
                Object o_17_0 = rendered;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_84446 = (org.jsoup.parser.Parser)null;
                // MethodAssertGenerator build local variable
                Object o_21_0 = vc_84446;
                // AssertGenerator replace invocation
                java.lang.String o_parsesRoughAttributes_cf402806__17 = // StatementAdderMethod cloned existing statement
vc_84446.unescapeEntities(rendered, vc_84450);
                // MethodAssertGenerator build local variable
                Object o_25_0 = o_parsesRoughAttributes_cf402806__17;
                // StatementAddOnAssert local variable replacement
                int endOfEmail = rendered.indexOf("Comment");
                // StatementAdderMethod cloned existing statement
                vc_84446.setTrackErrors(endOfEmail);
                // MethodAssertGenerator build local variable
                Object o_32_0 = p.attr("class");
                org.junit.Assert.fail("parsesRoughAttributes_cf402806_cf403569 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("parsesRoughAttributes_cf402806_cf403569_failAssert5_literalMutation405843 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesSimpleDocument */
    @org.junit.Test(timeout = 10000)
    public void parsesSimpleDocument_cf405960_failAssert19() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // need a better way to verify these:
            org.jsoup.nodes.Element p = doc.body().child(0);
            // MethodAssertGenerator build local variable
            Object o_8_0 = p.tagName();
            org.jsoup.nodes.Element img = p.child(0);
            // MethodAssertGenerator build local variable
            Object o_12_0 = img.attr("src");
            // StatementAdderOnAssert create random local variable
            boolean vc_85070 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_85068 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_85066 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_85066.unescapeEntities(vc_85068, vc_85070);
            // MethodAssertGenerator build local variable
            Object o_22_0 = img.tagName();
            org.junit.Assert.fail("parsesSimpleDocument_cf405960 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesSimpleDocument */
    @org.junit.Test(timeout = 10000)
    public void parsesSimpleDocument_cf405958_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // need a better way to verify these:
            org.jsoup.nodes.Element p = doc.body().child(0);
            // MethodAssertGenerator build local variable
            Object o_8_0 = p.tagName();
            org.jsoup.nodes.Element img = p.child(0);
            // MethodAssertGenerator build local variable
            Object o_12_0 = img.attr("src");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_85064 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_85064.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_18_0 = img.tagName();
            org.junit.Assert.fail("parsesSimpleDocument_cf405958 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesSimpleDocument */
    @org.junit.Test(timeout = 10000)
    public void parsesSimpleDocument_cf406144() {
        java.lang.String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        // need a better way to verify these:
        org.jsoup.nodes.Element p = doc.body().child(0);
        org.junit.Assert.assertEquals("p", p.tagName());
        org.jsoup.nodes.Element img = p.child(0);
        org.junit.Assert.assertEquals("foo.png", img.attr("src"));
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_85109 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_85109);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_parsesSimpleDocument_cf406144__16 = // StatementAdderMethod cloned existing statement
vc_85109.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_parsesSimpleDocument_cf406144__16).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_parsesSimpleDocument_cf406144__16).getErrors());
        org.junit.Assert.assertEquals("img", img.tagName());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesSimpleDocument */
    @org.junit.Test(timeout = 10000)
    public void parsesSimpleDocument_cf405962() {
        java.lang.String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\"foo.png\" /></p></body></html>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        // need a better way to verify these:
        org.jsoup.nodes.Element p = doc.body().child(0);
        org.junit.Assert.assertEquals("p", p.tagName());
        org.jsoup.nodes.Element img = p.child(0);
        org.junit.Assert.assertEquals("foo.png", img.attr("src"));
        // StatementAdderOnAssert create random local variable
        boolean vc_85070 = true;
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(vc_85070);
        // StatementAddOnAssert local variable replacement
        java.lang.String rendered = doc.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(rendered, "<html>\n <head>\n  <title>First!</title>\n </head>\n <body>\n  <p>First post! <img src=\"foo.png\"></p>\n </body>\n</html>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_85066 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_85066);
        // AssertGenerator replace invocation
        java.lang.String o_parsesSimpleDocument_cf405962__21 = // StatementAdderMethod cloned existing statement
vc_85066.unescapeEntities(rendered, vc_85070);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_parsesSimpleDocument_cf405962__21, "<html>\n <head>\n  <title>First!</title>\n </head>\n <body>\n  <p>First post! <img src=\"foo.png\"></p>\n </body>\n</html>");
        org.junit.Assert.assertEquals("img", img.tagName());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesSimpleDocument */
    @org.junit.Test(timeout = 10000)
    public void parsesSimpleDocument_cf405960_failAssert19_literalMutation408645() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<html><head><title>First!</title></iead><body><p>First post! <img src=\"foo.png\" /></p></body></html>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<html><head><title>First!</title></iead><body><p>First post! <img src=\"foo.png\" /></p></body></html>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // need a better way to verify these:
            org.jsoup.nodes.Element p = doc.body().child(0);
            // MethodAssertGenerator build local variable
            Object o_8_0 = p.tagName();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_8_0, "p");
            org.jsoup.nodes.Element img = p.child(0);
            // MethodAssertGenerator build local variable
            Object o_12_0 = img.attr("src");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, "foo.png");
            // StatementAdderOnAssert create random local variable
            boolean vc_85070 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_85070);
            // StatementAdderOnAssert create null value
            java.lang.String vc_85068 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_85068);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_85066 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_85066);
            // StatementAdderMethod cloned existing statement
            vc_85066.unescapeEntities(vc_85068, vc_85070);
            // MethodAssertGenerator build local variable
            Object o_22_0 = img.tagName();
            org.junit.Assert.fail("parsesSimpleDocument_cf405960 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesSimpleDocument */
    @org.junit.Test(timeout = 10000)
    public void parsesSimpleDocument_cf406147_failAssert15_literalMutation408625_literalMutation409470_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_26_1 = 0;
                java.lang.String html = "YXfjZ<ByA(p?7A/4tsOBTF#@wt!!l%Jw1eGO%O]NETesQldTvASD)DsZg7r|J>[* PKH.kp!dHg0C]e$NvnLNYsQCE{)u]+Ppymt";
                // MethodAssertGenerator build local variable
                Object o_4_0 = html;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                // need a better way to verify these:
                org.jsoup.nodes.Element p = doc.body().child(0);
                // MethodAssertGenerator build local variable
                Object o_8_0 = p.tagName();
                // MethodAssertGenerator build local variable
                Object o_15_0 = o_8_0;
                org.jsoup.nodes.Element img = p.child(0);
                // MethodAssertGenerator build local variable
                Object o_12_0 = img.attr("src");
                // MethodAssertGenerator build local variable
                Object o_22_0 = o_12_0;
                // StatementAdderOnAssert create literal from method
                int int_vc_12899 = 0;
                // MethodAssertGenerator build local variable
                Object o_26_0 = int_vc_12899;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_85111 = (org.jsoup.parser.Parser)null;
                // MethodAssertGenerator build local variable
                Object o_30_0 = vc_85111;
                // StatementAdderMethod cloned existing statement
                vc_85111.setTrackErrors(int_vc_12899);
                // MethodAssertGenerator build local variable
                Object o_20_0 = img.tagName();
                org.junit.Assert.fail("parsesSimpleDocument_cf406147 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("parsesSimpleDocument_cf406147_failAssert15_literalMutation408625_literalMutation409470 should have thrown Exception");
        } catch (java.lang.Exception eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedComments */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedComments_cf410725() {
        java.lang.String html = "<p>Hello<!-- <tr><td>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element p = doc.getElementsByTag("p").get(0);
        org.junit.Assert.assertEquals("Hello", p.text());
        org.jsoup.nodes.TextNode text = ((org.jsoup.nodes.TextNode) (p.childNode(0)));
        org.junit.Assert.assertEquals("Hello", text.getWholeText());
        org.jsoup.nodes.Comment comment = ((org.jsoup.nodes.Comment) (p.childNode(1)));
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_86039 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_86039);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_parsesUnterminatedComments_cf410725__17 = // StatementAdderMethod cloned existing statement
vc_86039.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_parsesUnterminatedComments_cf410725__17).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_parsesUnterminatedComments_cf410725__17).getErrors());
        org.junit.Assert.assertEquals(" <tr><td>", comment.getData());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedComments */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedComments_cf410543() {
        java.lang.String html = "<p>Hello<!-- <tr><td>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element p = doc.getElementsByTag("p").get(0);
        org.junit.Assert.assertEquals("Hello", p.text());
        org.jsoup.nodes.TextNode text = ((org.jsoup.nodes.TextNode) (p.childNode(0)));
        org.junit.Assert.assertEquals("Hello", text.getWholeText());
        org.jsoup.nodes.Comment comment = ((org.jsoup.nodes.Comment) (p.childNode(1)));
        // StatementAdderOnAssert create random local variable
        boolean vc_86000 = false;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(vc_86000);
        // StatementAddOnAssert local variable replacement
        java.lang.String rendered = doc.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(rendered, "<html>\n <head></head>\n <body>\n  <p>Hello\n   <!-- <tr><td>--></p>\n </body>\n</html>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_85996 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_85996);
        // AssertGenerator replace invocation
        java.lang.String o_parsesUnterminatedComments_cf410543__22 = // StatementAdderMethod cloned existing statement
vc_85996.unescapeEntities(rendered, vc_86000);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_parsesUnterminatedComments_cf410543__22, "<html>\n <head></head>\n <body>\n  <p>Hello\n   <!-- <tr><td>--></p>\n </body>\n</html>");
        org.junit.Assert.assertEquals(" <tr><td>", comment.getData());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedComments */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedComments_cf410542() {
        java.lang.String html = "<p>Hello<!-- <tr><td>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element p = doc.getElementsByTag("p").get(0);
        org.junit.Assert.assertEquals("Hello", p.text());
        org.jsoup.nodes.TextNode text = ((org.jsoup.nodes.TextNode) (p.childNode(0)));
        org.junit.Assert.assertEquals("Hello", text.getWholeText());
        org.jsoup.nodes.Comment comment = ((org.jsoup.nodes.Comment) (p.childNode(1)));
        // StatementAdderOnAssert create random local variable
        boolean vc_86000 = false;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(vc_86000);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_85996 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_85996);
        // AssertGenerator replace invocation
        java.lang.String o_parsesUnterminatedComments_cf410542__19 = // StatementAdderMethod cloned existing statement
vc_85996.unescapeEntities(html, vc_86000);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_parsesUnterminatedComments_cf410542__19, "<p>Hello<!-- <tr><td>");
        org.junit.Assert.assertEquals(" <tr><td>", comment.getData());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedComments */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedComments_cf410542_cf412192_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<p>Hello<!-- <tr><td>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.getElementsByTag("p").get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.text();
            org.jsoup.nodes.TextNode text = ((org.jsoup.nodes.TextNode) (p.childNode(0)));
            // MethodAssertGenerator build local variable
            Object o_11_0 = text.getWholeText();
            org.jsoup.nodes.Comment comment = ((org.jsoup.nodes.Comment) (p.childNode(1)));
            // StatementAdderOnAssert create random local variable
            boolean vc_86000 = false;
            // MethodAssertGenerator build local variable
            Object o_17_0 = vc_86000;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_85996 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_21_0 = vc_85996;
            // AssertGenerator replace invocation
            java.lang.String o_parsesUnterminatedComments_cf410542__19 = // StatementAdderMethod cloned existing statement
vc_85996.unescapeEntities(html, vc_86000);
            // MethodAssertGenerator build local variable
            Object o_25_0 = o_parsesUnterminatedComments_cf410542__19;
            // StatementAdderOnAssert create null value
            java.lang.String vc_86308 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_85996.unescapeEntities(vc_86308, vc_86000);
            // MethodAssertGenerator build local variable
            Object o_31_0 = comment.getData();
            org.junit.Assert.fail("parsesUnterminatedComments_cf410542_cf412192 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedComments */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedComments_cf410728_failAssert0_add412513_cf412591_failAssert21() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_25_1 = 0;
                java.lang.String html = "<p>Hello<!-- <tr><td>";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element p = doc.getElementsByTag("p").get(0);
                // MethodAssertGenerator build local variable
                Object o_7_0 = p.text();
                // MethodAssertGenerator build local variable
                Object o_12_0 = o_7_0;
                org.jsoup.nodes.TextNode text = ((org.jsoup.nodes.TextNode) (p.childNode(0)));
                // MethodAssertGenerator build local variable
                Object o_11_0 = text.getWholeText();
                // MethodAssertGenerator build local variable
                Object o_19_0 = o_11_0;
                org.jsoup.nodes.Comment comment = ((org.jsoup.nodes.Comment) (p.childNode(1)));
                // StatementAdderOnAssert create literal from method
                int int_vc_13038 = 0;
                // MethodAssertGenerator build local variable
                Object o_25_0 = int_vc_13038;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_86041 = (org.jsoup.parser.Parser)null;
                // StatementAdderOnAssert create random local variable
                boolean vc_86372 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_86370 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                vc_86041.unescapeEntities(vc_86370, vc_86372);
                // MethodAssertGenerator build local variable
                Object o_35_0 = vc_86041;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                vc_86041.setTrackErrors(int_vc_13038);
                // StatementAdderMethod cloned existing statement
                vc_86041.setTrackErrors(int_vc_13038);
                // MethodAssertGenerator build local variable
                Object o_21_0 = comment.getData();
                org.junit.Assert.fail("parsesUnterminatedComments_cf410728 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("parsesUnterminatedComments_cf410728_failAssert0_add412513_cf412591 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedOption */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedOption_cf414048_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // bit weird this -- browsers and spec get stuck in select until there's a </select>
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><p><select><option>One<option>Two</p><p>Three</p>");
            org.jsoup.select.Elements options = doc.select("option");
            // MethodAssertGenerator build local variable
            Object o_6_0 = options.size();
            // MethodAssertGenerator build local variable
            Object o_8_0 = options.first().text();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_86614 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_86614.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_15_0 = options.last().text();
            org.junit.Assert.fail("parsesUnterminatedOption_cf414048 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedOption */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedOption_cf414050_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // bit weird this -- browsers and spec get stuck in select until there's a </select>
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><p><select><option>One<option>Two</p><p>Three</p>");
            org.jsoup.select.Elements options = doc.select("option");
            // MethodAssertGenerator build local variable
            Object o_6_0 = options.size();
            // MethodAssertGenerator build local variable
            Object o_8_0 = options.first().text();
            // StatementAdderOnAssert create random local variable
            boolean vc_86620 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_86618 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_86616 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_86616.unescapeEntities(vc_86618, vc_86620);
            // MethodAssertGenerator build local variable
            Object o_19_0 = options.last().text();
            org.junit.Assert.fail("parsesUnterminatedOption_cf414050 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedOption */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedOption_cf414051() {
        // bit weird this -- browsers and spec get stuck in select until there's a </select>
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><p><select><option>One<option>Two</p><p>Three</p>");
        org.jsoup.select.Elements options = doc.select("option");
        org.junit.Assert.assertEquals(2, options.size());
        org.junit.Assert.assertEquals("One", options.first().text());
        // StatementAdderOnAssert create random local variable
        boolean vc_86620 = true;
        // StatementAddOnAssert local variable replacement
        java.lang.String rendered = doc.toString();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_86616 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_parsesUnterminatedOption_cf414051__18 = // StatementAdderMethod cloned existing statement
vc_86616.unescapeEntities(rendered, vc_86620);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_parsesUnterminatedOption_cf414051__18, "<html>\n <head></head>\n <body>\n  <p><select><option>One</option><option>TwoThree</option></select></p>\n </body>\n</html>");
        org.junit.Assert.assertEquals("TwoThree", options.last().text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedOption */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedOption_cf414174() {
        // bit weird this -- browsers and spec get stuck in select until there's a </select>
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><p><select><option>One<option>Two</p><p>Three</p>");
        org.jsoup.select.Elements options = doc.select("option");
        org.junit.Assert.assertEquals(2, options.size());
        org.junit.Assert.assertEquals("One", options.first().text());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_86659 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_parsesUnterminatedOption_cf414174__13 = // StatementAdderMethod cloned existing statement
vc_86659.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_parsesUnterminatedOption_cf414174__13).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_parsesUnterminatedOption_cf414174__13).isTrackErrors());
        org.junit.Assert.assertEquals("TwoThree", options.last().text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedOption */
    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedOption_cf414050 */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedOption_cf414050_failAssert14_add415592() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // bit weird this -- browsers and spec get stuck in select until there's a </select>
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><p><select><option>One<option>Two</p><p>Three</p>");
            org.jsoup.select.Elements options = doc.select("option");
            // MethodAssertGenerator build local variable
            Object o_6_0 = options.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_6_0, 2);
            // MethodAssertGenerator build local variable
            Object o_8_0 = options.first().text();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_8_0, "One");
            // StatementAdderOnAssert create random local variable
            boolean vc_86620 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_86618 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_86616 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_86616.unescapeEntities(vc_86618, vc_86620);
            // StatementAdderMethod cloned existing statement
            vc_86616.unescapeEntities(vc_86618, vc_86620);
            // MethodAssertGenerator build local variable
            Object o_19_0 = options.last().text();
            org.junit.Assert.fail("parsesUnterminatedOption_cf414050 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedOption */
    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedOption_cf414053 */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedOption_cf414053_cf414843_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // bit weird this -- browsers and spec get stuck in select until there's a </select>
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><p><select><option>One<option>Two</p><p>Three</p>");
            org.jsoup.select.Elements options = doc.select("option");
            // MethodAssertGenerator build local variable
            Object o_6_0 = options.size();
            // MethodAssertGenerator build local variable
            Object o_8_0 = options.first().text();
            // StatementAdderOnAssert create random local variable
            boolean vc_86620 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_86619 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_86616 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_parsesUnterminatedOption_cf414053__17 = // StatementAdderMethod cloned existing statement
vc_86616.unescapeEntities(vc_86619, vc_86620);
            // MethodAssertGenerator build local variable
            Object o_19_0 = o_parsesUnterminatedOption_cf414053__17;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_13153 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_86804 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_86802 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_86802.unescapeEntities(vc_86804, boolean_vc_13153);
            // MethodAssertGenerator build local variable
            Object o_29_0 = options.last().text();
            org.junit.Assert.fail("parsesUnterminatedOption_cf414053_cf414843 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedOption */
    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedOption_cf414180 */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedOption_cf414180_failAssert19_add415605_cf415777_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_11_1 = 2;
                // bit weird this -- browsers and spec get stuck in select until there's a </select>
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><p><select><option>One<option>Two</p><p>Three</p>");
                org.jsoup.select.Elements options = doc.select("option");
                // MethodAssertGenerator build local variable
                Object o_6_0 = options.size();
                // MethodAssertGenerator build local variable
                Object o_11_0 = o_6_0;
                // MethodAssertGenerator build local variable
                Object o_8_0 = options.first().text();
                // StatementAdderOnAssert create random local variable
                boolean vc_87054 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_87052 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_87050 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_87050.unescapeEntities(vc_87052, vc_87054);
                // MethodAssertGenerator build local variable
                Object o_25_0 = o_8_0;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.TreeBuilder vc_86666 = (org.jsoup.parser.TreeBuilder)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_86664 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                vc_86664.setTreeBuilder(vc_86666);
                // StatementAdderMethod cloned existing statement
                vc_86664.setTreeBuilder(vc_86666);
                // MethodAssertGenerator build local variable
                Object o_17_0 = options.last().text();
                org.junit.Assert.fail("parsesUnterminatedOption_cf414180 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("parsesUnterminatedOption_cf414180_failAssert19_add415605_cf415777 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedTextarea */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedTextarea_cf415978_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // don't parse right to end, but break on <p>
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><p><textarea>one<p>two");
            org.jsoup.nodes.Element t = doc.select("textarea").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = t.text();
            // StatementAdderOnAssert create random local variable
            boolean vc_87116 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_87114 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_87112 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_87112.unescapeEntities(vc_87114, vc_87116);
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.select("p").get(1).text();
            org.junit.Assert.fail("parsesUnterminatedTextarea_cf415978 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedTextarea */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedTextarea_cf416126() {
        // don't parse right to end, but break on <p>
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><p><textarea>one<p>two");
        org.jsoup.nodes.Element t = doc.select("textarea").first();
        org.junit.Assert.assertEquals("one", t.text());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_87155 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_parsesUnterminatedTextarea_cf416126__11 = // StatementAdderMethod cloned existing statement
vc_87155.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_parsesUnterminatedTextarea_cf416126__11).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_parsesUnterminatedTextarea_cf416126__11).getErrors());
        org.junit.Assert.assertEquals("two", doc.select("p").get(1).text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedTextarea */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedTextarea_cf415976_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // don't parse right to end, but break on <p>
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><p><textarea>one<p>two");
            org.jsoup.nodes.Element t = doc.select("textarea").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = t.text();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_87110 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_87110.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.select("p").get(1).text();
            org.junit.Assert.fail("parsesUnterminatedTextarea_cf415976 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedTextarea */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedTextarea_cf415979() {
        // don't parse right to end, but break on <p>
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><p><textarea>one<p>two");
        org.jsoup.nodes.Element t = doc.select("textarea").first();
        org.junit.Assert.assertEquals("one", t.text());
        // StatementAdderOnAssert create random local variable
        boolean vc_87116 = true;
        // StatementAddOnAssert local variable replacement
        java.lang.String html = doc.outerHtml();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_87112 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_parsesUnterminatedTextarea_cf415979__16 = // StatementAdderMethod cloned existing statement
vc_87112.unescapeEntities(html, vc_87116);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_parsesUnterminatedTextarea_cf415979__16, "<html>\n <head></head>\n <body>\n  <p><textarea>one</textarea></p>\n  <p>two</p>\n </body>\n</html>");
        org.junit.Assert.assertEquals("two", doc.select("p").get(1).text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedTextarea */
    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedTextarea_cf415979 */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedTextarea_cf415979_cf416160_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // don't parse right to end, but break on <p>
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><p><textarea>one<p>two");
            org.jsoup.nodes.Element t = doc.select("textarea").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = t.text();
            // StatementAdderOnAssert create random local variable
            boolean vc_87116 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_87112 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_parsesUnterminatedTextarea_cf415979__16 = // StatementAdderMethod cloned existing statement
vc_87112.unescapeEntities(html, vc_87116);
            // MethodAssertGenerator build local variable
            Object o_18_0 = o_parsesUnterminatedTextarea_cf415979__16;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_87172 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_87172.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_24_0 = doc.select("p").get(1).text();
            org.junit.Assert.fail("parsesUnterminatedTextarea_cf415979_cf416160 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedTextarea */
    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedTextarea_cf415981 */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedTextarea_cf415981_cf416890_failAssert19() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // don't parse right to end, but break on <p>
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><p><textarea>one<p>two");
            org.jsoup.nodes.Element t = doc.select("textarea").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = t.text();
            // StatementAdderOnAssert create random local variable
            boolean vc_87116 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_87115 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_87112 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_parsesUnterminatedTextarea_cf415981__15 = // StatementAdderMethod cloned existing statement
vc_87112.unescapeEntities(vc_87115, vc_87116);
            // MethodAssertGenerator build local variable
            Object o_17_0 = o_parsesUnterminatedTextarea_cf415981__15;
            // StatementAdderOnAssert create null value
            java.lang.String vc_87300 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_87112.unescapeEntities(vc_87300, vc_87116);
            // MethodAssertGenerator build local variable
            Object o_23_0 = doc.select("p").get(1).text();
            org.junit.Assert.fail("parsesUnterminatedTextarea_cf415981_cf416890 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedTextarea */
    /* amplification of org.jsoup.parser.HtmlParserTest#parsesUnterminatedTextarea_cf416132 */
    @org.junit.Test(timeout = 10000)
    public void parsesUnterminatedTextarea_cf416132_failAssert16_add417749_cf417761_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // don't parse right to end, but break on <p>
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><p><textarea>one<p>two");
                org.jsoup.nodes.Element t = doc.select("textarea").first();
                // MethodAssertGenerator build local variable
                Object o_7_0 = t.text();
                // StatementAdderOnAssert create random local variable
                boolean vc_87488 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_87486 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_87484 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_87484.unescapeEntities(vc_87486, vc_87488);
                // MethodAssertGenerator build local variable
                Object o_20_0 = o_7_0;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.TreeBuilder vc_87162 = (org.jsoup.parser.TreeBuilder)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_87160 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                vc_87160.setTreeBuilder(vc_87162);
                // StatementAdderMethod cloned existing statement
                vc_87160.setTreeBuilder(vc_87162);
                // MethodAssertGenerator build local variable
                Object o_15_0 = doc.select("p").get(1).text();
                org.junit.Assert.fail("parsesUnterminatedTextarea_cf416132 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("parsesUnterminatedTextarea_cf416132_failAssert16_add417749_cf417761 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#preservesSpaceInScript */
    @org.junit.Test(timeout = 10000)
    public void preservesSpaceInScript_cf418179() {
        // preserve because it's content is a data node
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>\nOne\n\tTwo\n\tThree\n</script>");
        java.lang.String expect = "\nOne\n\tTwo\n\tThree\n";
        org.jsoup.nodes.Element el = doc.select("script").first();
        org.junit.Assert.assertEquals(expect, el.data());
        org.junit.Assert.assertEquals("One\n\tTwo\n\tThree", el.html());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_87589 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_87589);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_preservesSpaceInScript_cf418179__14 = // StatementAdderMethod cloned existing statement
vc_87589.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_preservesSpaceInScript_cf418179__14).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_preservesSpaceInScript_cf418179__14).isTrackErrors());
        org.junit.Assert.assertEquals((("<script>" + expect) + "</script>"), el.outerHtml());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#preservesSpaceInScript */
    @org.junit.Test(timeout = 10000)
    public void preservesSpaceInScript_cf417996() {
        // preserve because it's content is a data node
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>\nOne\n\tTwo\n\tThree\n</script>");
        java.lang.String expect = "\nOne\n\tTwo\n\tThree\n";
        org.jsoup.nodes.Element el = doc.select("script").first();
        org.junit.Assert.assertEquals(expect, el.data());
        org.junit.Assert.assertEquals("One\n\tTwo\n\tThree", el.html());
        // StatementAdderOnAssert create random local variable
        boolean vc_87550 = true;
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(vc_87550);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_87546 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_87546);
        // AssertGenerator replace invocation
        java.lang.String o_preservesSpaceInScript_cf417996__16 = // StatementAdderMethod cloned existing statement
vc_87546.unescapeEntities(expect, vc_87550);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_preservesSpaceInScript_cf417996__16, "\nOne\n\tTwo\n\tThree\n");
        org.junit.Assert.assertEquals((("<script>" + expect) + "</script>"), el.outerHtml());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#preservesSpaceInTextArea */
    @org.junit.Test(timeout = 10000)
    public void preservesSpaceInTextArea_cf496598() {
        // preserve because the tag is marked as preserve white space
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>\n\tOne\n\tTwo\n\tThree\n</textarea>");
        java.lang.String expect = "One\n\tTwo\n\tThree";// the leading and trailing spaces are dropped as a convenience to authors
        
        org.jsoup.nodes.Element el = doc.select("textarea").first();
        org.junit.Assert.assertEquals(expect, el.text());
        org.junit.Assert.assertEquals(expect, el.val());
        org.junit.Assert.assertEquals(expect, el.html());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_100423 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_100423);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_preservesSpaceInTextArea_cf496598__17 = // StatementAdderMethod cloned existing statement
vc_100423.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_preservesSpaceInTextArea_cf496598__17).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_preservesSpaceInTextArea_cf496598__17).getErrors());
        org.junit.Assert.assertEquals((("<textarea>\n\t" + expect) + "\n</textarea>"), el.outerHtml());// but preserved in round-trip html
        
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#preservesSpaceInTextArea */
    @org.junit.Test(timeout = 10000)
    public void preservesSpaceInTextArea_cf496418() {
        // preserve because the tag is marked as preserve white space
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>\n\tOne\n\tTwo\n\tThree\n</textarea>");
        java.lang.String expect = "One\n\tTwo\n\tThree";// the leading and trailing spaces are dropped as a convenience to authors
        
        org.jsoup.nodes.Element el = doc.select("textarea").first();
        org.junit.Assert.assertEquals(expect, el.text());
        org.junit.Assert.assertEquals(expect, el.val());
        org.junit.Assert.assertEquals(expect, el.html());
        // StatementAdderOnAssert create random local variable
        boolean vc_100384 = false;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(vc_100384);
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_100383 = new java.lang.String();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(vc_100383, "");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_100380 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_100380);
        // AssertGenerator replace invocation
        java.lang.String o_preservesSpaceInTextArea_cf496418__21 = // StatementAdderMethod cloned existing statement
vc_100380.unescapeEntities(vc_100383, vc_100384);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_preservesSpaceInTextArea_cf496418__21, "");
        org.junit.Assert.assertEquals((("<textarea>\n\t" + expect) + "\n</textarea>"), el.outerHtml());// but preserved in round-trip html
        
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#preservesSpaceInTextArea */
    @org.junit.Test(timeout = 10000)
    public void preservesSpaceInTextArea_cf496415() {
        // preserve because the tag is marked as preserve white space
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<textarea>\n\tOne\n\tTwo\n\tThree\n</textarea>");
        java.lang.String expect = "One\n\tTwo\n\tThree";// the leading and trailing spaces are dropped as a convenience to authors
        
        org.jsoup.nodes.Element el = doc.select("textarea").first();
        org.junit.Assert.assertEquals(expect, el.text());
        org.junit.Assert.assertEquals(expect, el.val());
        org.junit.Assert.assertEquals(expect, el.html());
        // StatementAdderOnAssert create random local variable
        boolean vc_100384 = false;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(vc_100384);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_100380 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_100380);
        // AssertGenerator replace invocation
        java.lang.String o_preservesSpaceInTextArea_cf496415__19 = // StatementAdderMethod cloned existing statement
vc_100380.unescapeEntities(expect, vc_100384);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_preservesSpaceInTextArea_cf496415__19, "One\n\tTwo\n\tThree");
        org.junit.Assert.assertEquals((("<textarea>\n\t" + expect) + "\n</textarea>"), el.outerHtml());// but preserved in round-trip html
        
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#reconstructFormattingElements */
    @org.junit.Test(timeout = 10000)
    public void reconstructFormattingElements_cf573483() {
        // tests attributes and multi b
        java.lang.String h = "<p><b class=one>One <i>Two <b>Three</p><p>Hello</p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_113195 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_reconstructFormattingElements_cf573483__7 = // StatementAdderMethod cloned existing statement
vc_113195.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_reconstructFormattingElements_cf573483__7).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_reconstructFormattingElements_cf573483__7).isTrackErrors());
        org.junit.Assert.assertEquals("<p><b class=\"one\">One <i>Two <b>Three</b></i></b></p>\n<p><b class=\"one\"><i><b>Hello</b></i></b></p>", doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#reconstructFormattingElements */
    @org.junit.Test(timeout = 10000)
    public void reconstructFormattingElements_cf573327_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // tests attributes and multi b
            java.lang.String h = "<p><b class=one>One <i>Two <b>Three</p><p>Hello</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_113150 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_113150.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.body().html();
            org.junit.Assert.fail("reconstructFormattingElements_cf573327 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#reconstructFormattingElements */
    @org.junit.Test(timeout = 10000)
    public void reconstructFormattingElements_cf573329_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // tests attributes and multi b
            java.lang.String h = "<p><b class=one>One <i>Two <b>Three</p><p>Hello</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_113156 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_113154 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_113152 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_113152.unescapeEntities(vc_113154, vc_113156);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.body().html();
            org.junit.Assert.fail("reconstructFormattingElements_cf573329 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#reconstructFormattingElements */
    /* amplification of org.jsoup.parser.HtmlParserTest#reconstructFormattingElements_cf573333 */
    @org.junit.Test(timeout = 10000)
    public void reconstructFormattingElements_cf573333_cf574452_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // tests attributes and multi b
            java.lang.String h = "<p><b class=one>One <i>Two <b>Three</p><p>Hello</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create random local variable
            boolean vc_113156 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_113155 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_113152 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_reconstructFormattingElements_cf573333__11 = // StatementAdderMethod cloned existing statement
vc_113152.unescapeEntities(vc_113155, vc_113156);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_reconstructFormattingElements_cf573333__11;
            // StatementAdderOnAssert create null value
            java.lang.String vc_113402 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_113400 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_113400.unescapeEntities(vc_113402, vc_113156);
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.body().html();
            org.junit.Assert.fail("reconstructFormattingElements_cf573333_cf574452 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#reconstructFormattingElements */
    /* amplification of org.jsoup.parser.HtmlParserTest#reconstructFormattingElements_cf573481 */
    @org.junit.Test(timeout = 10000)
    public void reconstructFormattingElements_cf573481_failAssert12_literalMutation575311_cf576014_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // tests attributes and multi b
                java.lang.String h = "";
                // StatementAdderOnAssert create random local variable
                boolean vc_113900 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_113898 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_113896 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_113896.unescapeEntities(vc_113898, vc_113900);
                // MethodAssertGenerator build local variable
                Object o_13_0 = h;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_113193 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_113193.settings();
                // MethodAssertGenerator build local variable
                Object o_9_0 = doc.body().html();
                org.junit.Assert.fail("reconstructFormattingElements_cf573481 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("reconstructFormattingElements_cf573481_failAssert12_literalMutation575311_cf576014 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#reconstructFormattingElementsInTable */
    @org.junit.Test(timeout = 10000)
    public void reconstructFormattingElementsInTable_cf576318() {
        // tests that tables get formatting markers -- the <b> applies outside the table and does not leak in,
        // and the <i> inside the table and does not leak out.
        java.lang.String h = "<p><b>One</p> <table><tr><td><p><i>Three<p>Four</i></td></tr></table> <p>Five</p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        java.lang.String want = "<p><b>One</b></p>\n" + ((((((("<b> \n" + " <table>\n") + "  <tbody>\n") + "   <tr>\n") + "    <td><p><i>Three</i></p><p><i>Four</i></p></td>\n") + "   </tr>\n") + "  </tbody>\n") + " </table> <p>Five</p></b>");
        // StatementAdderOnAssert create random local variable
        boolean vc_113962 = false;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(vc_113962);
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_113961 = new java.lang.String();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(vc_113961, "");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_113958 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_113958);
        // AssertGenerator replace invocation
        java.lang.String o_reconstructFormattingElementsInTable_cf576318__13 = // StatementAdderMethod cloned existing statement
vc_113958.unescapeEntities(vc_113961, vc_113962);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_reconstructFormattingElementsInTable_cf576318__13, "");
        org.junit.Assert.assertEquals(want, doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#reconstructFormattingElementsInTable */
    @org.junit.Test(timeout = 10000)
    public void reconstructFormattingElementsInTable_cf576314_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // tests that tables get formatting markers -- the <b> applies outside the table and does not leak in,
            // and the <i> inside the table and does not leak out.
            java.lang.String h = "<p><b>One</p> <table><tr><td><p><i>Three<p>Four</i></td></tr></table> <p>Five</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            java.lang.String want = "<p><b>One</b></p>\n" + ((((((("<b> \n" + " <table>\n") + "  <tbody>\n") + "   <tr>\n") + "    <td><p><i>Three</i></p><p><i>Four</i></p></td>\n") + "   </tr>\n") + "  </tbody>\n") + " </table> <p>Five</p></b>");
            // StatementAdderOnAssert create random local variable
            boolean vc_113962 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_113960 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_113958 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_113958.unescapeEntities(vc_113960, vc_113962);
            // MethodAssertGenerator build local variable
            Object o_15_0 = doc.body().html();
            org.junit.Assert.fail("reconstructFormattingElementsInTable_cf576314 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#reconstructFormattingElementsInTable */
    @org.junit.Test(timeout = 10000)
    public void reconstructFormattingElementsInTable_cf576482() {
        // tests that tables get formatting markers -- the <b> applies outside the table and does not leak in,
        // and the <i> inside the table and does not leak out.
        java.lang.String h = "<p><b>One</p> <table><tr><td><p><i>Three<p>Four</i></td></tr></table> <p>Five</p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        java.lang.String want = "<p><b>One</b></p>\n" + ((((((("<b> \n" + " <table>\n") + "  <tbody>\n") + "   <tr>\n") + "    <td><p><i>Three</i></p><p><i>Four</i></p></td>\n") + "   </tr>\n") + "  </tbody>\n") + " </table> <p>Five</p></b>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_114014 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_114014);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_reconstructFormattingElementsInTable_cf576482__9 = // StatementAdderMethod cloned existing statement
vc_114014.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_reconstructFormattingElementsInTable_cf576482__9).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_reconstructFormattingElementsInTable_cf576482__9).isTrackErrors());
        org.junit.Assert.assertEquals(want, doc.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#reconstructFormattingElementsInTable */
    @org.junit.Test(timeout = 10000)
    public void reconstructFormattingElementsInTable_cf576312_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // tests that tables get formatting markers -- the <b> applies outside the table and does not leak in,
            // and the <i> inside the table and does not leak out.
            java.lang.String h = "<p><b>One</p> <table><tr><td><p><i>Three<p>Four</i></td></tr></table> <p>Five</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            java.lang.String want = "<p><b>One</b></p>\n" + ((((((("<b> \n" + " <table>\n") + "  <tbody>\n") + "   <tr>\n") + "    <td><p><i>Three</i></p><p><i>Four</i></p></td>\n") + "   </tr>\n") + "  </tbody>\n") + " </table> <p>Five</p></b>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_113956 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_113956.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.body().html();
            org.junit.Assert.fail("reconstructFormattingElementsInTable_cf576312 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#reconstructFormattingElementsInTable */
    @org.junit.Test(timeout = 10000)
    public void reconstructFormattingElementsInTable_cf576318_cf578254_failAssert37() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // tests that tables get formatting markers -- the <b> applies outside the table and does not leak in,
            // and the <i> inside the table and does not leak out.
            java.lang.String h = "<p><b>One</p> <table><tr><td><p><i>Three<p>Four</i></td></tr></table> <p>Five</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            java.lang.String want = "<p><b>One</b></p>\n" + ((((((("<b> \n" + " <table>\n") + "  <tbody>\n") + "   <tr>\n") + "    <td><p><i>Three</i></p><p><i>Four</i></p></td>\n") + "   </tr>\n") + "  </tbody>\n") + " </table> <p>Five</p></b>");
            // StatementAdderOnAssert create random local variable
            boolean vc_113962 = false;
            // MethodAssertGenerator build local variable
            Object o_9_0 = vc_113962;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_113961 = new java.lang.String();
            // MethodAssertGenerator build local variable
            Object o_13_0 = vc_113961;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_113958 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_17_0 = vc_113958;
            // AssertGenerator replace invocation
            java.lang.String o_reconstructFormattingElementsInTable_cf576318__13 = // StatementAdderMethod cloned existing statement
vc_113958.unescapeEntities(vc_113961, vc_113962);
            // MethodAssertGenerator build local variable
            Object o_21_0 = o_reconstructFormattingElementsInTable_cf576318__13;
            // StatementAdderOnAssert create random local variable
            boolean vc_114334 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_114332 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_113958.unescapeEntities(vc_114332, vc_114334);
            // MethodAssertGenerator build local variable
            Object o_29_0 = doc.body().html();
            org.junit.Assert.fail("reconstructFormattingElementsInTable_cf576318_cf578254 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#reconstructFormattingElementsInTable */
    @org.junit.Test(timeout = 10000)
    public void reconstructFormattingElementsInTable_cf576316_cf577189_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // tests that tables get formatting markers -- the <b> applies outside the table and does not leak in,
            // and the <i> inside the table and does not leak out.
            java.lang.String h = "<p><b>One</p> <table><tr><td><p><i>Three<p>Four</i></td></tr></table> <p>Five</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            java.lang.String want = "<p><b>One</b></p>\n" + ((((((("<b> \n" + " <table>\n") + "  <tbody>\n") + "   <tr>\n") + "    <td><p><i>Three</i></p><p><i>Four</i></p></td>\n") + "   </tr>\n") + "  </tbody>\n") + " </table> <p>Five</p></b>");
            // StatementAdderOnAssert create random local variable
            boolean vc_113962 = false;
            // MethodAssertGenerator build local variable
            Object o_9_0 = vc_113962;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // MethodAssertGenerator build local variable
            Object o_15_0 = out;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_113958 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_19_0 = vc_113958;
            // AssertGenerator replace invocation
            java.lang.String o_reconstructFormattingElementsInTable_cf576316__15 = // StatementAdderMethod cloned existing statement
vc_113958.unescapeEntities(out, vc_113962);
            // MethodAssertGenerator build local variable
            Object o_23_0 = o_reconstructFormattingElementsInTable_cf576316__15;
            // StatementAdderMethod cloned existing statement
            vc_113958.getTreeBuilder();
            // MethodAssertGenerator build local variable
            Object o_27_0 = doc.body().html();
            org.junit.Assert.fail("reconstructFormattingElementsInTable_cf576316_cf577189 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#reconstructFormattingElementsInTable */
    @org.junit.Test(timeout = 10000)
    public void reconstructFormattingElementsInTable_cf576314_failAssert14_literalMutation578657_cf585084_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // tests that tables get formatting markers -- the <b> applies outside the table and does not leak in,
                // and the <i> inside the table and does not leak out.
                java.lang.String h = "<p><b>One</p> <table><tr><td><p><i>Three<p>Four</i></td></tr></table> <p>Five</p>";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                java.lang.String want = "<p><b>One</b></p>\n" + ((((((("<b> \n" + " <table>\n") + "  <tbo]dy>\n") + "   <tr>\n") + "    <td><p><i>Three</i></p><p><i>Four</i></p></td>\n") + "   </tr>\n") + "  </tbody>\n") + " </table> <p>Five</p></b>");
                // MethodAssertGenerator build local variable
                Object o_9_0 = want;
                // StatementAdderOnAssert create random local variable
                boolean vc_113962 = false;
                // MethodAssertGenerator build local variable
                Object o_13_0 = vc_113962;
                // StatementAdderOnAssert create null value
                java.lang.String vc_113960 = (java.lang.String)null;
                // MethodAssertGenerator build local variable
                Object o_17_0 = vc_113960;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_113958 = (org.jsoup.parser.Parser)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_115575 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_115575.getErrors();
                // MethodAssertGenerator build local variable
                Object o_25_0 = vc_113958;
                // StatementAdderMethod cloned existing statement
                vc_113958.unescapeEntities(vc_113960, vc_113962);
                // MethodAssertGenerator build local variable
                Object o_15_0 = doc.body().html();
                org.junit.Assert.fail("reconstructFormattingElementsInTable_cf576314 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("reconstructFormattingElementsInTable_cf576314_failAssert14_literalMutation578657_cf585084 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#relaxedBaseEntityMatchAndStrictExtendedMatch */
    @org.junit.Test(timeout = 10000)
    public void relaxedBaseEntityMatchAndStrictExtendedMatch_cf587834_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // extended entities need a ; at the end to match, base does not
            java.lang.String html = "&amp &quot &reg &icy &hopf &icy; &hopf;";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            doc.outputSettings().escapeMode(org.jsoup.nodes.Entities.EscapeMode.extended).charset("ascii");// modifies output only to clarify test
            
            // StatementAdderOnAssert create random local variable
            boolean vc_116008 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_116006 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116004 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_116004.unescapeEntities(vc_116006, vc_116008);
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.body().html();
            org.junit.Assert.fail("relaxedBaseEntityMatchAndStrictExtendedMatch_cf587834 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#relaxedBaseEntityMatchAndStrictExtendedMatch */
    /* amplification of org.jsoup.parser.HtmlParserTest#relaxedBaseEntityMatchAndStrictExtendedMatch_cf587986 */
    /* amplification of org.jsoup.parser.HtmlParserTest#relaxedBaseEntityMatchAndStrictExtendedMatch_cf587986_failAssert13_literalMutation588031 */
    @org.junit.Test(timeout = 10000)
    public void relaxedBaseEntityMatchAndStrictExtendedMatch_cf587986_failAssert13_literalMutation588031_literalMutation588253() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // extended entities need a ; at the end to match, base does not
            java.lang.String html = "0uYu=K@cdMFPSOi$kGj{mr;[{ck&#}w$3g`t W4";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "0uYu=K@cdMFPSOi$kGj{mr;[{ck&#}w$3g`t W4");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            doc.outputSettings().escapeMode(org.jsoup.nodes.Entities.EscapeMode.extended).charset("ascii");// modifies output only to clarify test
            
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116045 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_116045.settings();
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.body().html();
            org.junit.Assert.fail("relaxedBaseEntityMatchAndStrictExtendedMatch_cf587986 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#relaxedBaseEntityMatchAndStrictExtendedMatch */
    /* amplification of org.jsoup.parser.HtmlParserTest#relaxedBaseEntityMatchAndStrictExtendedMatch_cf587834 */
    /* amplification of org.jsoup.parser.HtmlParserTest#relaxedBaseEntityMatchAndStrictExtendedMatch_cf587834_failAssert11_literalMutation588019 */
    @org.junit.Test(timeout = 10000)
    public void relaxedBaseEntityMatchAndStrictExtendedMatch_cf587834_failAssert11_literalMutation588019_literalMutation588164() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // extended entities need a ; at the end to match, base does not
            java.lang.String html = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            doc.outputSettings().escapeMode(org.jsoup.nodes.Entities.EscapeMode.extended).charset("ascii");// modifies output only to clarify test
            
            // StatementAdderOnAssert create random local variable
            boolean vc_116008 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_116006 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116004 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_116004.unescapeEntities(vc_116006, vc_116008);
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.body().html();
            org.junit.Assert.fail("relaxedBaseEntityMatchAndStrictExtendedMatch_cf587834 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testAFlowContents */
    @org.junit.Test(timeout = 10000)
    public void testAFlowContents_cf588543_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // html5 has <a> as either phrasing or block
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<a>Hello <div>there</div> <span>now</span></a>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116064 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_116064.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testAFlowContents_cf588543 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testAFlowContents */
    @org.junit.Test(timeout = 10000)
    public void testAFlowContents_cf588548() {
        // html5 has <a> as either phrasing or block
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<a>Hello <div>there</div> <span>now</span></a>");
        // StatementAdderOnAssert create random local variable
        boolean vc_116070 = true;
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_116069 = new java.lang.String();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_116066 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_testAFlowContents_cf588548__10 = // StatementAdderMethod cloned existing statement
vc_116066.unescapeEntities(vc_116069, vc_116070);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_testAFlowContents_cf588548__10, "");
        org.junit.Assert.assertEquals("<a>Hello <div>there</div> <span>now</span></a>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testAFlowContents */
    @org.junit.Test(timeout = 10000)
    public void testAFlowContents_cf588669() {
        // html5 has <a> as either phrasing or block
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<a>Hello <div>there</div> <span>now</span></a>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_116109 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_testAFlowContents_cf588669__6 = // StatementAdderMethod cloned existing statement
vc_116109.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_testAFlowContents_cf588669__6).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_testAFlowContents_cf588669__6).getErrors());
        org.junit.Assert.assertEquals("<a>Hello <div>there</div> <span>now</span></a>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testAFlowContents */
    @org.junit.Test(timeout = 10000)
    public void testAFlowContents_cf588545_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // html5 has <a> as either phrasing or block
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<a>Hello <div>there</div> <span>now</span></a>");
            // StatementAdderOnAssert create random local variable
            boolean vc_116070 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_116068 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116066 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_116066.unescapeEntities(vc_116068, vc_116070);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testAFlowContents_cf588545 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testAFlowContents */
    /* amplification of org.jsoup.parser.HtmlParserTest#testAFlowContents_cf588546 */
    @org.junit.Test(timeout = 10000)
    public void testAFlowContents_cf588546_cf588699_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // html5 has <a> as either phrasing or block
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<a>Hello <div>there</div> <span>now</span></a>");
            // StatementAdderOnAssert create random local variable
            boolean vc_116070 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116066 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testAFlowContents_cf588546__12 = // StatementAdderMethod cloned existing statement
vc_116066.unescapeEntities(out, vc_116070);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_testAFlowContents_cf588546__12;
            // StatementAdderOnAssert create null value
            java.lang.String vc_116130 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116128 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_116128.unescapeEntities(vc_116130, vc_116070);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testAFlowContents_cf588546_cf588699 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testAFlowContents */
    /* amplification of org.jsoup.parser.HtmlParserTest#testAFlowContents_cf588546 */
    @org.junit.Test(timeout = 10000)
    public void testAFlowContents_cf588546_cf588964_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // html5 has <a> as either phrasing or block
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<a>Hello <div>there</div> <span>now</span></a>");
            // StatementAdderOnAssert create random local variable
            boolean vc_116070 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116066 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testAFlowContents_cf588546__12 = // StatementAdderMethod cloned existing statement
vc_116066.unescapeEntities(out, vc_116070);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_testAFlowContents_cf588546__12;
            // StatementAdderOnAssert create literal from method
            int int_vc_17738 = 10000;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116173 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_116173.setTrackErrors(int_vc_17738);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testAFlowContents_cf588546_cf588964 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testAFlowContents */
    /* amplification of org.jsoup.parser.HtmlParserTest#testAFlowContents_cf588548 */
    @org.junit.Test(timeout = 10000)
    public void testAFlowContents_cf588548_cf589312_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // html5 has <a> as either phrasing or block
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<a>Hello <div>there</div> <span>now</span></a>");
            // StatementAdderOnAssert create random local variable
            boolean vc_116070 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_116069 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116066 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testAFlowContents_cf588548__10 = // StatementAdderMethod cloned existing statement
vc_116066.unescapeEntities(vc_116069, vc_116070);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_testAFlowContents_cf588548__10;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_17750 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_116254 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116252 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_116252.unescapeEntities(vc_116254, boolean_vc_17750);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testAFlowContents_cf588548_cf589312 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testFontFlowContents */
    @org.junit.Test(timeout = 10000)
    public void testFontFlowContents_cf590097_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // html5 has no definition of <font>; often used as flow
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<font>Hello <div>there</div> <span>now</span></font>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116436 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_116436.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testFontFlowContents_cf590097 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testFontFlowContents */
    @org.junit.Test(timeout = 10000)
    public void testFontFlowContents_cf590099_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // html5 has no definition of <font>; often used as flow
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<font>Hello <div>there</div> <span>now</span></font>");
            // StatementAdderOnAssert create random local variable
            boolean vc_116442 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_116440 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116438 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_116438.unescapeEntities(vc_116440, vc_116442);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testFontFlowContents_cf590099 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testFontFlowContents */
    @org.junit.Test(timeout = 10000)
    public void testFontFlowContents_cf590223() {
        // html5 has no definition of <font>; often used as flow
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<font>Hello <div>there</div> <span>now</span></font>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_116481 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_testFontFlowContents_cf590223__6 = // StatementAdderMethod cloned existing statement
vc_116481.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_testFontFlowContents_cf590223__6).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_testFontFlowContents_cf590223__6).isTrackErrors());
        org.junit.Assert.assertEquals("<font>Hello <div>there</div> <span>now</span></font>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testFontFlowContents */
    /* amplification of org.jsoup.parser.HtmlParserTest#testFontFlowContents_cf590100 */
    @org.junit.Test(timeout = 10000)
    public void testFontFlowContents_cf590100_cf590541_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // html5 has no definition of <font>; often used as flow
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<font>Hello <div>there</div> <span>now</span></font>");
            // StatementAdderOnAssert create random local variable
            boolean vc_116442 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116438 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testFontFlowContents_cf590100__11 = // StatementAdderMethod cloned existing statement
vc_116438.unescapeEntities(html, vc_116442);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testFontFlowContents_cf590100__11;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116558 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_116558.getTreeBuilder();
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testFontFlowContents_cf590100_cf590541 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testFontFlowContents */
    /* amplification of org.jsoup.parser.HtmlParserTest#testFontFlowContents_cf590102 */
    @org.junit.Test(timeout = 10000)
    public void testFontFlowContents_cf590102_cf590867_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // html5 has no definition of <font>; often used as flow
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<font>Hello <div>there</div> <span>now</span></font>");
            // StatementAdderOnAssert create random local variable
            boolean vc_116442 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_116441 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116438 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testFontFlowContents_cf590102__10 = // StatementAdderMethod cloned existing statement
vc_116438.unescapeEntities(vc_116441, vc_116442);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_testFontFlowContents_cf590102__10;
            // StatementAdderOnAssert create random local variable
            boolean vc_116628 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_116626 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116624 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_116624.unescapeEntities(vc_116626, vc_116628);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testFontFlowContents_cf590102_cf590867 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testFontFlowContents */
    /* amplification of org.jsoup.parser.HtmlParserTest#testFontFlowContents_cf590100 */
    @org.junit.Test(timeout = 10000)
    public void testFontFlowContents_cf590100_cf590268_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // html5 has no definition of <font>; often used as flow
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<font>Hello <div>there</div> <span>now</span></font>");
            // StatementAdderOnAssert create random local variable
            boolean vc_116442 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116438 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testFontFlowContents_cf590100__11 = // StatementAdderMethod cloned existing statement
vc_116438.unescapeEntities(html, vc_116442);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testFontFlowContents_cf590100__11;
            // StatementAdderOnAssert create null value
            java.lang.String vc_116502 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_116438.unescapeEntities(vc_116502, vc_116442);
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testFontFlowContents_cf590100_cf590268 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testFontFlowContents */
    /* amplification of org.jsoup.parser.HtmlParserTest#testFontFlowContents_cf590100 */
    @org.junit.Test(timeout = 10000)
    public void testFontFlowContents_cf590100_cf590519_failAssert21_literalMutation591809() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // html5 has no definition of <font>; often used as flow
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<font>Hello <div>there</div> <span>now</span></font>");
            // StatementAdderOnAssert create random local variable
            boolean vc_116442 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116438 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testFontFlowContents_cf590100__11 = // StatementAdderMethod cloned existing statement
vc_116438.unescapeEntities(html, vc_116442);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testFontFlowContents_cf590100__11;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_13_0, "<html>\n <head></head>\n <body>\n  <font>Hello \n   <div>\n    there\n   </div> <span>now</span></font>\n </body>\n</html>");
            // StatementAdderOnAssert create random local variable
            int vc_116547 = 2147483647;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_116547, 2147483647);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_116545 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_116545);
            // StatementAdderMethod cloned existing statement
            vc_116545.setTrackErrors(vc_116547);
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testFontFlowContents_cf590100_cf590519 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testFragment */
    @org.junit.Test(timeout = 10000)
    public void testFragment_cf592022() {
        // make sure when parsing a body fragment, a script tag at start goes into the body
        java.lang.String html = "<script type=\"text/javascript\">console.log(\'foo\');</script>\n" + ("<div id=\"somecontent\">some content</div>\n" + "<script type=\"text/javascript\">console.log(\'bar\');</script>");
        org.jsoup.nodes.Document body = org.jsoup.Jsoup.parseBodyFragment(html);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_116928 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_116928);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_testFragment_cf592022__7 = // StatementAdderMethod cloned existing statement
vc_116928.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_testFragment_cf592022__7).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_testFragment_cf592022__7).getErrors());
        org.junit.Assert.assertEquals(("<script type=\"text/javascript\">console.log(\'foo\');</script> \n" + ((("<div id=\"somecontent\">\n" + " some content\n") + "</div> \n") + "<script type=\"text/javascript\">console.log(\'bar\');</script>")), body.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testFragment */
    @org.junit.Test(timeout = 10000)
    public void testFragment_cf591855() {
        // make sure when parsing a body fragment, a script tag at start goes into the body
        java.lang.String html = "<script type=\"text/javascript\">console.log(\'foo\');</script>\n" + ("<div id=\"somecontent\">some content</div>\n" + "<script type=\"text/javascript\">console.log(\'bar\');</script>");
        org.jsoup.nodes.Document body = org.jsoup.Jsoup.parseBodyFragment(html);
        // StatementAdderOnAssert create random local variable
        boolean vc_116876 = true;
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(vc_116876);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_116872 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_116872);
        // AssertGenerator replace invocation
        java.lang.String o_testFragment_cf591855__9 = // StatementAdderMethod cloned existing statement
vc_116872.unescapeEntities(html, vc_116876);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_testFragment_cf591855__9, "<script type=\"text/javascript\">console.log(\'foo\');</script>\n<div id=\"somecontent\">some content</div>\n<script type=\"text/javascript\">console.log(\'bar\');</script>");
        org.junit.Assert.assertEquals(("<script type=\"text/javascript\">console.log(\'foo\');</script> \n" + ((("<div id=\"somecontent\">\n" + " some content\n") + "</div> \n") + "<script type=\"text/javascript\">console.log(\'bar\');</script>")), body.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testFragment */
    @org.junit.Test(timeout = 10000)
    public void testFragment_cf591858() {
        // make sure when parsing a body fragment, a script tag at start goes into the body
        java.lang.String html = "<script type=\"text/javascript\">console.log(\'foo\');</script>\n" + ("<div id=\"somecontent\">some content</div>\n" + "<script type=\"text/javascript\">console.log(\'bar\');</script>");
        org.jsoup.nodes.Document body = org.jsoup.Jsoup.parseBodyFragment(html);
        // StatementAdderOnAssert create random local variable
        boolean vc_116876 = true;
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(vc_116876);
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_116875 = new java.lang.String();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(vc_116875, "");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_116872 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_116872);
        // AssertGenerator replace invocation
        java.lang.String o_testFragment_cf591858__11 = // StatementAdderMethod cloned existing statement
vc_116872.unescapeEntities(vc_116875, vc_116876);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_testFragment_cf591858__11, "");
        org.junit.Assert.assertEquals(("<script type=\"text/javascript\">console.log(\'foo\');</script> \n" + ((("<div id=\"somecontent\">\n" + " some content\n") + "</div> \n") + "<script type=\"text/javascript\">console.log(\'bar\');</script>")), body.body().html());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHeaderContents */
    @org.junit.Test(timeout = 10000)
    public void testHeaderContents_cf669000() {
        // h* tags (h1 .. h9) in browsers can handle any internal content other than other h*. which is not per any
        // spec, which defines them as containing phrasing content only. so, reality over theory.
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<h1>Hello <div>There</div> now</h1> <h2>More <h3>Content</h3></h2>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_129625 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_testHeaderContents_cf669000__7 = // StatementAdderMethod cloned existing statement
vc_129625.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_testHeaderContents_cf669000__7).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_testHeaderContents_cf669000__7).isTrackErrors());
        org.junit.Assert.assertEquals("<h1>Hello <div>There</div> now</h1> <h2>More </h2><h3>Content</h3>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHeaderContents */
    @org.junit.Test(timeout = 10000)
    public void testHeaderContents_cf668874_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // h* tags (h1 .. h9) in browsers can handle any internal content other than other h*. which is not per any
            // spec, which defines them as containing phrasing content only. so, reality over theory.
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<h1>Hello <div>There</div> now</h1> <h2>More <h3>Content</h3></h2>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_129580 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_129580.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testHeaderContents_cf668874 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHeaderContents */
    @org.junit.Test(timeout = 10000)
    public void testHeaderContents_cf668876_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // h* tags (h1 .. h9) in browsers can handle any internal content other than other h*. which is not per any
            // spec, which defines them as containing phrasing content only. so, reality over theory.
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<h1>Hello <div>There</div> now</h1> <h2>More <h3>Content</h3></h2>");
            // StatementAdderOnAssert create random local variable
            boolean vc_129586 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_129584 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_129582 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_129582.unescapeEntities(vc_129584, vc_129586);
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testHeaderContents_cf668876 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHeaderContents */
    /* amplification of org.jsoup.parser.HtmlParserTest#testHeaderContents_cf668877 */
    @org.junit.Test(timeout = 10000)
    public void testHeaderContents_cf668877_cf669045_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // h* tags (h1 .. h9) in browsers can handle any internal content other than other h*. which is not per any
            // spec, which defines them as containing phrasing content only. so, reality over theory.
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<h1>Hello <div>There</div> now</h1> <h2>More <h3>Content</h3></h2>");
            // StatementAdderOnAssert create random local variable
            boolean vc_129586 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_129582 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testHeaderContents_cf668877__12 = // StatementAdderMethod cloned existing statement
vc_129582.unescapeEntities(rendered, vc_129586);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_testHeaderContents_cf668877__12;
            // StatementAdderOnAssert create null value
            java.lang.String vc_129646 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_129582.unescapeEntities(vc_129646, vc_129586);
            // MethodAssertGenerator build local variable
            Object o_20_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testHeaderContents_cf668877_cf669045 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHeaderContents */
    /* amplification of org.jsoup.parser.HtmlParserTest#testHeaderContents_cf668878 */
    @org.junit.Test(timeout = 10000)
    public void testHeaderContents_cf668878_cf669355_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // h* tags (h1 .. h9) in browsers can handle any internal content other than other h*. which is not per any
            // spec, which defines them as containing phrasing content only. so, reality over theory.
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<h1>Hello <div>There</div> now</h1> <h2>More <h3>Content</h3></h2>");
            // StatementAdderOnAssert create random local variable
            boolean vc_129586 = false;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_19853 = "<h1>Hello <div>There</div> now</h1> <h2>More <h3>Content</h3></h2>";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_129582 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testHeaderContents_cf668878__11 = // StatementAdderMethod cloned existing statement
vc_129582.unescapeEntities(String_vc_19853, vc_129586);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testHeaderContents_cf668878__11;
            // StatementAdderOnAssert create null value
            java.lang.String vc_129708 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_129582.unescapeEntities(vc_129708, vc_129586);
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testHeaderContents_cf668878_cf669355 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHeaderContents */
    /* amplification of org.jsoup.parser.HtmlParserTest#testHeaderContents_cf668877 */
    @org.junit.Test(timeout = 10000)
    public void testHeaderContents_cf668877_cf669046_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // h* tags (h1 .. h9) in browsers can handle any internal content other than other h*. which is not per any
            // spec, which defines them as containing phrasing content only. so, reality over theory.
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<h1>Hello <div>There</div> now</h1> <h2>More <h3>Content</h3></h2>");
            // StatementAdderOnAssert create random local variable
            boolean vc_129586 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_129582 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testHeaderContents_cf668877__12 = // StatementAdderMethod cloned existing statement
vc_129582.unescapeEntities(rendered, vc_129586);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_testHeaderContents_cf668877__12;
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_19862 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_129646 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_129582.unescapeEntities(vc_129646, boolean_vc_19862);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testHeaderContents_cf668877_cf669046 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHeaderContents */
    /* amplification of org.jsoup.parser.HtmlParserTest#testHeaderContents_cf669002 */
    @org.junit.Test(timeout = 10000)
    public void testHeaderContents_cf669002_failAssert9_literalMutation670382_cf670395_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_18_1 = 1507740156;
                // h* tags (h1 .. h9) in browsers can handle any internal content other than other h*. which is not per any
                // spec, which defines them as containing phrasing content only. so, reality over theory.
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<h1>Hello <div>There</div> now</h1> <h2>More <h3>Content</h3></h2>");
                // StatementAdderOnAssert create random local variable
                int vc_129629 = 1507740156;
                // StatementAdderOnAssert create random local variable
                boolean vc_129958 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_129956 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_129954 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_129954.unescapeEntities(vc_129956, vc_129958);
                // MethodAssertGenerator build local variable
                Object o_18_0 = vc_129629;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_129627 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_129627.setTrackErrors(vc_129629);
                // MethodAssertGenerator build local variable
                Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.junit.Assert.fail("testHeaderContents_cf669002 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testHeaderContents_cf669002_failAssert9_literalMutation670382_cf670395 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHgroup */
    @org.junit.Test(timeout = 10000)
    public void testHgroup_cf670707() {
        // jsoup used to not allow hroup in h{n}, but that's not in spec, and browsers are OK
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<h1>Hello <h2>There <hgroup><h1>Another<h2>headline</hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_130059 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_testHgroup_cf670707__6 = // StatementAdderMethod cloned existing statement
vc_130059.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_testHgroup_cf670707__6).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_testHgroup_cf670707__6).isTrackErrors());
        org.junit.Assert.assertEquals("<h1>Hello </h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup></h2>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHgroup */
    @org.junit.Test(timeout = 10000)
    public void testHgroup_cf670583_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to not allow hroup in h{n}, but that's not in spec, and browsers are OK
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<h1>Hello <h2>There <hgroup><h1>Another<h2>headline</hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup>");
            // StatementAdderOnAssert create random local variable
            boolean vc_130020 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_130018 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_130016 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_130016.unescapeEntities(vc_130018, vc_130020);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testHgroup_cf670583 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHgroup */
    @org.junit.Test(timeout = 10000)
    public void testHgroup_cf670581_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to not allow hroup in h{n}, but that's not in spec, and browsers are OK
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<h1>Hello <h2>There <hgroup><h1>Another<h2>headline</hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_130014 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_130014.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testHgroup_cf670581 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHgroup */
    /* amplification of org.jsoup.parser.HtmlParserTest#testHgroup_cf670584 */
    @org.junit.Test(timeout = 10000)
    public void testHgroup_cf670584_cf670735_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to not allow hroup in h{n}, but that's not in spec, and browsers are OK
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<h1>Hello <h2>There <hgroup><h1>Another<h2>headline</hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup>");
            // StatementAdderOnAssert create random local variable
            boolean vc_130020 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_130016 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testHgroup_cf670584__11 = // StatementAdderMethod cloned existing statement
vc_130016.unescapeEntities(rendered, vc_130020);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testHgroup_cf670584__11;
            // StatementAdderMethod cloned existing statement
            vc_130016.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_17_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testHgroup_cf670584_cf670735 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHgroup */
    /* amplification of org.jsoup.parser.HtmlParserTest#testHgroup_cf670584 */
    @org.junit.Test(timeout = 10000)
    public void testHgroup_cf670584_cf671012_failAssert20() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to not allow hroup in h{n}, but that's not in spec, and browsers are OK
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<h1>Hello <h2>There <hgroup><h1>Another<h2>headline</hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup>");
            // StatementAdderOnAssert create random local variable
            boolean vc_130020 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_130016 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testHgroup_cf670584__11 = // StatementAdderMethod cloned existing statement
vc_130016.unescapeEntities(rendered, vc_130020);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testHgroup_cf670584__11;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_130128 = (org.jsoup.parser.TreeBuilder)null;
            // StatementAdderMethod cloned existing statement
            vc_130016.setTreeBuilder(vc_130128);
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testHgroup_cf670584_cf671012 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHgroup */
    /* amplification of org.jsoup.parser.HtmlParserTest#testHgroup_cf670707 */
    @org.junit.Test(timeout = 10000)
    public void testHgroup_cf670707_cf671648_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to not allow hroup in h{n}, but that's not in spec, and browsers are OK
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<h1>Hello <h2>There <hgroup><h1>Another<h2>headline</hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_130059 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_testHgroup_cf670707__6 = // StatementAdderMethod cloned existing statement
vc_130059.htmlParser();
            // MethodAssertGenerator build local variable
            Object o_8_0 = ((org.jsoup.parser.Parser)o_testHgroup_cf670707__6).getErrors();
            // MethodAssertGenerator build local variable
            Object o_10_0 = ((org.jsoup.parser.Parser)o_testHgroup_cf670707__6).isTrackErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_130268 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_130266 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_130264 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_130264.unescapeEntities(vc_130266, vc_130268);
            // MethodAssertGenerator build local variable
            Object o_20_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testHgroup_cf670707_cf671648 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHtmlLowerCase */
    @org.junit.Test(timeout = 10000)
    public void testHtmlLowerCase_cf672330() {
        java.lang.String html = "<!doctype HTML><DIV ID=1>One</DIV>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_130431 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_testHtmlLowerCase_cf672330__6 = // StatementAdderMethod cloned existing statement
vc_130431.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_testHtmlLowerCase_cf672330__6).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_testHtmlLowerCase_cf672330__6).isTrackErrors());
        org.junit.Assert.assertEquals("<!doctype html> <html> <head></head> <body> <div id=\"1\"> One </div> </body> </html>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHtmlLowerCase */
    @org.junit.Test(timeout = 10000)
    public void testHtmlLowerCase_cf672174_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<!doctype HTML><DIV ID=1>One</DIV>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_130386 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_130386.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("testHtmlLowerCase_cf672174 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHtmlLowerCase */
    @org.junit.Test(timeout = 10000)
    public void testHtmlLowerCase_cf672176_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<!doctype HTML><DIV ID=1>One</DIV>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_130392 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_130390 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_130388 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_130388.unescapeEntities(vc_130390, vc_130392);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("testHtmlLowerCase_cf672176 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHtmlLowerCase */
    /* amplification of org.jsoup.parser.HtmlParserTest#testHtmlLowerCase_cf672179 */
    @org.junit.Test(timeout = 10000)
    public void testHtmlLowerCase_cf672179_cf673009_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<!doctype HTML><DIV ID=1>One</DIV>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            // StatementAdderOnAssert create random local variable
            boolean vc_130392 = false;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_19974 = "<!doctype HTML><DIV ID=1>One</DIV>";
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_130388 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testHtmlLowerCase_cf672179__10 = // StatementAdderMethod cloned existing statement
vc_130388.unescapeEntities(String_vc_19974, vc_130392);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_testHtmlLowerCase_cf672179__10;
            // StatementAdderOnAssert create random local variable
            boolean vc_130578 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_130576 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_130388.unescapeEntities(vc_130576, vc_130578);
            // MethodAssertGenerator build local variable
            Object o_20_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
            org.junit.Assert.fail("testHtmlLowerCase_cf672179_cf673009 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testHtmlLowerCase */
    /* amplification of org.jsoup.parser.HtmlParserTest#testHtmlLowerCase_cf672333 */
    @org.junit.Test(timeout = 10000)
    public void testHtmlLowerCase_cf672333_failAssert14_literalMutation674164_cf674405_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "";
                // StatementAdderOnAssert create random local variable
                boolean vc_130888 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_130886 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_130884 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_130884.unescapeEntities(vc_130886, vc_130888);
                // MethodAssertGenerator build local variable
                Object o_12_0 = html;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                // StatementAdderOnAssert create random local variable
                int vc_130435 = 1421128289;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_130433 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_130433.setTrackErrors(vc_130435);
                // MethodAssertGenerator build local variable
                Object o_10_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.outerHtml());
                org.junit.Assert.fail("testHtmlLowerCase_cf672333 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testHtmlLowerCase_cf672333_failAssert14_literalMutation674164_cf674405 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testInvalidTableContents */
    @org.junit.Test(timeout = 10000)
    public void testInvalidTableContents_cf675446() throws java.io.IOException {
        java.io.File in = org.jsoup.integration.ParseTest.getFile("/htmltests/table-invalid-elements.html");
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(in, "UTF-8");
        doc.outputSettings().prettyPrint(true);
        java.lang.String rendered = doc.toString();
        int endOfEmail = rendered.indexOf("Comment");
        int guarantee = rendered.indexOf("Why am I here?");
        org.junit.Assert.assertTrue("Comment not found", (endOfEmail > (-1)));
        org.junit.Assert.assertTrue("Search text not found", (guarantee > (-1)));
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_131250 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_131250);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_testInvalidTableContents_cf675446__19 = // StatementAdderMethod cloned existing statement
vc_131250.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_testInvalidTableContents_cf675446__19).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_testInvalidTableContents_cf675446__19).isTrackErrors());
        org.junit.Assert.assertTrue("Search text did not come after comment", (guarantee > endOfEmail));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testInvalidTableContents */
    @org.junit.Test(timeout = 10000)
    public void testInvalidTableContents_cf675269() throws java.io.IOException {
        java.io.File in = org.jsoup.integration.ParseTest.getFile("/htmltests/table-invalid-elements.html");
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(in, "UTF-8");
        doc.outputSettings().prettyPrint(true);
        java.lang.String rendered = doc.toString();
        int endOfEmail = rendered.indexOf("Comment");
        int guarantee = rendered.indexOf("Why am I here?");
        org.junit.Assert.assertTrue("Comment not found", (endOfEmail > (-1)));
        org.junit.Assert.assertTrue("Search text not found", (guarantee > (-1)));
        // StatementAdderOnAssert create random local variable
        boolean vc_131198 = false;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(vc_131198);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_131194 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_131194);
        // AssertGenerator replace invocation
        java.lang.String o_testInvalidTableContents_cf675269__21 = // StatementAdderMethod cloned existing statement
vc_131194.unescapeEntities(rendered, vc_131198);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_testInvalidTableContents_cf675269__21, "<html>\n <head></head>\n <body> \n  <table> \n   <tbody>\n    <tr> \n     <td> \n      <table> \n       <tbody>\n        <tr> \n         <!--Comment--> \n        </tr>\n       </tbody>\n      </table><p>Why am I here?</p>\n      <table>   \n      </table> </td> \n    </tr> \n   </tbody>\n  </table>   \n </body>\n</html>");
        org.junit.Assert.assertTrue("Search text did not come after comment", (guarantee > endOfEmail));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testInvalidTableContents */
    @org.junit.Test(timeout = 10000)
    public void testInvalidTableContents_cf675267_failAssert2() throws java.io.IOException {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.io.File in = org.jsoup.integration.ParseTest.getFile("/htmltests/table-invalid-elements.html");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(in, "UTF-8");
            doc.outputSettings().prettyPrint(true);
            java.lang.String rendered = doc.toString();
            int endOfEmail = rendered.indexOf("Comment");
            int guarantee = rendered.indexOf("Why am I here?");
            // MethodAssertGenerator build local variable
            Object o_13_0 = endOfEmail > (-1);
            // MethodAssertGenerator build local variable
            Object o_15_0 = guarantee > (-1);
            // StatementAdderOnAssert create random local variable
            boolean vc_131198 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_131196 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_131194 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_131194.unescapeEntities(vc_131196, vc_131198);
            // MethodAssertGenerator build local variable
            Object o_25_0 = guarantee > endOfEmail;
            org.junit.Assert.fail("testInvalidTableContents_cf675267 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testInvalidTableContents */
    @org.junit.Test(timeout = 10000)
    public void testInvalidTableContents_cf675264_failAssert0() throws java.io.IOException {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.io.File in = org.jsoup.integration.ParseTest.getFile("/htmltests/table-invalid-elements.html");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(in, "UTF-8");
            doc.outputSettings().prettyPrint(true);
            java.lang.String rendered = doc.toString();
            int endOfEmail = rendered.indexOf("Comment");
            int guarantee = rendered.indexOf("Why am I here?");
            // MethodAssertGenerator build local variable
            Object o_13_0 = endOfEmail > (-1);
            // MethodAssertGenerator build local variable
            Object o_15_0 = guarantee > (-1);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_131192 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_131192.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_21_0 = guarantee > endOfEmail;
            org.junit.Assert.fail("testInvalidTableContents_cf675264 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testInvalidTableContents */
    @org.junit.Test(timeout = 10000)
    public void testInvalidTableContents_cf675438_failAssert5() throws java.io.IOException {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.io.File in = org.jsoup.integration.ParseTest.getFile("/htmltests/table-invalid-elements.html");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(in, "UTF-8");
            doc.outputSettings().prettyPrint(true);
            java.lang.String rendered = doc.toString();
            int endOfEmail = rendered.indexOf("Comment");
            int guarantee = rendered.indexOf("Why am I here?");
            // MethodAssertGenerator build local variable
            Object o_13_0 = endOfEmail > (-1);
            // MethodAssertGenerator build local variable
            Object o_15_0 = guarantee > (-1);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_131244 = (org.jsoup.parser.TreeBuilder)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_131242 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_131242.setTreeBuilder(vc_131244);
            // MethodAssertGenerator build local variable
            Object o_23_0 = guarantee > endOfEmail;
            org.junit.Assert.fail("testInvalidTableContents_cf675438 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testInvalidTableContents */
    @org.junit.Test(timeout = 10000)
    public void testInvalidTableContents_cf675271_cf677738_failAssert1() throws java.io.IOException {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.io.File in = org.jsoup.integration.ParseTest.getFile("/htmltests/table-invalid-elements.html");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(in, "UTF-8");
            doc.outputSettings().prettyPrint(true);
            java.lang.String rendered = doc.toString();
            int endOfEmail = rendered.indexOf("Comment");
            int guarantee = rendered.indexOf("Why am I here?");
            // MethodAssertGenerator build local variable
            Object o_13_0 = endOfEmail > (-1);
            // MethodAssertGenerator build local variable
            Object o_15_0 = guarantee > (-1);
            // StatementAdderOnAssert create random local variable
            boolean vc_131198 = false;
            // MethodAssertGenerator build local variable
            Object o_19_0 = vc_131198;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // MethodAssertGenerator build local variable
            Object o_24_0 = html;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_131194 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_28_0 = vc_131194;
            // AssertGenerator replace invocation
            java.lang.String o_testInvalidTableContents_cf675271__24 = // StatementAdderMethod cloned existing statement
vc_131194.unescapeEntities(html, vc_131198);
            // MethodAssertGenerator build local variable
            Object o_32_0 = o_testInvalidTableContents_cf675271__24;
            // StatementAdderOnAssert create null value
            java.lang.String vc_131692 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_131194.unescapeEntities(vc_131692, vc_131198);
            // MethodAssertGenerator build local variable
            Object o_38_0 = guarantee > endOfEmail;
            org.junit.Assert.fail("testInvalidTableContents_cf675271_cf677738 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testInvalidTableContents */
    @org.junit.Test(timeout = 10000)
    public void testInvalidTableContents_cf675268_cf677022_failAssert15() throws java.io.IOException {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.io.File in = org.jsoup.integration.ParseTest.getFile("/htmltests/table-invalid-elements.html");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(in, "UTF-8");
            doc.outputSettings().prettyPrint(true);
            java.lang.String rendered = doc.toString();
            int endOfEmail = rendered.indexOf("Comment");
            int guarantee = rendered.indexOf("Why am I here?");
            // MethodAssertGenerator build local variable
            Object o_13_0 = endOfEmail > (-1);
            // MethodAssertGenerator build local variable
            Object o_15_0 = guarantee > (-1);
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_20096 = true;
            // MethodAssertGenerator build local variable
            Object o_19_0 = boolean_vc_20096;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_131194 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_23_0 = vc_131194;
            // AssertGenerator replace invocation
            java.lang.String o_testInvalidTableContents_cf675268__21 = // StatementAdderMethod cloned existing statement
vc_131194.unescapeEntities(rendered, boolean_vc_20096);
            // MethodAssertGenerator build local variable
            Object o_27_0 = o_testInvalidTableContents_cf675268__21;
            // StatementAdderMethod cloned existing statement
            vc_131194.settings();
            // MethodAssertGenerator build local variable
            Object o_31_0 = guarantee > endOfEmail;
            org.junit.Assert.fail("testInvalidTableContents_cf675268_cf677022 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testInvalidTableContents */
    @org.junit.Test(timeout = 10000)
    public void testInvalidTableContents_cf675430_cf676730_failAssert9() throws java.io.IOException {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.io.File in = org.jsoup.integration.ParseTest.getFile("/htmltests/table-invalid-elements.html");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(in, "UTF-8");
            doc.outputSettings().prettyPrint(true);
            java.lang.String rendered = doc.toString();
            int endOfEmail = rendered.indexOf("Comment");
            int guarantee = rendered.indexOf("Why am I here?");
            // MethodAssertGenerator build local variable
            Object o_13_0 = endOfEmail > (-1);
            // MethodAssertGenerator build local variable
            Object o_15_0 = guarantee > (-1);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_131237 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_19_0 = vc_131237;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_testInvalidTableContents_cf675430__19 = // StatementAdderMethod cloned existing statement
vc_131237.htmlParser();
            // MethodAssertGenerator build local variable
            Object o_23_0 = ((org.jsoup.parser.Parser)o_testInvalidTableContents_cf675430__19).getErrors();
            // MethodAssertGenerator build local variable
            Object o_25_0 = ((org.jsoup.parser.Parser)o_testInvalidTableContents_cf675430__19).isTrackErrors();
            // StatementAdderMethod cloned existing statement
            vc_131237.getTreeBuilder();
            // MethodAssertGenerator build local variable
            Object o_29_0 = guarantee > endOfEmail;
            org.junit.Assert.fail("testInvalidTableContents_cf675430_cf676730 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testNoImagesInNoScriptInHead */
    @org.junit.Test(timeout = 10000)
    public void testNoImagesInNoScriptInHead_cf678994_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to allow, but against spec if parsing with noscript
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head><noscript><img src='foo'></noscript></head><body><p>Hello</p></body></html>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_131930 = (org.jsoup.parser.ParseSettings)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_131928 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_131928.settings(vc_131930);
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("testNoImagesInNoScriptInHead_cf678994 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testNoImagesInNoScriptInHead */
    @org.junit.Test(timeout = 10000)
    public void testNoImagesInNoScriptInHead_cf678986() {
        // jsoup used to allow, but against spec if parsing with noscript
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head><noscript><img src='foo'></noscript></head><body><p>Hello</p></body></html>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_131919 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_testNoImagesInNoScriptInHead_cf678986__6 = // StatementAdderMethod cloned existing statement
vc_131919.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_testNoImagesInNoScriptInHead_cf678986__6).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_testNoImagesInNoScriptInHead_cf678986__6).isTrackErrors());
        org.junit.Assert.assertEquals("<html><head><noscript>&lt;img src=\"foo\"&gt;</noscript></head><body><p>Hello</p></body></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testNoImagesInNoScriptInHead */
    @org.junit.Test(timeout = 10000)
    public void testNoImagesInNoScriptInHead_cf678860_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to allow, but against spec if parsing with noscript
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head><noscript><img src='foo'></noscript></head><body><p>Hello</p></body></html>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_131874 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_131874.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("testNoImagesInNoScriptInHead_cf678860 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testNoImagesInNoScriptInHead */
    @org.junit.Test(timeout = 10000)
    public void testNoImagesInNoScriptInHead_cf678862_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to allow, but against spec if parsing with noscript
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head><noscript><img src='foo'></noscript></head><body><p>Hello</p></body></html>");
            // StatementAdderOnAssert create random local variable
            boolean vc_131880 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_131878 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_131876 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_131876.unescapeEntities(vc_131878, vc_131880);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("testNoImagesInNoScriptInHead_cf678862 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testNoImagesInNoScriptInHead */
    /* amplification of org.jsoup.parser.HtmlParserTest#testNoImagesInNoScriptInHead_cf678863 */
    @org.junit.Test(timeout = 10000)
    public void testNoImagesInNoScriptInHead_cf678863_cf679018_failAssert22() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to allow, but against spec if parsing with noscript
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head><noscript><img src='foo'></noscript></head><body><p>Hello</p></body></html>");
            // StatementAdderOnAssert create random local variable
            boolean vc_131880 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_131876 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testNoImagesInNoScriptInHead_cf678863__12 = // StatementAdderMethod cloned existing statement
vc_131876.unescapeEntities(out, vc_131880);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_testNoImagesInNoScriptInHead_cf678863__12;
            // StatementAdderOnAssert create random local variable
            boolean vc_131942 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_131940 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_131938 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_131938.unescapeEntities(vc_131940, vc_131942);
            // MethodAssertGenerator build local variable
            Object o_24_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("testNoImagesInNoScriptInHead_cf678863_cf679018 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testNoImagesInNoScriptInHead */
    /* amplification of org.jsoup.parser.HtmlParserTest#testNoImagesInNoScriptInHead_cf678865 */
    @org.junit.Test(timeout = 10000)
    public void testNoImagesInNoScriptInHead_cf678865_cf679673_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to allow, but against spec if parsing with noscript
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head><noscript><img src='foo'></noscript></head><body><p>Hello</p></body></html>");
            // StatementAdderOnAssert create random local variable
            boolean vc_131880 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_131879 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_131876 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testNoImagesInNoScriptInHead_cf678865__10 = // StatementAdderMethod cloned existing statement
vc_131876.unescapeEntities(vc_131879, vc_131880);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_testNoImagesInNoScriptInHead_cf678865__10;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_132067 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_132067.getErrors();
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("testNoImagesInNoScriptInHead_cf678865_cf679673 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testNoImagesInNoScriptInHead */
    /* amplification of org.jsoup.parser.HtmlParserTest#testNoImagesInNoScriptInHead_cf678865 */
    @org.junit.Test(timeout = 10000)
    public void testNoImagesInNoScriptInHead_cf678865_cf679628_failAssert24() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // jsoup used to allow, but against spec if parsing with noscript
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head><noscript><img src='foo'></noscript></head><body><p>Hello</p></body></html>");
            // StatementAdderOnAssert create random local variable
            boolean vc_131880 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_131879 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_131876 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testNoImagesInNoScriptInHead_cf678865__10 = // StatementAdderMethod cloned existing statement
vc_131876.unescapeEntities(vc_131879, vc_131880);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_testNoImagesInNoScriptInHead_cf678865__10;
            // StatementAdderOnAssert create null value
            java.lang.String vc_132064 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_132062 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_132062.unescapeEntities(vc_132064, vc_131880);
            // MethodAssertGenerator build local variable
            Object o_20_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("testNoImagesInNoScriptInHead_cf678865_cf679628 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testNormalisesIsIndex */
    @org.junit.Test(timeout = 10000)
    public void testNormalisesIsIndex_cf680457_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><isindex action='/submit'></body>");
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create random local variable
            boolean vc_132252 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_132250 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_132248 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_132248.unescapeEntities(vc_132250, vc_132252);
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.body().html());
            org.junit.Assert.fail("testNormalisesIsIndex_cf680457 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testNormalisesIsIndex */
    @org.junit.Test(timeout = 10000)
    public void testNormalisesIsIndex_cf680455_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><isindex action='/submit'></body>");
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_132246 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_132246.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.body().html());
            org.junit.Assert.fail("testNormalisesIsIndex_cf680455 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testNormalisesIsIndex */
    @org.junit.Test(timeout = 10000)
    public void testNormalisesIsIndex_cf680611() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><isindex action='/submit'></body>");
        java.lang.String html = doc.outerHtml();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_132291 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_testNormalisesIsIndex_cf680611__7 = // StatementAdderMethod cloned existing statement
vc_132291.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_testNormalisesIsIndex_cf680611__7).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_testNormalisesIsIndex_cf680611__7).isTrackErrors());
        org.junit.Assert.assertEquals("<form action=\"/submit\"> <hr> <label>This is a searchable index. Enter search keywords: <input name=\"isindex\"></label> <hr> </form>", org.jsoup.helper.StringUtil.normaliseWhitespace(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testNormalisesIsIndex */
    @org.junit.Test(timeout = 10000)
    public void testNormalisesIsIndex_cf680617_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><isindex action='/submit'></body>");
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_132298 = (org.jsoup.parser.TreeBuilder)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_132296 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_132296.setTreeBuilder(vc_132298);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.body().html());
            org.junit.Assert.fail("testNormalisesIsIndex_cf680617 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testNormalisesIsIndex */
    /* amplification of org.jsoup.parser.HtmlParserTest#testNormalisesIsIndex_cf680461 */
    @org.junit.Test(timeout = 10000)
    public void testNormalisesIsIndex_cf680461_cf681560_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><isindex action='/submit'></body>");
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create random local variable
            boolean vc_132252 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_132251 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_132248 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testNormalisesIsIndex_cf680461__11 = // StatementAdderMethod cloned existing statement
vc_132248.unescapeEntities(vc_132251, vc_132252);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testNormalisesIsIndex_cf680461__11;
            // StatementAdderOnAssert create null value
            java.lang.String vc_132498 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_132496 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_132496.unescapeEntities(vc_132498, vc_132252);
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.body().html());
            org.junit.Assert.fail("testNormalisesIsIndex_cf680461_cf681560 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testNormalisesIsIndex */
    /* amplification of org.jsoup.parser.HtmlParserTest#testNormalisesIsIndex_cf680461 */
    @org.junit.Test(timeout = 10000)
    public void testNormalisesIsIndex_cf680461_cf681839_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><isindex action='/submit'></body>");
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create random local variable
            boolean vc_132252 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_132251 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_132248 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testNormalisesIsIndex_cf680461__11 = // StatementAdderMethod cloned existing statement
vc_132248.unescapeEntities(vc_132251, vc_132252);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testNormalisesIsIndex_cf680461__11;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.ParseSettings vc_132550 = (org.jsoup.parser.ParseSettings)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_132548 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_132548.settings(vc_132550);
            // MethodAssertGenerator build local variable
            Object o_21_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.body().html());
            org.junit.Assert.fail("testNormalisesIsIndex_cf680461_cf681839 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testNormalisesIsIndex */
    /* amplification of org.jsoup.parser.HtmlParserTest#testNormalisesIsIndex_cf680458 */
    @org.junit.Test(timeout = 10000)
    public void testNormalisesIsIndex_cf680458_cf680909_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<body><isindex action='/submit'></body>");
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create random local variable
            boolean vc_132252 = false;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_132248 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testNormalisesIsIndex_cf680458__9 = // StatementAdderMethod cloned existing statement
vc_132248.unescapeEntities(html, vc_132252);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_testNormalisesIsIndex_cf680458__9;
            // StatementAdderOnAssert create random local variable
            int vc_132357 = -876338548;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_132355 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_132355.setTrackErrors(vc_132357);
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.helper.StringUtil.normaliseWhitespace(doc.body().html());
            org.junit.Assert.fail("testNormalisesIsIndex_cf680458_cf680909 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testReinsertionModeForThCelss */
    @org.junit.Test(timeout = 10000)
    public void testReinsertionModeForThCelss_cf682463_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String body = "<body> <table> <tr> <th> <table><tr><td></td></tr></table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
            // StatementAdderOnAssert create random local variable
            boolean vc_132686 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_132684 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_132682 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_132682.unescapeEntities(vc_132684, vc_132686);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.body().children().size();
            org.junit.Assert.fail("testReinsertionModeForThCelss_cf682463 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testReinsertionModeForThCelss */
    @org.junit.Test(timeout = 10000)
    public void testReinsertionModeForThCelss_cf682617() {
        java.lang.String body = "<body> <table> <tr> <th> <table><tr><td></td></tr></table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_132725 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_testReinsertionModeForThCelss_cf682617__6 = // StatementAdderMethod cloned existing statement
vc_132725.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_testReinsertionModeForThCelss_cf682617__6).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_testReinsertionModeForThCelss_cf682617__6).isTrackErrors());
        org.junit.Assert.assertEquals(1, doc.body().children().size());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testReinsertionModeForThCelss */
    @org.junit.Test(timeout = 10000)
    public void testReinsertionModeForThCelss_cf682465() {
        java.lang.String body = "<body> <table> <tr> <th> <table><tr><td></td></tr></table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
        // StatementAdderOnAssert create random local variable
        boolean vc_132686 = true;
        // StatementAddOnAssert local variable replacement
        java.lang.String out = doc.body().html();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_132682 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_testReinsertionModeForThCelss_cf682465__12 = // StatementAdderMethod cloned existing statement
vc_132682.unescapeEntities(out, vc_132686);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_testReinsertionModeForThCelss_cf682465__12, "<table> \n <tbody>\n  <tr> \n   <th> \n    <table>\n     <tbody>\n      <tr>\n       <td></td>\n      </tr>\n     </tbody>\n    </table> \n    <div> \n     <table>\n      <tbody>\n       <tr>\n        <td></td>\n       </tr>\n      </tbody>\n     </table> \n    </div> \n    <div></div> \n    <div></div> \n    <div></div> </th> \n  </tr> \n </tbody>\n</table>");
        org.junit.Assert.assertEquals(1, doc.body().children().size());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testReinsertionModeForThCelss */
    @org.junit.Test(timeout = 10000)
    public void testReinsertionModeForThCelss_cf682461_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String body = "<body> <table> <tr> <th> <table><tr><td></td></tr></table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_132680 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_132680.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = doc.body().children().size();
            org.junit.Assert.fail("testReinsertionModeForThCelss_cf682461 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testReinsertionModeForThCelss */
    /* amplification of org.jsoup.parser.HtmlParserTest#testReinsertionModeForThCelss_cf682467 */
    @org.junit.Test(timeout = 10000)
    public void testReinsertionModeForThCelss_cf682467_cf683595_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String body = "<body> <table> <tr> <th> <table><tr><td></td></tr></table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
            // StatementAdderOnAssert create random local variable
            boolean vc_132686 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_132685 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_132682 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testReinsertionModeForThCelss_cf682467__10 = // StatementAdderMethod cloned existing statement
vc_132682.unescapeEntities(vc_132685, vc_132686);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_testReinsertionModeForThCelss_cf682467__10;
            // StatementAdderOnAssert create null value
            java.lang.String vc_132932 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_132682.unescapeEntities(vc_132932, vc_132686);
            // MethodAssertGenerator build local variable
            Object o_18_0 = doc.body().children().size();
            org.junit.Assert.fail("testReinsertionModeForThCelss_cf682467_cf683595 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testReinsertionModeForThCelss */
    /* amplification of org.jsoup.parser.HtmlParserTest#testReinsertionModeForThCelss_cf682463 */
    @org.junit.Test(timeout = 10000)
    public void testReinsertionModeForThCelss_cf682463_failAssert6_literalMutation684425() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String body = "<body> <table> <tr> <th> <table><tr><td></td></tr2</table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(body, "<body> <table> <tr> <th> <table><tr><td></td></tr2</table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
            // StatementAdderOnAssert create random local variable
            boolean vc_132686 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_132684 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_132682 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_132682.unescapeEntities(vc_132684, vc_132686);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.body().children().size();
            org.junit.Assert.fail("testReinsertionModeForThCelss_cf682463 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testReinsertionModeForThCelss */
    /* amplification of org.jsoup.parser.HtmlParserTest#testReinsertionModeForThCelss_cf682464 */
    @org.junit.Test(timeout = 10000)
    public void testReinsertionModeForThCelss_cf682464_cf682919_failAssert1_literalMutation685626() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String body = "<body> <tble> <tr> <th> <table><tr><td></td></tr></table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(body, "<body> <tble> <tr> <th> <table><tr><td></td></tr></table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
            // StatementAdderOnAssert create random local variable
            boolean vc_132686 = true;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_132682 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testReinsertionModeForThCelss_cf682464__8 = // StatementAdderMethod cloned existing statement
vc_132682.unescapeEntities(body, vc_132686);
            // MethodAssertGenerator build local variable
            Object o_10_0 = o_testReinsertionModeForThCelss_cf682464__8;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_10_0, "<body> <tble> <tr> <th> <table><tr><td></td></tr></table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>");
            // StatementAdderOnAssert create literal from method
            int int_vc_20345 = 1;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(int_vc_20345, 1);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_132789 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_132789);
            // StatementAdderMethod cloned existing statement
            vc_132789.setTrackErrors(int_vc_20345);
            // MethodAssertGenerator build local variable
            Object o_18_0 = doc.body().children().size();
            org.junit.Assert.fail("testReinsertionModeForThCelss_cf682464_cf682919 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testReinsertionModeForThCelss */
    /* amplification of org.jsoup.parser.HtmlParserTest#testReinsertionModeForThCelss_cf682635 */
    @org.junit.Test(timeout = 10000)
    public void testReinsertionModeForThCelss_cf682635_failAssert13_literalMutation684473_cf685095_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String body = "<body> <table> <tr> <th> <table><tr><td></td></tr></table> <div> <table><tr><td></td></tr></tablQ> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>";
                // StatementAdderOnAssert create random local variable
                boolean vc_133368 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_133366 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_133364 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_133364.unescapeEntities(vc_133366, vc_133368);
                // MethodAssertGenerator build local variable
                Object o_12_0 = body;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_132740 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_132740.getTreeBuilder();
                // MethodAssertGenerator build local variable
                Object o_8_0 = doc.body().children().size();
                org.junit.Assert.fail("testReinsertionModeForThCelss_cf682635 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testReinsertionModeForThCelss_cf682635_failAssert13_literalMutation684473_cf685095 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testRelaxedTags */
    @org.junit.Test(timeout = 10000)
    public void testRelaxedTags_cf685715_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<abc_def id=1>Hello</abc_def> <abc-def>There</abc-def>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_133610 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_133610.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testRelaxedTags_cf685715 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testRelaxedTags */
    @org.junit.Test(timeout = 10000)
    public void testRelaxedTags_cf685841() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<abc_def id=1>Hello</abc_def> <abc-def>There</abc-def>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_133655 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_testRelaxedTags_cf685841__5 = // StatementAdderMethod cloned existing statement
vc_133655.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_testRelaxedTags_cf685841__5).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_testRelaxedTags_cf685841__5).getErrors());
        org.junit.Assert.assertEquals("<abc_def id=\"1\">Hello</abc_def> <abc-def>There</abc-def>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testRelaxedTags */
    @org.junit.Test(timeout = 10000)
    public void testRelaxedTags_cf685717_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<abc_def id=1>Hello</abc_def> <abc-def>There</abc-def>");
            // StatementAdderOnAssert create random local variable
            boolean vc_133616 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_133614 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_133612 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_133612.unescapeEntities(vc_133614, vc_133616);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testRelaxedTags_cf685717 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testRelaxedTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#testRelaxedTags_cf685718 */
    @org.junit.Test(timeout = 10000)
    public void testRelaxedTags_cf685718_cf686139_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<abc_def id=1>Hello</abc_def> <abc-def>There</abc-def>");
            // StatementAdderOnAssert create random local variable
            boolean vc_133616 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String rendered = doc.toString();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_133612 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testRelaxedTags_cf685718__10 = // StatementAdderMethod cloned existing statement
vc_133612.unescapeEntities(rendered, vc_133616);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_testRelaxedTags_cf685718__10;
            // StatementAdderOnAssert create literal from method
            int int_vc_20485 = 10000;
            // StatementAdderMethod cloned existing statement
            vc_133612.setTrackErrors(int_vc_20485);
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testRelaxedTags_cf685718_cf686139 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSpaceAfterTag */
    @org.junit.Test(timeout = 10000)
    public void testSpaceAfterTag_cf687289_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div > <a name=\"top\"></a ><p id=1 >Hello</p></div>");
            // StatementAdderOnAssert create random local variable
            boolean vc_133988 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_133986 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_133984 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_133984.unescapeEntities(vc_133986, vc_133988);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testSpaceAfterTag_cf687289 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSpaceAfterTag */
    @org.junit.Test(timeout = 10000)
    public void testSpaceAfterTag_cf687287_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div > <a name=\"top\"></a ><p id=1 >Hello</p></div>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_133982 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_133982.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testSpaceAfterTag_cf687287 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSpaceAfterTag */
    @org.junit.Test(timeout = 10000)
    public void testSpaceAfterTag_cf687425() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div > <a name=\"top\"></a ><p id=1 >Hello</p></div>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_134040 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_testSpaceAfterTag_cf687425__5 = // StatementAdderMethod cloned existing statement
vc_134040.xmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_testSpaceAfterTag_cf687425__5).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_testSpaceAfterTag_cf687425__5).getErrors());
        org.junit.Assert.assertEquals("<div> <a name=\"top\"></a><p id=\"1\">Hello</p></div>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSpaceAfterTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#testSpaceAfterTag_cf687413 */
    @org.junit.Test(timeout = 10000)
    public void testSpaceAfterTag_cf687413_cf688354_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div > <a name=\"top\"></a ><p id=1 >Hello</p></div>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_134027 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_testSpaceAfterTag_cf687413__5 = // StatementAdderMethod cloned existing statement
vc_134027.htmlParser();
            // MethodAssertGenerator build local variable
            Object o_7_0 = ((org.jsoup.parser.Parser)o_testSpaceAfterTag_cf687413__5).isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = ((org.jsoup.parser.Parser)o_testSpaceAfterTag_cf687413__5).getErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_134236 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_134234 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_134232 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_134232.unescapeEntities(vc_134234, vc_134236);
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testSpaceAfterTag_cf687413_cf688354 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSpaceAfterTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#testSpaceAfterTag_cf687290 */
    @org.junit.Test(timeout = 10000)
    public void testSpaceAfterTag_cf687290_cf687489_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div > <a name=\"top\"></a ><p id=1 >Hello</p></div>");
            // StatementAdderOnAssert create random local variable
            boolean vc_133988 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_133984 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testSpaceAfterTag_cf687290__11 = // StatementAdderMethod cloned existing statement
vc_133984.unescapeEntities(out, vc_133988);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testSpaceAfterTag_cf687290__11;
            // StatementAdderMethod cloned existing statement
            vc_133984.getErrors();
            // MethodAssertGenerator build local variable
            Object o_17_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testSpaceAfterTag_cf687290_cf687489 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSpaceAfterTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#testSpaceAfterTag_cf687289 */
    @org.junit.Test(timeout = 10000)
    public void testSpaceAfterTag_cf687289_failAssert6_literalMutation688790() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div > <a name=\"top\"></a ><p id=1 >Hello</p></div>");
            // StatementAdderOnAssert create random local variable
            boolean vc_133988 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_133988);
            // StatementAdderOnAssert create null value
            java.lang.String vc_133986 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_133984 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_133984.unescapeEntities(vc_133986, vc_133988);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testSpaceAfterTag_cf687289 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSpaceAfterTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#testSpaceAfterTag_cf687290 */
    @org.junit.Test(timeout = 10000)
    public void testSpaceAfterTag_cf687290_cf687718_failAssert2_literalMutation689280() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div > <a name=\"top\"></a ><p id=1 >Hello</p></div>");
            // StatementAdderOnAssert create random local variable
            boolean vc_133988 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_133988);
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_133984 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testSpaceAfterTag_cf687290__11 = // StatementAdderMethod cloned existing statement
vc_133984.unescapeEntities(out, vc_133988);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testSpaceAfterTag_cf687290__11;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_13_0, "<div> \n <a name=\"top\"></a>\n <p id=\"1\">Hello</p>\n</div>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.TreeBuilder vc_134096 = (org.jsoup.parser.TreeBuilder)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_134096);
            // StatementAdderMethod cloned existing statement
            vc_133984.setTreeBuilder(vc_134096);
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testSpaceAfterTag_cf687290_cf687718 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSpaceAfterTag */
    /* amplification of org.jsoup.parser.HtmlParserTest#testSpaceAfterTag_cf687291 */
    @org.junit.Test(timeout = 10000)
    public void testSpaceAfterTag_cf687291_cf687768_failAssert0_literalMutation689267() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div > <a name=\"top\"></a ><p id=1 >Hello</p></div>");
            // StatementAdderOnAssert create random local variable
            boolean vc_133988 = false;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_20524 = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_20524, "");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_133984 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testSpaceAfterTag_cf687291__9 = // StatementAdderMethod cloned existing statement
vc_133984.unescapeEntities(String_vc_20524, vc_133988);
            // MethodAssertGenerator build local variable
            Object o_11_0 = o_testSpaceAfterTag_cf687291__9;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "");
            // StatementAdderOnAssert create null value
            java.lang.String vc_134110 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_134110);
            // StatementAdderMethod cloned existing statement
            vc_133984.unescapeEntities(vc_134110, vc_133988);
            // MethodAssertGenerator build local variable
            Object o_17_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testSpaceAfterTag_cf687291_cf687768 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSpanContents */
    @org.junit.Test(timeout = 10000)
    public void testSpanContents_cf689321_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // like h1 tags, the spec says SPAN is phrasing only, but browsers and publisher treat span as a block tag
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>");
            // StatementAdderOnAssert create random local variable
            boolean vc_134546 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_134544 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_134542 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_134542.unescapeEntities(vc_134544, vc_134546);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testSpanContents_cf689321 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSpanContents */
    @org.junit.Test(timeout = 10000)
    public void testSpanContents_cf689324() {
        // like h1 tags, the spec says SPAN is phrasing only, but browsers and publisher treat span as a block tag
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>");
        // StatementAdderOnAssert create random local variable
        boolean vc_134546 = true;
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_134545 = new java.lang.String();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_134542 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_testSpanContents_cf689324__10 = // StatementAdderMethod cloned existing statement
vc_134542.unescapeEntities(vc_134545, vc_134546);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_testSpanContents_cf689324__10, "");
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSpanContents */
    @org.junit.Test(timeout = 10000)
    public void testSpanContents_cf689445() {
        // like h1 tags, the spec says SPAN is phrasing only, but browsers and publisher treat span as a block tag
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_134585 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_testSpanContents_cf689445__6 = // StatementAdderMethod cloned existing statement
vc_134585.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_testSpanContents_cf689445__6).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_testSpanContents_cf689445__6).getErrors());
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSpanContents */
    @org.junit.Test(timeout = 10000)
    public void testSpanContents_cf689319_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // like h1 tags, the spec says SPAN is phrasing only, but browsers and publisher treat span as a block tag
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_134540 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_134540.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_8_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testSpanContents_cf689319 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSpanContents */
    /* amplification of org.jsoup.parser.HtmlParserTest#testSpanContents_cf689322 */
    @org.junit.Test(timeout = 10000)
    public void testSpanContents_cf689322_cf689472_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // like h1 tags, the spec says SPAN is phrasing only, but browsers and publisher treat span as a block tag
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>");
            // StatementAdderOnAssert create random local variable
            boolean vc_134546 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_134542 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testSpanContents_cf689322__11 = // StatementAdderMethod cloned existing statement
vc_134542.unescapeEntities(html, vc_134546);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testSpanContents_cf689322__11;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_134602 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_134602.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testSpanContents_cf689322_cf689472 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSpanContents */
    /* amplification of org.jsoup.parser.HtmlParserTest#testSpanContents_cf689324 */
    @org.junit.Test(timeout = 10000)
    public void testSpanContents_cf689324_cf690089_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // like h1 tags, the spec says SPAN is phrasing only, but browsers and publisher treat span as a block tag
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>");
            // StatementAdderOnAssert create random local variable
            boolean vc_134546 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_134545 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_134542 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testSpanContents_cf689324__10 = // StatementAdderMethod cloned existing statement
vc_134542.unescapeEntities(vc_134545, vc_134546);
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_testSpanContents_cf689324__10;
            // StatementAdderOnAssert create random local variable
            boolean vc_134732 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_134730 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_134728 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_134728.unescapeEntities(vc_134730, vc_134732);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testSpanContents_cf689324_cf690089 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSpanContents */
    /* amplification of org.jsoup.parser.HtmlParserTest#testSpanContents_cf689322 */
    @org.junit.Test(timeout = 10000)
    public void testSpanContents_cf689322_cf689744_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // like h1 tags, the spec says SPAN is phrasing only, but browsers and publisher treat span as a block tag
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>");
            // StatementAdderOnAssert create random local variable
            boolean vc_134546 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String html = doc.outerHtml();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_134542 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testSpanContents_cf689322__11 = // StatementAdderMethod cloned existing statement
vc_134542.unescapeEntities(html, vc_134546);
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testSpanContents_cf689322__11;
            // StatementAdderOnAssert create random local variable
            int vc_134651 = 1229013423;
            // StatementAdderMethod cloned existing statement
            vc_134542.setTrackErrors(vc_134651);
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testSpanContents_cf689322_cf689744 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSupportsPartiallyNonAsciiTags */
    @org.junit.Test(timeout = 10000)
    public void testSupportsPartiallyNonAsciiTags_cf691066() {
        java.lang.String body = "<div>Check</div?>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
        org.jsoup.select.Elements els = doc.select("div");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_134957 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_testSupportsPartiallyNonAsciiTags_cf691066__8 = // StatementAdderMethod cloned existing statement
vc_134957.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_testSupportsPartiallyNonAsciiTags_cf691066__8).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_testSupportsPartiallyNonAsciiTags_cf691066__8).getErrors());
        org.junit.Assert.assertEquals("Check", els.text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSupportsPartiallyNonAsciiTags */
    @org.junit.Test(timeout = 10000)
    public void testSupportsPartiallyNonAsciiTags_cf690910_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String body = "<div>Check</div?>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
            org.jsoup.select.Elements els = doc.select("div");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_134912 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_134912.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.text();
            org.junit.Assert.fail("testSupportsPartiallyNonAsciiTags_cf690910 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSupportsPartiallyNonAsciiTags */
    @org.junit.Test(timeout = 10000)
    public void testSupportsPartiallyNonAsciiTags_cf690914() {
        java.lang.String body = "<div>Check</div?>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
        org.jsoup.select.Elements els = doc.select("div");
        // StatementAdderOnAssert create random local variable
        boolean vc_134918 = true;
        // StatementAddOnAssert local variable replacement
        java.lang.String out = doc.body().html();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_134914 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_testSupportsPartiallyNonAsciiTags_cf690914__14 = // StatementAdderMethod cloned existing statement
vc_134914.unescapeEntities(out, vc_134918);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_testSupportsPartiallyNonAsciiTags_cf690914__14, "<div>\n Check\n</div>");
        org.junit.Assert.assertEquals("Check", els.text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSupportsPartiallyNonAsciiTags */
    @org.junit.Test(timeout = 10000)
    public void testSupportsPartiallyNonAsciiTags_cf690912_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String body = "<div>Check</div?>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
            org.jsoup.select.Elements els = doc.select("div");
            // StatementAdderOnAssert create random local variable
            boolean vc_134918 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_134916 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_134914 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_134914.unescapeEntities(vc_134916, vc_134918);
            // MethodAssertGenerator build local variable
            Object o_14_0 = els.text();
            org.junit.Assert.fail("testSupportsPartiallyNonAsciiTags_cf690912 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSupportsPartiallyNonAsciiTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#testSupportsPartiallyNonAsciiTags_cf691069 */
    @org.junit.Test(timeout = 10000)
    public void testSupportsPartiallyNonAsciiTags_cf691069_failAssert13_literalMutation692902() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String body = "<di>Check</div\u00e1>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(body, "<di>Check</div\u00e1>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
            org.jsoup.select.Elements els = doc.select("div");
            // StatementAdderOnAssert create random local variable
            int vc_134961 = 61742317;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_134959 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_134959.setTrackErrors(vc_134961);
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.text();
            org.junit.Assert.fail("testSupportsPartiallyNonAsciiTags_cf691069 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSupportsPartiallyNonAsciiTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#testSupportsPartiallyNonAsciiTags_cf690912 */
    @org.junit.Test(timeout = 10000)
    public void testSupportsPartiallyNonAsciiTags_cf690912_failAssert10_literalMutation692885() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String body = "<div>Check1/div\u00e1>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(body, "<div>Check1/div\u00e1>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
            org.jsoup.select.Elements els = doc.select("div");
            // StatementAdderOnAssert create random local variable
            boolean vc_134918 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_134916 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_134914 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_134914.unescapeEntities(vc_134916, vc_134918);
            // MethodAssertGenerator build local variable
            Object o_14_0 = els.text();
            org.junit.Assert.fail("testSupportsPartiallyNonAsciiTags_cf690912 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSupportsPartiallyNonAsciiTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#testSupportsPartiallyNonAsciiTags_cf691066 */
    @org.junit.Test(timeout = 10000)
    public void testSupportsPartiallyNonAsciiTags_cf691066_cf692344_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String body = "<div>Check</div?>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
            org.jsoup.select.Elements els = doc.select("div");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_134957 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_testSupportsPartiallyNonAsciiTags_cf691066__8 = // StatementAdderMethod cloned existing statement
vc_134957.htmlParser();
            // MethodAssertGenerator build local variable
            Object o_10_0 = ((org.jsoup.parser.Parser)o_testSupportsPartiallyNonAsciiTags_cf691066__8).isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_12_0 = ((org.jsoup.parser.Parser)o_testSupportsPartiallyNonAsciiTags_cf691066__8).getErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_135228 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_135226 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            vc_134957.unescapeEntities(vc_135226, vc_135228);
            // MethodAssertGenerator build local variable
            Object o_20_0 = els.text();
            org.junit.Assert.fail("testSupportsPartiallyNonAsciiTags_cf691066_cf692344 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSupportsPartiallyNonAsciiTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#testSupportsPartiallyNonAsciiTags_cf690916 */
    @org.junit.Test(timeout = 10000)
    public void testSupportsPartiallyNonAsciiTags_cf690916_cf692037_failAssert20_literalMutation693823() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String body = "<div>Check</div?>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
            org.jsoup.select.Elements els = doc.select("div");
            // StatementAdderOnAssert create random local variable
            boolean vc_134918 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_134917 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_134914 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testSupportsPartiallyNonAsciiTags_cf690916__12 = // StatementAdderMethod cloned existing statement
vc_134914.unescapeEntities(vc_134917, vc_134918);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_testSupportsPartiallyNonAsciiTags_cf690916__12;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, "");
            // StatementAdderOnAssert create random local variable
            boolean vc_135166 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_135166);
            // StatementAdderOnAssert create null value
            java.lang.String vc_135164 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_135164);
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_135162 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_135162);
            // StatementAdderMethod cloned existing statement
            vc_135162.unescapeEntities(vc_135164, vc_135166);
            // MethodAssertGenerator build local variable
            Object o_24_0 = els.text();
            org.junit.Assert.fail("testSupportsPartiallyNonAsciiTags_cf690916_cf692037 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSupportsPartiallyNonAsciiTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#testSupportsPartiallyNonAsciiTags_cf690912 */
    @org.junit.Test(timeout = 10000)
    public void testSupportsPartiallyNonAsciiTags_cf690912_failAssert10_literalMutation692886_cf693520_failAssert16() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String body = "<div>Check</div?>";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
                org.jsoup.select.Elements els = doc.select("div");
                // StatementAdderOnAssert create random local variable
                boolean vc_134918 = false;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_135575 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_135575.settings();
                // MethodAssertGenerator build local variable
                Object o_15_0 = vc_134918;
                // StatementAdderOnAssert create null value
                java.lang.String vc_134916 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_134914 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_134914.unescapeEntities(vc_134916, vc_134918);
                // MethodAssertGenerator build local variable
                Object o_14_0 = els.text();
                org.junit.Assert.fail("testSupportsPartiallyNonAsciiTags_cf690912 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("testSupportsPartiallyNonAsciiTags_cf690912_failAssert10_literalMutation692886_cf693520 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testSupportsPartiallyNonAsciiTags */
    /* amplification of org.jsoup.parser.HtmlParserTest#testSupportsPartiallyNonAsciiTags_cf690914 */
    @org.junit.Test(timeout = 10000)
    public void testSupportsPartiallyNonAsciiTags_cf690914_cf691430_failAssert19_literalMutation693813() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String body = "<iv>Check</div\u00e1>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(body, "<iv>Check</div\u00e1>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
            org.jsoup.select.Elements els = doc.select("div");
            // StatementAdderOnAssert create random local variable
            boolean vc_134918 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_134914 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testSupportsPartiallyNonAsciiTags_cf690914__14 = // StatementAdderMethod cloned existing statement
vc_134914.unescapeEntities(out, vc_134918);
            // MethodAssertGenerator build local variable
            Object o_16_0 = o_testSupportsPartiallyNonAsciiTags_cf690914__14;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_16_0, "<iv>\n Check\n</iv>");
            // StatementAdderOnAssert create random local variable
            boolean vc_135042 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_135042);
            // StatementAdderOnAssert create null value
            java.lang.String vc_135040 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_135040);
            // StatementAdderMethod cloned existing statement
            vc_134914.unescapeEntities(vc_135040, vc_135042);
            // MethodAssertGenerator build local variable
            Object o_24_0 = els.text();
            org.junit.Assert.fail("testSupportsPartiallyNonAsciiTags_cf690914_cf691430 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testUsingSingleQuotesInQueries */
    @org.junit.Test(timeout = 10000)
    public void testUsingSingleQuotesInQueries_cf693836_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String body = "<body> <div class='main'>hello</div></body>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
            org.jsoup.select.Elements main = doc.select("div[class='main']");
            // StatementAdderOnAssert create random local variable
            boolean vc_135662 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_135660 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_135658 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_135658.unescapeEntities(vc_135660, vc_135662);
            // MethodAssertGenerator build local variable
            Object o_14_0 = main.text();
            org.junit.Assert.fail("testUsingSingleQuotesInQueries_cf693836 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testUsingSingleQuotesInQueries */
    @org.junit.Test(timeout = 10000)
    public void testUsingSingleQuotesInQueries_cf693834_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String body = "<body> <div class='main'>hello</div></body>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
            org.jsoup.select.Elements main = doc.select("div[class='main']");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_135656 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_135656.isTrackErrors();
            // MethodAssertGenerator build local variable
            Object o_10_0 = main.text();
            org.junit.Assert.fail("testUsingSingleQuotesInQueries_cf693834 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testUsingSingleQuotesInQueries */
    @org.junit.Test(timeout = 10000)
    public void testUsingSingleQuotesInQueries_cf693838() {
        java.lang.String body = "<body> <div class='main'>hello</div></body>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
        org.jsoup.select.Elements main = doc.select("div[class='main']");
        // StatementAdderOnAssert create random local variable
        boolean vc_135662 = false;
        // StatementAddOnAssert local variable replacement
        java.lang.String rendered = doc.toString();
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_135658 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        java.lang.String o_testUsingSingleQuotesInQueries_cf693838__13 = // StatementAdderMethod cloned existing statement
vc_135658.unescapeEntities(rendered, vc_135662);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_testUsingSingleQuotesInQueries_cf693838__13, "<html>\n <head></head>\n <body> \n  <div class=\"main\">\n   hello\n  </div>\n </body>\n</html>");
        org.junit.Assert.assertEquals("hello", main.text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testUsingSingleQuotesInQueries */
    @org.junit.Test(timeout = 10000)
    public void testUsingSingleQuotesInQueries_cf693990() {
        java.lang.String body = "<body> <div class='main'>hello</div></body>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
        org.jsoup.select.Elements main = doc.select("div[class='main']");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_135701 = (org.jsoup.parser.Parser)null;
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_testUsingSingleQuotesInQueries_cf693990__8 = // StatementAdderMethod cloned existing statement
vc_135701.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_testUsingSingleQuotesInQueries_cf693990__8).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_testUsingSingleQuotesInQueries_cf693990__8).isTrackErrors());
        org.junit.Assert.assertEquals("hello", main.text());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#testUsingSingleQuotesInQueries */
    /* amplification of org.jsoup.parser.HtmlParserTest#testUsingSingleQuotesInQueries_cf693840 */
    @org.junit.Test(timeout = 10000)
    public void testUsingSingleQuotesInQueries_cf693840_cf694961_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String body = "<body> <div class='main'>hello</div></body>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(body);
            org.jsoup.select.Elements main = doc.select("div[class='main']");
            // StatementAdderOnAssert create random local variable
            boolean vc_135662 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_135661 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_135658 = (org.jsoup.parser.Parser)null;
            // AssertGenerator replace invocation
            java.lang.String o_testUsingSingleQuotesInQueries_cf693840__12 = // StatementAdderMethod cloned existing statement
vc_135658.unescapeEntities(vc_135661, vc_135662);
            // MethodAssertGenerator build local variable
            Object o_14_0 = o_testUsingSingleQuotesInQueries_cf693840__12;
            // StatementAdderOnAssert create random local variable
            boolean vc_135910 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_135908 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_135906 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_135906.unescapeEntities(vc_135908, vc_135910);
            // MethodAssertGenerator build local variable
            Object o_24_0 = main.text();
            org.junit.Assert.fail("testUsingSingleQuotesInQueries_cf693840_cf694961 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#tracksErrorsWhenRequested */
    @org.junit.Test(timeout = 10000)
    public void tracksErrorsWhenRequested_cf697126() {
        java.lang.String html = "<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo";
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser().setTrackErrors(500);
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com", parser);
        java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
        org.junit.Assert.assertEquals(5, errors.size());
        org.junit.Assert.assertEquals("20: Attributes incorrectly present on end tag", errors.get(0).toString());
        org.junit.Assert.assertEquals("35: Unexpected token [Doctype] when in state [InBody]", errors.get(1).toString());
        org.junit.Assert.assertEquals("36: Invalid character reference: invalid named referenece 'arrgh'", errors.get(2).toString());
        org.junit.Assert.assertEquals("50: Self closing flag not acknowledged", errors.get(3).toString());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_136507 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_136507);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_tracksErrorsWhenRequested_cf697126__25 = // StatementAdderMethod cloned existing statement
vc_136507.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_tracksErrorsWhenRequested_cf697126__25).getErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_tracksErrorsWhenRequested_cf697126__25).isTrackErrors());
        org.junit.Assert.assertEquals("61: Unexpectedly reached end of file (EOF) in input state [TagName]", errors.get(4).toString());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#tracksErrorsWhenRequested */
    @org.junit.Test(timeout = 10000)
    public void tracksErrorsWhenRequested_cf696855_failAssert23() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo";
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser().setTrackErrors(500);
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com", parser);
            java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = errors.size();
            // MethodAssertGenerator build local variable
            Object o_11_0 = errors.get(0).toString();
            // MethodAssertGenerator build local variable
            Object o_14_0 = errors.get(1).toString();
            // MethodAssertGenerator build local variable
            Object o_17_0 = errors.get(2).toString();
            // MethodAssertGenerator build local variable
            Object o_20_0 = errors.get(3).toString();
            // StatementAdderOnAssert create random local variable
            boolean vc_136468 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_136466 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            parser.unescapeEntities(vc_136466, vc_136468);
            // MethodAssertGenerator build local variable
            Object o_29_0 = errors.get(4).toString();
            org.junit.Assert.fail("tracksErrorsWhenRequested_cf696855 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#tracksErrorsWhenRequested */
    @org.junit.Test(timeout = 10000)
    public void tracksErrorsWhenRequested_cf696852() {
        java.lang.String html = "<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo";
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser().setTrackErrors(500);
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com", parser);
        java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
        org.junit.Assert.assertEquals(5, errors.size());
        org.junit.Assert.assertEquals("20: Attributes incorrectly present on end tag", errors.get(0).toString());
        org.junit.Assert.assertEquals("35: Unexpected token [Doctype] when in state [InBody]", errors.get(1).toString());
        org.junit.Assert.assertEquals("36: Invalid character reference: invalid named referenece 'arrgh'", errors.get(2).toString());
        org.junit.Assert.assertEquals("50: Self closing flag not acknowledged", errors.get(3).toString());
        // StatementAdderOnAssert create random local variable
        boolean vc_136468 = false;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(vc_136468);
        // StatementAddOnAssert local variable replacement
        java.lang.String rendered = doc.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(rendered, "<html>\n <head></head>\n <body>\n  <p>One</p>&amp;arrgh;\n  <font></font>\n  <br>\n </body>\n</html>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_136464 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_136464);
        // AssertGenerator replace invocation
        java.lang.String o_tracksErrorsWhenRequested_cf696852__30 = // StatementAdderMethod cloned existing statement
vc_136464.unescapeEntities(rendered, vc_136468);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_tracksErrorsWhenRequested_cf696852__30, "<html>\n <head></head>\n <body>\n  <p>One</p>&arrgh;\n  <font></font>\n  <br>\n </body>\n</html>");
        org.junit.Assert.assertEquals("61: Unexpectedly reached end of file (EOF) in input state [TagName]", errors.get(4).toString());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#tracksErrorsWhenRequested */
    @org.junit.Test(timeout = 10000)
    public void tracksErrorsWhenRequested_cf697127_cf697879_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo";
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser().setTrackErrors(500);
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com", parser);
            java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = errors.size();
            // MethodAssertGenerator build local variable
            Object o_11_0 = errors.get(0).toString();
            // MethodAssertGenerator build local variable
            Object o_14_0 = errors.get(1).toString();
            // MethodAssertGenerator build local variable
            Object o_17_0 = errors.get(2).toString();
            // MethodAssertGenerator build local variable
            Object o_20_0 = errors.get(3).toString();
            // AssertGenerator replace invocation
            org.jsoup.parser.Parser o_tracksErrorsWhenRequested_cf697127__23 = // StatementAdderMethod cloned existing statement
parser.htmlParser();
            // MethodAssertGenerator build local variable
            Object o_25_0 = ((org.jsoup.parser.Parser)o_tracksErrorsWhenRequested_cf697127__23).getErrors();
            // MethodAssertGenerator build local variable
            Object o_27_0 = ((org.jsoup.parser.Parser)o_tracksErrorsWhenRequested_cf697127__23).isTrackErrors();
            // StatementAdderOnAssert create random local variable
            boolean vc_136654 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_136652 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_136650 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_136650.unescapeEntities(vc_136652, vc_136654);
            // MethodAssertGenerator build local variable
            Object o_37_0 = errors.get(4).toString();
            org.junit.Assert.fail("tracksErrorsWhenRequested_cf697127_cf697879 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#tracksErrorsWhenRequested */
    @org.junit.Test(timeout = 10000)
    public void tracksErrorsWhenRequested_cf696865_failAssert22_literalMutation699707() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<p>One</p href=\'no\'><!DOCTYPE html>&arr0h;<font /><br /><foo";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<p>One</p href=\'no\'><!DOCTYPE html>&arr0h;<font /><br /><foo");
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser().setTrackErrors(500);
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com", parser);
            java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = errors.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_9_0, 4);
            // MethodAssertGenerator build local variable
            Object o_11_0 = errors.get(0).toString();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_11_0, "20: Attributes incorrectly present on end tag");
            // MethodAssertGenerator build local variable
            Object o_14_0 = errors.get(1).toString();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, "35: Unexpected token [Doctype] when in state [InBody]");
            // MethodAssertGenerator build local variable
            Object o_17_0 = errors.get(2).toString();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_17_0, "50: Self closing flag not acknowledged");
            // MethodAssertGenerator build local variable
            Object o_20_0 = errors.get(3).toString();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_20_0, "61: Unexpectedly reached end of file (EOF) in input state [TagName]");
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_136469 = (org.jsoup.parser.Parser)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_136469);
            // StatementAdderMethod cloned existing statement
            vc_136469.getErrors();
            // MethodAssertGenerator build local variable
            Object o_27_0 = errors.get(4).toString();
            org.junit.Assert.fail("tracksErrorsWhenRequested_cf696865 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#tracksErrorsWhenRequested */
    @org.junit.Test(timeout = 10000)
    public void tracksErrorsWhenRequested_cf696852_cf698946_failAssert19_literalMutation700815_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "R3{mc,&/cMqch]i6 1&#:Dft!fud>mC$F9}1o(QsXf1iL[igt;an*F!piZc#";
                org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser().setTrackErrors(500);
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com", parser);
                java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
                // MethodAssertGenerator build local variable
                Object o_9_0 = errors.size();
                // MethodAssertGenerator build local variable
                Object o_11_0 = errors.get(0).toString();
                // MethodAssertGenerator build local variable
                Object o_14_0 = errors.get(1).toString();
                // MethodAssertGenerator build local variable
                Object o_17_0 = errors.get(2).toString();
                // MethodAssertGenerator build local variable
                Object o_20_0 = errors.get(3).toString();
                // StatementAdderOnAssert create random local variable
                boolean vc_136468 = false;
                // MethodAssertGenerator build local variable
                Object o_25_0 = vc_136468;
                // StatementAddOnAssert local variable replacement
                java.lang.String rendered = doc.toString();
                // MethodAssertGenerator build local variable
                Object o_30_0 = rendered;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_136464 = (org.jsoup.parser.Parser)null;
                // MethodAssertGenerator build local variable
                Object o_34_0 = vc_136464;
                // AssertGenerator replace invocation
                java.lang.String o_tracksErrorsWhenRequested_cf696852__30 = // StatementAdderMethod cloned existing statement
vc_136464.unescapeEntities(rendered, vc_136468);
                // MethodAssertGenerator build local variable
                Object o_38_0 = o_tracksErrorsWhenRequested_cf696852__30;
                // StatementAdderMethod cloned existing statement
                vc_136464.getTreeBuilder();
                // MethodAssertGenerator build local variable
                Object o_42_0 = errors.get(4).toString();
                org.junit.Assert.fail("tracksErrorsWhenRequested_cf696852_cf698946 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("tracksErrorsWhenRequested_cf696852_cf698946_failAssert19_literalMutation700815 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#tracksErrorsWhenRequested */
    @org.junit.Test(timeout = 10000)
    public void tracksErrorsWhenRequested_cf696865_failAssert22_literalMutation699707_cf700465_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_16_1 = 4;
                java.lang.String html = "<p>One</p href=\'no\'><!DOCTYPE html>&arr0h;<font /><br /><foo";
                // MethodAssertGenerator build local variable
                Object o_4_0 = html;
                org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser().setTrackErrors(500);
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com", parser);
                java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
                // MethodAssertGenerator build local variable
                Object o_9_0 = errors.size();
                // MethodAssertGenerator build local variable
                Object o_16_0 = o_9_0;
                // MethodAssertGenerator build local variable
                Object o_11_0 = errors.get(0).toString();
                // MethodAssertGenerator build local variable
                Object o_22_0 = o_11_0;
                // MethodAssertGenerator build local variable
                Object o_14_0 = errors.get(1).toString();
                // MethodAssertGenerator build local variable
                Object o_28_0 = o_14_0;
                // MethodAssertGenerator build local variable
                Object o_17_0 = errors.get(2).toString();
                // MethodAssertGenerator build local variable
                Object o_34_0 = o_17_0;
                // MethodAssertGenerator build local variable
                Object o_20_0 = errors.get(3).toString();
                // MethodAssertGenerator build local variable
                Object o_40_0 = o_20_0;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_136469 = (org.jsoup.parser.Parser)null;
                // StatementAdderOnAssert create random local variable
                boolean vc_137088 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_137086 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_137084 = (org.jsoup.parser.Parser)null;
                // StatementAdderMethod cloned existing statement
                vc_137084.unescapeEntities(vc_137086, vc_137088);
                // MethodAssertGenerator build local variable
                Object o_52_0 = vc_136469;
                // StatementAdderMethod cloned existing statement
                vc_136469.getErrors();
                // MethodAssertGenerator build local variable
                Object o_27_0 = errors.get(4).toString();
                org.junit.Assert.fail("tracksErrorsWhenRequested_cf696865 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("tracksErrorsWhenRequested_cf696865_failAssert22_literalMutation699707_cf700465 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#tracksErrorsWhenRequested */
    @org.junit.Test(timeout = 10000)
    public void tracksErrorsWhenRequested_cf696855_failAssert23_literalMutation699711_failAssert10_literalMutation700794() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "<span>Hello <div>there</div> <span>now</span></span>";
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(html, "<span>Hello <div>there</div> <span>now</span></span>");
                org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser().setTrackErrors(500);
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com", parser);
                java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
                // MethodAssertGenerator build local variable
                Object o_9_0 = errors.size();
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_9_0, 0);
                // MethodAssertGenerator build local variable
                Object o_11_0 = errors.get(0).toString();
                // MethodAssertGenerator build local variable
                Object o_14_0 = errors.get(1).toString();
                // MethodAssertGenerator build local variable
                Object o_17_0 = errors.get(2).toString();
                // MethodAssertGenerator build local variable
                Object o_20_0 = errors.get(3).toString();
                // StatementAdderOnAssert create random local variable
                boolean vc_136468 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_136466 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                parser.unescapeEntities(vc_136466, vc_136468);
                // MethodAssertGenerator build local variable
                Object o_29_0 = errors.get(4).toString();
                org.junit.Assert.fail("tracksErrorsWhenRequested_cf696855 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("tracksErrorsWhenRequested_cf696855_failAssert23_literalMutation699711 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#tracksLimitedErrorsWhenRequested */
    @org.junit.Test(timeout = 10000)
    public void tracksLimitedErrorsWhenRequested_cf700854() {
        java.lang.String html = "<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo";
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser().setTrackErrors(3);
        org.jsoup.nodes.Document doc = parser.parseInput(html, "http://example.com");
        java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
        org.junit.Assert.assertEquals(3, errors.size());
        org.junit.Assert.assertEquals("20: Attributes incorrectly present on end tag", errors.get(0).toString());
        org.junit.Assert.assertEquals("35: Unexpected token [Doctype] when in state [InBody]", errors.get(1).toString());
        // StatementAdderOnAssert create random local variable
        boolean vc_137150 = false;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(vc_137150);
        // StatementAddOnAssert local variable replacement
        java.lang.String out = doc.body().html();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(out, "<p>One</p>&amp;arrgh;\n<font></font>\n<br>");
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_137146 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_137146);
        // AssertGenerator replace invocation
        java.lang.String o_tracksLimitedErrorsWhenRequested_cf700854__25 = // StatementAdderMethod cloned existing statement
vc_137146.unescapeEntities(out, vc_137150);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_tracksLimitedErrorsWhenRequested_cf700854__25, "<p>One</p>&arrgh;\n<font></font>\n<br>");
        org.junit.Assert.assertEquals("36: Invalid character reference: invalid named referenece 'arrgh'", errors.get(2).toString());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#tracksLimitedErrorsWhenRequested */
    @org.junit.Test(timeout = 10000)
    public void tracksLimitedErrorsWhenRequested_cf700852_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo";
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser().setTrackErrors(3);
            org.jsoup.nodes.Document doc = parser.parseInput(html, "http://example.com");
            java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = errors.size();
            // MethodAssertGenerator build local variable
            Object o_11_0 = errors.get(0).toString();
            // MethodAssertGenerator build local variable
            Object o_14_0 = errors.get(1).toString();
            // StatementAdderOnAssert create random local variable
            boolean vc_137150 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_137148 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_137146 = (org.jsoup.parser.Parser)null;
            // StatementAdderMethod cloned existing statement
            vc_137146.unescapeEntities(vc_137148, vc_137150);
            // MethodAssertGenerator build local variable
            Object o_25_0 = errors.get(2).toString();
            org.junit.Assert.fail("tracksLimitedErrorsWhenRequested_cf700852 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#tracksLimitedErrorsWhenRequested */
    @org.junit.Test(timeout = 10000)
    public void tracksLimitedErrorsWhenRequested_cf701128() {
        java.lang.String html = "<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo";
        org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser().setTrackErrors(3);
        org.jsoup.nodes.Document doc = parser.parseInput(html, "http://example.com");
        java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
        org.junit.Assert.assertEquals(3, errors.size());
        org.junit.Assert.assertEquals("20: Attributes incorrectly present on end tag", errors.get(0).toString());
        org.junit.Assert.assertEquals("35: Unexpected token [Doctype] when in state [InBody]", errors.get(1).toString());
        // StatementAdderOnAssert create null value
        org.jsoup.parser.Parser vc_137189 = (org.jsoup.parser.Parser)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_137189);
        // AssertGenerator replace invocation
        org.jsoup.parser.Parser o_tracksLimitedErrorsWhenRequested_cf701128__19 = // StatementAdderMethod cloned existing statement
vc_137189.htmlParser();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Parser)o_tracksLimitedErrorsWhenRequested_cf701128__19).isTrackErrors());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((org.jsoup.parser.Parser)o_tracksLimitedErrorsWhenRequested_cf701128__19).getErrors());
        org.junit.Assert.assertEquals("36: Invalid character reference: invalid named referenece 'arrgh'", errors.get(2).toString());
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#tracksLimitedErrorsWhenRequested */
    @org.junit.Test(timeout = 10000)
    public void tracksLimitedErrorsWhenRequested_cf701132_failAssert5_literalMutation704006_cf704073_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_32_1 = 0;
                // MethodAssertGenerator build local variable
                Object o_16_1 = 3;
                java.lang.String html = "<p>One</p href=\'no\'><!DOCTYPE html>&arrgh;<fnt /><br /><foo";
                // MethodAssertGenerator build local variable
                Object o_4_0 = html;
                org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser().setTrackErrors(3);
                org.jsoup.nodes.Document doc = parser.parseInput(html, "http://example.com");
                java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
                // MethodAssertGenerator build local variable
                Object o_9_0 = errors.size();
                // MethodAssertGenerator build local variable
                Object o_16_0 = o_9_0;
                // MethodAssertGenerator build local variable
                Object o_11_0 = errors.get(0).toString();
                // MethodAssertGenerator build local variable
                Object o_22_0 = o_11_0;
                // MethodAssertGenerator build local variable
                Object o_14_0 = errors.get(1).toString();
                // MethodAssertGenerator build local variable
                Object o_28_0 = o_14_0;
                // StatementAdderOnAssert create literal from method
                int int_vc_21009 = 0;
                // MethodAssertGenerator build local variable
                Object o_32_0 = int_vc_21009;
                // StatementAdderOnAssert create null value
                org.jsoup.parser.Parser vc_137191 = (org.jsoup.parser.Parser)null;
                // StatementAdderOnAssert create random local variable
                boolean vc_137708 = true;
                // StatementAdderOnAssert create null value
                java.lang.String vc_137706 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                vc_137191.unescapeEntities(vc_137706, vc_137708);
                // MethodAssertGenerator build local variable
                Object o_42_0 = vc_137191;
                // StatementAdderMethod cloned existing statement
                vc_137191.setTrackErrors(int_vc_21009);
                // MethodAssertGenerator build local variable
                Object o_23_0 = errors.get(2).toString();
                org.junit.Assert.fail("tracksLimitedErrorsWhenRequested_cf701132 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("tracksLimitedErrorsWhenRequested_cf701132_failAssert5_literalMutation704006_cf704073 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.parser.HtmlParserTest#tracksLimitedErrorsWhenRequested */
    @org.junit.Test(timeout = 10000)
    public void tracksLimitedErrorsWhenRequested_cf700854_literalMutation703278_failAssert31_literalMutation705156() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<span>Hello <div>there</div> <span>now</span></span>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<span>Hello <div>there</div> <span>now</span></span>");
            org.jsoup.parser.Parser parser = org.jsoup.parser.Parser.htmlParser().setTrackErrors(3);
            org.jsoup.nodes.Document doc = parser.parseInput(html, "http://example.com");
            java.util.List<org.jsoup.parser.ParseError> errors = parser.getErrors();
            // MethodAssertGenerator build local variable
            Object o_9_0 = errors.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_9_0, 0);
            // MethodAssertGenerator build local variable
            Object o_11_0 = errors.get(0).toString();
            // MethodAssertGenerator build local variable
            Object o_14_0 = errors.get(1).toString();
            // StatementAdderOnAssert create random local variable
            boolean vc_137150 = false;
            // MethodAssertGenerator build local variable
            Object o_19_0 = vc_137150;
            // StatementAddOnAssert local variable replacement
            java.lang.String out = doc.body().html();
            // MethodAssertGenerator build local variable
            Object o_25_0 = out;
            // StatementAdderOnAssert create null value
            org.jsoup.parser.Parser vc_137146 = (org.jsoup.parser.Parser)null;
            // MethodAssertGenerator build local variable
            Object o_29_0 = vc_137146;
            // AssertGenerator replace invocation
            java.lang.String o_tracksLimitedErrorsWhenRequested_cf700854__25 = // StatementAdderMethod cloned existing statement
vc_137146.unescapeEntities(out, vc_137150);
            // MethodAssertGenerator build local variable
            Object o_33_0 = o_tracksLimitedErrorsWhenRequested_cf700854__25;
            // MethodAssertGenerator build local variable
            Object o_35_0 = errors.get(2).toString();
            org.junit.Assert.fail("tracksLimitedErrorsWhenRequested_cf700854_literalMutation703278 should have thrown Exception");
        } catch (java.lang.Exception eee) {
        }
    }
}

