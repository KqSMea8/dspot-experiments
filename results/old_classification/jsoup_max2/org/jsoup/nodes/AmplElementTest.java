

package org.jsoup.nodes;


/**
 * Tests for Element (DOM stuff mostly).
 *
 * @author Jonathan Hedley
 */
public class AmplElementTest {
    private java.lang.String reference = "<div id=div1><p>Hello</p><p>Another <b>element</b></p><div id=div2><img src=foo.png></div></div>";

    @org.junit.Test
    public void getElementsByTagName() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
        java.util.List<org.jsoup.nodes.Element> divs = doc.getElementsByTag("div");
        org.junit.Assert.assertEquals(2, divs.size());
        org.junit.Assert.assertEquals("div1", divs.get(0).id());
        org.junit.Assert.assertEquals("div2", divs.get(1).id());
        java.util.List<org.jsoup.nodes.Element> ps = doc.getElementsByTag("p");
        org.junit.Assert.assertEquals(2, ps.size());
        org.junit.Assert.assertEquals("Hello", ((org.jsoup.nodes.TextNode) (ps.get(0).childNode(0))).getWholeText());
        org.junit.Assert.assertEquals("Another ", ((org.jsoup.nodes.TextNode) (ps.get(1).childNode(0))).getWholeText());
        java.util.List<org.jsoup.nodes.Element> ps2 = doc.getElementsByTag("P");
        org.junit.Assert.assertEquals(ps, ps2);
        java.util.List<org.jsoup.nodes.Element> imgs = doc.getElementsByTag("img");
        org.junit.Assert.assertEquals("foo.png", imgs.get(0).attr("src"));
        java.util.List<org.jsoup.nodes.Element> empty = doc.getElementsByTag("wtf");
        org.junit.Assert.assertEquals(0, empty.size());
    }

    @org.junit.Test
    public void getNamespacedElementsByTag() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><abc:def id=1>Hello</abc:def></div>");
        org.jsoup.select.Elements els = doc.getElementsByTag("abc:def");
        org.junit.Assert.assertEquals(1, els.size());
        org.junit.Assert.assertEquals("1", els.first().id());
        org.junit.Assert.assertEquals("abc:def", els.first().tagName());
    }

    @org.junit.Test
    public void testGetElementById() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
        org.jsoup.nodes.Element div = doc.getElementById("div1");
        org.junit.Assert.assertEquals("div1", div.id());
        org.junit.Assert.assertNull(doc.getElementById("none"));
        org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>");
        org.jsoup.nodes.Element div2 = doc2.getElementById("2");
        org.junit.Assert.assertEquals("div", div2.tagName());// not the span
        
        org.jsoup.nodes.Element span = div2.child(0).getElementById("2");// called from <p> context should be span
        
        org.junit.Assert.assertEquals("span", span.tagName());
    }

    @org.junit.Test
    public void testGetText() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
        org.junit.Assert.assertEquals("Hello Another element", doc.text());
        org.junit.Assert.assertEquals("Another element", doc.getElementsByTag("p").get(1).text());
    }

    @org.junit.Test
    public void testGetChildText() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>Hello <b>there</b> now");
        org.jsoup.nodes.Element p = doc.select("p").first();
        org.junit.Assert.assertEquals("Hello there now", p.text());
        org.junit.Assert.assertEquals("Hello now", p.ownText());
    }

    @org.junit.Test
    public void testNormalisesText() {
        java.lang.String h = "<p>Hello<p>There.</p> \n <p>Here <b>is</b> \n s<b>om</b>e text.";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        java.lang.String text = doc.text();
        org.junit.Assert.assertEquals("Hello There. Here is some text.", text);
    }

    @org.junit.Test
    public void testKeepsPreText() {
        java.lang.String h = "<p>Hello \n \n there.</p> <div><pre>  What\'s \n\n  that?</pre>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("Hello there.   What\'s \n\n  that?", doc.text());
    }

    @org.junit.Test
    public void testKeepsPreTextInCode() {
        java.lang.String h = "<pre><code>code\n\ncode</code></pre>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("code\n\ncode", doc.text());
        org.junit.Assert.assertEquals("<pre><code>code\n\ncode</code></pre>", doc.body().html());
    }

    @org.junit.Test
    public void testBrHasSpace() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>Hello<br>there</p>");
        org.junit.Assert.assertEquals("Hello there", doc.text());
        org.junit.Assert.assertEquals("Hello there", doc.select("p").first().ownText());
        doc = org.jsoup.Jsoup.parse("<p>Hello <br> there</p>");
        org.junit.Assert.assertEquals("Hello there", doc.text());
    }

    @org.junit.Test
    public void testGetSiblings() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>");
        org.jsoup.nodes.Element p = doc.getElementById("1");
        org.junit.Assert.assertEquals("there", p.text());
        org.junit.Assert.assertEquals("Hello", p.previousElementSibling().text());
        org.junit.Assert.assertEquals("this", p.nextElementSibling().text());
        org.junit.Assert.assertEquals("Hello", p.firstElementSibling().text());
        org.junit.Assert.assertEquals("element", p.lastElementSibling().text());
    }

    @org.junit.Test
    public void testGetSiblingsWithDuplicateContent() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>");
        org.jsoup.nodes.Element p = doc.getElementById("1");
        org.junit.Assert.assertEquals("there", p.text());
        org.junit.Assert.assertEquals("Hello", p.previousElementSibling().text());
        org.junit.Assert.assertEquals("this", p.nextElementSibling().text());
        org.junit.Assert.assertEquals("this", p.nextElementSibling().nextElementSibling().text());
        org.junit.Assert.assertEquals("is", p.nextElementSibling().nextElementSibling().nextElementSibling().text());
        org.junit.Assert.assertEquals("Hello", p.firstElementSibling().text());
        org.junit.Assert.assertEquals("element", p.lastElementSibling().text());
    }

    @org.junit.Test
    public void testGetParents() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello <span>there</span></div>");
        org.jsoup.nodes.Element span = doc.select("span").first();
        org.jsoup.select.Elements parents = span.parents();
        org.junit.Assert.assertEquals(4, parents.size());
        org.junit.Assert.assertEquals("p", parents.get(0).tagName());
        org.junit.Assert.assertEquals("div", parents.get(1).tagName());
        org.junit.Assert.assertEquals("body", parents.get(2).tagName());
        org.junit.Assert.assertEquals("html", parents.get(3).tagName());
    }

    @org.junit.Test
    public void testElementSiblingIndex() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One</p>...<p>Two</p>...<p>Three</p>");
        org.jsoup.select.Elements ps = doc.select("p");
        org.junit.Assert.assertTrue((0 == (ps.get(0).elementSiblingIndex())));
        org.junit.Assert.assertTrue((1 == (ps.get(1).elementSiblingIndex())));
        org.junit.Assert.assertTrue((2 == (ps.get(2).elementSiblingIndex())));
    }

    @org.junit.Test
    public void testElementSiblingIndexSameContent() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One</p>...<p>One</p>...<p>One</p>");
        org.jsoup.select.Elements ps = doc.select("p");
        org.junit.Assert.assertTrue((0 == (ps.get(0).elementSiblingIndex())));
        org.junit.Assert.assertTrue((1 == (ps.get(1).elementSiblingIndex())));
        org.junit.Assert.assertTrue((2 == (ps.get(2).elementSiblingIndex())));
    }

    @org.junit.Test
    public void testGetElementsWithClass() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>");
        java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByClass("mellow");
        org.junit.Assert.assertEquals(2, els.size());
        org.junit.Assert.assertEquals("div", els.get(0).tagName());
        org.junit.Assert.assertEquals("span", els.get(1).tagName());
        java.util.List<org.jsoup.nodes.Element> els2 = doc.getElementsByClass("yellow");
        org.junit.Assert.assertEquals(2, els2.size());
        org.junit.Assert.assertEquals("div", els2.get(0).tagName());
        org.junit.Assert.assertEquals("b", els2.get(1).tagName());
        java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByClass("solo");
        org.junit.Assert.assertEquals(0, none.size());
    }

    @org.junit.Test
    public void testGetElementsWithAttribute() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div style='bold'><p title=qux><p><b style></b></p></div>");
        java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("style");
        org.junit.Assert.assertEquals(2, els.size());
        org.junit.Assert.assertEquals("div", els.get(0).tagName());
        org.junit.Assert.assertEquals("b", els.get(1).tagName());
        java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByAttribute("class");
        org.junit.Assert.assertEquals(0, none.size());
    }

    @org.junit.Test
    public void testGetElementsWithAttributeDash() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<meta http-equiv=content-type value=utf8 id=1> <meta name=foo content=bar id=2> <div http-equiv=content-type value=utf8 id=3>");
        org.jsoup.select.Elements meta = doc.select("meta[http-equiv=content-type], meta[charset]");
        org.junit.Assert.assertEquals(1, meta.size());
        org.junit.Assert.assertEquals("1", meta.first().id());
    }

    @org.junit.Test
    public void testGetElementsWithAttributeValue() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div style='bold'><p><p><b style></b></p></div>");
        java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttributeValue("style", "bold");
        org.junit.Assert.assertEquals(1, els.size());
        org.junit.Assert.assertEquals("div", els.get(0).tagName());
        java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByAttributeValue("style", "none");
        org.junit.Assert.assertEquals(0, none.size());
    }

    @org.junit.Test
    public void testClassDomMethods() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
        java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
        org.jsoup.nodes.Element span = els.get(0);
        org.junit.Assert.assertEquals("mellow yellow", span.className());
        org.junit.Assert.assertTrue(span.hasClass("mellow"));
        org.junit.Assert.assertTrue(span.hasClass("yellow"));
        java.util.Set<java.lang.String> classes = span.classNames();
        org.junit.Assert.assertEquals(2, classes.size());
        org.junit.Assert.assertTrue(classes.contains("mellow"));
        org.junit.Assert.assertTrue(classes.contains("yellow"));
        org.junit.Assert.assertEquals("", doc.className());
        classes = doc.classNames();
        org.junit.Assert.assertEquals(0, classes.size());
        org.junit.Assert.assertFalse(doc.hasClass("mellow"));
    }

    @org.junit.Test
    public void testHasClassDomMethods() {
        org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf("a");
        org.jsoup.nodes.Attributes attribs = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(tag, "", attribs);
        attribs.put("class", "toto");
        boolean hasClass = el.hasClass("toto");
        org.junit.Assert.assertTrue(hasClass);
        attribs.put("class", " toto");
        hasClass = el.hasClass("toto");
        org.junit.Assert.assertTrue(hasClass);
        attribs.put("class", "toto ");
        hasClass = el.hasClass("toto");
        org.junit.Assert.assertTrue(hasClass);
        attribs.put("class", "\ttoto ");
        hasClass = el.hasClass("toto");
        org.junit.Assert.assertTrue(hasClass);
        attribs.put("class", "  toto ");
        hasClass = el.hasClass("toto");
        org.junit.Assert.assertTrue(hasClass);
        attribs.put("class", "ab");
        hasClass = el.hasClass("toto");
        org.junit.Assert.assertFalse(hasClass);
        attribs.put("class", "     ");
        hasClass = el.hasClass("toto");
        org.junit.Assert.assertFalse(hasClass);
        attribs.put("class", "tototo");
        hasClass = el.hasClass("toto");
        org.junit.Assert.assertFalse(hasClass);
        attribs.put("class", "raulpismuth  ");
        hasClass = el.hasClass("raulpismuth");
        org.junit.Assert.assertTrue(hasClass);
        attribs.put("class", " abcd  raulpismuth efgh ");
        hasClass = el.hasClass("raulpismuth");
        org.junit.Assert.assertTrue(hasClass);
        attribs.put("class", " abcd efgh raulpismuth");
        hasClass = el.hasClass("raulpismuth");
        org.junit.Assert.assertTrue(hasClass);
        attribs.put("class", " abcd efgh raulpismuth ");
        hasClass = el.hasClass("raulpismuth");
        org.junit.Assert.assertTrue(hasClass);
    }

    @org.junit.Test
    public void testClassUpdates() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
        org.jsoup.nodes.Element div = doc.select("div").first();
        div.addClass("green");
        org.junit.Assert.assertEquals("mellow yellow green", div.className());
        div.removeClass("red");// noop
        
        div.removeClass("yellow");
        org.junit.Assert.assertEquals("mellow green", div.className());
        div.toggleClass("green").toggleClass("red");
        org.junit.Assert.assertEquals("mellow red", div.className());
    }

    @org.junit.Test
    public void testOuterHtml() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there");
        org.junit.Assert.assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\"><p><!-- comment -->Hello</p><p>there</p></div></body></html>", org.jsoup.TextUtil.stripNewlines(doc.outerHtml()));
    }

    @org.junit.Test
    public void testInnerHtml() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>\n <p>Hello</p> </div>");
        org.junit.Assert.assertEquals("<p>Hello</p>", doc.getElementsByTag("div").get(0).html());
    }

    @org.junit.Test
    public void testFormatHtml() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
        org.junit.Assert.assertEquals("<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>Hello <span>jsoup <span>users</span></span></p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>", doc.html());
    }

    @org.junit.Test
    public void testFormatOutline() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
        doc.outputSettings().outline(true);
        org.junit.Assert.assertEquals("<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>\n    Hello \n    <span>\n     jsoup \n     <span>users</span>\n    </span>\n   </p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>", doc.html());
    }

    @org.junit.Test
    public void testSetIndent() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello\nthere</p></div>");
        doc.outputSettings().indentAmount(0);
        org.junit.Assert.assertEquals("<html>\n<head></head>\n<body>\n<div>\n<p>Hello there</p>\n</div>\n</body>\n</html>", doc.html());
    }

    @org.junit.Test
    public void testNotPretty() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>");
        doc.outputSettings().prettyPrint(false);
        org.junit.Assert.assertEquals("<html><head></head><body><div>   \n<p>Hello\n there\n</p></div></body></html>", doc.html());
        org.jsoup.nodes.Element div = doc.select("div").first();
        org.junit.Assert.assertEquals("   \n<p>Hello\n there\n</p>", div.html());
    }

    @org.junit.Test
    public void testEmptyElementFormatHtml() {
        // don't put newlines into empty blocks
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<section><div></div></section>");
        org.junit.Assert.assertEquals("<section>\n <div></div>\n</section>", doc.select("section").first().outerHtml());
    }

    @org.junit.Test
    public void testNoIndentOnScriptAndStyle() {
        // don't newline+indent closing </script> and </style> tags
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>one\ntwo</script>\n<style>three\nfour</style>");
        org.junit.Assert.assertEquals("<script>one\ntwo</script> \n<style>three\nfour</style>", doc.head().html());
    }

    @org.junit.Test
    public void testContainerOutput() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Hello there</title> <div><p>Hello</p><p>there</p></div> <div>Another</div>");
        org.junit.Assert.assertEquals("<title>Hello there</title>", doc.select("title").first().outerHtml());
        org.junit.Assert.assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div>", doc.select("div").first().outerHtml());
        org.junit.Assert.assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div> \n<div>\n Another\n</div>", doc.select("body").first().html());
    }

    @org.junit.Test
    public void testSetText() {
        java.lang.String h = "<div id=1>Hello <p>there <b>now</b></p></div>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("Hello there now", doc.text());// need to sort out node whitespace
        
        org.junit.Assert.assertEquals("there now", doc.select("p").get(0).text());
        org.jsoup.nodes.Element div = doc.getElementById("1").text("Gone");
        org.junit.Assert.assertEquals("Gone", div.text());
        org.junit.Assert.assertEquals(0, doc.select("p").size());
    }

    @org.junit.Test
    public void testAddNewElement() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
        org.jsoup.nodes.Element div = doc.getElementById("1");
        div.appendElement("p").text("there");
        div.appendElement("P").attr("CLASS", "second").text("now");
        // manually specifying tag and attributes should now preserve case, regardless of parse mode
        org.junit.Assert.assertEquals("<html><head></head><body><div id=\"1\"><p>Hello</p><p>there</p><P CLASS=\"second\">now</P></div></body></html>", org.jsoup.TextUtil.stripNewlines(doc.html()));
        // check sibling index (with short circuit on reindexChildren):
        org.jsoup.select.Elements ps = doc.select("p");
        for (int i = 0; i < (ps.size()); i++) {
            org.junit.Assert.assertEquals(i, ps.get(i).siblingIndex);
        }
    }

    @org.junit.Test
    public void testAddBooleanAttribute() {
        org.jsoup.nodes.Element div = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("div"), "");
        div.attr("true", true);
        div.attr("false", "value");
        div.attr("false", false);
        org.junit.Assert.assertTrue(div.hasAttr("true"));
        org.junit.Assert.assertEquals("", div.attr("true"));
        java.util.List<org.jsoup.nodes.Attribute> attributes = div.attributes().asList();
        org.junit.Assert.assertEquals("There should be one attribute", 1, attributes.size());
        org.junit.Assert.assertTrue("Attribute should be boolean", ((attributes.get(0)) instanceof org.jsoup.nodes.BooleanAttribute));
        org.junit.Assert.assertFalse(div.hasAttr("false"));
        org.junit.Assert.assertEquals("<div true></div>", div.outerHtml());
    }

    @org.junit.Test
    public void testAppendRowToTable() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
        org.jsoup.nodes.Element table = doc.select("tbody").first();
        table.append("<tr><td>2</td></tr>");
        org.junit.Assert.assertEquals("<table><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void testPrependRowToTable() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
        org.jsoup.nodes.Element table = doc.select("tbody").first();
        table.prepend("<tr><td>2</td></tr>");
        org.junit.Assert.assertEquals("<table><tbody><tr><td>2</td></tr><tr><td>1</td></tr></tbody></table>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
        // check sibling index (reindexChildren):
        org.jsoup.select.Elements ps = doc.select("tr");
        for (int i = 0; i < (ps.size()); i++) {
            org.junit.Assert.assertEquals(i, ps.get(i).siblingIndex);
        }
    }

    @org.junit.Test
    public void testPrependElement() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
        org.jsoup.nodes.Element div = doc.getElementById("1");
        div.prependElement("p").text("Before");
        org.junit.Assert.assertEquals("Before", div.child(0).text());
        org.junit.Assert.assertEquals("Hello", div.child(1).text());
    }

    @org.junit.Test
    public void testAddNewText() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
        org.jsoup.nodes.Element div = doc.getElementById("1");
        div.appendText(" there & now >");
        org.junit.Assert.assertEquals("<p>Hello</p> there &amp; now &gt;", org.jsoup.TextUtil.stripNewlines(div.html()));
    }

    @org.junit.Test
    public void testPrependText() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
        org.jsoup.nodes.Element div = doc.getElementById("1");
        div.prependText("there & now > ");
        org.junit.Assert.assertEquals("there & now > Hello", div.text());
        org.junit.Assert.assertEquals("there &amp; now &gt; <p>Hello</p>", org.jsoup.TextUtil.stripNewlines(div.html()));
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testThrowsOnAddNullText() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
        org.jsoup.nodes.Element div = doc.getElementById("1");
        div.appendText(null);
    }

    @org.junit.Test(expected = java.lang.IllegalArgumentException.class)
    public void testThrowsOnPrependNullText() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
        org.jsoup.nodes.Element div = doc.getElementById("1");
        div.prependText(null);
    }

    @org.junit.Test
    public void testAddNewHtml() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
        org.jsoup.nodes.Element div = doc.getElementById("1");
        div.append("<p>there</p><p>now</p>");
        org.junit.Assert.assertEquals("<p>Hello</p><p>there</p><p>now</p>", org.jsoup.TextUtil.stripNewlines(div.html()));
        // check sibling index (no reindexChildren):
        org.jsoup.select.Elements ps = doc.select("p");
        for (int i = 0; i < (ps.size()); i++) {
            org.junit.Assert.assertEquals(i, ps.get(i).siblingIndex);
        }
    }

    @org.junit.Test
    public void testPrependNewHtml() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
        org.jsoup.nodes.Element div = doc.getElementById("1");
        div.prepend("<p>there</p><p>now</p>");
        org.junit.Assert.assertEquals("<p>there</p><p>now</p><p>Hello</p>", org.jsoup.TextUtil.stripNewlines(div.html()));
        // check sibling index (reindexChildren):
        org.jsoup.select.Elements ps = doc.select("p");
        for (int i = 0; i < (ps.size()); i++) {
            org.junit.Assert.assertEquals(i, ps.get(i).siblingIndex);
        }
    }

    @org.junit.Test
    public void testSetHtml() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
        org.jsoup.nodes.Element div = doc.getElementById("1");
        div.html("<p>there</p><p>now</p>");
        org.junit.Assert.assertEquals("<p>there</p><p>now</p>", org.jsoup.TextUtil.stripNewlines(div.html()));
    }

    @org.junit.Test
    public void testSetHtmlTitle() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head id=2><title id=1></title></head></html>");
        org.jsoup.nodes.Element title = doc.getElementById("1");
        title.html("good");
        org.junit.Assert.assertEquals("good", title.html());
        title.html("<i>bad</i>");
        org.junit.Assert.assertEquals("&lt;i&gt;bad&lt;/i&gt;", title.html());
        org.jsoup.nodes.Element head = doc.getElementById("2");
        head.html("<title><i>bad</i></title>");
        org.junit.Assert.assertEquals("<title>&lt;i&gt;bad&lt;/i&gt;</title>", head.html());
    }

    @org.junit.Test
    public void testWrap() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
        org.jsoup.nodes.Element p = doc.select("p").first();
        p.wrap("<div class='head'></div>");
        org.junit.Assert.assertEquals("<div><div class=\"head\"><p>Hello</p></div><p>There</p></div>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
        org.jsoup.nodes.Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
        org.junit.Assert.assertEquals("<div><div class=\"head\"><div><div class=\"foo\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
        org.junit.Assert.assertEquals(ret, p);
    }

    @org.junit.Test
    public void before() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
        org.jsoup.nodes.Element p1 = doc.select("p").first();
        p1.before("<div>one</div><div>two</div>");
        org.junit.Assert.assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>There</p></div>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
        doc.select("p").last().before("<p>Three</p><!-- four -->");
        org.junit.Assert.assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>Three</p><!-- four --><p>There</p></div>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void after() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
        org.jsoup.nodes.Element p1 = doc.select("p").first();
        p1.after("<div>one</div><div>two</div>");
        org.junit.Assert.assertEquals("<div><p>Hello</p><div>one</div><div>two</div><p>There</p></div>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
        doc.select("p").last().after("<p>Three</p><!-- four -->");
        org.junit.Assert.assertEquals("<div><p>Hello</p><div>one</div><div>two</div><p>There</p><p>Three</p><!-- four --></div>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void testWrapWithRemainder() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p></div>");
        org.jsoup.nodes.Element p = doc.select("p").first();
        p.wrap("<div class='head'></div><p>There!</p>");
        org.junit.Assert.assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void testHasText() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p></p></div>");
        org.jsoup.nodes.Element div = doc.select("div").first();
        org.jsoup.select.Elements ps = doc.select("p");
        org.junit.Assert.assertTrue(div.hasText());
        org.junit.Assert.assertTrue(ps.first().hasText());
        org.junit.Assert.assertFalse(ps.last().hasText());
    }

    @org.junit.Test
    public void dataset() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
        org.jsoup.nodes.Element div = doc.select("div").first();
        java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
        org.jsoup.nodes.Attributes attributes = div.attributes();
        // size, get, set, add, remove
        org.junit.Assert.assertEquals(2, dataset.size());
        org.junit.Assert.assertEquals("jsoup", dataset.get("name"));
        org.junit.Assert.assertEquals("jar", dataset.get("package"));
        dataset.put("name", "jsoup updated");
        dataset.put("language", "java");
        dataset.remove("package");
        org.junit.Assert.assertEquals(2, dataset.size());
        org.junit.Assert.assertEquals(4, attributes.size());
        org.junit.Assert.assertEquals("jsoup updated", attributes.get("data-name"));
        org.junit.Assert.assertEquals("jsoup updated", dataset.get("name"));
        org.junit.Assert.assertEquals("java", attributes.get("data-language"));
        org.junit.Assert.assertEquals("java", dataset.get("language"));
        attributes.put("data-food", "bacon");
        org.junit.Assert.assertEquals(3, dataset.size());
        org.junit.Assert.assertEquals("bacon", dataset.get("food"));
        attributes.put("data-", "empty");
        org.junit.Assert.assertEquals(null, dataset.get(""));// data- is not a data attribute
        
        org.jsoup.nodes.Element p = doc.select("p").first();
        org.junit.Assert.assertEquals(0, p.dataset().size());
    }

    @org.junit.Test
    public void parentlessToString() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
        org.jsoup.nodes.Element img = doc.select("img").first();
        org.junit.Assert.assertEquals("<img src=\"foo\">", img.toString());
        img.remove();// lost its parent
        
        org.junit.Assert.assertEquals("<img src=\"foo\">", img.toString());
    }

    @org.junit.Test
    public void testClone() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p><span>Two</div>");
        org.jsoup.nodes.Element p = doc.select("p").get(1);
        org.jsoup.nodes.Element clone = p.clone();
        org.junit.Assert.assertNull(clone.parent());// should be orphaned
        
        org.junit.Assert.assertEquals(0, clone.siblingIndex);
        org.junit.Assert.assertEquals(1, p.siblingIndex);
        org.junit.Assert.assertNotNull(p.parent());
        clone.append("<span>Three");
        org.junit.Assert.assertEquals("<p><span>Two</span><span>Three</span></p>", org.jsoup.TextUtil.stripNewlines(clone.outerHtml()));
        org.junit.Assert.assertEquals("<div><p>One</p><p><span>Two</span></p></div>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));// not modified
        
        doc.body().appendChild(clone);// adopt
        
        org.junit.Assert.assertNotNull(clone.parent());
        org.junit.Assert.assertEquals("<div><p>One</p><p><span>Two</span></p></div><p><span>Two</span><span>Three</span></p>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void testClonesClassnames() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='one two'></div>");
        org.jsoup.nodes.Element div = doc.select("div").first();
        java.util.Set<java.lang.String> classes = div.classNames();
        org.junit.Assert.assertEquals(2, classes.size());
        org.junit.Assert.assertTrue(classes.contains("one"));
        org.junit.Assert.assertTrue(classes.contains("two"));
        org.jsoup.nodes.Element copy = div.clone();
        java.util.Set<java.lang.String> copyClasses = copy.classNames();
        org.junit.Assert.assertEquals(2, copyClasses.size());
        org.junit.Assert.assertTrue(copyClasses.contains("one"));
        org.junit.Assert.assertTrue(copyClasses.contains("two"));
        copyClasses.add("three");
        copyClasses.remove("one");
        org.junit.Assert.assertTrue(classes.contains("one"));
        org.junit.Assert.assertFalse(classes.contains("three"));
        org.junit.Assert.assertFalse(copyClasses.contains("one"));
        org.junit.Assert.assertTrue(copyClasses.contains("three"));
        org.junit.Assert.assertEquals("", div.html());
        org.junit.Assert.assertEquals("", copy.html());
    }

    @org.junit.Test
    public void testTagNameSet() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><i>Hello</i>");
        doc.select("i").first().tagName("em");
        org.junit.Assert.assertEquals(0, doc.select("i").size());
        org.junit.Assert.assertEquals(1, doc.select("em").size());
        org.junit.Assert.assertEquals("<em>Hello</em>", doc.select("div").first().html());
    }

    @org.junit.Test
    public void testHtmlContainsOuter() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Check</title> <div>Hello there</div>");
        doc.outputSettings().indentAmount(0);
        org.junit.Assert.assertTrue(doc.html().contains(doc.select("title").outerHtml()));
        org.junit.Assert.assertTrue(doc.html().contains(doc.select("div").outerHtml()));
    }

    @org.junit.Test
    public void testGetTextNodes() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>One <span>Two</span> Three <br> Four</p>");
        java.util.List<org.jsoup.nodes.TextNode> textNodes = doc.select("p").first().textNodes();
        org.junit.Assert.assertEquals(3, textNodes.size());
        org.junit.Assert.assertEquals("One ", textNodes.get(0).text());
        org.junit.Assert.assertEquals(" Three ", textNodes.get(1).text());
        org.junit.Assert.assertEquals(" Four", textNodes.get(2).text());
        org.junit.Assert.assertEquals(0, doc.select("br").first().textNodes().size());
    }

    @org.junit.Test
    public void testManipulateTextNodes() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>One <span>Two</span> Three <br> Four</p>");
        org.jsoup.nodes.Element p = doc.select("p").first();
        java.util.List<org.jsoup.nodes.TextNode> textNodes = p.textNodes();
        textNodes.get(1).text(" three-more ");
        textNodes.get(2).splitText(3).text("-ur");
        org.junit.Assert.assertEquals("One Two three-more Fo-ur", p.text());
        org.junit.Assert.assertEquals("One three-more Fo-ur", p.ownText());
        org.junit.Assert.assertEquals(4, p.textNodes().size());// grew because of split
        
    }

    @org.junit.Test
    public void testGetDataNodes() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
        org.jsoup.nodes.Element script = doc.select("script").first();
        org.jsoup.nodes.Element style = doc.select("style").first();
        org.jsoup.nodes.Element p = doc.select("p").first();
        java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
        org.junit.Assert.assertEquals(1, scriptData.size());
        org.junit.Assert.assertEquals("One Two", scriptData.get(0).getWholeData());
        java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
        org.junit.Assert.assertEquals(1, styleData.size());
        org.junit.Assert.assertEquals("Three Four", styleData.get(0).getWholeData());
        java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
        org.junit.Assert.assertEquals(0, pData.size());
    }

    @org.junit.Test
    public void elementIsNotASiblingOfItself() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p>Two<p>Three</div>");
        org.jsoup.nodes.Element p2 = doc.select("p").get(1);
        org.junit.Assert.assertEquals("Two", p2.text());
        org.jsoup.select.Elements els = p2.siblingElements();
        org.junit.Assert.assertEquals(2, els.size());
        org.junit.Assert.assertEquals("<p>One</p>", els.get(0).outerHtml());
        org.junit.Assert.assertEquals("<p>Three</p>", els.get(1).outerHtml());
    }

    @org.junit.Test
    public void testChildThrowsIndexOutOfBoundsOnMissing() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One</p><p>Two</p></div>");
        org.jsoup.nodes.Element div = doc.select("div").first();
        org.junit.Assert.assertEquals(2, div.children().size());
        org.junit.Assert.assertEquals("One", div.child(0).text());
        try {
            div.child(3);
            org.junit.Assert.fail("Should throw index out of bounds");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
    }

    @org.junit.Test
    public void moveByAppend() {
        // test for https://github.com/jhy/jsoup/issues/239
        // can empty an element and append its children to another element
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
        org.jsoup.nodes.Element div1 = doc.select("div").get(0);
        org.jsoup.nodes.Element div2 = doc.select("div").get(1);
        org.junit.Assert.assertEquals(4, div1.childNodeSize());
        java.util.List<org.jsoup.nodes.Node> children = div1.childNodes();
        org.junit.Assert.assertEquals(4, children.size());
        div2.insertChildren(0, children);
        org.junit.Assert.assertEquals(0, children.size());// children is backed by div1.childNodes, moved, so should be 0 now
        
        org.junit.Assert.assertEquals(0, div1.childNodeSize());
        org.junit.Assert.assertEquals(4, div2.childNodeSize());
        org.junit.Assert.assertEquals("<div id=\"1\"></div>\n<div id=\"2\">\n Text \n <p>One</p> Text \n <p>Two</p>\n</div>", doc.body().html());
    }

    @org.junit.Test
    public void insertChildrenArgumentValidation() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
        org.jsoup.nodes.Element div1 = doc.select("div").get(0);
        org.jsoup.nodes.Element div2 = doc.select("div").get(1);
        java.util.List<org.jsoup.nodes.Node> children = div1.childNodes();
        try {
            div2.insertChildren(6, children);
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException e) {
        }
        try {
            div2.insertChildren((-5), children);
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException e) {
        }
        try {
            div2.insertChildren(0, null);
            org.junit.Assert.fail();
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @org.junit.Test
    public void insertChildrenAtPosition() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>");
        org.jsoup.nodes.Element div1 = doc.select("div").get(0);
        org.jsoup.select.Elements p1s = div1.select("p");
        org.jsoup.nodes.Element div2 = doc.select("div").get(1);
        org.junit.Assert.assertEquals(2, div2.childNodeSize());
        div2.insertChildren((-1), p1s);
        org.junit.Assert.assertEquals(2, div1.childNodeSize());// moved two out
        
        org.junit.Assert.assertEquals(4, div2.childNodeSize());
        org.junit.Assert.assertEquals(3, p1s.get(1).siblingIndex());// should be last
        
        java.util.List<org.jsoup.nodes.Node> els = new java.util.ArrayList<org.jsoup.nodes.Node>();
        org.jsoup.nodes.Element el1 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span1");
        org.jsoup.nodes.Element el2 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span2");
        org.jsoup.nodes.TextNode tn1 = new org.jsoup.nodes.TextNode("Text4", "");
        els.add(el1);
        els.add(el2);
        els.add(tn1);
        org.junit.Assert.assertNull(el1.parent());
        div2.insertChildren((-2), els);
        org.junit.Assert.assertEquals(div2, el1.parent());
        org.junit.Assert.assertEquals(7, div2.childNodeSize());
        org.junit.Assert.assertEquals(3, el1.siblingIndex());
        org.junit.Assert.assertEquals(4, el2.siblingIndex());
        org.junit.Assert.assertEquals(5, tn1.siblingIndex());
    }

    @org.junit.Test
    public void insertChildrenAsCopy() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
        org.jsoup.nodes.Element div1 = doc.select("div").get(0);
        org.jsoup.nodes.Element div2 = doc.select("div").get(1);
        org.jsoup.select.Elements ps = doc.select("p").clone();
        ps.first().text("One cloned");
        div2.insertChildren((-1), ps);
        org.junit.Assert.assertEquals(4, div1.childNodeSize());// not moved -- cloned
        
        org.junit.Assert.assertEquals(2, div2.childNodeSize());
        org.junit.Assert.assertEquals("<div id=\"1\">Text <p>One</p> Text <p>Two</p></div><div id=\"2\"><p>One cloned</p><p>Two</p></div>", org.jsoup.TextUtil.stripNewlines(doc.body().html()));
    }

    @org.junit.Test
    public void testCssPath() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=\"id1\">A</div><div>B</div><div class=\"c1 c2\">C</div>");
        org.jsoup.nodes.Element divA = doc.select("div").get(0);
        org.jsoup.nodes.Element divB = doc.select("div").get(1);
        org.jsoup.nodes.Element divC = doc.select("div").get(2);
        org.junit.Assert.assertEquals(divA.cssSelector(), "#id1");
        org.junit.Assert.assertEquals(divB.cssSelector(), "html > body > div:nth-child(2)");
        org.junit.Assert.assertEquals(divC.cssSelector(), "html > body > div.c1.c2");
        org.junit.Assert.assertTrue((divA == (doc.select(divA.cssSelector()).first())));
        org.junit.Assert.assertTrue((divB == (doc.select(divB.cssSelector()).first())));
        org.junit.Assert.assertTrue((divC == (doc.select(divC.cssSelector()).first())));
    }

    @org.junit.Test
    public void testClassNames() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
        org.jsoup.nodes.Element div = doc.select("div").get(0);
        org.junit.Assert.assertEquals("c1 c2", div.className());
        final java.util.Set<java.lang.String> set1 = div.classNames();
        final java.lang.Object[] arr1 = set1.toArray();
        org.junit.Assert.assertTrue(((arr1.length) == 2));
        org.junit.Assert.assertEquals("c1", arr1[0]);
        org.junit.Assert.assertEquals("c2", arr1[1]);
        // Changes to the set should not be reflected in the Elements getters
        set1.add("c3");
        org.junit.Assert.assertTrue((2 == (div.classNames().size())));
        org.junit.Assert.assertEquals("c1 c2", div.className());
        // Update the class names to a fresh set
        final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
        newSet.addAll(set1);
        newSet.add("c3");
        div.classNames(newSet);
        org.junit.Assert.assertEquals("c1 c2 c3", div.className());
        final java.util.Set<java.lang.String> set2 = div.classNames();
        final java.lang.Object[] arr2 = set2.toArray();
        org.junit.Assert.assertTrue(((arr2.length) == 3));
        org.junit.Assert.assertEquals("c1", arr2[0]);
        org.junit.Assert.assertEquals("c2", arr2[1]);
        org.junit.Assert.assertEquals("c3", arr2[2]);
    }

    @org.junit.Test
    public void testHashAndEqualsAndValue() {
        // .equals and hashcode are identity. value is content.
        java.lang.String doc1 = "<div id=1><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>" + "<div id=2><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(doc1);
        org.jsoup.select.Elements els = doc.select("p");
        /* for (Element el : els) {
        System.out.println(el.hashCode() + " - " + el.outerHtml());
        }
        
        0 1534787905 - <p class="one">One</p>
        1 1534787905 - <p class="one">One</p>
        2 1539683239 - <p class="one">Two</p>
        3 1535455211 - <p class="two">One</p>
        4 1534787905 - <p class="one">One</p>
        5 1534787905 - <p class="one">One</p>
        6 1539683239 - <p class="one">Two</p>
        7 1535455211 - <p class="two">One</p>
         */
        org.junit.Assert.assertEquals(8, els.size());
        org.jsoup.nodes.Element e0 = els.get(0);
        org.jsoup.nodes.Element e1 = els.get(1);
        org.jsoup.nodes.Element e2 = els.get(2);
        org.jsoup.nodes.Element e3 = els.get(3);
        org.jsoup.nodes.Element e4 = els.get(4);
        org.jsoup.nodes.Element e5 = els.get(5);
        org.jsoup.nodes.Element e6 = els.get(6);
        org.jsoup.nodes.Element e7 = els.get(7);
        org.junit.Assert.assertEquals(e0, e0);
        org.junit.Assert.assertTrue(e0.hasSameValue(e1));
        org.junit.Assert.assertTrue(e0.hasSameValue(e4));
        org.junit.Assert.assertTrue(e0.hasSameValue(e5));
        org.junit.Assert.assertFalse(e0.equals(e2));
        org.junit.Assert.assertFalse(e0.hasSameValue(e2));
        org.junit.Assert.assertFalse(e0.hasSameValue(e3));
        org.junit.Assert.assertFalse(e0.hasSameValue(e6));
        org.junit.Assert.assertFalse(e0.hasSameValue(e7));
        org.junit.Assert.assertEquals(e0.hashCode(), e0.hashCode());
        org.junit.Assert.assertFalse(((e0.hashCode()) == (e2.hashCode())));
        org.junit.Assert.assertFalse(((e0.hashCode()) == (e3.hashCode())));
        org.junit.Assert.assertFalse(((e0.hashCode()) == (e6.hashCode())));
        org.junit.Assert.assertFalse(((e0.hashCode()) == (e7.hashCode())));
    }

    @org.junit.Test
    public void testRelativeUrls() {
        java.lang.String html = "<body><a href='./one.html'>One</a> <a href='two.html'>two</a> <a href='../three.html'>Three</a> <a href='//example2.com/four/'>Four</a> <a href='https://example2.com/five/'>Five</a>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com/bar/");
        org.jsoup.select.Elements els = doc.select("a");
        org.junit.Assert.assertEquals("http://example.com/bar/one.html", els.get(0).absUrl("href"));
        org.junit.Assert.assertEquals("http://example.com/bar/two.html", els.get(1).absUrl("href"));
        org.junit.Assert.assertEquals("http://example.com/three.html", els.get(2).absUrl("href"));
        org.junit.Assert.assertEquals("http://example2.com/four/", els.get(3).absUrl("href"));
        org.junit.Assert.assertEquals("https://example2.com/five/", els.get(4).absUrl("href"));
    }

    @org.junit.Test
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement() {
        org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
        org.jsoup.nodes.Element body = doc.appendElement("body");
        body.appendElement("div1");
        body.appendElement("div2");
        final org.jsoup.nodes.Element div3 = body.appendElement("div3");
        div3.text("Check");
        final org.jsoup.nodes.Element div4 = body.appendElement("div4");
        java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
        toMove.add(div3);
        toMove.add(div4);
        body.insertChildren(0, toMove);
        java.lang.String result = doc.toString().replaceAll("\\s+", "");
        org.junit.Assert.assertEquals("<body><div3>Check</div3><div4></div4><div1></div1><div2></div2></body>", result);
    }

    @org.junit.Test
    public void testHashcodeIsStableWithContentChanges() {
        org.jsoup.nodes.Element root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("root"), "");
        java.util.HashSet<org.jsoup.nodes.Element> set = new java.util.HashSet<org.jsoup.nodes.Element>();
        // Add root node:
        set.add(root);
        root.appendChild(new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("a"), ""));
        org.junit.Assert.assertTrue(set.contains(root));
    }

    @org.junit.Test
    public void testNamespacedElements() {
        // Namespaces with ns:tag in HTML must be translated to ns|tag in CSS.
        java.lang.String html = "<html><body><fb:comments /></body></html>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com/bar/");
        org.jsoup.select.Elements els = doc.select("fb|comments");
        org.junit.Assert.assertEquals(1, els.size());
        org.junit.Assert.assertEquals("html > body > fb|comments", els.get(0).cssSelector());
    }

    @org.junit.Test
    public void testChainedRemoveAttributes() {
        java.lang.String html = "<a one two three four>Text</a>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element a = doc.select("a").first();
        a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
        org.junit.Assert.assertEquals("<a>Text</a>", a.outerHtml());
    }

    @org.junit.Test
    public void testIs() {
        java.lang.String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element p = doc.select("p").first();
        org.junit.Assert.assertTrue(p.is("p"));
        org.junit.Assert.assertFalse(p.is("div"));
        org.junit.Assert.assertTrue(p.is("p:has(a)"));
        org.junit.Assert.assertTrue(p.is("p:first-child"));
        org.junit.Assert.assertFalse(p.is("p:last-child"));
        org.junit.Assert.assertTrue(p.is("*"));
        org.junit.Assert.assertTrue(p.is("div p"));
        org.jsoup.nodes.Element q = doc.select("p").last();
        org.junit.Assert.assertTrue(q.is("p"));
        org.junit.Assert.assertTrue(q.is("p ~ p"));
        org.junit.Assert.assertTrue(q.is("p + p"));
        org.junit.Assert.assertTrue(q.is("p:last-child"));
        org.junit.Assert.assertFalse(q.is("p a"));
        org.junit.Assert.assertFalse(q.is("a"));
    }

    @org.junit.Test
    public void elementByTagName() {
        org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
        org.junit.Assert.assertTrue(a.tagName().equals("P"));
    }

    public void testChildrenElements() {
        java.lang.String html = "<div><p><a>One</a></p><p><a>Two</a></p>Three</div><span>Four</span><foo></foo><img>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
        org.jsoup.nodes.Element div = doc.select("div").first();
        org.jsoup.nodes.Element p = doc.select("p").first();
        org.jsoup.nodes.Element span = doc.select("span").first();
        org.jsoup.nodes.Element foo = doc.select("foo").first();
        org.jsoup.nodes.Element img = doc.select("img").first();
        org.jsoup.select.Elements docChildren = div.children();
        org.junit.Assert.assertEquals(2, docChildren.size());
        org.junit.Assert.assertEquals("<p><a>One</a></p>", docChildren.get(0).outerHtml());
        org.junit.Assert.assertEquals("<p><a>Two</a></p>", docChildren.get(1).outerHtml());
        org.junit.Assert.assertEquals(3, div.childNodes().size());
        org.junit.Assert.assertEquals("Three", div.childNodes().get(2).outerHtml());
        org.junit.Assert.assertEquals(1, p.children().size());
        org.junit.Assert.assertEquals("One", p.children().text());
        org.junit.Assert.assertEquals(0, span.children().size());
        org.junit.Assert.assertEquals(1, span.childNodes().size());
        org.junit.Assert.assertEquals("Four", span.childNodes().get(0).outerHtml());
        org.junit.Assert.assertEquals(0, foo.children().size());
        org.junit.Assert.assertEquals(0, foo.childNodes().size());
        org.junit.Assert.assertEquals(0, img.children().size());
        org.junit.Assert.assertEquals(0, img.childNodes().size());
    }

    /* amplification of org.jsoup.nodes.ElementTest#after */
    @org.junit.Test(timeout = 10000)
    public void after_cf348_failAssert72() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.after("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().after("<p>Three</p><!-- four -->");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_117 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // StatementAdderMethod cloned existing statement
            div2.getElementById(vc_117);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("after_cf348 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#after */
    @org.junit.Test(timeout = 10000)
    public void after_cf246_failAssert20() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.after("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().after("<p>Three</p><!-- four -->");
            // StatementAdderOnAssert create random local variable
            boolean vc_88 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_86 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p1.attr(vc_86, vc_88);
            // MethodAssertGenerator build local variable
            Object o_20_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("after_cf246 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#after */
    @org.junit.Test(timeout = 10000)
    public void after_cf48_failAssert54() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.after("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().after("<p>Three</p><!-- four -->");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_13 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p1.is(vc_13);
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("after_cf48 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#after */
    @org.junit.Test(timeout = 10000)
    public void after_cf852_failAssert49() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.after("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().after("<p>Three</p><!-- four -->");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_265 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p1.select(vc_265);
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("after_cf852 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#after */
    @org.junit.Test(timeout = 10000)
    public void after_cf564_failAssert55() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.after("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().after("<p>Three</p><!-- four -->");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_184 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p1.getElementsByAttribute(vc_184);
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("after_cf564 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#after */
    @org.junit.Test(timeout = 10000)
    public void after_cf65_failAssert65() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.after("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().after("<p>Three</p><!-- four -->");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_18 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_18.isBlock();
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("after_cf65 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#after */
    @org.junit.Test(timeout = 10000)
    public void after_cf101_failAssert37() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.after("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().after("<p>Three</p><!-- four -->");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_36 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_36.nodeName();
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("after_cf101 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#after */
    @org.junit.Test(timeout = 10000)
    public void after_cf753_failAssert41() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.after("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().after("<p>Three</p><!-- four -->");
            // StatementAdderOnAssert create null value
            java.lang.String vc_234 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            divA.getElementsByTag(vc_234);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("after_cf753 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#after */
    @org.junit.Test(timeout = 10000)
    public void after_cf201_failAssert40() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.after("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().after("<p>Three</p><!-- four -->");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_74 = (org.jsoup.nodes.Node)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.appendChild(vc_74);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("after_cf201 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2553_failAssert83() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_399 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            body.getElementById(vc_399);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2553 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf3186_failAssert74() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderMethod cloned existing statement
            div4.select(result);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf3186 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2729_failAssert26() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            java.lang.String vc_443 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div3.text(vc_443);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2729 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2313_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            java.lang.String vc_340 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div4.addClass(vc_340);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2313 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2209_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            java.lang.String vc_294 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div4.is(vc_294);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2209 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2378_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_356 = (org.jsoup.nodes.Node)null;
            // StatementAdderMethod cloned existing statement
            div3.appendChild(vc_356);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2378 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2824_failAssert41() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_60 = "";
            // StatementAdderMethod cloned existing statement
            body.getElementsByAttribute(String_vc_60);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2824 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2206_failAssert23() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_292 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_292.is(text);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2206 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2791() {
        org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
        org.jsoup.nodes.Element body = doc.appendElement("body");
        body.appendElement("div1");
        body.appendElement("div2");
        final org.jsoup.nodes.Element div3 = body.appendElement("div3");
        div3.text("Check");
        final org.jsoup.nodes.Element div4 = body.appendElement("div4");
        java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
        toMove.add(div3);
        toMove.add(div4);
        body.insertChildren(0, toMove);
        java.lang.String result = doc.toString().replaceAll("\\s+", "");
        // StatementAddOnAssert local variable replacement
        java.lang.String text = doc.text();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(text, "Check");
        // AssertGenerator replace invocation
        org.jsoup.nodes.Element o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2791__23 = // StatementAdderMethod cloned existing statement
div4.wrap(text);
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2791__23);
        org.junit.Assert.assertEquals("<body><div3>Check</div3><div4></div4><div1></div1><div2></div2></body>", result);
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf3065_failAssert70() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            java.lang.String vc_516 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div3.getElementsByTag(vc_516);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf3065 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf3016_failAssert72() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            java.lang.String vc_503 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_501 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_501.getElementsByClass(vc_503);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf3016 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2791_cf6069_failAssert39() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // MethodAssertGenerator build local variable
            Object o_23_0 = text;
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2791__23 = // StatementAdderMethod cloned existing statement
div4.wrap(text);
            // MethodAssertGenerator build local variable
            Object o_27_0 = o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2791__23;
            // StatementAdderOnAssert create null value
            java.lang.String vc_1311 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div4.getElementsByAttribute(vc_1311);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2791_cf6069 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2791_cf5748_failAssert60() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // MethodAssertGenerator build local variable
            Object o_23_0 = text;
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2791__23 = // StatementAdderMethod cloned existing statement
div4.wrap(text);
            // MethodAssertGenerator build local variable
            Object o_27_0 = o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2791__23;
            // StatementAdderOnAssert create random local variable
            boolean vc_1216 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_1215 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div4.attr(vc_1215, vc_1216);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2791_cf5748 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2681_cf7476_failAssert46() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2681__20 = // StatementAdderMethod cloned existing statement
body.previousElementSibling();
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2681__20;
            // StatementAdderMethod cloned existing statement
            body.select(result);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2681_cf7476 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2681_cf7434_failAssert49() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2681__20 = // StatementAdderMethod cloned existing statement
body.previousElementSibling();
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2681__20;
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_1660 = (java.util.regex.Pattern)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.getElementsMatchingOwnText(vc_1660);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2681_cf7434 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2791_cf5959_failAssert56() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // MethodAssertGenerator build local variable
            Object o_23_0 = text;
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2791__23 = // StatementAdderMethod cloned existing statement
div4.wrap(text);
            // MethodAssertGenerator build local variable
            Object o_27_0 = o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2791__23;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_186 = "Check";
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_1279 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_1279.removeClass(String_vc_186);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2791_cf5959 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2681_cf6922_failAssert62() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2681__20 = // StatementAdderMethod cloned existing statement
body.previousElementSibling();
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2681__20;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_1549 = (org.jsoup.nodes.Node)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_1547 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_1547.prependChild(vc_1549);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2681_cf6922 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2681_cf6731_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2681__20 = // StatementAdderMethod cloned existing statement
body.previousElementSibling();
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2681__20;
            // StatementAdderOnAssert create random local variable
            boolean vc_1498 = false;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_220 = "";
            // StatementAdderMethod cloned existing statement
            div4.attr(String_vc_220, vc_1498);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2681_cf6731 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#appendMustCorrectlyMoveChildrenInsideOneParentElement */
    @org.junit.Test(timeout = 10000)
    public void appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2233_cf3299_failAssert74() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document("");
            org.jsoup.nodes.Element body = doc.appendElement("body");
            body.appendElement("div1");
            body.appendElement("div2");
            final org.jsoup.nodes.Element div3 = body.appendElement("div3");
            div3.text("Check");
            final org.jsoup.nodes.Element div4 = body.appendElement("div4");
            java.util.ArrayList<org.jsoup.nodes.Element> toMove = new java.util.ArrayList<org.jsoup.nodes.Element>();
            toMove.add(div3);
            toMove.add(div4);
            body.insertChildren(0, toMove);
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // AssertGenerator replace invocation
            boolean o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2233__20 = // StatementAdderMethod cloned existing statement
body.isBlock();
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2233__20;
            // StatementAdderOnAssert create null value
            java.lang.String vc_570 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element img = doc.select("img").first();
            // StatementAdderMethod cloned existing statement
            img.hasClass(vc_570);
            org.junit.Assert.fail("appendMustCorrectlyMoveChildrenInsideOneParentElement_cf2233_cf3299 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#before */
    @org.junit.Test(timeout = 10000)
    public void before_cf9203_failAssert32() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.before("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().before("<p>Three</p><!-- four -->");
            // StatementAdderOnAssert create null value
            java.lang.String vc_1704 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p1.is(vc_1704);
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("before_cf9203 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#before */
    @org.junit.Test(timeout = 10000)
    public void before_cf9723_failAssert59() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.before("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().before("<p>Three</p><!-- four -->");
            // StatementAdderOnAssert create null value
            java.lang.String vc_1875 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p2 = doc.select("p").get(1);
            // StatementAdderMethod cloned existing statement
            p2.getElementsByAttribute(vc_1875);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("before_cf9723 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#before */
    @org.junit.Test(timeout = 10000)
    public void before_cf9910_failAssert65() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.before("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().before("<p>Three</p><!-- four -->");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_1927 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p1.getElementsByTag(vc_1927);
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("before_cf9910 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#before */
    @org.junit.Test(timeout = 10000)
    public void before_cf9180_failAssert55() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.before("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().before("<p>Three</p><!-- four -->");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_1696 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_1696.hasClass(result);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("before_cf9180 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#before */
    @org.junit.Test(timeout = 10000)
    public void before_cf9418_failAssert75() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.before("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().before("<p>Three</p><!-- four -->");
            // StatementAdderOnAssert create random local variable
            boolean vc_1780 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_1779 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // StatementAdderMethod cloned existing statement
            div2.attr(vc_1779, vc_1780);
            // MethodAssertGenerator build local variable
            Object o_24_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("before_cf9418 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#before */
    @org.junit.Test(timeout = 10000)
    public void before_cf9879_failAssert76() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.before("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().before("<p>Three</p><!-- four -->");
            // StatementAdderOnAssert create null value
            java.lang.String vc_1913 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p1.getElementsByClass(vc_1913);
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("before_cf9879 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#before */
    @org.junit.Test(timeout = 10000)
    public void before_cf9611_failAssert23() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.before("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().before("<p>Three</p><!-- four -->");
            // StatementAdderOnAssert create null value
            java.lang.String vc_1845 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p1.removeClass(vc_1845);
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("before_cf9611 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#before */
    @org.junit.Test(timeout = 10000)
    public void before_cf9210_failAssert21() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.before("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().before("<p>Three</p><!-- four -->");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_1705 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.is(vc_1705);
            // MethodAssertGenerator build local variable
            Object o_22_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("before_cf9210 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#before */
    @org.junit.Test(timeout = 10000)
    public void before_cf9694_failAssert39() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            p1.before("<div>one</div><div>two</div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.select("p").last().before("<p>Three</p><!-- four -->");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_1866 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p1.wrap(vc_1866);
            // MethodAssertGenerator build local variable
            Object o_18_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("before_cf9694 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11880_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_20_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_22_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_24_0 = attributes.get("data-name");
            // MethodAssertGenerator build local variable
            Object o_26_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-language");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("language");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_33_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_35_0 = dataset.get("food");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_38_0 = dataset.get("");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderOnAssert create null value
            java.lang.String vc_2143 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element table = doc.select("tbody").first();
            // StatementAdderMethod cloned existing statement
            table.val(vc_2143);
            // MethodAssertGenerator build local variable
            Object o_52_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_cf11880 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11905() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
        org.jsoup.nodes.Element div = doc.select("div").first();
        java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
        org.jsoup.nodes.Attributes attributes = div.attributes();
        // size, get, set, add, remove
        org.junit.Assert.assertEquals(2, dataset.size());
        org.junit.Assert.assertEquals("jsoup", dataset.get("name"));
        org.junit.Assert.assertEquals("jar", dataset.get("package"));
        dataset.put("name", "jsoup updated");
        dataset.put("language", "java");
        dataset.remove("package");
        org.junit.Assert.assertEquals(2, dataset.size());
        org.junit.Assert.assertEquals(4, attributes.size());
        org.junit.Assert.assertEquals("jsoup updated", attributes.get("data-name"));
        org.junit.Assert.assertEquals("jsoup updated", dataset.get("name"));
        org.junit.Assert.assertEquals("java", attributes.get("data-language"));
        org.junit.Assert.assertEquals("java", dataset.get("language"));
        attributes.put("data-food", "bacon");
        org.junit.Assert.assertEquals(3, dataset.size());
        org.junit.Assert.assertEquals("bacon", dataset.get("food"));
        attributes.put("data-", "empty");
        org.junit.Assert.assertEquals(null, dataset.get(""));// data- is not a data attribute
        
        org.jsoup.nodes.Element p = doc.select("p").first();
        // AssertGenerator replace invocation
        org.jsoup.parser.Tag o_dataset_cf11905__44 = // StatementAdderMethod cloned existing statement
div.tag();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Tag)o_dataset_cf11905__44).isFormSubmittable());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Tag)o_dataset_cf11905__44).isInline());
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.Tag)o_dataset_cf11905__44).isBlock());
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.Tag)o_dataset_cf11905__44).canContainBlock());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Tag)o_dataset_cf11905__44).isFormListed());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Tag)o_dataset_cf11905__44).isSelfClosing());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((org.jsoup.parser.Tag)o_dataset_cf11905__44).getName(), "div");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Tag)o_dataset_cf11905__44).preserveWhitespace());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Tag)o_dataset_cf11905__44).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.Tag)o_dataset_cf11905__44).isKnownTag());
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.Tag)o_dataset_cf11905__44).formatAsBlock());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Tag)o_dataset_cf11905__44).isData());
        org.junit.Assert.assertEquals(0, p.dataset().size());
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11418() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
        org.jsoup.nodes.Element div = doc.select("div").first();
        java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
        org.jsoup.nodes.Attributes attributes = div.attributes();
        // size, get, set, add, remove
        org.junit.Assert.assertEquals(2, dataset.size());
        org.junit.Assert.assertEquals("jsoup", dataset.get("name"));
        org.junit.Assert.assertEquals("jar", dataset.get("package"));
        dataset.put("name", "jsoup updated");
        dataset.put("language", "java");
        dataset.remove("package");
        org.junit.Assert.assertEquals(2, dataset.size());
        org.junit.Assert.assertEquals(4, attributes.size());
        org.junit.Assert.assertEquals("jsoup updated", attributes.get("data-name"));
        org.junit.Assert.assertEquals("jsoup updated", dataset.get("name"));
        org.junit.Assert.assertEquals("java", attributes.get("data-language"));
        org.junit.Assert.assertEquals("java", dataset.get("language"));
        attributes.put("data-food", "bacon");
        org.junit.Assert.assertEquals(3, dataset.size());
        org.junit.Assert.assertEquals("bacon", dataset.get("food"));
        attributes.put("data-", "empty");
        org.junit.Assert.assertEquals(null, dataset.get(""));// data- is not a data attribute
        
        org.jsoup.nodes.Element p = doc.select("p").first();
        // StatementAdderOnAssert create null value
        org.jsoup.nodes.Node vc_1996 = (org.jsoup.nodes.Node)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_1996);
        // AssertGenerator replace invocation
        boolean o_dataset_cf11418__46 = // StatementAdderMethod cloned existing statement
p.preserveWhitespace(vc_1996);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_dataset_cf11418__46);
        org.junit.Assert.assertEquals(0, p.dataset().size());
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf12123_failAssert36() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_20_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_22_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_24_0 = attributes.get("data-name");
            // MethodAssertGenerator build local variable
            Object o_26_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-language");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("language");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_33_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_35_0 = dataset.get("food");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_38_0 = dataset.get("");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_2209 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p.getElementsByTag(vc_2209);
            // MethodAssertGenerator build local variable
            Object o_48_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_cf12123 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf12182_failAssert27() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_20_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_22_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_24_0 = attributes.get("data-name");
            // MethodAssertGenerator build local variable
            Object o_26_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-language");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("language");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_33_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_35_0 = dataset.get("food");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_38_0 = dataset.get("");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_2224 = (java.util.regex.Pattern)null;
            // StatementAdderMethod cloned existing statement
            p.getElementsMatchingOwnText(vc_2224);
            // MethodAssertGenerator build local variable
            Object o_48_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_cf12182 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11920_failAssert33() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_20_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_22_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_24_0 = attributes.get("data-name");
            // MethodAssertGenerator build local variable
            Object o_26_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-language");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("language");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_33_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_35_0 = dataset.get("food");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_38_0 = dataset.get("");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderOnAssert create null value
            java.lang.String vc_2157 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.getElementsByAttribute(vc_2157);
            // MethodAssertGenerator build local variable
            Object o_48_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_cf11920 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11546_failAssert52() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_20_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_22_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_24_0 = attributes.get("data-name");
            // MethodAssertGenerator build local variable
            Object o_26_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-language");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("language");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_33_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_35_0 = dataset.get("food");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_38_0 = dataset.get("");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_2048 = (org.jsoup.nodes.Node)null;
            // StatementAdderMethod cloned existing statement
            div.appendChild(vc_2048);
            // MethodAssertGenerator build local variable
            Object o_48_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_cf11546 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11699_failAssert16() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_20_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_22_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_24_0 = attributes.get("data-name");
            // MethodAssertGenerator build local variable
            Object o_26_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-language");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("language");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_33_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_35_0 = dataset.get("food");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_38_0 = dataset.get("");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_2091 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p1.getElementById(vc_2091);
            // MethodAssertGenerator build local variable
            Object o_52_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_cf11699 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_add11303() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
        org.jsoup.nodes.Element div = doc.select("div").first();
        java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
        org.jsoup.nodes.Attributes attributes = div.attributes();
        // size, get, set, add, remove
        org.junit.Assert.assertEquals(2, dataset.size());
        org.junit.Assert.assertEquals("jsoup", dataset.get("name"));
        org.junit.Assert.assertEquals("jar", dataset.get("package"));
        // AssertGenerator replace invocation
        java.lang.String o_dataset_add11303__17 = // MethodCallAdder
dataset.put("name", "jsoup updated");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_dataset_add11303__17, "jsoup");
        dataset.put("name", "jsoup updated");
        dataset.put("language", "java");
        dataset.remove("package");
        org.junit.Assert.assertEquals(2, dataset.size());
        org.junit.Assert.assertEquals(4, attributes.size());
        org.junit.Assert.assertEquals("jsoup updated", attributes.get("data-name"));
        org.junit.Assert.assertEquals("jsoup updated", dataset.get("name"));
        org.junit.Assert.assertEquals("java", attributes.get("data-language"));
        org.junit.Assert.assertEquals("java", dataset.get("language"));
        attributes.put("data-food", "bacon");
        org.junit.Assert.assertEquals(3, dataset.size());
        org.junit.Assert.assertEquals("bacon", dataset.get("food"));
        attributes.put("data-", "empty");
        org.junit.Assert.assertEquals(null, dataset.get(""));// data- is not a data attribute
        
        org.jsoup.nodes.Element p = doc.select("p").first();
        org.junit.Assert.assertEquals(0, p.dataset().size());
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11857_failAssert49() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_20_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_22_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_24_0 = attributes.get("data-name");
            // MethodAssertGenerator build local variable
            Object o_26_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-language");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("language");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_33_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_35_0 = dataset.get("food");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_38_0 = dataset.get("");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_2137 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_2137.toggleClass(result);
            // MethodAssertGenerator build local variable
            Object o_52_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_cf11857 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11418_cf16141_failAssert67() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_20_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_22_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_24_0 = attributes.get("data-name");
            // MethodAssertGenerator build local variable
            Object o_26_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-language");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("language");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_33_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_35_0 = dataset.get("food");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_38_0 = dataset.get("");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_1996 = (org.jsoup.nodes.Node)null;
            // MethodAssertGenerator build local variable
            Object o_46_0 = vc_1996;
            // AssertGenerator replace invocation
            boolean o_dataset_cf11418__46 = // StatementAdderMethod cloned existing statement
p.preserveWhitespace(vc_1996);
            // MethodAssertGenerator build local variable
            Object o_50_0 = o_dataset_cf11418__46;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_3337 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p.getElementsByTag(vc_3337);
            // MethodAssertGenerator build local variable
            Object o_56_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_cf11418_cf16141 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11418_cf16102_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_20_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_22_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_24_0 = attributes.get("data-name");
            // MethodAssertGenerator build local variable
            Object o_26_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-language");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("language");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_33_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_35_0 = dataset.get("food");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_38_0 = dataset.get("");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_1996 = (org.jsoup.nodes.Node)null;
            // MethodAssertGenerator build local variable
            Object o_46_0 = vc_1996;
            // AssertGenerator replace invocation
            boolean o_dataset_cf11418__46 = // StatementAdderMethod cloned existing statement
p.preserveWhitespace(vc_1996);
            // MethodAssertGenerator build local variable
            Object o_50_0 = o_dataset_cf11418__46;
            // StatementAdderOnAssert create null value
            java.lang.String vc_3323 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element body = doc.appendElement("body");
            // StatementAdderMethod cloned existing statement
            body.getElementsByClass(vc_3323);
            // MethodAssertGenerator build local variable
            Object o_59_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_cf11418_cf16102 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_add11303_cf13186_failAssert76() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            // AssertGenerator replace invocation
            java.lang.String o_dataset_add11303__17 = // MethodCallAdder
dataset.put("name", "jsoup updated");
            // MethodAssertGenerator build local variable
            Object o_19_0 = o_dataset_add11303__17;
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_24_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_26_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-name");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_32_0 = attributes.get("data-language");
            // MethodAssertGenerator build local variable
            Object o_34_0 = dataset.get("language");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_37_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_39_0 = dataset.get("food");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_42_0 = dataset.get("");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_2506 = (java.util.regex.Pattern)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
            // StatementAdderMethod cloned existing statement
            ret.getElementsMatchingOwnText(vc_2506);
            // MethodAssertGenerator build local variable
            Object o_55_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_add11303_cf13186 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11905_cf14370_failAssert73() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_20_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_22_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_24_0 = attributes.get("data-name");
            // MethodAssertGenerator build local variable
            Object o_26_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-language");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("language");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_33_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_35_0 = dataset.get("food");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_38_0 = dataset.get("");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // AssertGenerator replace invocation
            org.jsoup.parser.Tag o_dataset_cf11905__44 = // StatementAdderMethod cloned existing statement
div.tag();
            // MethodAssertGenerator build local variable
            Object o_46_0 = ((org.jsoup.parser.Tag)o_dataset_cf11905__44).isFormSubmittable();
            // MethodAssertGenerator build local variable
            Object o_48_0 = ((org.jsoup.parser.Tag)o_dataset_cf11905__44).isInline();
            // MethodAssertGenerator build local variable
            Object o_50_0 = ((org.jsoup.parser.Tag)o_dataset_cf11905__44).isBlock();
            // MethodAssertGenerator build local variable
            Object o_52_0 = ((org.jsoup.parser.Tag)o_dataset_cf11905__44).canContainBlock();
            // MethodAssertGenerator build local variable
            Object o_54_0 = ((org.jsoup.parser.Tag)o_dataset_cf11905__44).isFormListed();
            // MethodAssertGenerator build local variable
            Object o_56_0 = ((org.jsoup.parser.Tag)o_dataset_cf11905__44).isSelfClosing();
            // MethodAssertGenerator build local variable
            Object o_58_0 = ((org.jsoup.parser.Tag)o_dataset_cf11905__44).getName();
            // MethodAssertGenerator build local variable
            Object o_60_0 = ((org.jsoup.parser.Tag)o_dataset_cf11905__44).preserveWhitespace();
            // MethodAssertGenerator build local variable
            Object o_62_0 = ((org.jsoup.parser.Tag)o_dataset_cf11905__44).isEmpty();
            // MethodAssertGenerator build local variable
            Object o_64_0 = ((org.jsoup.parser.Tag)o_dataset_cf11905__44).isKnownTag();
            // MethodAssertGenerator build local variable
            Object o_66_0 = ((org.jsoup.parser.Tag)o_dataset_cf11905__44).formatAsBlock();
            // MethodAssertGenerator build local variable
            Object o_68_0 = ((org.jsoup.parser.Tag)o_dataset_cf11905__44).isData();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_2824 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_2824.hasClass(result);
            // MethodAssertGenerator build local variable
            Object o_78_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_cf11905_cf14370 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11437_cf16953_failAssert36() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_20_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_22_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_24_0 = attributes.get("data-name");
            // MethodAssertGenerator build local variable
            Object o_26_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-language");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("language");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_33_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_35_0 = dataset.get("food");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_38_0 = dataset.get("");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // AssertGenerator replace invocation
            java.lang.String o_dataset_cf11437__44 = // StatementAdderMethod cloned existing statement
p.data();
            // MethodAssertGenerator build local variable
            Object o_46_0 = o_dataset_cf11437__44;
            // StatementAdderOnAssert create null value
            java.lang.String vc_3571 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.getElementsByAttributeStarting(vc_3571);
            // MethodAssertGenerator build local variable
            Object o_52_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_cf11437_cf16953 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11418_cf15397_failAssert55() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_20_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_22_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_24_0 = attributes.get("data-name");
            // MethodAssertGenerator build local variable
            Object o_26_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-language");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("language");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_33_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_35_0 = dataset.get("food");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_38_0 = dataset.get("");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_1996 = (org.jsoup.nodes.Node)null;
            // MethodAssertGenerator build local variable
            Object o_46_0 = vc_1996;
            // AssertGenerator replace invocation
            boolean o_dataset_cf11418__46 = // StatementAdderMethod cloned existing statement
p.preserveWhitespace(vc_1996);
            // MethodAssertGenerator build local variable
            Object o_50_0 = o_dataset_cf11418__46;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_3115 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element body = doc.appendElement("body");
            // StatementAdderMethod cloned existing statement
            body.is(vc_3115);
            // MethodAssertGenerator build local variable
            Object o_59_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_cf11418_cf15397 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11485_add13302() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
        org.jsoup.nodes.Element div = doc.select("div").first();
        java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
        org.jsoup.nodes.Attributes attributes = div.attributes();
        // size, get, set, add, remove
        org.junit.Assert.assertEquals(2, dataset.size());
        org.junit.Assert.assertEquals("jsoup", dataset.get("name"));
        org.junit.Assert.assertEquals("jar", dataset.get("package"));
        // AssertGenerator replace invocation
        java.lang.String o_dataset_cf11485_add13302__17 = // MethodCallAdder
dataset.put("name", "jsoup updated");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_dataset_cf11485_add13302__17, "jsoup");
        dataset.put("name", "jsoup updated");
        dataset.put("language", "java");
        dataset.remove("package");
        org.junit.Assert.assertEquals(2, dataset.size());
        org.junit.Assert.assertEquals(4, attributes.size());
        org.junit.Assert.assertEquals("jsoup updated", attributes.get("data-name"));
        org.junit.Assert.assertEquals("jsoup updated", dataset.get("name"));
        org.junit.Assert.assertEquals("java", attributes.get("data-language"));
        org.junit.Assert.assertEquals("java", dataset.get("language"));
        attributes.put("data-food", "bacon");
        org.junit.Assert.assertEquals(3, dataset.size());
        org.junit.Assert.assertEquals("bacon", dataset.get("food"));
        attributes.put("data-", "empty");
        org.junit.Assert.assertEquals(null, dataset.get(""));// data- is not a data attribute
        
        org.jsoup.nodes.Element p = doc.select("p").first();
        // AssertGenerator replace invocation
        java.util.Set<java.lang.String> o_dataset_cf11485__44 = // StatementAdderMethod cloned existing statement
p.classNames();
        // AssertGenerator add assertion
        java.util.LinkedHashSet collection_686958502 = new java.util.LinkedHashSet<Object>();
	org.junit.Assert.assertEquals(collection_686958502, o_dataset_cf11485__44);;
        org.junit.Assert.assertEquals(0, p.dataset().size());
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11418_cf15706_failAssert51() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_20_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_22_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_24_0 = attributes.get("data-name");
            // MethodAssertGenerator build local variable
            Object o_26_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-language");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("language");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_33_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_35_0 = dataset.get("food");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_38_0 = dataset.get("");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_1996 = (org.jsoup.nodes.Node)null;
            // MethodAssertGenerator build local variable
            Object o_46_0 = vc_1996;
            // AssertGenerator replace invocation
            boolean o_dataset_cf11418__46 = // StatementAdderMethod cloned existing statement
p.preserveWhitespace(vc_1996);
            // MethodAssertGenerator build local variable
            Object o_50_0 = o_dataset_cf11418__46;
            // StatementAdderOnAssert create null value
            java.lang.String vc_3218 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.getElementById(vc_3218);
            // MethodAssertGenerator build local variable
            Object o_56_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_cf11418_cf15706 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11875_failAssert45_add17596() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_10_0, 2);
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_13_0, "jsoup");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_15_0, "jar");
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_20_0 = dataset.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_20_0, 2);
            // MethodAssertGenerator build local variable
            Object o_22_0 = attributes.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_22_0, 4);
            // MethodAssertGenerator build local variable
            Object o_24_0 = attributes.get("data-name");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_24_0, "jsoup updated");
            // MethodAssertGenerator build local variable
            Object o_26_0 = dataset.get("name");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_26_0, "jsoup updated");
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-language");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_28_0, "java");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("language");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_30_0, "java");
            // MethodCallAdder
            attributes.put("data-food", "bacon");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_33_0 = dataset.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_33_0, 3);
            // MethodAssertGenerator build local variable
            Object o_35_0 = dataset.get("food");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_35_0, "bacon");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_38_0 = dataset.get("");
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(o_38_0);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_2144 = new java.lang.String();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_2144, "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_2141 = (org.jsoup.nodes.Element)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_2141);
            // StatementAdderMethod cloned existing statement
            vc_2141.val(vc_2144);
            // MethodAssertGenerator build local variable
            Object o_50_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_cf11875 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11485_add13302_cf27965_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            // AssertGenerator replace invocation
            java.lang.String o_dataset_cf11485_add13302__17 = // MethodCallAdder
dataset.put("name", "jsoup updated");
            // MethodAssertGenerator build local variable
            Object o_19_0 = o_dataset_cf11485_add13302__17;
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_24_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_26_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-name");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_32_0 = attributes.get("data-language");
            // MethodAssertGenerator build local variable
            Object o_34_0 = dataset.get("language");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_37_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_39_0 = dataset.get("food");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_42_0 = dataset.get("");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // AssertGenerator replace invocation
            java.util.Set<java.lang.String> o_dataset_cf11485__44 = // StatementAdderMethod cloned existing statement
p.classNames();
            // AssertGenerator add assertion
            java.util.LinkedHashSet collection_686958502 = new java.util.LinkedHashSet<Object>();
	org.junit.Assert.assertEquals(collection_686958502, o_dataset_cf11485__44);;
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_6413 = (java.util.regex.Pattern)null;
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element divB = doc.select("div").get(1);
            // StatementAdderMethod cloned existing statement
            divB.getElementsByAttributeValueMatching(text, vc_6413);
            // MethodAssertGenerator build local variable
            Object o_63_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_cf11485_add13302_cf27965 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11485_add13304_cf22141_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            // AssertGenerator replace invocation
            java.lang.String o_dataset_cf11485_add13304__19 = // MethodCallAdder
dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_21_0 = o_dataset_cf11485_add13304__19;
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_24_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_26_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-name");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_32_0 = attributes.get("data-language");
            // MethodAssertGenerator build local variable
            Object o_34_0 = dataset.get("language");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_37_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_39_0 = dataset.get("food");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_42_0 = dataset.get("");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // AssertGenerator replace invocation
            java.util.Set<java.lang.String> o_dataset_cf11485__44 = // StatementAdderMethod cloned existing statement
p.classNames();
            // AssertGenerator add assertion
            java.util.LinkedHashSet collection_686958502 = new java.util.LinkedHashSet<Object>();
	org.junit.Assert.assertEquals(collection_686958502, o_dataset_cf11485__44);;
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderMethod cloned existing statement
            div.is(result);
            // MethodAssertGenerator build local variable
            Object o_58_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_cf11485_add13304_cf22141 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#dataset */
    @org.junit.Test(timeout = 10000)
    public void dataset_cf11485_add13304_cf22620_failAssert29() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Map<java.lang.String, java.lang.String> dataset = div.dataset();
            org.jsoup.nodes.Attributes attributes = div.attributes();
            // MethodAssertGenerator build local variable
            Object o_10_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_13_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_15_0 = dataset.get("package");
            dataset.put("name", "jsoup updated");
            dataset.put("language", "java");
            // AssertGenerator replace invocation
            java.lang.String o_dataset_cf11485_add13304__19 = // MethodCallAdder
dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_21_0 = o_dataset_cf11485_add13304__19;
            dataset.remove("package");
            // MethodAssertGenerator build local variable
            Object o_24_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_26_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_28_0 = attributes.get("data-name");
            // MethodAssertGenerator build local variable
            Object o_30_0 = dataset.get("name");
            // MethodAssertGenerator build local variable
            Object o_32_0 = attributes.get("data-language");
            // MethodAssertGenerator build local variable
            Object o_34_0 = dataset.get("language");
            attributes.put("data-food", "bacon");
            // MethodAssertGenerator build local variable
            Object o_37_0 = dataset.size();
            // MethodAssertGenerator build local variable
            Object o_39_0 = dataset.get("food");
            attributes.put("data-", "empty");
            // MethodAssertGenerator build local variable
            Object o_42_0 = dataset.get("");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // AssertGenerator replace invocation
            java.util.Set<java.lang.String> o_dataset_cf11485__44 = // StatementAdderMethod cloned existing statement
p.classNames();
            // AssertGenerator add assertion
            java.util.LinkedHashSet collection_686958502 = new java.util.LinkedHashSet<Object>();
	org.junit.Assert.assertEquals(collection_686958502, o_dataset_cf11485__44);;
            // StatementAdderOnAssert create null value
            java.lang.String vc_4963 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_4961 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_4961.val(vc_4963);
            // MethodAssertGenerator build local variable
            Object o_58_0 = p.dataset().size();
            org.junit.Assert.fail("dataset_cf11485_add13304_cf22620 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf37309_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_8718 = (java.util.regex.Pattern)null;
            // StatementAdderMethod cloned existing statement
            a.getElementsMatchingText(vc_8718);
            // MethodAssertGenerator build local variable
            Object o_7_0 = a.tagName().equals("P");
            org.junit.Assert.fail("elementByTagName_cf37309 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf36766_failAssert38() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_8556 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            a.before(vc_8556);
            // MethodAssertGenerator build local variable
            Object o_7_0 = a.tagName().equals("P");
            org.junit.Assert.fail("elementByTagName_cf36766 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf36720_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
            // StatementAdderOnAssert create random local variable
            boolean vc_8548 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_8546 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            a.attr(vc_8546, vc_8548);
            // MethodAssertGenerator build local variable
            Object o_9_0 = a.tagName().equals("P");
            org.junit.Assert.fail("elementByTagName_cf36720 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf37195_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
            // StatementAdderOnAssert create null value
            java.lang.String vc_8681 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            a.getElementsByClass(vc_8681);
            // MethodAssertGenerator build local variable
            Object o_7_0 = a.tagName().equals("P");
            org.junit.Assert.fail("elementByTagName_cf37195 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf36959_failAssert26() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
            // StatementAdderOnAssert create null value
            java.lang.String vc_8621 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            a.text(vc_8621);
            // MethodAssertGenerator build local variable
            Object o_7_0 = a.tagName().equals("P");
            org.junit.Assert.fail("elementByTagName_cf36959 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf37038_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_8644 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            a.getElementsByAttribute(vc_8644);
            // MethodAssertGenerator build local variable
            Object o_7_0 = a.tagName().equals("P");
            org.junit.Assert.fail("elementByTagName_cf37038 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf37020() {
        org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
        // AssertGenerator replace invocation
        org.jsoup.parser.Tag o_elementByTagName_cf37020__3 = // StatementAdderMethod cloned existing statement
a.tag();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isFormSubmittable());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isKnownTag());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).getName(), "P");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).formatAsBlock());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).canContainBlock());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isData());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isBlock());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).preserveWhitespace());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isSelfClosing());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isFormListed());
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isInline());
        org.junit.Assert.assertTrue(a.tagName().equals("P"));
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf37226_failAssert24() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_8695 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            a.getElementsByTag(vc_8695);
            // MethodAssertGenerator build local variable
            Object o_7_0 = a.tagName().equals("P");
            org.junit.Assert.fail("elementByTagName_cf37226 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf37051_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
            // StatementAdderOnAssert create null value
            java.lang.String vc_8647 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            a.getElementsByAttributeStarting(vc_8647);
            // MethodAssertGenerator build local variable
            Object o_7_0 = a.tagName().equals("P");
            org.junit.Assert.fail("elementByTagName_cf37051 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf36512_cf37559_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
            // AssertGenerator replace invocation
            boolean o_elementByTagName_cf36512__3 = // StatementAdderMethod cloned existing statement
a.hasText();
            // MethodAssertGenerator build local variable
            Object o_5_0 = o_elementByTagName_cf36512__3;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_8816 = (org.jsoup.nodes.Node)null;
            // StatementAdderMethod cloned existing statement
            a.appendChild(vc_8816);
            // MethodAssertGenerator build local variable
            Object o_11_0 = a.tagName().equals("P");
            org.junit.Assert.fail("elementByTagName_cf36512_cf37559 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf37020_cf38352_failAssert22() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
            // AssertGenerator replace invocation
            org.jsoup.parser.Tag o_elementByTagName_cf37020__3 = // StatementAdderMethod cloned existing statement
a.tag();
            // MethodAssertGenerator build local variable
            Object o_5_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isFormSubmittable();
            // MethodAssertGenerator build local variable
            Object o_7_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isKnownTag();
            // MethodAssertGenerator build local variable
            Object o_9_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).getName();
            // MethodAssertGenerator build local variable
            Object o_11_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isEmpty();
            // MethodAssertGenerator build local variable
            Object o_13_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).formatAsBlock();
            // MethodAssertGenerator build local variable
            Object o_15_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).canContainBlock();
            // MethodAssertGenerator build local variable
            Object o_17_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isData();
            // MethodAssertGenerator build local variable
            Object o_19_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isBlock();
            // MethodAssertGenerator build local variable
            Object o_21_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).preserveWhitespace();
            // MethodAssertGenerator build local variable
            Object o_23_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isSelfClosing();
            // MethodAssertGenerator build local variable
            Object o_25_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isFormListed();
            // MethodAssertGenerator build local variable
            Object o_27_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isInline();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_9037 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            a.is(vc_9037);
            // MethodAssertGenerator build local variable
            Object o_33_0 = a.tagName().equals("P");
            org.junit.Assert.fail("elementByTagName_cf37020_cf38352 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf36512_cf38219_failAssert36() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
            // AssertGenerator replace invocation
            boolean o_elementByTagName_cf36512__3 = // StatementAdderMethod cloned existing statement
a.hasText();
            // MethodAssertGenerator build local variable
            Object o_5_0 = o_elementByTagName_cf36512__3;
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_9000 = (java.util.regex.Pattern)null;
            // StatementAdderMethod cloned existing statement
            a.getElementsMatchingText(vc_9000);
            // MethodAssertGenerator build local variable
            Object o_11_0 = a.tagName().equals("P");
            org.junit.Assert.fail("elementByTagName_cf36512_cf38219 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf36580_cf40738_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
            // AssertGenerator replace invocation
            java.lang.String o_elementByTagName_cf36580__3 = // StatementAdderMethod cloned existing statement
a.ownText();
            // MethodAssertGenerator build local variable
            Object o_5_0 = o_elementByTagName_cf36580__3;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_9762 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            a.wrap(vc_9762);
            // MethodAssertGenerator build local variable
            Object o_11_0 = a.tagName().equals("P");
            org.junit.Assert.fail("elementByTagName_cf36580_cf40738 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf36580_cf41063_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
            // AssertGenerator replace invocation
            java.lang.String o_elementByTagName_cf36580__3 = // StatementAdderMethod cloned existing statement
a.ownText();
            // MethodAssertGenerator build local variable
            Object o_5_0 = o_elementByTagName_cf36580__3;
            // StatementAdderOnAssert create null value
            java.lang.String vc_9852 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            a.select(vc_9852);
            // MethodAssertGenerator build local variable
            Object o_11_0 = a.tagName().equals("P");
            org.junit.Assert.fail("elementByTagName_cf36580_cf41063 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf37020_cf38652_failAssert35() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
            // AssertGenerator replace invocation
            org.jsoup.parser.Tag o_elementByTagName_cf37020__3 = // StatementAdderMethod cloned existing statement
a.tag();
            // MethodAssertGenerator build local variable
            Object o_5_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isFormSubmittable();
            // MethodAssertGenerator build local variable
            Object o_7_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isKnownTag();
            // MethodAssertGenerator build local variable
            Object o_9_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).getName();
            // MethodAssertGenerator build local variable
            Object o_11_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isEmpty();
            // MethodAssertGenerator build local variable
            Object o_13_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).formatAsBlock();
            // MethodAssertGenerator build local variable
            Object o_15_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).canContainBlock();
            // MethodAssertGenerator build local variable
            Object o_17_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isData();
            // MethodAssertGenerator build local variable
            Object o_19_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isBlock();
            // MethodAssertGenerator build local variable
            Object o_21_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).preserveWhitespace();
            // MethodAssertGenerator build local variable
            Object o_23_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isSelfClosing();
            // MethodAssertGenerator build local variable
            Object o_25_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isFormListed();
            // MethodAssertGenerator build local variable
            Object o_27_0 = ((org.jsoup.parser.Tag)o_elementByTagName_cf37020__3).isInline();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_9141 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            a.getElementById(vc_9141);
            // MethodAssertGenerator build local variable
            Object o_33_0 = a.tagName().equals("P");
            org.junit.Assert.fail("elementByTagName_cf37020_cf38652 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf36512_cf37907_failAssert19() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
            // AssertGenerator replace invocation
            boolean o_elementByTagName_cf36512__3 = // StatementAdderMethod cloned existing statement
a.hasText();
            // MethodAssertGenerator build local variable
            Object o_5_0 = o_elementByTagName_cf36512__3;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_1365 = "P";
            // StatementAdderMethod cloned existing statement
            a.wrap(String_vc_1365);
            // MethodAssertGenerator build local variable
            Object o_11_0 = a.tagName().equals("P");
            org.junit.Assert.fail("elementByTagName_cf36512_cf37907 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf36580_cf40354_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
            // AssertGenerator replace invocation
            java.lang.String o_elementByTagName_cf36580__3 = // StatementAdderMethod cloned existing statement
a.ownText();
            // MethodAssertGenerator build local variable
            Object o_5_0 = o_elementByTagName_cf36580__3;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_9651 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            a.after(vc_9651);
            // MethodAssertGenerator build local variable
            Object o_11_0 = a.tagName().equals("P");
            org.junit.Assert.fail("elementByTagName_cf36580_cf40354 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf36580_cf40481_failAssert6_literalMutation46587() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
            // AssertGenerator replace invocation
            java.lang.String o_elementByTagName_cf36580__3 = // StatementAdderMethod cloned existing statement
a.ownText();
            // MethodAssertGenerator build local variable
            Object o_5_0 = o_elementByTagName_cf36580__3;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_5_0, "");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_1484 = "r";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_1484, "r");
            // StatementAdderMethod cloned existing statement
            a.before(String_vc_1484);
            // MethodAssertGenerator build local variable
            Object o_11_0 = a.tagName().equals("P");
            org.junit.Assert.fail("elementByTagName_cf36580_cf40481 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementByTagName */
    @org.junit.Test(timeout = 10000)
    public void elementByTagName_cf36989_failAssert30_literalMutation42188_cf43301_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Element a = new org.jsoup.nodes.Element("P");
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_1325 = "U";
                // MethodAssertGenerator build local variable
                Object o_7_0 = String_vc_1325;
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_8627 = (org.jsoup.nodes.Element)null;
                // StatementAdderOnAssert create null value
                java.lang.String vc_10446 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                a.is(vc_10446);
                // MethodAssertGenerator build local variable
                Object o_15_0 = vc_8627;
                // StatementAdderMethod cloned existing statement
                vc_8627.val(String_vc_1325);
                // MethodAssertGenerator build local variable
                Object o_9_0 = a.tagName().equals("P");
                org.junit.Assert.fail("elementByTagName_cf36989 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("elementByTagName_cf36989_failAssert30_literalMutation42188_cf43301 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementIsNotASiblingOfItself */
    @org.junit.Test(timeout = 10000)
    public void elementIsNotASiblingOfItself_cf47486_failAssert38() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p>Two<p>Three</div>");
            org.jsoup.nodes.Element p2 = doc.select("p").get(1);
            // MethodAssertGenerator build local variable
            Object o_6_0 = p2.text();
            org.jsoup.select.Elements els = p2.siblingElements();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.get(0).outerHtml();
            // StatementAdderOnAssert create null value
            java.lang.String vc_11514 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p2.getElementsByTag(vc_11514);
            // MethodAssertGenerator build local variable
            Object o_19_0 = els.get(1).outerHtml();
            org.junit.Assert.fail("elementIsNotASiblingOfItself_cf47486 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementIsNotASiblingOfItself */
    @org.junit.Test(timeout = 10000)
    public void elementIsNotASiblingOfItself_cf47586_failAssert40() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p>Two<p>Three</div>");
            org.jsoup.nodes.Element p2 = doc.select("p").get(1);
            // MethodAssertGenerator build local variable
            Object o_6_0 = p2.text();
            org.jsoup.select.Elements els = p2.siblingElements();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.get(0).outerHtml();
            // StatementAdderOnAssert create null value
            java.lang.String vc_11544 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p2.select(vc_11544);
            // MethodAssertGenerator build local variable
            Object o_19_0 = els.get(1).outerHtml();
            org.junit.Assert.fail("elementIsNotASiblingOfItself_cf47586 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementIsNotASiblingOfItself */
    @org.junit.Test(timeout = 10000)
    public void elementIsNotASiblingOfItself_cf46743_failAssert52() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p>Two<p>Three</div>");
            org.jsoup.nodes.Element p2 = doc.select("p").get(1);
            // MethodAssertGenerator build local variable
            Object o_6_0 = p2.text();
            org.jsoup.select.Elements els = p2.siblingElements();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.get(0).outerHtml();
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            div.hasClass(text);
            // MethodAssertGenerator build local variable
            Object o_23_0 = els.get(1).outerHtml();
            org.junit.Assert.fail("elementIsNotASiblingOfItself_cf46743 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementIsNotASiblingOfItself */
    @org.junit.Test(timeout = 10000)
    public void elementIsNotASiblingOfItself_cf47289_failAssert16() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p>Two<p>Three</div>");
            org.jsoup.nodes.Element p2 = doc.select("p").get(1);
            // MethodAssertGenerator build local variable
            Object o_6_0 = p2.text();
            org.jsoup.select.Elements els = p2.siblingElements();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.get(0).outerHtml();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_11464 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p2.getElementsByAttribute(vc_11464);
            // MethodAssertGenerator build local variable
            Object o_19_0 = els.get(1).outerHtml();
            org.junit.Assert.fail("elementIsNotASiblingOfItself_cf47289 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementIsNotASiblingOfItself */
    @org.junit.Test(timeout = 10000)
    public void elementIsNotASiblingOfItself_cf46760_failAssert59() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p>Two<p>Three</div>");
            org.jsoup.nodes.Element p2 = doc.select("p").get(1);
            // MethodAssertGenerator build local variable
            Object o_6_0 = p2.text();
            org.jsoup.select.Elements els = p2.siblingElements();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.get(0).outerHtml();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_1740 = "<p>Three</p>";
            // StatementAdderMethod cloned existing statement
            p2.is(String_vc_1740);
            // MethodAssertGenerator build local variable
            Object o_19_0 = els.get(1).outerHtml();
            org.junit.Assert.fail("elementIsNotASiblingOfItself_cf46760 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementIsNotASiblingOfItself */
    @org.junit.Test(timeout = 10000)
    public void elementIsNotASiblingOfItself_cf47589_failAssert62() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p>Two<p>Three</div>");
            org.jsoup.nodes.Element p2 = doc.select("p").get(1);
            // MethodAssertGenerator build local variable
            Object o_6_0 = p2.text();
            org.jsoup.select.Elements els = p2.siblingElements();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.get(0).outerHtml();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_11545 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p2.select(vc_11545);
            // MethodAssertGenerator build local variable
            Object o_19_0 = els.get(1).outerHtml();
            org.junit.Assert.fail("elementIsNotASiblingOfItself_cf47589 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementIsNotASiblingOfItself */
    @org.junit.Test(timeout = 10000)
    public void elementIsNotASiblingOfItself_cf47484_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p>Two<p>Three</div>");
            org.jsoup.nodes.Element p2 = doc.select("p").get(1);
            // MethodAssertGenerator build local variable
            Object o_6_0 = p2.text();
            org.jsoup.select.Elements els = p2.siblingElements();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.get(0).outerHtml();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_1775 = "<div><p>One<p>Two<p>Three</div>";
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_11512 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_11512.getElementsByTag(String_vc_1775);
            // MethodAssertGenerator build local variable
            Object o_21_0 = els.get(1).outerHtml();
            org.junit.Assert.fail("elementIsNotASiblingOfItself_cf47484 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementIsNotASiblingOfItself */
    @org.junit.Test(timeout = 10000)
    public void elementIsNotASiblingOfItself_cf46761_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p>Two<p>Three</div>");
            org.jsoup.nodes.Element p2 = doc.select("p").get(1);
            // MethodAssertGenerator build local variable
            Object o_6_0 = p2.text();
            org.jsoup.select.Elements els = p2.siblingElements();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.get(0).outerHtml();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_11293 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p2.is(vc_11293);
            // MethodAssertGenerator build local variable
            Object o_19_0 = els.get(1).outerHtml();
            org.junit.Assert.fail("elementIsNotASiblingOfItself_cf46761 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementIsNotASiblingOfItself */
    /* amplification of org.jsoup.nodes.ElementTest#elementIsNotASiblingOfItself_cf46760_failAssert59_add47766 */
    @org.junit.Test(timeout = 10000)
    public void elementIsNotASiblingOfItself_cf46760_failAssert59_add47766_literalMutation48161() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p>Two<p>Three</div>");
            org.jsoup.nodes.Element p2 = doc.select("p").get(1);
            // MethodAssertGenerator build local variable
            Object o_6_0 = p2.text();
            org.jsoup.select.Elements els = p2.siblingElements();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.get(0).outerHtml();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_1740 = "KC?m uQ;cV/q";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_1740, "KC?m uQ;cV/q");
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            p2.is(String_vc_1740);
            // StatementAdderMethod cloned existing statement
            p2.is(String_vc_1740);
            // MethodAssertGenerator build local variable
            Object o_19_0 = els.get(1).outerHtml();
            org.junit.Assert.fail("elementIsNotASiblingOfItself_cf46760 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementIsNotASiblingOfItself */
    /* amplification of org.jsoup.nodes.ElementTest#elementIsNotASiblingOfItself_cf46760_failAssert59_literalMutation47769 */
    @org.junit.Test(timeout = 10000)
    public void elementIsNotASiblingOfItself_cf46760_failAssert59_literalMutation47769_literalMutation48173() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p>Two<p>Three</div>");
            org.jsoup.nodes.Element p2 = doc.select("p").get(1);
            // MethodAssertGenerator build local variable
            Object o_6_0 = p2.text();
            org.jsoup.select.Elements els = p2.siblingElements();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.get(0).outerHtml();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_1740 = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_1740, "");
            // StatementAdderMethod cloned existing statement
            p2.is(String_vc_1740);
            // MethodAssertGenerator build local variable
            Object o_19_0 = els.get(1).outerHtml();
            org.junit.Assert.fail("elementIsNotASiblingOfItself_cf46760 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#elementIsNotASiblingOfItself */
    /* amplification of org.jsoup.nodes.ElementTest#elementIsNotASiblingOfItself_cf47140_failAssert70_add47790 */
    @org.junit.Test(timeout = 10000)
    public void elementIsNotASiblingOfItself_cf47140_failAssert70_add47790_literalMutation48260() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p>Two<p>Three</div>");
            org.jsoup.nodes.Element p2 = doc.select("p").get(1);
            // MethodAssertGenerator build local variable
            Object o_6_0 = p2.text();
            org.jsoup.select.Elements els = p2.siblingElements();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.get(0).outerHtml();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_1754 = "<p>(Three</p>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_1754, "<p>(Three</p>");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_11421 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_11421.prependElement(String_vc_1754);
            // StatementAdderMethod cloned existing statement
            vc_11421.prependElement(String_vc_1754);
            // MethodAssertGenerator build local variable
            Object o_21_0 = els.get(1).outerHtml();
            org.junit.Assert.fail("elementIsNotASiblingOfItself_cf47140 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getElementsByTagName */
    @org.junit.Test(timeout = 10000)
    public void getElementsByTagName_cf48350_failAssert34() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            java.util.List<org.jsoup.nodes.Element> divs = doc.getElementsByTag("div");
            // MethodAssertGenerator build local variable
            Object o_5_0 = divs.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = divs.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_10_0 = divs.get(1).id();
            java.util.List<org.jsoup.nodes.Element> ps = doc.getElementsByTag("p");
            // MethodAssertGenerator build local variable
            Object o_15_0 = ps.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = ((org.jsoup.nodes.TextNode) (ps.get(0).childNode(0))).getWholeText();
            // MethodAssertGenerator build local variable
            Object o_21_0 = ((org.jsoup.nodes.TextNode) (ps.get(1).childNode(0))).getWholeText();
            java.util.List<org.jsoup.nodes.Element> ps2 = doc.getElementsByTag("P");
            java.util.List<org.jsoup.nodes.Element> imgs = doc.getElementsByTag("img");
            // MethodAssertGenerator build local variable
            Object o_30_0 = imgs.get(0).attr("src");
            java.util.List<org.jsoup.nodes.Element> empty = doc.getElementsByTag("wtf");
            // StatementAdderOnAssert create null value
            java.lang.String vc_11574 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.getElementById("div1");
            // StatementAdderMethod cloned existing statement
            div.is(vc_11574);
            // MethodAssertGenerator build local variable
            Object o_42_0 = empty.size();
            org.junit.Assert.fail("getElementsByTagName_cf48350 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getElementsByTagName */
    @org.junit.Test(timeout = 10000)
    public void getElementsByTagName_cf48543_failAssert37() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            java.util.List<org.jsoup.nodes.Element> divs = doc.getElementsByTag("div");
            // MethodAssertGenerator build local variable
            Object o_5_0 = divs.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = divs.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_10_0 = divs.get(1).id();
            java.util.List<org.jsoup.nodes.Element> ps = doc.getElementsByTag("p");
            // MethodAssertGenerator build local variable
            Object o_15_0 = ps.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = ((org.jsoup.nodes.TextNode) (ps.get(0).childNode(0))).getWholeText();
            // MethodAssertGenerator build local variable
            Object o_21_0 = ((org.jsoup.nodes.TextNode) (ps.get(1).childNode(0))).getWholeText();
            java.util.List<org.jsoup.nodes.Element> ps2 = doc.getElementsByTag("P");
            java.util.List<org.jsoup.nodes.Element> imgs = doc.getElementsByTag("img");
            // MethodAssertGenerator build local variable
            Object o_30_0 = imgs.get(0).attr("src");
            java.util.List<org.jsoup.nodes.Element> empty = doc.getElementsByTag("wtf");
            // StatementAdderOnAssert create null value
            java.util.Set<java.lang.String> vc_11668 = (java.util.Set)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div.classNames(vc_11668);
            // MethodAssertGenerator build local variable
            Object o_43_0 = empty.size();
            org.junit.Assert.fail("getElementsByTagName_cf48543 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getElementsByTagName */
    @org.junit.Test(timeout = 10000)
    public void getElementsByTagName_cf48699_failAssert23() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            java.util.List<org.jsoup.nodes.Element> divs = doc.getElementsByTag("div");
            // MethodAssertGenerator build local variable
            Object o_5_0 = divs.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = divs.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_10_0 = divs.get(1).id();
            java.util.List<org.jsoup.nodes.Element> ps = doc.getElementsByTag("p");
            // MethodAssertGenerator build local variable
            Object o_15_0 = ps.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = ((org.jsoup.nodes.TextNode) (ps.get(0).childNode(0))).getWholeText();
            // MethodAssertGenerator build local variable
            Object o_21_0 = ((org.jsoup.nodes.TextNode) (ps.get(1).childNode(0))).getWholeText();
            java.util.List<org.jsoup.nodes.Element> ps2 = doc.getElementsByTag("P");
            java.util.List<org.jsoup.nodes.Element> imgs = doc.getElementsByTag("img");
            // MethodAssertGenerator build local variable
            Object o_30_0 = imgs.get(0).attr("src");
            java.util.List<org.jsoup.nodes.Element> empty = doc.getElementsByTag("wtf");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element span = doc.select("span").first();
            // StatementAdderMethod cloned existing statement
            span.val(result);
            // MethodAssertGenerator build local variable
            Object o_45_0 = empty.size();
            org.junit.Assert.fail("getElementsByTagName_cf48699 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getElementsByTagName */
    @org.junit.Test(timeout = 10000)
    public void getElementsByTagName_cf48331_failAssert38() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            java.util.List<org.jsoup.nodes.Element> divs = doc.getElementsByTag("div");
            // MethodAssertGenerator build local variable
            Object o_5_0 = divs.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = divs.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_10_0 = divs.get(1).id();
            java.util.List<org.jsoup.nodes.Element> ps = doc.getElementsByTag("p");
            // MethodAssertGenerator build local variable
            Object o_15_0 = ps.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = ((org.jsoup.nodes.TextNode) (ps.get(0).childNode(0))).getWholeText();
            // MethodAssertGenerator build local variable
            Object o_21_0 = ((org.jsoup.nodes.TextNode) (ps.get(1).childNode(0))).getWholeText();
            java.util.List<org.jsoup.nodes.Element> ps2 = doc.getElementsByTag("P");
            java.util.List<org.jsoup.nodes.Element> imgs = doc.getElementsByTag("img");
            // MethodAssertGenerator build local variable
            Object o_30_0 = imgs.get(0).attr("src");
            java.util.List<org.jsoup.nodes.Element> empty = doc.getElementsByTag("wtf");
            // StatementAdderOnAssert create null value
            java.lang.String vc_11568 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_11566 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_11566.hasClass(vc_11568);
            // MethodAssertGenerator build local variable
            Object o_41_0 = empty.size();
            org.junit.Assert.fail("getElementsByTagName_cf48331 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getElementsByTagName */
    @org.junit.Test(timeout = 10000)
    public void getElementsByTagName_cf48500_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            java.util.List<org.jsoup.nodes.Element> divs = doc.getElementsByTag("div");
            // MethodAssertGenerator build local variable
            Object o_5_0 = divs.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = divs.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_10_0 = divs.get(1).id();
            java.util.List<org.jsoup.nodes.Element> ps = doc.getElementsByTag("p");
            // MethodAssertGenerator build local variable
            Object o_15_0 = ps.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = ((org.jsoup.nodes.TextNode) (ps.get(0).childNode(0))).getWholeText();
            // MethodAssertGenerator build local variable
            Object o_21_0 = ((org.jsoup.nodes.TextNode) (ps.get(1).childNode(0))).getWholeText();
            java.util.List<org.jsoup.nodes.Element> ps2 = doc.getElementsByTag("P");
            java.util.List<org.jsoup.nodes.Element> imgs = doc.getElementsByTag("img");
            // MethodAssertGenerator build local variable
            Object o_30_0 = imgs.get(0).attr("src");
            java.util.List<org.jsoup.nodes.Element> empty = doc.getElementsByTag("wtf");
            // StatementAdderOnAssert create random local variable
            boolean vc_11650 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_11649 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.attr(vc_11649, vc_11650);
            // MethodAssertGenerator build local variable
            Object o_45_0 = empty.size();
            org.junit.Assert.fail("getElementsByTagName_cf48500 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getElementsByTagName */
    @org.junit.Test(timeout = 10000)
    public void getElementsByTagName_cf48945_failAssert30() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            java.util.List<org.jsoup.nodes.Element> divs = doc.getElementsByTag("div");
            // MethodAssertGenerator build local variable
            Object o_5_0 = divs.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = divs.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_10_0 = divs.get(1).id();
            java.util.List<org.jsoup.nodes.Element> ps = doc.getElementsByTag("p");
            // MethodAssertGenerator build local variable
            Object o_15_0 = ps.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = ((org.jsoup.nodes.TextNode) (ps.get(0).childNode(0))).getWholeText();
            // MethodAssertGenerator build local variable
            Object o_21_0 = ((org.jsoup.nodes.TextNode) (ps.get(1).childNode(0))).getWholeText();
            java.util.List<org.jsoup.nodes.Element> ps2 = doc.getElementsByTag("P");
            java.util.List<org.jsoup.nodes.Element> imgs = doc.getElementsByTag("img");
            // MethodAssertGenerator build local variable
            Object o_30_0 = imgs.get(0).attr("src");
            java.util.List<org.jsoup.nodes.Element> empty = doc.getElementsByTag("wtf");
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_11820 = (java.util.regex.Pattern)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div.getElementsMatchingText(vc_11820);
            // MethodAssertGenerator build local variable
            Object o_43_0 = empty.size();
            org.junit.Assert.fail("getElementsByTagName_cf48945 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getElementsByTagName */
    @org.junit.Test(timeout = 10000)
    public void getElementsByTagName_cf48649_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            java.util.List<org.jsoup.nodes.Element> divs = doc.getElementsByTag("div");
            // MethodAssertGenerator build local variable
            Object o_5_0 = divs.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = divs.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_10_0 = divs.get(1).id();
            java.util.List<org.jsoup.nodes.Element> ps = doc.getElementsByTag("p");
            // MethodAssertGenerator build local variable
            Object o_15_0 = ps.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = ((org.jsoup.nodes.TextNode) (ps.get(0).childNode(0))).getWholeText();
            // MethodAssertGenerator build local variable
            Object o_21_0 = ((org.jsoup.nodes.TextNode) (ps.get(1).childNode(0))).getWholeText();
            java.util.List<org.jsoup.nodes.Element> ps2 = doc.getElementsByTag("P");
            java.util.List<org.jsoup.nodes.Element> imgs = doc.getElementsByTag("img");
            // MethodAssertGenerator build local variable
            Object o_30_0 = imgs.get(0).attr("src");
            java.util.List<org.jsoup.nodes.Element> empty = doc.getElementsByTag("wtf");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_11716 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_11713 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_11713.removeClass(vc_11716);
            // MethodAssertGenerator build local variable
            Object o_41_0 = empty.size();
            org.junit.Assert.fail("getElementsByTagName_cf48649 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getElementsByTagName */
    @org.junit.Test(timeout = 10000)
    public void getElementsByTagName_cf48884_failAssert60() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            java.util.List<org.jsoup.nodes.Element> divs = doc.getElementsByTag("div");
            // MethodAssertGenerator build local variable
            Object o_5_0 = divs.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = divs.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_10_0 = divs.get(1).id();
            java.util.List<org.jsoup.nodes.Element> ps = doc.getElementsByTag("p");
            // MethodAssertGenerator build local variable
            Object o_15_0 = ps.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = ((org.jsoup.nodes.TextNode) (ps.get(0).childNode(0))).getWholeText();
            // MethodAssertGenerator build local variable
            Object o_21_0 = ((org.jsoup.nodes.TextNode) (ps.get(1).childNode(0))).getWholeText();
            java.util.List<org.jsoup.nodes.Element> ps2 = doc.getElementsByTag("P");
            java.util.List<org.jsoup.nodes.Element> imgs = doc.getElementsByTag("img");
            // MethodAssertGenerator build local variable
            Object o_30_0 = imgs.get(0).attr("src");
            java.util.List<org.jsoup.nodes.Element> empty = doc.getElementsByTag("wtf");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_11797 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.getElementById("div1");
            // StatementAdderMethod cloned existing statement
            div.getElementsByTag(vc_11797);
            // MethodAssertGenerator build local variable
            Object o_42_0 = empty.size();
            org.junit.Assert.fail("getElementsByTagName_cf48884 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getElementsByTagName */
    /* amplification of org.jsoup.nodes.ElementTest#getElementsByTagName_cf48475_failAssert11_add49032 */
    @org.junit.Test(timeout = 10000)
    public void getElementsByTagName_cf48475_failAssert11_add49032_literalMutation49184() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            java.util.List<org.jsoup.nodes.Element> divs = doc.getElementsByTag("div");
            // MethodAssertGenerator build local variable
            Object o_5_0 = divs.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = divs.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_10_0 = divs.get(1).id();
            java.util.List<org.jsoup.nodes.Element> ps = doc.getElementsByTag("p");
            // MethodAssertGenerator build local variable
            Object o_15_0 = ps.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = ((org.jsoup.nodes.TextNode) (ps.get(0).childNode(0))).getWholeText();
            // MethodAssertGenerator build local variable
            Object o_21_0 = ((org.jsoup.nodes.TextNode) (ps.get(1).childNode(0))).getWholeText();
            java.util.List<org.jsoup.nodes.Element> ps2 = doc.getElementsByTag("P");
            java.util.List<org.jsoup.nodes.Element> imgs = doc.getElementsByTag("img");
            // MethodAssertGenerator build local variable
            Object o_30_0 = imgs.get(0).attr("src");
            java.util.List<org.jsoup.nodes.Element> empty = doc.getElementsByTag("wtf");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_1788 = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_1788, "");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element title = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            title.appendElement(String_vc_1788);
            // StatementAdderMethod cloned existing statement
            title.appendElement(String_vc_1788);
            // MethodAssertGenerator build local variable
            Object o_42_0 = empty.size();
            org.junit.Assert.fail("getElementsByTagName_cf48475 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getElementsByTagName */
    /* amplification of org.jsoup.nodes.ElementTest#getElementsByTagName_cf48500_failAssert8_add49028 */
    @org.junit.Test(timeout = 10000)
    public void getElementsByTagName_cf48500_failAssert8_add49028_literalMutation49175() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            java.util.List<org.jsoup.nodes.Element> divs = doc.getElementsByTag("div");
            // MethodAssertGenerator build local variable
            Object o_5_0 = divs.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = divs.get(0).id();
            // MethodAssertGenerator build local variable
            Object o_10_0 = divs.get(1).id();
            java.util.List<org.jsoup.nodes.Element> ps = doc.getElementsByTag("p");
            // MethodAssertGenerator build local variable
            Object o_15_0 = ps.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = ((org.jsoup.nodes.TextNode) (ps.get(0).childNode(0))).getWholeText();
            // MethodAssertGenerator build local variable
            Object o_21_0 = ((org.jsoup.nodes.TextNode) (ps.get(1).childNode(0))).getWholeText();
            java.util.List<org.jsoup.nodes.Element> ps2 = doc.getElementsByTag("P");
            java.util.List<org.jsoup.nodes.Element> imgs = doc.getElementsByTag("img");
            // MethodAssertGenerator build local variable
            Object o_30_0 = imgs.get(0).attr("src");
            java.util.List<org.jsoup.nodes.Element> empty = doc.getElementsByTag("wtf");
            // StatementAdderOnAssert create random local variable
            boolean vc_11650 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_11650);
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_11649 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            p.attr(vc_11649, vc_11650);
            // StatementAdderMethod cloned existing statement
            p.attr(vc_11649, vc_11650);
            // MethodAssertGenerator build local variable
            Object o_45_0 = empty.size();
            org.junit.Assert.fail("getElementsByTagName_cf48500 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getNamespacedElementsByTag */
    @org.junit.Test(timeout = 10000)
    public void getNamespacedElementsByTag_cf49882_failAssert45() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><abc:def id=1>Hello</abc:def></div>");
            org.jsoup.select.Elements els = doc.getElementsByTag("abc:def");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.first().id();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_12015 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_12015.wrap(result);
            // MethodAssertGenerator build local variable
            Object o_18_0 = els.first().tagName();
            org.junit.Assert.fail("getNamespacedElementsByTag_cf49882 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getNamespacedElementsByTag */
    @org.junit.Test(timeout = 10000)
    public void getNamespacedElementsByTag_cf49909_failAssert61() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><abc:def id=1>Hello</abc:def></div>");
            org.jsoup.select.Elements els = doc.getElementsByTag("abc:def");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.first().id();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_12028 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.getElementsByAttribute(vc_12028);
            // MethodAssertGenerator build local variable
            Object o_18_0 = els.first().tagName();
            org.junit.Assert.fail("getNamespacedElementsByTag_cf49909 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getNamespacedElementsByTag */
    @org.junit.Test(timeout = 10000)
    public void getNamespacedElementsByTag_cf49675_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><abc:def id=1>Hello</abc:def></div>");
            org.jsoup.select.Elements els = doc.getElementsByTag("abc:def");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.first().id();
            // StatementAdderOnAssert create random local variable
            boolean vc_11932 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_11931 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.attr(vc_11931, vc_11932);
            // MethodAssertGenerator build local variable
            Object o_20_0 = els.first().tagName();
            org.junit.Assert.fail("getNamespacedElementsByTag_cf49675 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getNamespacedElementsByTag */
    @org.junit.Test(timeout = 10000)
    public void getNamespacedElementsByTag_cf49828_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><abc:def id=1>Hello</abc:def></div>");
            org.jsoup.select.Elements els = doc.getElementsByTag("abc:def");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.first().id();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_11998 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.removeClass(vc_11998);
            // MethodAssertGenerator build local variable
            Object o_18_0 = els.first().tagName();
            org.junit.Assert.fail("getNamespacedElementsByTag_cf49828 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getNamespacedElementsByTag */
    @org.junit.Test(timeout = 10000)
    public void getNamespacedElementsByTag_cf50134_failAssert66() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><abc:def id=1>Hello</abc:def></div>");
            org.jsoup.select.Elements els = doc.getElementsByTag("abc:def");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.first().id();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_12109 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.select(vc_12109);
            // MethodAssertGenerator build local variable
            Object o_18_0 = els.first().tagName();
            org.junit.Assert.fail("getNamespacedElementsByTag_cf50134 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getNamespacedElementsByTag */
    @org.junit.Test(timeout = 10000)
    public void getNamespacedElementsByTag_cf49511_failAssert60() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><abc:def id=1>Hello</abc:def></div>");
            org.jsoup.select.Elements els = doc.getElementsByTag("abc:def");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.first().id();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element img = doc.select("img").first();
            // StatementAdderMethod cloned existing statement
            img.hasClass(result);
            // MethodAssertGenerator build local variable
            Object o_20_0 = els.first().tagName();
            org.junit.Assert.fail("getNamespacedElementsByTag_cf49511 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getNamespacedElementsByTag */
    /* amplification of org.jsoup.nodes.ElementTest#getNamespacedElementsByTag_cf49602_failAssert67_add50330 */
    @org.junit.Test(timeout = 10000)
    public void getNamespacedElementsByTag_cf49602_failAssert67_add50330_literalMutation50936() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><abc:def id=1>Hello</abc:def></div>");
            org.jsoup.select.Elements els = doc.getElementsByTag("abc:def");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.first().id();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_1829 = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_1829, "");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element style = doc.select("style").first();
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            style.addClass(String_vc_1829);
            // StatementAdderMethod cloned existing statement
            style.addClass(String_vc_1829);
            // MethodAssertGenerator build local variable
            Object o_18_0 = els.first().tagName();
            org.junit.Assert.fail("getNamespacedElementsByTag_cf49602 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#getNamespacedElementsByTag */
    /* amplification of org.jsoup.nodes.ElementTest#getNamespacedElementsByTag_cf49662_failAssert2_add50197 */
    @org.junit.Test(timeout = 10000)
    public void getNamespacedElementsByTag_cf49662_failAssert2_add50197_literalMutation50383() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><abc:def id=1>Hello</abc:def></div>");
            org.jsoup.select.Elements els = doc.getElementsByTag("abc:def");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.first().id();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_1833 = "H";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_1833, "H");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            q.appendText(String_vc_1833);
            // StatementAdderMethod cloned existing statement
            q.appendText(String_vc_1833);
            // MethodAssertGenerator build local variable
            Object o_18_0 = els.first().tagName();
            org.junit.Assert.fail("getNamespacedElementsByTag_cf49662 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAsCopy */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAsCopy_cf491135_failAssert44() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            org.jsoup.select.Elements ps = doc.select("p").clone();
            ps.first().text("One cloned");
            div2.insertChildren((-1), ps);
            // MethodAssertGenerator build local variable
            Object o_16_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_19_0 = div2.childNodeSize();
            // StatementAdderOnAssert create null value
            java.lang.String vc_125472 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element divB = doc.select("div").get(1);
            // StatementAdderMethod cloned existing statement
            divB.select(vc_125472);
            // MethodAssertGenerator build local variable
            Object o_29_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("insertChildrenAsCopy_cf491135 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAsCopy */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAsCopy_cf490755_failAssert16() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            org.jsoup.select.Elements ps = doc.select("p").clone();
            ps.first().text("One cloned");
            div2.insertChildren((-1), ps);
            // MethodAssertGenerator build local variable
            Object o_16_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_19_0 = div2.childNodeSize();
            // StatementAdderOnAssert create null value
            java.lang.String vc_125369 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div2.text(vc_125369);
            // MethodAssertGenerator build local variable
            Object o_25_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("insertChildrenAsCopy_cf490755 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAsCopy */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAsCopy_cf490991_failAssert29() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            org.jsoup.select.Elements ps = doc.select("p").clone();
            ps.first().text("One cloned");
            div2.insertChildren((-1), ps);
            // MethodAssertGenerator build local variable
            Object o_16_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_19_0 = div2.childNodeSize();
            // StatementAdderOnAssert create null value
            java.lang.String vc_125429 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div2.getElementsByClass(vc_125429);
            // MethodAssertGenerator build local variable
            Object o_25_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("insertChildrenAsCopy_cf490991 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAsCopy */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAsCopy_cf491095_failAssert22() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            org.jsoup.select.Elements ps = doc.select("p").clone();
            ps.first().text("One cloned");
            div2.insertChildren((-1), ps);
            // MethodAssertGenerator build local variable
            Object o_16_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_19_0 = div2.childNodeSize();
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_125458 = (java.util.regex.Pattern)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").get(1);
            // StatementAdderMethod cloned existing statement
            p.getElementsMatchingOwnText(vc_125458);
            // MethodAssertGenerator build local variable
            Object o_29_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("insertChildrenAsCopy_cf491095 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAsCopy */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAsCopy_cf490308_failAssert52() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            org.jsoup.select.Elements ps = doc.select("p").clone();
            ps.first().text("One cloned");
            div2.insertChildren((-1), ps);
            // MethodAssertGenerator build local variable
            Object o_16_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_19_0 = div2.childNodeSize();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.is(result);
            // MethodAssertGenerator build local variable
            Object o_31_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("insertChildrenAsCopy_cf490308 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAsCopy */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAsCopy_cf490581_failAssert60() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            org.jsoup.select.Elements ps = doc.select("p").clone();
            ps.first().text("One cloned");
            div2.insertChildren((-1), ps);
            // MethodAssertGenerator build local variable
            Object o_16_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_19_0 = div2.childNodeSize();
            // StatementAdderOnAssert create null value
            java.util.Set<java.lang.String> vc_125314 = (java.util.Set)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            div.classNames(vc_125314);
            // MethodAssertGenerator build local variable
            Object o_28_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("insertChildrenAsCopy_cf490581 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAsCopy */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAsCopy_cf490727_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            org.jsoup.select.Elements ps = doc.select("p").clone();
            ps.first().text("One cloned");
            div2.insertChildren((-1), ps);
            // MethodAssertGenerator build local variable
            Object o_16_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_19_0 = div2.childNodeSize();
            // StatementAdderOnAssert create null value
            java.lang.String vc_125361 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.removeClass(vc_125361);
            // MethodAssertGenerator build local variable
            Object o_29_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("insertChildrenAsCopy_cf490727 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAsCopy */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAsCopy_cf491034_failAssert66() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            org.jsoup.select.Elements ps = doc.select("p").clone();
            ps.first().text("One cloned");
            div2.insertChildren((-1), ps);
            // MethodAssertGenerator build local variable
            Object o_16_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_19_0 = div2.childNodeSize();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_125443 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div1.getElementsByTag(vc_125443);
            // MethodAssertGenerator build local variable
            Object o_25_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("insertChildrenAsCopy_cf491034 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAsCopy */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAsCopy_cf490303_failAssert49() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            org.jsoup.select.Elements ps = doc.select("p").clone();
            ps.first().text("One cloned");
            div2.insertChildren((-1), ps);
            // MethodAssertGenerator build local variable
            Object o_16_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_19_0 = div2.childNodeSize();
            // StatementAdderOnAssert create null value
            java.lang.String vc_125220 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div2.is(vc_125220);
            // MethodAssertGenerator build local variable
            Object o_25_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("insertChildrenAsCopy_cf490303 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAsCopy */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAsCopy_cf490512_failAssert43() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            org.jsoup.select.Elements ps = doc.select("p").clone();
            ps.first().text("One cloned");
            div2.insertChildren((-1), ps);
            // MethodAssertGenerator build local variable
            Object o_16_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_19_0 = div2.childNodeSize();
            // StatementAdderOnAssert create random local variable
            boolean vc_125296 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_125294 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.attr(vc_125294, vc_125296);
            // MethodAssertGenerator build local variable
            Object o_31_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("insertChildrenAsCopy_cf490512 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAsCopy */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAsCopy_cf490834_failAssert70() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            org.jsoup.select.Elements ps = doc.select("p").clone();
            ps.first().text("One cloned");
            div2.insertChildren((-1), ps);
            // MethodAssertGenerator build local variable
            Object o_16_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_19_0 = div2.childNodeSize();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_125392 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div1.getElementsByAttribute(vc_125392);
            // MethodAssertGenerator build local variable
            Object o_25_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("insertChildrenAsCopy_cf490834 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAsCopy */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAsCopy_cf490768_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            org.jsoup.select.Elements ps = doc.select("p").clone();
            ps.first().text("One cloned");
            div2.insertChildren((-1), ps);
            // MethodAssertGenerator build local variable
            Object o_16_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_19_0 = div2.childNodeSize();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_125371 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_125371.toggleClass(result);
            // MethodAssertGenerator build local variable
            Object o_29_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("insertChildrenAsCopy_cf490768 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAsCopy */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAsCopy_add490255_failAssert35() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            org.jsoup.select.Elements ps = doc.select("p").clone();
            ps.first().text("One cloned");
            // MethodCallAdder
            div2.insertChildren((-1), ps);
            div2.insertChildren((-1), ps);
            // MethodAssertGenerator build local variable
            Object o_19_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_22_0 = div2.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_24_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("insertChildrenAsCopy_add490255 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAsCopy */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAsCopy_cf490280_failAssert51_literalMutation491495_failAssert56() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
                org.jsoup.nodes.Element div1 = doc.select("div").get(0);
                org.jsoup.nodes.Element div2 = doc.select("div").get(1);
                org.jsoup.select.Elements ps = doc.select("p").clone();
                ps.first().text("One cloned");
                div2.insertChildren(2, ps);
                // MethodAssertGenerator build local variable
                Object o_16_0 = div1.childNodeSize();
                // MethodAssertGenerator build local variable
                Object o_19_0 = div2.childNodeSize();
                // StatementAddOnAssert local variable replacement
                java.lang.String result = doc.toString().replaceAll("\\s+", "");
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_125212 = (org.jsoup.nodes.Element)null;
                // StatementAdderMethod cloned existing statement
                vc_125212.hasClass(result);
                // MethodAssertGenerator build local variable
                Object o_29_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.junit.Assert.fail("insertChildrenAsCopy_cf490280 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("insertChildrenAsCopy_cf490280_failAssert51_literalMutation491495 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAsCopy */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAsCopy_cf490295_failAssert28_add491373_failAssert35_literalMutation491948_failAssert29() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // AssertGenerator generate try/catch block with fail statement
                try {
                    org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
                    org.jsoup.nodes.Element div1 = doc.select("div").get(0);
                    org.jsoup.nodes.Element div2 = doc.select("div").get(1);
                    org.jsoup.select.Elements ps = doc.select("p").clone();
                    ps.first().text("One cloned");
                    // MethodCallAdder
                    div2.insertChildren(2, ps);
                    div2.insertChildren((-1), ps);
                    // MethodAssertGenerator build local variable
                    Object o_16_0 = div1.childNodeSize();
                    // MethodAssertGenerator build local variable
                    Object o_19_0 = div2.childNodeSize();
                    // StatementAdderOnAssert create null value
                    org.jsoup.nodes.Element vc_125216 = (org.jsoup.nodes.Element)null;
                    // StatementAdderMethod cloned existing statement
                    vc_125216.hasText();
                    // MethodAssertGenerator build local variable
                    Object o_25_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                    org.junit.Assert.fail("insertChildrenAsCopy_cf490295 should have thrown NullPointerException");
                } catch (java.lang.NullPointerException eee) {
                }
                org.junit.Assert.fail("insertChildrenAsCopy_cf490295_failAssert28_add491373 should have thrown IndexOutOfBoundsException");
            } catch (java.lang.IndexOutOfBoundsException eee) {
            }
            org.junit.Assert.fail("insertChildrenAsCopy_cf490295_failAssert28_add491373_failAssert35_literalMutation491948 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAtPosition */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAtPosition_add492125_failAssert19() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.select.Elements p1s = div1.select("p");
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div2.childNodeSize();
            // MethodCallAdder
            div2.insertChildren((-1), p1s);
            div2.insertChildren((-1), p1s);
            // MethodAssertGenerator build local variable
            Object o_18_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_21_0 = div2.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_23_0 = p1s.get(1).siblingIndex();
            java.util.List<org.jsoup.nodes.Node> els = new java.util.ArrayList<org.jsoup.nodes.Node>();
            org.jsoup.nodes.Element el1 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span1");
            org.jsoup.nodes.Element el2 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span2");
            org.jsoup.nodes.TextNode tn1 = new org.jsoup.nodes.TextNode("Text4", "");
            els.add(el1);
            els.add(el2);
            els.add(tn1);
            // MethodAssertGenerator build local variable
            Object o_42_0 = el1.parent();
            div2.insertChildren((-2), els);
            // MethodAssertGenerator build local variable
            Object o_46_0 = el1.parent();
            // MethodAssertGenerator build local variable
            Object o_48_0 = div2.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_50_0 = el1.siblingIndex();
            // MethodAssertGenerator build local variable
            Object o_52_0 = el2.siblingIndex();
            // MethodAssertGenerator build local variable
            Object o_54_0 = tn1.siblingIndex();
            org.junit.Assert.fail("insertChildrenAtPosition_add492125 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAtPosition */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAtPosition_cf492941_failAssert36() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.select.Elements p1s = div1.select("p");
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div2.childNodeSize();
            div2.insertChildren((-1), p1s);
            // MethodAssertGenerator build local variable
            Object o_15_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_18_0 = div2.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_20_0 = p1s.get(1).siblingIndex();
            java.util.List<org.jsoup.nodes.Node> els = new java.util.ArrayList<org.jsoup.nodes.Node>();
            org.jsoup.nodes.Element el1 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span1");
            org.jsoup.nodes.Element el2 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span2");
            org.jsoup.nodes.TextNode tn1 = new org.jsoup.nodes.TextNode("Text4", "");
            els.add(el1);
            els.add(el2);
            els.add(tn1);
            // MethodAssertGenerator build local variable
            Object o_39_0 = el1.parent();
            div2.insertChildren((-2), els);
            // MethodAssertGenerator build local variable
            Object o_43_0 = el1.parent();
            // MethodAssertGenerator build local variable
            Object o_45_0 = div2.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_47_0 = el1.siblingIndex();
            // MethodAssertGenerator build local variable
            Object o_49_0 = el2.siblingIndex();
            // StatementAdderOnAssert create null value
            java.lang.String vc_125724 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            div.getElementsByTag(vc_125724);
            // MethodAssertGenerator build local variable
            Object o_58_0 = tn1.siblingIndex();
            org.junit.Assert.fail("insertChildrenAtPosition_cf492941 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAtPosition */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAtPosition_cf492753_failAssert69() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.select.Elements p1s = div1.select("p");
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div2.childNodeSize();
            div2.insertChildren((-1), p1s);
            // MethodAssertGenerator build local variable
            Object o_15_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_18_0 = div2.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_20_0 = p1s.get(1).siblingIndex();
            java.util.List<org.jsoup.nodes.Node> els = new java.util.ArrayList<org.jsoup.nodes.Node>();
            org.jsoup.nodes.Element el1 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span1");
            org.jsoup.nodes.Element el2 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span2");
            org.jsoup.nodes.TextNode tn1 = new org.jsoup.nodes.TextNode("Text4", "");
            els.add(el1);
            els.add(el2);
            els.add(tn1);
            // MethodAssertGenerator build local variable
            Object o_39_0 = el1.parent();
            div2.insertChildren((-2), els);
            // MethodAssertGenerator build local variable
            Object o_43_0 = el1.parent();
            // MethodAssertGenerator build local variable
            Object o_45_0 = div2.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_47_0 = el1.siblingIndex();
            // MethodAssertGenerator build local variable
            Object o_49_0 = el2.siblingIndex();
            // StatementAdderOnAssert create null value
            java.lang.String vc_125677 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            el2.getElementsByAttributeStarting(vc_125677);
            // MethodAssertGenerator build local variable
            Object o_55_0 = tn1.siblingIndex();
            org.junit.Assert.fail("insertChildrenAtPosition_cf492753 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAtPosition */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAtPosition_cf492897_failAssert29() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.select.Elements p1s = div1.select("p");
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div2.childNodeSize();
            div2.insertChildren((-1), p1s);
            // MethodAssertGenerator build local variable
            Object o_15_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_18_0 = div2.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_20_0 = p1s.get(1).siblingIndex();
            java.util.List<org.jsoup.nodes.Node> els = new java.util.ArrayList<org.jsoup.nodes.Node>();
            org.jsoup.nodes.Element el1 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span1");
            org.jsoup.nodes.Element el2 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span2");
            org.jsoup.nodes.TextNode tn1 = new org.jsoup.nodes.TextNode("Text4", "");
            els.add(el1);
            els.add(el2);
            els.add(tn1);
            // MethodAssertGenerator build local variable
            Object o_39_0 = el1.parent();
            div2.insertChildren((-2), els);
            // MethodAssertGenerator build local variable
            Object o_43_0 = el1.parent();
            // MethodAssertGenerator build local variable
            Object o_45_0 = div2.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_47_0 = el1.siblingIndex();
            // MethodAssertGenerator build local variable
            Object o_49_0 = el2.siblingIndex();
            // StatementAdderOnAssert create null value
            java.lang.String vc_125711 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div1.getElementsByClass(vc_125711);
            // MethodAssertGenerator build local variable
            Object o_55_0 = tn1.siblingIndex();
            org.junit.Assert.fail("insertChildrenAtPosition_cf492897 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAtPosition */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAtPosition_cf492681_failAssert31() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.select.Elements p1s = div1.select("p");
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div2.childNodeSize();
            div2.insertChildren((-1), p1s);
            // MethodAssertGenerator build local variable
            Object o_15_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_18_0 = div2.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_20_0 = p1s.get(1).siblingIndex();
            java.util.List<org.jsoup.nodes.Node> els = new java.util.ArrayList<org.jsoup.nodes.Node>();
            org.jsoup.nodes.Element el1 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span1");
            org.jsoup.nodes.Element el2 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span2");
            org.jsoup.nodes.TextNode tn1 = new org.jsoup.nodes.TextNode("Text4", "");
            els.add(el1);
            els.add(el2);
            els.add(tn1);
            // MethodAssertGenerator build local variable
            Object o_39_0 = el1.parent();
            div2.insertChildren((-2), els);
            // MethodAssertGenerator build local variable
            Object o_43_0 = el1.parent();
            // MethodAssertGenerator build local variable
            Object o_45_0 = div2.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_47_0 = el1.siblingIndex();
            // MethodAssertGenerator build local variable
            Object o_49_0 = el2.siblingIndex();
            // StatementAdderOnAssert create null value
            java.lang.String vc_125655 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            p.toggleClass(vc_125655);
            // MethodAssertGenerator build local variable
            Object o_58_0 = tn1.siblingIndex();
            org.junit.Assert.fail("insertChildrenAtPosition_cf492681 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAtPosition */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAtPosition_cf492934_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.select.Elements p1s = div1.select("p");
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div2.childNodeSize();
            div2.insertChildren((-1), p1s);
            // MethodAssertGenerator build local variable
            Object o_15_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_18_0 = div2.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_20_0 = p1s.get(1).siblingIndex();
            java.util.List<org.jsoup.nodes.Node> els = new java.util.ArrayList<org.jsoup.nodes.Node>();
            org.jsoup.nodes.Element el1 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span1");
            org.jsoup.nodes.Element el2 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span2");
            org.jsoup.nodes.TextNode tn1 = new org.jsoup.nodes.TextNode("Text4", "");
            els.add(el1);
            els.add(el2);
            els.add(tn1);
            // MethodAssertGenerator build local variable
            Object o_39_0 = el1.parent();
            div2.insertChildren((-2), els);
            // MethodAssertGenerator build local variable
            Object o_43_0 = el1.parent();
            // MethodAssertGenerator build local variable
            Object o_45_0 = div2.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_47_0 = el1.siblingIndex();
            // MethodAssertGenerator build local variable
            Object o_49_0 = el2.siblingIndex();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_125722 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_125722.getElementsByTag(result);
            // MethodAssertGenerator build local variable
            Object o_59_0 = tn1.siblingIndex();
            org.junit.Assert.fail("insertChildrenAtPosition_cf492934 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAtPosition */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAtPosition_cf492309_failAssert68() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.select.Elements p1s = div1.select("p");
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div2.childNodeSize();
            div2.insertChildren((-1), p1s);
            // MethodAssertGenerator build local variable
            Object o_15_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_18_0 = div2.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_20_0 = p1s.get(1).siblingIndex();
            java.util.List<org.jsoup.nodes.Node> els = new java.util.ArrayList<org.jsoup.nodes.Node>();
            org.jsoup.nodes.Element el1 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span1");
            org.jsoup.nodes.Element el2 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span2");
            org.jsoup.nodes.TextNode tn1 = new org.jsoup.nodes.TextNode("Text4", "");
            els.add(el1);
            els.add(el2);
            els.add(tn1);
            // MethodAssertGenerator build local variable
            Object o_39_0 = el1.parent();
            div2.insertChildren((-2), els);
            // MethodAssertGenerator build local variable
            Object o_43_0 = el1.parent();
            // MethodAssertGenerator build local variable
            Object o_45_0 = div2.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_47_0 = el1.siblingIndex();
            // MethodAssertGenerator build local variable
            Object o_49_0 = el2.siblingIndex();
            // StatementAdderOnAssert create null value
            java.lang.String vc_125548 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            el2.addClass(vc_125548);
            // MethodAssertGenerator build local variable
            Object o_55_0 = tn1.siblingIndex();
            org.junit.Assert.fail("insertChildrenAtPosition_cf492309 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAtPosition */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAtPosition_cf492410_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.select.Elements p1s = div1.select("p");
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div2.childNodeSize();
            div2.insertChildren((-1), p1s);
            // MethodAssertGenerator build local variable
            Object o_15_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_18_0 = div2.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_20_0 = p1s.get(1).siblingIndex();
            java.util.List<org.jsoup.nodes.Node> els = new java.util.ArrayList<org.jsoup.nodes.Node>();
            org.jsoup.nodes.Element el1 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span1");
            org.jsoup.nodes.Element el2 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span2");
            org.jsoup.nodes.TextNode tn1 = new org.jsoup.nodes.TextNode("Text4", "");
            els.add(el1);
            els.add(el2);
            els.add(tn1);
            // MethodAssertGenerator build local variable
            Object o_39_0 = el1.parent();
            div2.insertChildren((-2), els);
            // MethodAssertGenerator build local variable
            Object o_43_0 = el1.parent();
            // MethodAssertGenerator build local variable
            Object o_45_0 = div2.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_47_0 = el1.siblingIndex();
            // MethodAssertGenerator build local variable
            Object o_49_0 = el2.siblingIndex();
            // StatementAdderOnAssert create random local variable
            boolean vc_125578 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_125576 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div1.attr(vc_125576, vc_125578);
            // MethodAssertGenerator build local variable
            Object o_57_0 = tn1.siblingIndex();
            org.junit.Assert.fail("insertChildrenAtPosition_cf492410 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#insertChildrenAtPosition */
    @org.junit.Test(timeout = 10000)
    public void insertChildrenAtPosition_cf492380_failAssert35_add493881_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>");
                org.jsoup.nodes.Element div1 = doc.select("div").get(0);
                org.jsoup.select.Elements p1s = div1.select("p");
                org.jsoup.nodes.Element div2 = doc.select("div").get(1);
                // MethodAssertGenerator build local variable
                Object o_11_0 = div2.childNodeSize();
                // MethodCallAdder
                div2.insertChildren((-1), p1s);
                div2.insertChildren((-1), p1s);
                // MethodAssertGenerator build local variable
                Object o_15_0 = div1.childNodeSize();
                // MethodAssertGenerator build local variable
                Object o_18_0 = div2.childNodeSize();
                // MethodAssertGenerator build local variable
                Object o_20_0 = p1s.get(1).siblingIndex();
                java.util.List<org.jsoup.nodes.Node> els = new java.util.ArrayList<org.jsoup.nodes.Node>();
                org.jsoup.nodes.Element el1 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span1");
                org.jsoup.nodes.Element el2 = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("span"), "").text("Span2");
                org.jsoup.nodes.TextNode tn1 = new org.jsoup.nodes.TextNode("Text4", "");
                els.add(el1);
                els.add(el2);
                els.add(tn1);
                // MethodAssertGenerator build local variable
                Object o_39_0 = el1.parent();
                div2.insertChildren((-2), els);
                // MethodAssertGenerator build local variable
                Object o_43_0 = el1.parent();
                // MethodAssertGenerator build local variable
                Object o_45_0 = div2.childNodeSize();
                // MethodAssertGenerator build local variable
                Object o_47_0 = el1.siblingIndex();
                // MethodAssertGenerator build local variable
                Object o_49_0 = el2.siblingIndex();
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_125569 = new java.lang.String();
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element table = doc.select("tbody").first();
                // StatementAdderMethod cloned existing statement
                table.appendElement(vc_125569);
                // MethodAssertGenerator build local variable
                Object o_59_0 = tn1.siblingIndex();
                org.junit.Assert.fail("insertChildrenAtPosition_cf492380 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("insertChildrenAtPosition_cf492380_failAssert35_add493881 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#moveByAppend */
    @org.junit.Test(timeout = 10000)
    public void moveByAppend_cf495506_failAssert82() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for https://github.com/jhy/jsoup/issues/239
            // can empty an element and append its children to another element
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div1.childNodeSize();
            java.util.List<org.jsoup.nodes.Node> children = div1.childNodes();
            // MethodAssertGenerator build local variable
            Object o_15_0 = children.size();
            div2.insertChildren(0, children);
            // MethodAssertGenerator build local variable
            Object o_18_0 = children.size();
            // MethodAssertGenerator build local variable
            Object o_21_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_23_0 = div2.childNodeSize();
            // StatementAdderOnAssert create null value
            java.lang.String vc_125955 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            div.getElementsByAttribute(vc_125955);
            // MethodAssertGenerator build local variable
            Object o_32_0 = doc.body().html();
            org.junit.Assert.fail("moveByAppend_cf495506 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#moveByAppend */
    @org.junit.Test(timeout = 10000)
    public void moveByAppend_cf495706_failAssert22() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for https://github.com/jhy/jsoup/issues/239
            // can empty an element and append its children to another element
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div1.childNodeSize();
            java.util.List<org.jsoup.nodes.Node> children = div1.childNodes();
            // MethodAssertGenerator build local variable
            Object o_15_0 = children.size();
            div2.insertChildren(0, children);
            // MethodAssertGenerator build local variable
            Object o_18_0 = children.size();
            // MethodAssertGenerator build local variable
            Object o_21_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_23_0 = div2.childNodeSize();
            // StatementAdderOnAssert create null value
            java.lang.String vc_126006 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element title = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            title.getElementsByTag(vc_126006);
            // MethodAssertGenerator build local variable
            Object o_32_0 = doc.body().html();
            org.junit.Assert.fail("moveByAppend_cf495706 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#moveByAppend */
    @org.junit.Test(timeout = 10000)
    public void moveByAppend_cf495394_failAssert27() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for https://github.com/jhy/jsoup/issues/239
            // can empty an element and append its children to another element
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div1.childNodeSize();
            java.util.List<org.jsoup.nodes.Node> children = div1.childNodes();
            // MethodAssertGenerator build local variable
            Object o_15_0 = children.size();
            div2.insertChildren(0, children);
            // MethodAssertGenerator build local variable
            Object o_18_0 = children.size();
            // MethodAssertGenerator build local variable
            Object o_21_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_23_0 = div2.childNodeSize();
            // StatementAdderOnAssert create null value
            java.lang.String vc_125925 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div2.removeClass(vc_125925);
            // MethodAssertGenerator build local variable
            Object o_29_0 = doc.body().html();
            org.junit.Assert.fail("moveByAppend_cf495394 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#moveByAppend */
    @org.junit.Test(timeout = 10000)
    public void moveByAppend_cf495804_failAssert66() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for https://github.com/jhy/jsoup/issues/239
            // can empty an element and append its children to another element
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div1.childNodeSize();
            java.util.List<org.jsoup.nodes.Node> children = div1.childNodes();
            // MethodAssertGenerator build local variable
            Object o_15_0 = children.size();
            div2.insertChildren(0, children);
            // MethodAssertGenerator build local variable
            Object o_18_0 = children.size();
            // MethodAssertGenerator build local variable
            Object o_21_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_23_0 = div2.childNodeSize();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_19661 = "<div id=\"1\"></div>\n<div id=\"2\">\n Text \n <p>One</p> Text \n <p>Two</p>\n</div>";
            // StatementAdderMethod cloned existing statement
            div1.select(String_vc_19661);
            // MethodAssertGenerator build local variable
            Object o_29_0 = doc.body().html();
            org.junit.Assert.fail("moveByAppend_cf495804 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#moveByAppend */
    @org.junit.Test(timeout = 10000)
    public void moveByAppend_cf494994_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for https://github.com/jhy/jsoup/issues/239
            // can empty an element and append its children to another element
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div1.childNodeSize();
            java.util.List<org.jsoup.nodes.Node> children = div1.childNodes();
            // MethodAssertGenerator build local variable
            Object o_15_0 = children.size();
            div2.insertChildren(0, children);
            // MethodAssertGenerator build local variable
            Object o_18_0 = children.size();
            // MethodAssertGenerator build local variable
            Object o_21_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_23_0 = div2.childNodeSize();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_125790 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_125790.isBlock();
            // MethodAssertGenerator build local variable
            Object o_29_0 = doc.body().html();
            org.junit.Assert.fail("moveByAppend_cf494994 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#moveByAppend */
    @org.junit.Test(timeout = 10000)
    public void moveByAppend_cf495669_failAssert40() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for https://github.com/jhy/jsoup/issues/239
            // can empty an element and append its children to another element
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div1.childNodeSize();
            java.util.List<org.jsoup.nodes.Node> children = div1.childNodes();
            // MethodAssertGenerator build local variable
            Object o_15_0 = children.size();
            div2.insertChildren(0, children);
            // MethodAssertGenerator build local variable
            Object o_18_0 = children.size();
            // MethodAssertGenerator build local variable
            Object o_21_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_23_0 = div2.childNodeSize();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_125994 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p1.getElementsByClass(vc_125994);
            // MethodAssertGenerator build local variable
            Object o_33_0 = doc.body().html();
            org.junit.Assert.fail("moveByAppend_cf495669 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#moveByAppend */
    @org.junit.Test(timeout = 10000)
    public void moveByAppend_cf495175_failAssert77() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for https://github.com/jhy/jsoup/issues/239
            // can empty an element and append its children to another element
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div1.childNodeSize();
            java.util.List<org.jsoup.nodes.Node> children = div1.childNodes();
            // MethodAssertGenerator build local variable
            Object o_15_0 = children.size();
            div2.insertChildren(0, children);
            // MethodAssertGenerator build local variable
            Object o_18_0 = children.size();
            // MethodAssertGenerator build local variable
            Object o_21_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_23_0 = div2.childNodeSize();
            // StatementAdderOnAssert create random local variable
            boolean vc_125860 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_125858 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div1.attr(vc_125858, vc_125860);
            // MethodAssertGenerator build local variable
            Object o_31_0 = doc.body().html();
            org.junit.Assert.fail("moveByAppend_cf495175 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#moveByAppend */
    @org.junit.Test(timeout = 10000)
    public void moveByAppend_cf495788_failAssert58() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for https://github.com/jhy/jsoup/issues/239
            // can empty an element and append its children to another element
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div1.childNodeSize();
            java.util.List<org.jsoup.nodes.Node> children = div1.childNodes();
            // MethodAssertGenerator build local variable
            Object o_15_0 = children.size();
            div2.insertChildren(0, children);
            // MethodAssertGenerator build local variable
            Object o_18_0 = children.size();
            // MethodAssertGenerator build local variable
            Object o_21_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_23_0 = div2.childNodeSize();
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_126030 = (java.util.regex.Pattern)null;
            // StatementAdderMethod cloned existing statement
            div2.getElementsMatchingText(vc_126030);
            // MethodAssertGenerator build local variable
            Object o_29_0 = doc.body().html();
            org.junit.Assert.fail("moveByAppend_cf495788 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#moveByAppend */
    @org.junit.Test(timeout = 10000)
    public void moveByAppend_cf495169_failAssert50() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for https://github.com/jhy/jsoup/issues/239
            // can empty an element and append its children to another element
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div1.childNodeSize();
            java.util.List<org.jsoup.nodes.Node> children = div1.childNodes();
            // MethodAssertGenerator build local variable
            Object o_15_0 = children.size();
            div2.insertChildren(0, children);
            // MethodAssertGenerator build local variable
            Object o_18_0 = children.size();
            // MethodAssertGenerator build local variable
            Object o_21_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_23_0 = div2.childNodeSize();
            // StatementAdderOnAssert create random local variable
            boolean vc_125860 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_125856 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_125856.attr(result, vc_125860);
            // MethodAssertGenerator build local variable
            Object o_35_0 = doc.body().html();
            org.junit.Assert.fail("moveByAppend_cf495169 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#moveByAppend */
    @org.junit.Test(timeout = 10000)
    public void moveByAppend_cf495518_failAssert32() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // test for https://github.com/jhy/jsoup/issues/239
            // can empty an element and append its children to another element
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // MethodAssertGenerator build local variable
            Object o_11_0 = div1.childNodeSize();
            java.util.List<org.jsoup.nodes.Node> children = div1.childNodes();
            // MethodAssertGenerator build local variable
            Object o_15_0 = children.size();
            div2.insertChildren(0, children);
            // MethodAssertGenerator build local variable
            Object o_18_0 = children.size();
            // MethodAssertGenerator build local variable
            Object o_21_0 = div1.childNodeSize();
            // MethodAssertGenerator build local variable
            Object o_23_0 = div2.childNodeSize();
            // StatementAdderOnAssert create null value
            java.lang.String vc_125959 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div1.getElementsByAttributeStarting(vc_125959);
            // MethodAssertGenerator build local variable
            Object o_29_0 = doc.body().html();
            org.junit.Assert.fail("moveByAppend_cf495518 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#moveByAppend */
    @org.junit.Test(timeout = 10000)
    public void moveByAppend_cf495804_failAssert66_literalMutation496067_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // test for https://github.com/jhy/jsoup/issues/239
                // can empty an element and append its children to another element
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
                org.jsoup.nodes.Element div1 = doc.select("div").get(0);
                org.jsoup.nodes.Element div2 = doc.select("div").get(1);
                // MethodAssertGenerator build local variable
                Object o_11_0 = div1.childNodeSize();
                java.util.List<org.jsoup.nodes.Node> children = div1.childNodes();
                // MethodAssertGenerator build local variable
                Object o_15_0 = children.size();
                div2.insertChildren(0, children);
                // MethodAssertGenerator build local variable
                Object o_18_0 = children.size();
                // MethodAssertGenerator build local variable
                Object o_21_0 = div1.childNodeSize();
                // MethodAssertGenerator build local variable
                Object o_23_0 = div2.childNodeSize();
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_19661 = "";
                // StatementAdderMethod cloned existing statement
                div1.select(String_vc_19661);
                // MethodAssertGenerator build local variable
                Object o_29_0 = doc.body().html();
                org.junit.Assert.fail("moveByAppend_cf495804 should have thrown SelectorParseException");
            } catch (org.jsoup.select.Selector.SelectorParseException eee) {
            }
            org.junit.Assert.fail("moveByAppend_cf495804_failAssert66_literalMutation496067 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#moveByAppend */
    @org.junit.Test(timeout = 10000)
    public void moveByAppend_cf495808_failAssert53_literalMutation496028_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // test for https://github.com/jhy/jsoup/issues/239
                // can empty an element and append its children to another element
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
                org.jsoup.nodes.Element div1 = doc.select("div").get(0);
                org.jsoup.nodes.Element div2 = doc.select("div").get(1);
                // MethodAssertGenerator build local variable
                Object o_11_0 = div1.childNodeSize();
                java.util.List<org.jsoup.nodes.Node> children = div1.childNodes();
                // MethodAssertGenerator build local variable
                Object o_15_0 = children.size();
                div2.insertChildren(0, children);
                // MethodAssertGenerator build local variable
                Object o_18_0 = children.size();
                // MethodAssertGenerator build local variable
                Object o_21_0 = div1.childNodeSize();
                // MethodAssertGenerator build local variable
                Object o_23_0 = div2.childNodeSize();
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_19661 = "";
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div = doc.select("div").first();
                // StatementAdderMethod cloned existing statement
                div.select(String_vc_19661);
                // MethodAssertGenerator build local variable
                Object o_33_0 = doc.body().html();
                org.junit.Assert.fail("moveByAppend_cf495808 should have thrown SelectorParseException");
            } catch (org.jsoup.select.Selector.SelectorParseException eee) {
            }
            org.junit.Assert.fail("moveByAppend_cf495808_failAssert53_literalMutation496028 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496611_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // StatementAdderOnAssert create null value
            java.lang.String vc_126219 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            img.toggleClass(vc_126219);
            // MethodAssertGenerator build local variable
            Object o_14_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496611 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496831_failAssert74() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // StatementAdderOnAssert create null value
            java.lang.String vc_126275 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            img.getElementsByClass(vc_126275);
            // MethodAssertGenerator build local variable
            Object o_14_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496831 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496563_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // StatementAdderOnAssert create null value
            java.lang.String vc_126207 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            img.removeClass(vc_126207);
            // MethodAssertGenerator build local variable
            Object o_14_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496563 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496556() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
        org.jsoup.nodes.Element img = doc.select("img").first();
        org.junit.Assert.assertEquals("<img src=\"foo\">", img.toString());
        img.remove();// lost its parent
        
        // AssertGenerator replace invocation
        org.jsoup.nodes.Element o_parentlessToString_cf496556__10 = // StatementAdderMethod cloned existing statement
img.previousElementSibling();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(o_parentlessToString_cf496556__10);
        org.junit.Assert.assertEquals("<img src=\"foo\">", img.toString());
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496157_failAssert48() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_19665 = "<img src='foo'>";
            // StatementAdderMethod cloned existing statement
            img.is(String_vc_19665);
            // MethodAssertGenerator build local variable
            Object o_14_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496157 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496136() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
        org.jsoup.nodes.Element img = doc.select("img").first();
        org.junit.Assert.assertEquals("<img src=\"foo\">", img.toString());
        img.remove();// lost its parent
        
        // StatementAddOnAssert local variable replacement
        java.lang.String text = doc.text();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(text, "");
        // AssertGenerator replace invocation
        boolean o_parentlessToString_cf496136__13 = // StatementAdderMethod cloned existing statement
img.hasClass(text);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_parentlessToString_cf496136__13);
        org.junit.Assert.assertEquals("<img src=\"foo\">", img.toString());
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496862_failAssert49() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_126289 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            img.getElementsByTag(vc_126289);
            // MethodAssertGenerator build local variable
            Object o_14_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496862 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496155_failAssert67() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // StatementAdderOnAssert create null value
            java.lang.String vc_126066 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            img.is(vc_126066);
            // MethodAssertGenerator build local variable
            Object o_14_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496155 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496687_failAssert99() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // StatementAdderOnAssert create null value
            java.lang.String vc_126241 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            img.getElementsByAttributeStarting(vc_126241);
            // MethodAssertGenerator build local variable
            Object o_14_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496687 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496426_failAssert86() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // StatementAdderOnAssert create null value
            java.util.Set<java.lang.String> vc_126160 = (java.util.Set)null;
            // StatementAdderMethod cloned existing statement
            img.classNames(vc_126160);
            // MethodAssertGenerator build local variable
            Object o_14_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496426 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496836_failAssert32() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.getElementsByClass(text);
            // MethodAssertGenerator build local variable
            Object o_19_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496836 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496132_failAssert22() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_126058 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_126058.hasClass(text);
            // MethodAssertGenerator build local variable
            Object o_17_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496132 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496309_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_126128 = (org.jsoup.nodes.Node)null;
            // StatementAdderMethod cloned existing statement
            img.appendChild(vc_126128);
            // MethodAssertGenerator build local variable
            Object o_14_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496309 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496401_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_19673 = "<img src='foo'>";
            // StatementAdderMethod cloned existing statement
            img.before(String_vc_19673);
            // MethodAssertGenerator build local variable
            Object o_14_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496401 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496358_failAssert30() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // StatementAdderOnAssert create random local variable
            boolean vc_126142 = true;
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAdderMethod cloned existing statement
            img.attr(text, vc_126142);
            // MethodAssertGenerator build local variable
            Object o_17_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496358 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496220_cf497056_failAssert29() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // AssertGenerator replace invocation
            java.lang.String o_parentlessToString_cf496220__10 = // StatementAdderMethod cloned existing statement
img.tagName();
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_parentlessToString_cf496220__10;
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderMethod cloned existing statement
            img.is(result);
            // MethodAssertGenerator build local variable
            Object o_20_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496220_cf497056 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496248_cf503678_failAssert48() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // AssertGenerator replace invocation
            java.util.Set<java.lang.String> o_parentlessToString_cf496248__10 = // StatementAdderMethod cloned existing statement
img.classNames();
            // AssertGenerator add assertion
            java.util.LinkedHashSet collection_780079330 = new java.util.LinkedHashSet<Object>();
	org.junit.Assert.assertEquals(collection_780079330, o_parentlessToString_cf496248__10);;
            // StatementAdderOnAssert create null value
            java.lang.String vc_128181 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            img.removeClass(vc_128181);
            // MethodAssertGenerator build local variable
            Object o_18_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496248_cf503678 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496843_failAssert85_add505363_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
                org.jsoup.nodes.Element img = doc.select("img").first();
                // MethodAssertGenerator build local variable
                Object o_6_0 = img.toString();
                // MethodCallAdder
                img.remove();// lost its parent
                
                img.remove();// lost its parent
                
                // StatementAdderOnAssert create random local variable
                int vc_126279 = -2100025696;
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_126277 = (org.jsoup.nodes.Element)null;
                // StatementAdderMethod cloned existing statement
                vc_126277.getElementsByIndexEquals(vc_126279);
                // MethodAssertGenerator build local variable
                Object o_16_0 = img.toString();
                org.junit.Assert.fail("parentlessToString_cf496843 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("parentlessToString_cf496843_failAssert85_add505363 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496136_cf501254_failAssert39() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = text;
            // AssertGenerator replace invocation
            boolean o_parentlessToString_cf496136__13 = // StatementAdderMethod cloned existing statement
img.hasClass(text);
            // MethodAssertGenerator build local variable
            Object o_17_0 = o_parentlessToString_cf496136__13;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_127496 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_127496.html();
            // MethodAssertGenerator build local variable
            Object o_23_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496136_cf501254 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496228_cf499434_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // AssertGenerator replace invocation
            java.lang.String o_parentlessToString_cf496228__10 = // StatementAdderMethod cloned existing statement
img.toString();
            // MethodAssertGenerator build local variable
            Object o_12_0 = o_parentlessToString_cf496228__10;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_19800 = "img";
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.getElementById(String_vc_19800);
            // MethodAssertGenerator build local variable
            Object o_22_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496228_cf499434 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496248_cf503327_cf505783_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // AssertGenerator replace invocation
            java.util.Set<java.lang.String> o_parentlessToString_cf496248__10 = // StatementAdderMethod cloned existing statement
img.classNames();
            // AssertGenerator add assertion
            java.util.LinkedHashSet collection_780079330 = new java.util.LinkedHashSet<Object>();
	org.junit.Assert.assertEquals(collection_780079330, o_parentlessToString_cf496248__10);;
            // AssertGenerator replace invocation
            java.lang.String o_parentlessToString_cf496248_cf503327__14 = // StatementAdderMethod cloned existing statement
img.text();
            // MethodAssertGenerator build local variable
            Object o_16_0 = o_parentlessToString_cf496248_cf503327__14;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_128709 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            img.getElementById(vc_128709);
            // MethodAssertGenerator build local variable
            Object o_22_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496248_cf503327_cf505783 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496645_failAssert102_literalMutation505415_cf509729_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
                org.jsoup.nodes.Element img = doc.select("img").first();
                // MethodAssertGenerator build local variable
                Object o_6_0 = img.toString();
                // MethodAssertGenerator build local variable
                Object o_11_0 = o_6_0;
                img.remove();// lost its parent
                
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_19684 = "<img src\"foo\">";
                // StatementAdderOnAssert create null value
                java.lang.String vc_129778 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                img.addClass(vc_129778);
                // MethodAssertGenerator build local variable
                Object o_21_0 = String_vc_19684;
                // StatementAdderMethod cloned existing statement
                img.wrap(String_vc_19684);
                // MethodAssertGenerator build local variable
                Object o_14_0 = img.toString();
                org.junit.Assert.fail("parentlessToString_cf496645 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("parentlessToString_cf496645_failAssert102_literalMutation505415_cf509729 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496248_cf503327_cf506171_failAssert31() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
            org.jsoup.nodes.Element img = doc.select("img").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = img.toString();
            img.remove();// lost its parent
            
            // AssertGenerator replace invocation
            java.util.Set<java.lang.String> o_parentlessToString_cf496248__10 = // StatementAdderMethod cloned existing statement
img.classNames();
            // AssertGenerator add assertion
            java.util.LinkedHashSet collection_780079330 = new java.util.LinkedHashSet<Object>();
	org.junit.Assert.assertEquals(collection_780079330, o_parentlessToString_cf496248__10);;
            // AssertGenerator replace invocation
            java.lang.String o_parentlessToString_cf496248_cf503327__14 = // StatementAdderMethod cloned existing statement
img.text();
            // MethodAssertGenerator build local variable
            Object o_16_0 = o_parentlessToString_cf496248_cf503327__14;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_128814 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            img.getElementsByClass(vc_128814);
            // MethodAssertGenerator build local variable
            Object o_22_0 = img.toString();
            org.junit.Assert.fail("parentlessToString_cf496248_cf503327_cf506171 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496401_failAssert17_add505161_cf508514_failAssert51() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
                org.jsoup.nodes.Element img = doc.select("img").first();
                // MethodAssertGenerator build local variable
                Object o_6_0 = img.toString();
                // MethodAssertGenerator build local variable
                Object o_11_0 = o_6_0;
                img.remove();// lost its parent
                
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_19673 = "<img src='foo'>";
                // StatementAddOnAssert local variable replacement
                java.lang.String result = doc.toString().replaceAll("\\s+", "");
                // StatementAdderMethod cloned existing statement
                img.is(result);
                // MethodAssertGenerator build local variable
                Object o_23_0 = String_vc_19673;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                img.before(String_vc_19673);
                // StatementAdderMethod cloned existing statement
                img.before(String_vc_19673);
                // MethodAssertGenerator build local variable
                Object o_14_0 = img.toString();
                org.junit.Assert.fail("parentlessToString_cf496401 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("parentlessToString_cf496401_failAssert17_add505161_cf508514 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496633_failAssert58_literalMutation505284_cf507060_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
                org.jsoup.nodes.Element img = doc.select("img").first();
                // MethodAssertGenerator build local variable
                Object o_6_0 = img.toString();
                // MethodAssertGenerator build local variable
                Object o_11_0 = o_6_0;
                img.remove();// lost its parent
                
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_19683 = "^zX";
                // MethodAssertGenerator build local variable
                Object o_17_0 = String_vc_19683;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element p = doc.select("p").first();
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div1 = doc.select("div").get(0);
                // StatementAdderMethod cloned existing statement
                div1.getElementsByAttribute(String_vc_19683);
                // MethodAssertGenerator build local variable
                Object o_29_0 = p;
                // StatementAdderMethod cloned existing statement
                p.val(String_vc_19683);
                // MethodAssertGenerator build local variable
                Object o_18_0 = img.toString();
                org.junit.Assert.fail("parentlessToString_cf496633 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("parentlessToString_cf496633_failAssert58_literalMutation505284_cf507060 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#parentlessToString */
    @org.junit.Test(timeout = 10000)
    public void parentlessToString_cf496220_cf497895_failAssert52_add511846_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<img src='foo'>");
                org.jsoup.nodes.Element img = doc.select("img").first();
                // MethodAssertGenerator build local variable
                Object o_6_0 = img.toString();
                // MethodCallAdder
                img.remove();// lost its parent
                
                img.remove();// lost its parent
                
                // AssertGenerator replace invocation
                java.lang.String o_parentlessToString_cf496220__10 = // StatementAdderMethod cloned existing statement
img.tagName();
                // MethodAssertGenerator build local variable
                Object o_12_0 = o_parentlessToString_cf496220__10;
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_126602 = (org.jsoup.nodes.Element)null;
                // StatementAdderMethod cloned existing statement
                vc_126602.siblingElements();
                // MethodAssertGenerator build local variable
                Object o_18_0 = img.toString();
                org.junit.Assert.fail("parentlessToString_cf496220_cf497895 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("parentlessToString_cf496220_cf497895_failAssert52_add511846 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddBooleanAttribute */
    @org.junit.Test(timeout = 10000)
    public void testAddBooleanAttribute_cf512083() {
        org.jsoup.nodes.Element div = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("div"), "");
        div.attr("true", true);
        div.attr("false", "value");
        div.attr("false", false);
        org.junit.Assert.assertTrue(div.hasAttr("true"));
        org.junit.Assert.assertEquals("", div.attr("true"));
        java.util.List<org.jsoup.nodes.Attribute> attributes = div.attributes().asList();
        org.junit.Assert.assertEquals("There should be one attribute", 1, attributes.size());
        org.junit.Assert.assertTrue("Attribute should be boolean", ((attributes.get(0)) instanceof org.jsoup.nodes.BooleanAttribute));
        org.junit.Assert.assertFalse(div.hasAttr("false"));
        // StatementAdderOnAssert create null value
        org.jsoup.nodes.Node vc_130306 = (org.jsoup.nodes.Node)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_130306);
        // StatementAdderOnAssert create null value
        org.jsoup.nodes.Element vc_130304 = (org.jsoup.nodes.Element)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_130304);
        // AssertGenerator replace invocation
        boolean o_testAddBooleanAttribute_cf512083__24 = // StatementAdderMethod cloned existing statement
vc_130304.preserveWhitespace(vc_130306);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_testAddBooleanAttribute_cf512083__24);
        org.junit.Assert.assertEquals("<div true></div>", div.outerHtml());
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddBooleanAttribute */
    @org.junit.Test(timeout = 10000)
    public void testAddBooleanAttribute_cf512052() {
        org.jsoup.nodes.Element div = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("div"), "");
        div.attr("true", true);
        div.attr("false", "value");
        div.attr("false", false);
        org.junit.Assert.assertTrue(div.hasAttr("true"));
        org.junit.Assert.assertEquals("", div.attr("true"));
        java.util.List<org.jsoup.nodes.Attribute> attributes = div.attributes().asList();
        org.junit.Assert.assertEquals("There should be one attribute", 1, attributes.size());
        org.junit.Assert.assertTrue("Attribute should be boolean", ((attributes.get(0)) instanceof org.jsoup.nodes.BooleanAttribute));
        org.junit.Assert.assertFalse(div.hasAttr("false"));
        // AssertGenerator replace invocation
        boolean o_testAddBooleanAttribute_cf512052__20 = // StatementAdderMethod cloned existing statement
div.hasText();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_testAddBooleanAttribute_cf512052__20);
        org.junit.Assert.assertEquals("<div true></div>", div.outerHtml());
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddBooleanAttribute */
    @org.junit.Test(timeout = 10000)
    public void testAddBooleanAttribute_cf512527_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element div = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("div"), "");
            div.attr("true", true);
            div.attr("false", "value");
            div.attr("false", false);
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.hasAttr("true");
            // MethodAssertGenerator build local variable
            Object o_9_0 = div.attr("true");
            java.util.List<org.jsoup.nodes.Attribute> attributes = div.attributes().asList();
            // MethodAssertGenerator build local variable
            Object o_14_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = (attributes.get(0)) instanceof org.jsoup.nodes.BooleanAttribute;
            // MethodAssertGenerator build local variable
            Object o_18_0 = div.hasAttr("false");
            // StatementAdderOnAssert create null value
            java.lang.String vc_130445 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.text(vc_130445);
            // MethodAssertGenerator build local variable
            Object o_24_0 = div.outerHtml();
            org.junit.Assert.fail("testAddBooleanAttribute_cf512527 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddBooleanAttribute */
    @org.junit.Test(timeout = 10000)
    public void testAddBooleanAttribute_cf512271_failAssert32() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element div = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("div"), "");
            div.attr("true", true);
            div.attr("false", "value");
            div.attr("false", false);
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.hasAttr("true");
            // MethodAssertGenerator build local variable
            Object o_9_0 = div.attr("true");
            java.util.List<org.jsoup.nodes.Attribute> attributes = div.attributes().asList();
            // MethodAssertGenerator build local variable
            Object o_14_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = (attributes.get(0)) instanceof org.jsoup.nodes.BooleanAttribute;
            // MethodAssertGenerator build local variable
            Object o_18_0 = div.hasAttr("false");
            // StatementAdderOnAssert create random local variable
            boolean vc_130372 = true;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_20324 = "";
            // StatementAdderMethod cloned existing statement
            div.attr(String_vc_20324, vc_130372);
            // MethodAssertGenerator build local variable
            Object o_26_0 = div.outerHtml();
            org.junit.Assert.fail("testAddBooleanAttribute_cf512271 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddBooleanAttribute */
    @org.junit.Test(timeout = 10000)
    public void testAddBooleanAttribute_cf512905_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element div = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("div"), "");
            div.attr("true", true);
            div.attr("false", "value");
            div.attr("false", false);
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.hasAttr("true");
            // MethodAssertGenerator build local variable
            Object o_9_0 = div.attr("true");
            java.util.List<org.jsoup.nodes.Attribute> attributes = div.attributes().asList();
            // MethodAssertGenerator build local variable
            Object o_14_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = (attributes.get(0)) instanceof org.jsoup.nodes.BooleanAttribute;
            // MethodAssertGenerator build local variable
            Object o_18_0 = div.hasAttr("false");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_20359 = "";
            // StatementAdderMethod cloned existing statement
            div.select(String_vc_20359);
            // MethodAssertGenerator build local variable
            Object o_24_0 = div.outerHtml();
            org.junit.Assert.fail("testAddBooleanAttribute_cf512905 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddBooleanAttribute */
    @org.junit.Test(timeout = 10000)
    public void testAddBooleanAttribute_cf512603_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element div = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("div"), "");
            div.attr("true", true);
            div.attr("false", "value");
            div.attr("false", false);
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.hasAttr("true");
            // MethodAssertGenerator build local variable
            Object o_9_0 = div.attr("true");
            java.util.List<org.jsoup.nodes.Attribute> attributes = div.attributes().asList();
            // MethodAssertGenerator build local variable
            Object o_14_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = (attributes.get(0)) instanceof org.jsoup.nodes.BooleanAttribute;
            // MethodAssertGenerator build local variable
            Object o_18_0 = div.hasAttr("false");
            // StatementAdderOnAssert create null value
            java.lang.String vc_130467 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.getElementsByAttribute(vc_130467);
            // MethodAssertGenerator build local variable
            Object o_24_0 = div.outerHtml();
            org.junit.Assert.fail("testAddBooleanAttribute_cf512603 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddBooleanAttribute */
    @org.junit.Test(timeout = 10000)
    public void testAddBooleanAttribute_cf512061_cf518973_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element div = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("div"), "");
            div.attr("true", true);
            div.attr("false", "value");
            div.attr("false", false);
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.hasAttr("true");
            // MethodAssertGenerator build local variable
            Object o_9_0 = div.attr("true");
            java.util.List<org.jsoup.nodes.Attribute> attributes = div.attributes().asList();
            // MethodAssertGenerator build local variable
            Object o_14_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = (attributes.get(0)) instanceof org.jsoup.nodes.BooleanAttribute;
            // MethodAssertGenerator build local variable
            Object o_18_0 = div.hasAttr("false");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_20318 = "Attribute should be boolean";
            // MethodAssertGenerator build local variable
            Object o_22_0 = String_vc_20318;
            // AssertGenerator replace invocation
            boolean o_testAddBooleanAttribute_cf512061__22 = // StatementAdderMethod cloned existing statement
div.is(String_vc_20318);
            // MethodAssertGenerator build local variable
            Object o_26_0 = o_testAddBooleanAttribute_cf512061__22;
            // StatementAdderOnAssert create null value
            java.lang.String vc_132270 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.is(vc_132270);
            // MethodAssertGenerator build local variable
            Object o_32_0 = div.outerHtml();
            org.junit.Assert.fail("testAddBooleanAttribute_cf512061_cf518973 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddBooleanAttribute */
    @org.junit.Test(timeout = 10000)
    public void testAddBooleanAttribute_cf512052_cf516144_failAssert38() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element div = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("div"), "");
            div.attr("true", true);
            div.attr("false", "value");
            div.attr("false", false);
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.hasAttr("true");
            // MethodAssertGenerator build local variable
            Object o_9_0 = div.attr("true");
            java.util.List<org.jsoup.nodes.Attribute> attributes = div.attributes().asList();
            // MethodAssertGenerator build local variable
            Object o_14_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = (attributes.get(0)) instanceof org.jsoup.nodes.BooleanAttribute;
            // MethodAssertGenerator build local variable
            Object o_18_0 = div.hasAttr("false");
            // AssertGenerator replace invocation
            boolean o_testAddBooleanAttribute_cf512052__20 = // StatementAdderMethod cloned existing statement
div.hasText();
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_testAddBooleanAttribute_cf512052__20;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_131486 = (org.jsoup.nodes.Node)null;
            // StatementAdderMethod cloned existing statement
            div.appendChild(vc_131486);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.outerHtml();
            org.junit.Assert.fail("testAddBooleanAttribute_cf512052_cf516144 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddBooleanAttribute */
    @org.junit.Test(timeout = 10000)
    public void testAddBooleanAttribute_cf512100_cf520674_failAssert34() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element div = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("div"), "");
            div.attr("true", true);
            div.attr("false", "value");
            div.attr("false", false);
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.hasAttr("true");
            // MethodAssertGenerator build local variable
            Object o_9_0 = div.attr("true");
            java.util.List<org.jsoup.nodes.Attribute> attributes = div.attributes().asList();
            // MethodAssertGenerator build local variable
            Object o_14_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = (attributes.get(0)) instanceof org.jsoup.nodes.BooleanAttribute;
            // MethodAssertGenerator build local variable
            Object o_18_0 = div.hasAttr("false");
            // AssertGenerator replace invocation
            java.lang.String o_testAddBooleanAttribute_cf512100__20 = // StatementAdderMethod cloned existing statement
div.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_testAddBooleanAttribute_cf512100__20;
            // StatementAdderOnAssert create null value
            java.lang.String vc_132727 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.getElementsByAttributeStarting(vc_132727);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.outerHtml();
            org.junit.Assert.fail("testAddBooleanAttribute_cf512100_cf520674 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddBooleanAttribute */
    @org.junit.Test(timeout = 10000)
    public void testAddBooleanAttribute_cf512112_cf515445_failAssert32() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element div = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("div"), "");
            div.attr("true", true);
            div.attr("false", "value");
            div.attr("false", false);
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.hasAttr("true");
            // MethodAssertGenerator build local variable
            Object o_9_0 = div.attr("true");
            java.util.List<org.jsoup.nodes.Attribute> attributes = div.attributes().asList();
            // MethodAssertGenerator build local variable
            Object o_14_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = (attributes.get(0)) instanceof org.jsoup.nodes.BooleanAttribute;
            // MethodAssertGenerator build local variable
            Object o_18_0 = div.hasAttr("false");
            // AssertGenerator replace invocation
            java.lang.String o_testAddBooleanAttribute_cf512112__20 = // StatementAdderMethod cloned existing statement
div.id();
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_testAddBooleanAttribute_cf512112__20;
            // StatementAdderOnAssert create null value
            java.lang.String vc_131283 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.removeClass(vc_131283);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.outerHtml();
            org.junit.Assert.fail("testAddBooleanAttribute_cf512112_cf515445 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddBooleanAttribute */
    @org.junit.Test(timeout = 10000)
    public void testAddBooleanAttribute_cf512424_cf514144_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element div = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("div"), "");
            div.attr("true", true);
            div.attr("false", "value");
            div.attr("false", false);
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.hasAttr("true");
            // MethodAssertGenerator build local variable
            Object o_9_0 = div.attr("true");
            java.util.List<org.jsoup.nodes.Attribute> attributes = div.attributes().asList();
            // MethodAssertGenerator build local variable
            Object o_14_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = (attributes.get(0)) instanceof org.jsoup.nodes.BooleanAttribute;
            // MethodAssertGenerator build local variable
            Object o_18_0 = div.hasAttr("false");
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testAddBooleanAttribute_cf512424__20 = // StatementAdderMethod cloned existing statement
div.nextElementSibling();
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_testAddBooleanAttribute_cf512424__20;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_20410 = "false";
            // StatementAdderMethod cloned existing statement
            div.after(String_vc_20410);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.outerHtml();
            org.junit.Assert.fail("testAddBooleanAttribute_cf512424_cf514144 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddBooleanAttribute */
    @org.junit.Test(timeout = 10000)
    public void testAddBooleanAttribute_cf512132_cf513081_failAssert37() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element div = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("div"), "");
            div.attr("true", true);
            div.attr("false", "value");
            div.attr("false", false);
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.hasAttr("true");
            // MethodAssertGenerator build local variable
            Object o_9_0 = div.attr("true");
            java.util.List<org.jsoup.nodes.Attribute> attributes = div.attributes().asList();
            // MethodAssertGenerator build local variable
            Object o_14_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = (attributes.get(0)) instanceof org.jsoup.nodes.BooleanAttribute;
            // MethodAssertGenerator build local variable
            Object o_18_0 = div.hasAttr("false");
            // AssertGenerator replace invocation
            java.lang.String o_testAddBooleanAttribute_cf512132__20 = // StatementAdderMethod cloned existing statement
div.toString();
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_testAddBooleanAttribute_cf512132__20;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_130592 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_130592.className();
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.outerHtml();
            org.junit.Assert.fail("testAddBooleanAttribute_cf512132_cf513081 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddBooleanAttribute */
    @org.junit.Test(timeout = 10000)
    public void testAddBooleanAttribute_cf512116_cf518783_failAssert26() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element div = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("div"), "");
            div.attr("true", true);
            div.attr("false", "value");
            div.attr("false", false);
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.hasAttr("true");
            // MethodAssertGenerator build local variable
            Object o_9_0 = div.attr("true");
            java.util.List<org.jsoup.nodes.Attribute> attributes = div.attributes().asList();
            // MethodAssertGenerator build local variable
            Object o_14_0 = attributes.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = (attributes.get(0)) instanceof org.jsoup.nodes.BooleanAttribute;
            // MethodAssertGenerator build local variable
            Object o_18_0 = div.hasAttr("false");
            // AssertGenerator replace invocation
            java.lang.String o_testAddBooleanAttribute_cf512116__20 = // StatementAdderMethod cloned existing statement
div.nodeName();
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_testAddBooleanAttribute_cf512116__20;
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_132226 = (java.util.regex.Pattern)null;
            // StatementAdderMethod cloned existing statement
            div.getElementsMatchingOwnText(vc_132226);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.outerHtml();
            org.junit.Assert.fail("testAddBooleanAttribute_cf512116_cf518783 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddBooleanAttribute */
    @org.junit.Test(timeout = 10000)
    public void testAddBooleanAttribute_cf512061_cf519552_failAssert7_literalMutation521353_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Element div = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("div"), "");
                div.attr("true", true);
                div.attr("false", "value");
                div.attr("false", false);
                // MethodAssertGenerator build local variable
                Object o_7_0 = div.hasAttr("true");
                // MethodAssertGenerator build local variable
                Object o_9_0 = div.attr("true");
                java.util.List<org.jsoup.nodes.Attribute> attributes = div.attributes().asList();
                // MethodAssertGenerator build local variable
                Object o_14_0 = attributes.size();
                // MethodAssertGenerator build local variable
                Object o_16_0 = (attributes.get(0)) instanceof org.jsoup.nodes.BooleanAttribute;
                // MethodAssertGenerator build local variable
                Object o_18_0 = div.hasAttr("false");
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_20318 = "";
                // MethodAssertGenerator build local variable
                Object o_22_0 = String_vc_20318;
                // AssertGenerator replace invocation
                boolean o_testAddBooleanAttribute_cf512061__22 = // StatementAdderMethod cloned existing statement
div.is(String_vc_20318);
                // MethodAssertGenerator build local variable
                Object o_26_0 = o_testAddBooleanAttribute_cf512061__22;
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_132428 = new java.lang.String();
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_132425 = (org.jsoup.nodes.Element)null;
                // StatementAdderMethod cloned existing statement
                vc_132425.val(vc_132428);
                // MethodAssertGenerator build local variable
                Object o_34_0 = div.outerHtml();
                org.junit.Assert.fail("testAddBooleanAttribute_cf512061_cf519552 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testAddBooleanAttribute_cf512061_cf519552_failAssert7_literalMutation521353 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddBooleanAttribute */
    @org.junit.Test(timeout = 10000)
    public void testAddBooleanAttribute_cf512083_cf517186_failAssert11_literalMutation521389_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Element div = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("div"), "");
                div.attr("true", false);
                div.attr("false", "value");
                div.attr("false", false);
                // MethodAssertGenerator build local variable
                Object o_7_0 = div.hasAttr("true");
                // MethodAssertGenerator build local variable
                Object o_9_0 = div.attr("true");
                java.util.List<org.jsoup.nodes.Attribute> attributes = div.attributes().asList();
                // MethodAssertGenerator build local variable
                Object o_14_0 = attributes.size();
                // MethodAssertGenerator build local variable
                Object o_16_0 = (attributes.get(0)) instanceof org.jsoup.nodes.BooleanAttribute;
                // MethodAssertGenerator build local variable
                Object o_18_0 = div.hasAttr("false");
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Node vc_130306 = (org.jsoup.nodes.Node)null;
                // MethodAssertGenerator build local variable
                Object o_22_0 = vc_130306;
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_130304 = (org.jsoup.nodes.Element)null;
                // MethodAssertGenerator build local variable
                Object o_26_0 = vc_130304;
                // AssertGenerator replace invocation
                boolean o_testAddBooleanAttribute_cf512083__24 = // StatementAdderMethod cloned existing statement
vc_130304.preserveWhitespace(vc_130306);
                // MethodAssertGenerator build local variable
                Object o_30_0 = o_testAddBooleanAttribute_cf512083__24;
                // StatementAdderOnAssert create random local variable
                boolean vc_131782 = true;
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_131781 = new java.lang.String();
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_131778 = (org.jsoup.nodes.Element)null;
                // StatementAdderMethod cloned existing statement
                vc_131778.attr(vc_131781, vc_131782);
                // MethodAssertGenerator build local variable
                Object o_40_0 = div.outerHtml();
                org.junit.Assert.fail("testAddBooleanAttribute_cf512083_cf517186 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testAddBooleanAttribute_cf512083_cf517186_failAssert11_literalMutation521389 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewElement */
    @org.junit.Test(timeout = 10000)
    public void testAddNewElement_cf522108_failAssert52() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendElement("p").text("there");
            div.appendElement("P").attr("CLASS", "second").text("now");
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // check sibling index (with short circuit on reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.lang.String vc_132987 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                div.toggleClass(vc_132987);
            }
            org.junit.Assert.fail("testAddNewElement_cf522108 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewElement */
    @org.junit.Test(timeout = 10000)
    public void testAddNewElement_cf522168_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendElement("p").text("there");
            div.appendElement("P").attr("CLASS", "second").text("now");
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // check sibling index (with short circuit on reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.lang.String vc_133005 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                div.getElementsByAttribute(vc_133005);
            }
            org.junit.Assert.fail("testAddNewElement_cf522168 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewElement */
    @org.junit.Test(timeout = 10000)
    public void testAddNewElement_cf522368_failAssert42() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendElement("p").text("there");
            div.appendElement("P").attr("CLASS", "second").text("now");
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // check sibling index (with short circuit on reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.lang.String vc_133056 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                div.getElementsByTag(vc_133056);
            }
            org.junit.Assert.fail("testAddNewElement_cf522368 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewElement */
    @org.junit.Test(timeout = 10000)
    public void testAddNewElement_cf521647_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendElement("p").text("there");
            div.appendElement("P").attr("CLASS", "second").text("now");
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // check sibling index (with short circuit on reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_132835 = new java.lang.String();
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element q = doc.select("p").last();
                // StatementAdderMethod cloned existing statement
                q.is(vc_132835);
            }
            org.junit.Assert.fail("testAddNewElement_cf521647 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewElement */
    @org.junit.Test(timeout = 10000)
    public void testAddNewElement_cf522430_failAssert57() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendElement("p").text("there");
            div.appendElement("P").attr("CLASS", "second").text("now");
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // check sibling index (with short circuit on reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.util.regex.Pattern vc_133072 = (java.util.regex.Pattern)null;
                // StatementAdderMethod cloned existing statement
                div.getElementsMatchingOwnText(vc_133072);
            }
            org.junit.Assert.fail("testAddNewElement_cf522430 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewElement */
    @org.junit.Test(timeout = 10000)
    public void testAddNewElement_cf522280_failAssert67() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendElement("p").text("there");
            div.appendElement("P").attr("CLASS", "second").text("now");
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // check sibling index (with short circuit on reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.util.regex.Pattern vc_133031 = (java.util.regex.Pattern)null;
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_20751 = "<div id=1><p>Hello</p></div>";
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element divB = doc.select("div").get(1);
                // StatementAdderMethod cloned existing statement
                divB.getElementsByAttributeValueMatching(String_vc_20751, vc_133031);
            }
            org.junit.Assert.fail("testAddNewElement_cf522280 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewElement */
    @org.junit.Test(timeout = 10000)
    public void testAddNewElement_cf521943_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendElement("p").text("there");
            div.appendElement("P").attr("CLASS", "second").text("now");
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // check sibling index (with short circuit on reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_132939 = new java.lang.String();
                // StatementAdderMethod cloned existing statement
                div.getElementById(vc_132939);
            }
            org.junit.Assert.fail("testAddNewElement_cf521943 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewElement */
    @org.junit.Test(timeout = 10000)
    public void testAddNewElement_cf521644_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendElement("p").text("there");
            div.appendElement("P").attr("CLASS", "second").text("now");
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // check sibling index (with short circuit on reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.lang.String vc_132834 = (java.lang.String)null;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element q = doc.select("p").last();
                // StatementAdderMethod cloned existing statement
                q.is(vc_132834);
            }
            org.junit.Assert.fail("testAddNewElement_cf521644 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewElement */
    @org.junit.Test(timeout = 10000)
    public void testAddNewElement_cf521632_failAssert64() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendElement("p").text("there");
            div.appendElement("P").attr("CLASS", "second").text("now");
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(doc.html());
            // check sibling index (with short circuit on reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_132830 = (org.jsoup.nodes.Element)null;
                // StatementAdderMethod cloned existing statement
                vc_132830.hasText();
            }
            org.junit.Assert.fail("testAddNewElement_cf521632 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testAddNewHtml_cf525245_failAssert61() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.append("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (no reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.lang.String vc_133325 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                div.getElementsByClass(vc_133325);
            }
            org.junit.Assert.fail("testAddNewHtml_cf525245 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testAddNewHtml_cf524560_failAssert39() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.append("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (no reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_133117 = new java.lang.String();
                // StatementAdderMethod cloned existing statement
                div.is(vc_133117);
            }
            org.junit.Assert.fail("testAddNewHtml_cf524560 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testAddNewHtml_cf524981_failAssert32() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.append("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (no reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.lang.String vc_133257 = (java.lang.String)null;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element p2 = doc.select("p").get(1);
                // StatementAdderMethod cloned existing statement
                p2.removeClass(vc_133257);
            }
            org.junit.Assert.fail("testAddNewHtml_cf524981 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testAddNewHtml_cf524536_failAssert33() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.append("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (no reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_133111 = new java.lang.String();
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_133108 = (org.jsoup.nodes.Element)null;
                // StatementAdderMethod cloned existing statement
                vc_133108.hasClass(vc_133111);
            }
            org.junit.Assert.fail("testAddNewHtml_cf524536 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testAddNewHtml_cf525085_failAssert57() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.append("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (no reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.lang.String vc_133287 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                div.getElementsByAttribute(vc_133287);
            }
            org.junit.Assert.fail("testAddNewHtml_cf525085 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testAddNewHtml_cf525013_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.append("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (no reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.lang.String vc_133265 = (java.lang.String)null;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element p = doc.select("p").first();
                // StatementAdderMethod cloned existing statement
                p.text(vc_133265);
            }
            org.junit.Assert.fail("testAddNewHtml_cf525013 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testAddNewHtml_cf525025_failAssert40() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.append("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (no reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.lang.String vc_133269 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                div.toggleClass(vc_133269);
            }
            org.junit.Assert.fail("testAddNewHtml_cf525025 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testAddNewHtml_cf525391_failAssert38() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.append("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (no reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_20807 = "<div id=1><p>Hello</p></div>";
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element p = doc.select("p").first();
                // StatementAdderMethod cloned existing statement
                p.select(String_vc_20807);
            }
            org.junit.Assert.fail("testAddNewHtml_cf525391 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testAddNewHtml_cf525391_failAssert38_add525671_literalMutation525958_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
                org.jsoup.nodes.Element div = doc.getElementById("1");
                // MethodCallAdder
                div.append("<p>there</p><p>now</p>");
                div.append("<p>there</p><p>now</p>");
                // MethodAssertGenerator build local variable
                Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
                // check sibling index (no reindexChildren):
                org.jsoup.select.Elements ps = doc.select("p");
                for (int i = 0; i < (ps.size()); i++) {
                    // StatementAdderOnAssert create literal from method
                    java.lang.String String_vc_20807 = "";
                    // StatementAddOnAssert local variable replacement
                    org.jsoup.nodes.Element p = doc.select("p").first();
                    // StatementAdderMethod cloned existing statement
                    p.select(String_vc_20807);
                }
                org.junit.Assert.fail("testAddNewHtml_cf525391 should have thrown SelectorParseException");
            } catch (org.jsoup.select.Selector.SelectorParseException eee) {
            }
            org.junit.Assert.fail("testAddNewHtml_cf525391_failAssert38_add525671_literalMutation525958 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewText */
    @org.junit.Test(timeout = 10000)
    public void testAddNewText_cf527944_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendText(" there & now >");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_133621 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p1.getElementsByTag(vc_133621);
            // MethodAssertGenerator build local variable
            Object o_14_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testAddNewText_cf527944 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewText */
    @org.junit.Test(timeout = 10000)
    public void testAddNewText_cf528023_failAssert21() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendText(" there & now >");
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_133644 = (java.util.regex.Pattern)null;
            // StatementAdderMethod cloned existing statement
            div.getElementsMatchingText(vc_133644);
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testAddNewText_cf528023 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewText */
    @org.junit.Test(timeout = 10000)
    public void testAddNewText_cf527686_failAssert48() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendText(" there & now >");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_133549 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_133549.toggleClass(result);
            // MethodAssertGenerator build local variable
            Object o_14_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testAddNewText_cf527686 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewText */
    @org.junit.Test(timeout = 10000)
    public void testAddNewText_cf527387_failAssert50() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendText(" there & now >");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_133460 = (org.jsoup.nodes.Node)null;
            // StatementAdderMethod cloned existing statement
            div.appendChild(vc_133460);
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testAddNewText_cf527387 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewText */
    @org.junit.Test(timeout = 10000)
    public void testAddNewText_cf528037_failAssert77() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendText(" there & now >");
            // StatementAdderOnAssert create null value
            java.lang.String vc_133650 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.select(vc_133650);
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testAddNewText_cf528037 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewText */
    @org.junit.Test(timeout = 10000)
    public void testAddNewText_cf528039_failAssert73() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendText(" there & now >");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_20846 = " there & now >";
            // StatementAdderMethod cloned existing statement
            div.select(String_vc_20846);
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testAddNewText_cf528039 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewText */
    @org.junit.Test(timeout = 10000)
    public void testAddNewText_cf527211_failAssert84() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendText(" there & now >");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_20810 = " there & now >";
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_133390 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_133390.hasClass(String_vc_20810);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testAddNewText_cf527211 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewText */
    @org.junit.Test(timeout = 10000)
    public void testAddNewText_cf527440_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendText(" there & now >");
            // StatementAdderOnAssert create random local variable
            boolean vc_133474 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_133473 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.attr(vc_133473, vc_133474);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testAddNewText_cf527440 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewText */
    @org.junit.Test(timeout = 10000)
    public void testAddNewText_cf527752_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendText(" there & now >");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_133570 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.getElementsByAttribute(vc_133570);
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testAddNewText_cf527752 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewText */
    @org.junit.Test(timeout = 10000)
    public void testAddNewText_cf527532_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendText(" there & now >");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_133503 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.getElementById(vc_133503);
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testAddNewText_cf527532 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewText */
    @org.junit.Test(timeout = 10000)
    public void testAddNewText_cf527673_failAssert23() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.appendText(" there & now >");
            // StatementAdderOnAssert create null value
            java.lang.String vc_133547 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.text(vc_133547);
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testAddNewText_cf527673 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAddNewText */
    @org.junit.Test(timeout = 10000)
    public void testAddNewText_cf528039_failAssert73_literalMutation528267_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
                org.jsoup.nodes.Element div = doc.getElementById("1");
                div.appendText(" there & now >");
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_20846 = "";
                // StatementAdderMethod cloned existing statement
                div.select(String_vc_20846);
                // MethodAssertGenerator build local variable
                Object o_10_0 = org.jsoup.TextUtil.stripNewlines(div.html());
                org.junit.Assert.fail("testAddNewText_cf528039 should have thrown SelectorParseException");
            } catch (org.jsoup.select.Selector.SelectorParseException eee) {
            }
            org.junit.Assert.fail("testAddNewText_cf528039_failAssert73_literalMutation528267 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAppendRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testAppendRowToTable_cf529138_failAssert41() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
            org.jsoup.nodes.Element table = doc.select("tbody").first();
            table.append("<tr><td>2</td></tr>");
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_133926 = (java.util.regex.Pattern)null;
            // StatementAdderMethod cloned existing statement
            table.getElementsMatchingText(vc_133926);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testAppendRowToTable_cf529138 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAppendRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testAppendRowToTable_cf528332_failAssert58() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
            org.jsoup.nodes.Element table = doc.select("tbody").first();
            table.append("<tr><td>2</td></tr>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_133674 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            p.hasClass(vc_133674);
            // MethodAssertGenerator build local variable
            Object o_14_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testAppendRowToTable_cf528332 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAppendRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testAppendRowToTable_cf528885_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
            org.jsoup.nodes.Element table = doc.select("tbody").first();
            table.append("<tr><td>2</td></tr>");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element img = doc.select("img").first();
            // StatementAdderMethod cloned existing statement
            img.getElementsByAttributeStarting(result);
            // MethodAssertGenerator build local variable
            Object o_17_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testAppendRowToTable_cf528885 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAppendRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testAppendRowToTable_cf529152_failAssert21() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
            org.jsoup.nodes.Element table = doc.select("tbody").first();
            table.append("<tr><td>2</td></tr>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_133932 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            table.select(vc_133932);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testAppendRowToTable_cf529152 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAppendRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testAppendRowToTable_cf528880_failAssert24() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
            org.jsoup.nodes.Element table = doc.select("tbody").first();
            table.append("<tr><td>2</td></tr>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_133855 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            table.getElementsByAttributeStarting(vc_133855);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testAppendRowToTable_cf528880 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAppendRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testAppendRowToTable_cf529052_failAssert29() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
            org.jsoup.nodes.Element table = doc.select("tbody").first();
            table.append("<tr><td>2</td></tr>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_133902 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            table.getElementsByTag(vc_133902);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testAppendRowToTable_cf529052 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAppendRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testAppendRowToTable_cf528808_failAssert60() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
            org.jsoup.nodes.Element table = doc.select("tbody").first();
            table.append("<tr><td>2</td></tr>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_133833 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element body = doc.appendElement("body");
            // StatementAdderMethod cloned existing statement
            body.toggleClass(vc_133833);
            // MethodAssertGenerator build local variable
            Object o_14_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testAppendRowToTable_cf528808 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAppendRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testAppendRowToTable_cf529057_failAssert31_add529280() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
            org.jsoup.nodes.Element table = doc.select("tbody").first();
            table.append("<tr><td>2</td></tr>");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(result, "<html><head></head><body><table><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table></body></html>");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(p);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            p.getElementsByTag(result);
            // StatementAdderMethod cloned existing statement
            p.getElementsByTag(result);
            // MethodAssertGenerator build local variable
            Object o_17_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testAppendRowToTable_cf529057 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAppendRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testAppendRowToTable_cf528592_failAssert77_add529391_cf575961_failAssert19() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
                org.jsoup.nodes.Element table = doc.select("tbody").first();
                table.append("<tr><td>2</td></tr>");
                // StatementAdderOnAssert create null value
                java.lang.String vc_133763 = (java.lang.String)null;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div = doc.getElementById("1");
                // StatementAdderMethod cloned existing statement
                div.firstElementSibling();
                // MethodAssertGenerator build local variable
                Object o_16_0 = vc_133763;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                table.before(vc_133763);
                // StatementAdderMethod cloned existing statement
                table.before(vc_133763);
                // MethodAssertGenerator build local variable
                Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.junit.Assert.fail("testAppendRowToTable_cf528592 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("testAppendRowToTable_cf528592_failAssert77_add529391_cf575961 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAppendRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testAppendRowToTable_cf528885_failAssert1_add529208_cf548148_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
                org.jsoup.nodes.Element table = doc.select("tbody").first();
                table.append("<tr><td>2</td></tr>");
                // StatementAddOnAssert local variable replacement
                java.lang.String result = doc.toString().replaceAll("\\s+", "");
                // MethodAssertGenerator build local variable
                Object o_13_0 = result;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element img = doc.select("img").first();
                // StatementAdderOnAssert create random local variable
                boolean vc_138832 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_138830 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                table.attr(vc_138830, vc_138832);
                // MethodAssertGenerator build local variable
                Object o_25_0 = img;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                img.getElementsByAttributeStarting(result);
                // StatementAdderMethod cloned existing statement
                img.getElementsByAttributeStarting(result);
                // MethodAssertGenerator build local variable
                Object o_17_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.junit.Assert.fail("testAppendRowToTable_cf528885 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testAppendRowToTable_cf528885_failAssert1_add529208_cf548148 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAppendRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testAppendRowToTable_cf529029_failAssert39_add529298_cf605168_failAssert20() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
                org.jsoup.nodes.Element table = doc.select("tbody").first();
                table.append("<tr><td>2</td></tr>");
                // StatementAddOnAssert local variable replacement
                java.lang.String result = doc.toString().replaceAll("\\s+", "");
                // MethodAssertGenerator build local variable
                Object o_13_0 = result;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div = doc.getElementById("1");
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_23978 = "";
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div2 = doc.select("div").get(1);
                // StatementAdderMethod cloned existing statement
                div2.prepend(String_vc_23978);
                // MethodAssertGenerator build local variable
                Object o_26_0 = div;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                div.getElementsByClass(result);
                // StatementAdderMethod cloned existing statement
                div.getElementsByClass(result);
                // MethodAssertGenerator build local variable
                Object o_16_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.junit.Assert.fail("testAppendRowToTable_cf529029 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testAppendRowToTable_cf529029_failAssert39_add529298_cf605168 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testAppendRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testAppendRowToTable_cf528886_failAssert62_literalMutation529349_cf533485_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
                org.jsoup.nodes.Element table = doc.select("tbody").first();
                table.append("<tr><td>2</td></tr>");
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_20869 = "n/yl])$*eq@@g,bS(! G([_P}jJ.Cd,yK`p1@8?bow2|`(=Xh_kl06],1&WYWS2?h}u3";
                // MethodAssertGenerator build local variable
                Object o_11_0 = String_vc_20869;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element img = doc.select("img").first();
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_135031 = new java.lang.String();
                // StatementAdderMethod cloned existing statement
                table.getElementsByTag(vc_135031);
                // MethodAssertGenerator build local variable
                Object o_21_0 = img;
                // StatementAdderMethod cloned existing statement
                img.getElementsByAttributeStarting(String_vc_20869);
                // MethodAssertGenerator build local variable
                Object o_15_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.junit.Assert.fail("testAppendRowToTable_cf528886 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testAppendRowToTable_cf528886_failAssert62_literalMutation529349_cf533485 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testBrHasSpace */
    @org.junit.Test(timeout = 10000)
    public void testBrHasSpace_cf666007_failAssert49() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>Hello<br>there</p>");
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.text();
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.select("p").first().ownText();
            doc = org.jsoup.Jsoup.parse("<p>Hello <br> there</p>");
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_169768 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_169768.hasClass(text);
            // MethodAssertGenerator build local variable
            Object o_18_0 = doc.text();
            org.junit.Assert.fail("testBrHasSpace_cf666007 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testBrHasSpace */
    @org.junit.Test(timeout = 10000)
    public void testBrHasSpace_cf666373_failAssert33() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>Hello<br>there</p>");
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.text();
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.select("p").first().ownText();
            doc = org.jsoup.Jsoup.parse("<p>Hello <br> there</p>");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_169935 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_169935.wrap(result);
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.text();
            org.junit.Assert.fail("testBrHasSpace_cf666373 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testBrHasSpace */
    @org.junit.Test(timeout = 10000)
    public void testBrHasSpace_cf666349_failAssert87_add666832() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>Hello<br>there</p>");
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.text();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_3_0, "Hello there");
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.select("p").first().ownText();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_5_0, "Hello there");
            doc = org.jsoup.Jsoup.parse("<p>Hello <br> there</p>");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(result, "<html><head></head><body><p>Hello<br>there</p></body></html>");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_169927 = (org.jsoup.nodes.Element)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_169927);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_169927.toggleClass(result);
            // StatementAdderMethod cloned existing statement
            vc_169927.toggleClass(result);
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.text();
            org.junit.Assert.fail("testBrHasSpace_cf666349 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testBrHasSpace */
    @org.junit.Test(timeout = 10000)
    public void testBrHasSpace_cf666289_failAssert84_add666824_cf696722_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>Hello<br>there</p>");
                // MethodAssertGenerator build local variable
                Object o_3_0 = doc.text();
                // MethodAssertGenerator build local variable
                Object o_8_0 = o_3_0;
                // MethodAssertGenerator build local variable
                Object o_5_0 = doc.select("p").first().ownText();
                // MethodAssertGenerator build local variable
                Object o_15_0 = o_5_0;
                doc = org.jsoup.Jsoup.parse("<p>Hello <br> there</p>");
                // StatementAdderOnAssert create null value
                java.lang.String vc_169907 = (java.lang.String)null;
                // StatementAddOnAssert local variable replacement
                java.lang.String result = doc.toString().replaceAll("\\s+", "");
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_178194 = (org.jsoup.nodes.Element)null;
                // StatementAdderMethod cloned existing statement
                vc_178194.getElementsMatchingText(result);
                // MethodAssertGenerator build local variable
                Object o_29_0 = vc_169907;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div2 = doc.select("div").get(1);
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                div2.prependElement(vc_169907);
                // StatementAdderMethod cloned existing statement
                div2.prependElement(vc_169907);
                // MethodAssertGenerator build local variable
                Object o_19_0 = doc.text();
                org.junit.Assert.fail("testBrHasSpace_cf666289 should have thrown IndexOutOfBoundsException");
            } catch (java.lang.IndexOutOfBoundsException eee) {
            }
            org.junit.Assert.fail("testBrHasSpace_cf666289_failAssert84_add666824_cf696722 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testBrHasSpace */
    @org.junit.Test(timeout = 10000)
    public void testBrHasSpace_cf666012_failAssert82_add666818_cf713707_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>Hello<br>there</p>");
                // MethodAssertGenerator build local variable
                Object o_3_0 = doc.text();
                // MethodAssertGenerator build local variable
                Object o_8_0 = o_3_0;
                // MethodAssertGenerator build local variable
                Object o_5_0 = doc.select("p").first().ownText();
                // MethodAssertGenerator build local variable
                Object o_15_0 = o_5_0;
                doc = org.jsoup.Jsoup.parse("<p>Hello <br> there</p>");
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_26472 = "Hello there";
                // StatementAdderOnAssert create null value
                java.util.regex.Pattern vc_182945 = (java.util.regex.Pattern)null;
                // StatementAdderOnAssert create null value
                java.lang.String vc_182943 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_182941 = (org.jsoup.nodes.Element)null;
                // StatementAdderMethod cloned existing statement
                vc_182941.getElementsByAttributeValueMatching(vc_182943, vc_182945);
                // MethodAssertGenerator build local variable
                Object o_29_0 = String_vc_26472;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div2 = doc.select("div").get(1);
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                div2.hasClass(String_vc_26472);
                // StatementAdderMethod cloned existing statement
                div2.hasClass(String_vc_26472);
                // MethodAssertGenerator build local variable
                Object o_19_0 = doc.text();
                org.junit.Assert.fail("testBrHasSpace_cf666012 should have thrown IndexOutOfBoundsException");
            } catch (java.lang.IndexOutOfBoundsException eee) {
            }
            org.junit.Assert.fail("testBrHasSpace_cf666012_failAssert82_add666818_cf713707 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf874481_failAssert55() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<a one two three four>Text</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element a = doc.select("a").first();
            a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_226172 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_226172.hasText();
            // MethodAssertGenerator build local variable
            Object o_17_0 = a.outerHtml();
            org.junit.Assert.fail("testChainedRemoveAttributes_cf874481 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf875360_failAssert31() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<a one two three four>Text</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element a = doc.select("a").first();
            a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_35313 = "three";
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_226404 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_226404.getElementsContainingText(String_vc_35313);
            // MethodAssertGenerator build local variable
            Object o_19_0 = a.outerHtml();
            org.junit.Assert.fail("testChainedRemoveAttributes_cf875360 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test
    public void testChainedRemoveAttributes_literalMutation874445_failAssert36() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "h19O#4K8_(=Gc&)YyN5WP)->a{R:pB";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element a = doc.select("a").first();
            a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
            // MethodAssertGenerator build local variable
            Object o_13_0 = a.outerHtml();
            org.junit.Assert.fail("testChainedRemoveAttributes_literalMutation874445 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf875443_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<a one two three four>Text</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element a = doc.select("a").first();
            a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
            // StatementAdderMethod cloned existing statement
            a.select(html);
            // MethodAssertGenerator build local variable
            Object o_15_0 = a.outerHtml();
            org.junit.Assert.fail("testChainedRemoveAttributes_cf875443 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf874800_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<a one two three four>Text</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element a = doc.select("a").first();
            a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
            // StatementAdderOnAssert create null value
            java.util.Set<java.lang.String> vc_226270 = (java.util.Set)null;
            // StatementAdderMethod cloned existing statement
            a.classNames(vc_226270);
            // MethodAssertGenerator build local variable
            Object o_17_0 = a.outerHtml();
            org.junit.Assert.fail("testChainedRemoveAttributes_cf874800 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf875094_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<a one two three four>Text</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element a = doc.select("a").first();
            a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_226348 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            a.getElementsByAttribute(vc_226348);
            // MethodAssertGenerator build local variable
            Object o_17_0 = a.outerHtml();
            org.junit.Assert.fail("testChainedRemoveAttributes_cf875094 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf875016_failAssert61_literalMutation875945() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<a one two three fourText</a>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<a one two three fourText</a>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element a = doc.select("a").first();
            a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_35298 = "zero";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_35298, "zero");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_226327 = (org.jsoup.nodes.Element)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_226327);
            // StatementAdderMethod cloned existing statement
            vc_226327.toggleClass(String_vc_35298);
            // MethodAssertGenerator build local variable
            Object o_19_0 = a.outerHtml();
            org.junit.Assert.fail("testChainedRemoveAttributes_cf875016 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf874886_failAssert14_literalMutation875584_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "<aFone two three four>Text</a>";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element a = doc.select("a").first();
                a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
                // StatementAdderOnAssert create null value
                java.lang.String vc_226299 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                a.prepend(vc_226299);
                // MethodAssertGenerator build local variable
                Object o_17_0 = a.outerHtml();
                org.junit.Assert.fail("testChainedRemoveAttributes_cf874886 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("testChainedRemoveAttributes_cf874886_failAssert14_literalMutation875584 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf875097_failAssert41_literalMutation875779() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element a = doc.select("a").first();
            a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.getElementsByAttribute(result);
            // MethodAssertGenerator build local variable
            Object o_23_0 = a.outerHtml();
            org.junit.Assert.fail("testChainedRemoveAttributes_cf875097 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf875406_failAssert30_literalMutation875695() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<<`v_ez3pC@ n=-S=Yn-.x2R`g_J+P";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<<`v_ez3pC@ n=-S=Yn-.x2R`g_J+P");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element a = doc.select("a").first();
            a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_226416 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_226416.getElementsMatchingText(html);
            // MethodAssertGenerator build local variable
            Object o_17_0 = a.outerHtml();
            org.junit.Assert.fail("testChainedRemoveAttributes_cf875406 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf875419_failAssert43_literalMutation875798_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "xh(zfMO @S0pGwb*J5NWkdBp;f4pru";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element a = doc.select("a").first();
                a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_226419 = new java.lang.String();
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div1 = doc.select("div").get(0);
                // StatementAdderMethod cloned existing statement
                div1.getElementsMatchingText(vc_226419);
                // MethodAssertGenerator build local variable
                Object o_21_0 = a.outerHtml();
                org.junit.Assert.fail("testChainedRemoveAttributes_cf875419 should have thrown IndexOutOfBoundsException");
            } catch (java.lang.IndexOutOfBoundsException eee) {
            }
            org.junit.Assert.fail("testChainedRemoveAttributes_cf875419_failAssert43_literalMutation875798 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf875088_failAssert46_literalMutation875818() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "Z]8oV2#Eyv%dXond>++`IhhIuC==/&";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "Z]8oV2#Eyv%dXond>++`IhhIuC==/&");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element a = doc.select("a").first();
            a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_35301 = "a";
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_226345 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_226345.getElementsByAttribute(String_vc_35301);
            // MethodAssertGenerator build local variable
            Object o_19_0 = a.outerHtml();
            org.junit.Assert.fail("testChainedRemoveAttributes_cf875088 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf874886_failAssert14_literalMutation875587_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "DGfF-Mj%*IL6c1X+hWO7e+n!AXM<,%";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element a = doc.select("a").first();
                a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
                // StatementAdderOnAssert create null value
                java.lang.String vc_226299 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                a.prepend(vc_226299);
                // MethodAssertGenerator build local variable
                Object o_17_0 = a.outerHtml();
                org.junit.Assert.fail("testChainedRemoveAttributes_cf874886 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("testChainedRemoveAttributes_cf874886_failAssert14_literalMutation875587 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf875097_failAssert41_literalMutation875780() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<a one two three [four>Text</a>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<a one two three [four>Text</a>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element a = doc.select("a").first();
            a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(result, "<html><head></head><body><a[four>Text</a></body></html>");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(p);
            // StatementAdderMethod cloned existing statement
            p.getElementsByAttribute(result);
            // MethodAssertGenerator build local variable
            Object o_23_0 = a.outerHtml();
            org.junit.Assert.fail("testChainedRemoveAttributes_cf875097 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf875415_failAssert20_literalMutation875619_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = ",:1vVyxc*+#QE<sd*iIBwd4T5p?[4n";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element a = doc.select("a").first();
                a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
                // StatementAdderOnAssert create null value
                java.lang.String vc_226418 = (java.lang.String)null;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div1 = doc.select("div").get(0);
                // StatementAdderMethod cloned existing statement
                div1.getElementsMatchingText(vc_226418);
                // MethodAssertGenerator build local variable
                Object o_21_0 = a.outerHtml();
                org.junit.Assert.fail("testChainedRemoveAttributes_cf875415 should have thrown IndexOutOfBoundsException");
            } catch (java.lang.IndexOutOfBoundsException eee) {
            }
            org.junit.Assert.fail("testChainedRemoveAttributes_cf875415_failAssert20_literalMutation875619 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf875081_failAssert62_add875952_cf949859_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "<a one two three four>Text</a>";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element a = doc.select("a").first();
                a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_226343 = (org.jsoup.nodes.Element)null;
                // StatementAdderMethod cloned existing statement
                a.select(html);
                // MethodAssertGenerator build local variable
                Object o_19_0 = vc_226343;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                vc_226343.getAllElements();
                // StatementAdderMethod cloned existing statement
                vc_226343.getAllElements();
                // MethodAssertGenerator build local variable
                Object o_17_0 = a.outerHtml();
                org.junit.Assert.fail("testChainedRemoveAttributes_cf875081 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testChainedRemoveAttributes_cf875081_failAssert62_add875952_cf949859 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf875382_failAssert48_literalMutation875831_cf994006_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "<a one two three >four>Text</a>";
                // MethodAssertGenerator build local variable
                Object o_4_0 = html;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element a = doc.select("a").first();
                a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
                // StatementAdderOnAssert create null value
                java.lang.String vc_226410 = (java.lang.String)null;
                // StatementAdderOnAssert create random local variable
                boolean vc_262912 = false;
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_262911 = new java.lang.String();
                // StatementAdderMethod cloned existing statement
                a.attr(vc_262911, vc_262912);
                // MethodAssertGenerator build local variable
                Object o_25_0 = vc_226410;
                // StatementAdderMethod cloned existing statement
                a.getElementsMatchingOwnText(vc_226410);
                // MethodAssertGenerator build local variable
                Object o_17_0 = a.outerHtml();
                org.junit.Assert.fail("testChainedRemoveAttributes_cf875382 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testChainedRemoveAttributes_cf875382_failAssert48_literalMutation875831_cf994006 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf875307_failAssert33_literalMutation875726_cf913564_failAssert16() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_26_1 = -109397795;
                java.lang.String html = "<a one two three four>Text</a>";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element a = doc.select("a").first();
                a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
                // StatementAdderOnAssert create random local variable
                int vc_226389 = -109397795;
                // StatementAddOnAssert local variable replacement
                java.lang.String result = doc.toString().replaceAll("\\s+", "");
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_237321 = (org.jsoup.nodes.Element)null;
                // StatementAdderMethod cloned existing statement
                vc_237321.text(result);
                // MethodAssertGenerator build local variable
                Object o_26_0 = vc_226389;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element divC = doc.select("div").get(2);
                // StatementAdderMethod cloned existing statement
                divC.getElementsByIndexEquals(vc_226389);
                // MethodAssertGenerator build local variable
                Object o_21_0 = a.outerHtml();
                org.junit.Assert.fail("testChainedRemoveAttributes_cf875307 should have thrown IndexOutOfBoundsException");
            } catch (java.lang.IndexOutOfBoundsException eee) {
            }
            org.junit.Assert.fail("testChainedRemoveAttributes_cf875307_failAssert33_literalMutation875726_cf913564 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf874614_failAssert19_literalMutation875615_cf933627_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "<a one two three four>Text<a>";
                // MethodAssertGenerator build local variable
                Object o_4_0 = html;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element a = doc.select("a").first();
                a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
                // StatementAdderOnAssert create null value
                java.lang.String vc_226226 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                java.util.Collection<? extends org.jsoup.nodes.Node> vc_244337 = (java.util.Collection)null;
                // StatementAdderOnAssert create literal from method
                int int_vc_38098 = 10000;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element q = doc.select("p").last();
                // StatementAdderMethod cloned existing statement
                q.insertChildren(int_vc_38098, vc_244337);
                // MethodAssertGenerator build local variable
                Object o_29_0 = vc_226226;
                // StatementAdderMethod cloned existing statement
                a.after(vc_226226);
                // MethodAssertGenerator build local variable
                Object o_17_0 = a.outerHtml();
                org.junit.Assert.fail("testChainedRemoveAttributes_cf874614 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("testChainedRemoveAttributes_cf874614_failAssert19_literalMutation875615_cf933627 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testChainedRemoveAttributes */
    @org.junit.Test(timeout = 10000)
    public void testChainedRemoveAttributes_cf874793_failAssert59_literalMutation875929_cf1000287_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_18_1 = 265221074;
                java.lang.String html = "<a one two three four>Text</a>";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element a = doc.select("a").first();
                a.removeAttr("zero").removeAttr("one").removeAttr("two").removeAttr("three").removeAttr("four").removeAttr("five");
                // StatementAdderOnAssert create random local variable
                int vc_226267 = 265221074;
                // MethodAssertGenerator build local variable
                Object o_18_0 = vc_226267;
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_226265 = (org.jsoup.nodes.Element)null;
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Node vc_265154 = (org.jsoup.nodes.Node)null;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element body = doc.appendElement("body");
                // StatementAdderMethod cloned existing statement
                body.appendChild(vc_265154);
                // MethodAssertGenerator build local variable
                Object o_29_0 = vc_226265;
                // StatementAdderMethod cloned existing statement
                vc_226265.child(vc_226267);
                // MethodAssertGenerator build local variable
                Object o_19_0 = a.outerHtml();
                org.junit.Assert.fail("testChainedRemoveAttributes_cf874793 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testChainedRemoveAttributes_cf874793_failAssert59_literalMutation875929_cf1000287 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testClassDomMethods_cf1455328_failAssert26() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
            org.jsoup.nodes.Element span = els.get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = span.className();
            // MethodAssertGenerator build local variable
            Object o_9_0 = span.hasClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_11_0 = span.hasClass("yellow");
            java.util.Set<java.lang.String> classes = span.classNames();
            // MethodAssertGenerator build local variable
            Object o_15_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = classes.contains("mellow");
            // MethodAssertGenerator build local variable
            Object o_19_0 = classes.contains("yellow");
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.className();
            classes = doc.classNames();
            // MethodAssertGenerator build local variable
            Object o_25_0 = classes.size();
            // StatementAdderOnAssert create null value
            java.lang.String vc_382686 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            span.is(vc_382686);
            // MethodAssertGenerator build local variable
            Object o_31_0 = doc.hasClass("mellow");
            org.junit.Assert.fail("testClassDomMethods_cf1455328 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testClassDomMethods_cf1455354() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
        java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
        org.jsoup.nodes.Element span = els.get(0);
        org.junit.Assert.assertEquals("mellow yellow", span.className());
        org.junit.Assert.assertTrue(span.hasClass("mellow"));
        org.junit.Assert.assertTrue(span.hasClass("yellow"));
        java.util.Set<java.lang.String> classes = span.classNames();
        org.junit.Assert.assertEquals(2, classes.size());
        org.junit.Assert.assertTrue(classes.contains("mellow"));
        org.junit.Assert.assertTrue(classes.contains("yellow"));
        org.junit.Assert.assertEquals("", doc.className());
        classes = doc.classNames();
        org.junit.Assert.assertEquals(0, classes.size());
        // StatementAdderOnAssert create null value
        org.jsoup.nodes.Node vc_382696 = (org.jsoup.nodes.Node)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_382696);
        // AssertGenerator replace invocation
        boolean o_testClassDomMethods_cf1455354__29 = // StatementAdderMethod cloned existing statement
span.preserveWhitespace(vc_382696);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_testClassDomMethods_cf1455354__29);
        org.junit.Assert.assertFalse(doc.hasClass("mellow"));
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testClassDomMethods_cf1455729_failAssert35() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
            org.jsoup.nodes.Element span = els.get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = span.className();
            // MethodAssertGenerator build local variable
            Object o_9_0 = span.hasClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_11_0 = span.hasClass("yellow");
            java.util.Set<java.lang.String> classes = span.classNames();
            // MethodAssertGenerator build local variable
            Object o_15_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = classes.contains("mellow");
            // MethodAssertGenerator build local variable
            Object o_19_0 = classes.contains("yellow");
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.className();
            classes = doc.classNames();
            // MethodAssertGenerator build local variable
            Object o_25_0 = classes.size();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_382819 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_382819.prependText(result);
            // MethodAssertGenerator build local variable
            Object o_35_0 = doc.hasClass("mellow");
            org.junit.Assert.fail("testClassDomMethods_cf1455729 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testClassDomMethods_cf1455543_failAssert29() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
            org.jsoup.nodes.Element span = els.get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = span.className();
            // MethodAssertGenerator build local variable
            Object o_9_0 = span.hasClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_11_0 = span.hasClass("yellow");
            java.util.Set<java.lang.String> classes = span.classNames();
            // MethodAssertGenerator build local variable
            Object o_15_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = classes.contains("mellow");
            // MethodAssertGenerator build local variable
            Object o_19_0 = classes.contains("yellow");
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.className();
            classes = doc.classNames();
            // MethodAssertGenerator build local variable
            Object o_25_0 = classes.size();
            // StatementAdderOnAssert create random local variable
            boolean vc_382762 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_382761 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.attr(vc_382761, vc_382762);
            // MethodAssertGenerator build local variable
            Object o_37_0 = doc.hasClass("mellow");
            org.junit.Assert.fail("testClassDomMethods_cf1455543 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testClassDomMethods_cf1455329_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
            org.jsoup.nodes.Element span = els.get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = span.className();
            // MethodAssertGenerator build local variable
            Object o_9_0 = span.hasClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_11_0 = span.hasClass("yellow");
            java.util.Set<java.lang.String> classes = span.classNames();
            // MethodAssertGenerator build local variable
            Object o_15_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = classes.contains("mellow");
            // MethodAssertGenerator build local variable
            Object o_19_0 = classes.contains("yellow");
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.className();
            classes = doc.classNames();
            // MethodAssertGenerator build local variable
            Object o_25_0 = classes.size();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderMethod cloned existing statement
            span.is(result);
            // MethodAssertGenerator build local variable
            Object o_33_0 = doc.hasClass("mellow");
            org.junit.Assert.fail("testClassDomMethods_cf1455329 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testClassDomMethods_cf1455866_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
            org.jsoup.nodes.Element span = els.get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = span.className();
            // MethodAssertGenerator build local variable
            Object o_9_0 = span.hasClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_11_0 = span.hasClass("yellow");
            java.util.Set<java.lang.String> classes = span.classNames();
            // MethodAssertGenerator build local variable
            Object o_15_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = classes.contains("mellow");
            // MethodAssertGenerator build local variable
            Object o_19_0 = classes.contains("yellow");
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.className();
            classes = doc.classNames();
            // MethodAssertGenerator build local variable
            Object o_25_0 = classes.size();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_59707 = "mellow";
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.getElementsByAttribute(String_vc_59707);
            // MethodAssertGenerator build local variable
            Object o_35_0 = doc.hasClass("mellow");
            org.junit.Assert.fail("testClassDomMethods_cf1455866 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testClassDomMethods_cf1456160_failAssert56() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
            org.jsoup.nodes.Element span = els.get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = span.className();
            // MethodAssertGenerator build local variable
            Object o_9_0 = span.hasClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_11_0 = span.hasClass("yellow");
            java.util.Set<java.lang.String> classes = span.classNames();
            // MethodAssertGenerator build local variable
            Object o_15_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = classes.contains("mellow");
            // MethodAssertGenerator build local variable
            Object o_19_0 = classes.contains("yellow");
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.className();
            classes = doc.classNames();
            // MethodAssertGenerator build local variable
            Object o_25_0 = classes.size();
            // StatementAdderOnAssert create null value
            java.lang.String vc_382938 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            span.select(vc_382938);
            // MethodAssertGenerator build local variable
            Object o_31_0 = doc.hasClass("mellow");
            org.junit.Assert.fail("testClassDomMethods_cf1456160 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testClassDomMethods_cf1455833() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
        java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
        org.jsoup.nodes.Element span = els.get(0);
        org.junit.Assert.assertEquals("mellow yellow", span.className());
        org.junit.Assert.assertTrue(span.hasClass("mellow"));
        org.junit.Assert.assertTrue(span.hasClass("yellow"));
        java.util.Set<java.lang.String> classes = span.classNames();
        org.junit.Assert.assertEquals(2, classes.size());
        org.junit.Assert.assertTrue(classes.contains("mellow"));
        org.junit.Assert.assertTrue(classes.contains("yellow"));
        org.junit.Assert.assertEquals("", doc.className());
        classes = doc.classNames();
        org.junit.Assert.assertEquals(0, classes.size());
        // StatementAddOnAssert local variable replacement
        java.lang.String text = doc.text();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(text, "Hello Yellow");
        // AssertGenerator replace invocation
        org.jsoup.nodes.Element o_testClassDomMethods_cf1455833__30 = // StatementAdderMethod cloned existing statement
span.wrap(text);
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(o_testClassDomMethods_cf1455833__30);
        org.junit.Assert.assertFalse(doc.hasClass("mellow"));
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testClassDomMethods_cf1455308_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
            org.jsoup.nodes.Element span = els.get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = span.className();
            // MethodAssertGenerator build local variable
            Object o_9_0 = span.hasClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_11_0 = span.hasClass("yellow");
            java.util.Set<java.lang.String> classes = span.classNames();
            // MethodAssertGenerator build local variable
            Object o_15_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = classes.contains("mellow");
            // MethodAssertGenerator build local variable
            Object o_19_0 = classes.contains("yellow");
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.className();
            classes = doc.classNames();
            // MethodAssertGenerator build local variable
            Object o_25_0 = classes.size();
            // StatementAdderOnAssert create null value
            java.lang.String vc_382680 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            span.hasClass(vc_382680);
            // MethodAssertGenerator build local variable
            Object o_31_0 = doc.hasClass("mellow");
            org.junit.Assert.fail("testClassDomMethods_cf1455308 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testClassDomMethods_cf1455401_cf1458987_failAssert39() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
            org.jsoup.nodes.Element span = els.get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = span.className();
            // MethodAssertGenerator build local variable
            Object o_9_0 = span.hasClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_11_0 = span.hasClass("yellow");
            java.util.Set<java.lang.String> classes = span.classNames();
            // MethodAssertGenerator build local variable
            Object o_15_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = classes.contains("mellow");
            // MethodAssertGenerator build local variable
            Object o_19_0 = classes.contains("yellow");
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.className();
            classes = doc.classNames();
            // MethodAssertGenerator build local variable
            Object o_25_0 = classes.size();
            // AssertGenerator replace invocation
            java.lang.String o_testClassDomMethods_cf1455401__27 = // StatementAdderMethod cloned existing statement
span.toString();
            // MethodAssertGenerator build local variable
            Object o_29_0 = o_testClassDomMethods_cf1455401__27;
            // StatementAdderOnAssert create null value
            java.lang.String vc_383681 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            span.text(vc_383681);
            // MethodAssertGenerator build local variable
            Object o_35_0 = doc.hasClass("mellow");
            org.junit.Assert.fail("testClassDomMethods_cf1455401_cf1458987 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testClassDomMethods_cf1455330_cf1458383_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
            org.jsoup.nodes.Element span = els.get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = span.className();
            // MethodAssertGenerator build local variable
            Object o_9_0 = span.hasClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_11_0 = span.hasClass("yellow");
            java.util.Set<java.lang.String> classes = span.classNames();
            // MethodAssertGenerator build local variable
            Object o_15_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = classes.contains("mellow");
            // MethodAssertGenerator build local variable
            Object o_19_0 = classes.contains("yellow");
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.className();
            classes = doc.classNames();
            // MethodAssertGenerator build local variable
            Object o_25_0 = classes.size();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_59685 = "mellow";
            // MethodAssertGenerator build local variable
            Object o_29_0 = String_vc_59685;
            // AssertGenerator replace invocation
            boolean o_testClassDomMethods_cf1455330__29 = // StatementAdderMethod cloned existing statement
span.is(String_vc_59685);
            // MethodAssertGenerator build local variable
            Object o_33_0 = o_testClassDomMethods_cf1455330__29;
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_383496 = (java.util.regex.Pattern)null;
            // StatementAdderMethod cloned existing statement
            span.getElementsMatchingText(vc_383496);
            // MethodAssertGenerator build local variable
            Object o_39_0 = doc.hasClass("mellow");
            org.junit.Assert.fail("testClassDomMethods_cf1455330_cf1458383 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testClassDomMethods_cf1455401_cf1459263_failAssert19() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
            org.jsoup.nodes.Element span = els.get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = span.className();
            // MethodAssertGenerator build local variable
            Object o_9_0 = span.hasClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_11_0 = span.hasClass("yellow");
            java.util.Set<java.lang.String> classes = span.classNames();
            // MethodAssertGenerator build local variable
            Object o_15_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = classes.contains("mellow");
            // MethodAssertGenerator build local variable
            Object o_19_0 = classes.contains("yellow");
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.className();
            classes = doc.classNames();
            // MethodAssertGenerator build local variable
            Object o_25_0 = classes.size();
            // AssertGenerator replace invocation
            java.lang.String o_testClassDomMethods_cf1455401__27 = // StatementAdderMethod cloned existing statement
span.toString();
            // MethodAssertGenerator build local variable
            Object o_29_0 = o_testClassDomMethods_cf1455401__27;
            // StatementAdderOnAssert create null value
            java.lang.String vc_383754 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            span.getElementsByTag(vc_383754);
            // MethodAssertGenerator build local variable
            Object o_35_0 = doc.hasClass("mellow");
            org.junit.Assert.fail("testClassDomMethods_cf1455401_cf1459263 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testClassDomMethods_cf1455401_cf1458627_failAssert60() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
            org.jsoup.nodes.Element span = els.get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = span.className();
            // MethodAssertGenerator build local variable
            Object o_9_0 = span.hasClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_11_0 = span.hasClass("yellow");
            java.util.Set<java.lang.String> classes = span.classNames();
            // MethodAssertGenerator build local variable
            Object o_15_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = classes.contains("mellow");
            // MethodAssertGenerator build local variable
            Object o_19_0 = classes.contains("yellow");
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.className();
            classes = doc.classNames();
            // MethodAssertGenerator build local variable
            Object o_25_0 = classes.size();
            // AssertGenerator replace invocation
            java.lang.String o_testClassDomMethods_cf1455401__27 = // StatementAdderMethod cloned existing statement
span.toString();
            // MethodAssertGenerator build local variable
            Object o_29_0 = o_testClassDomMethods_cf1455401__27;
            // StatementAdderOnAssert create null value
            java.lang.String vc_383578 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_383576 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_383576.addClass(vc_383578);
            // MethodAssertGenerator build local variable
            Object o_37_0 = doc.hasClass("mellow");
            org.junit.Assert.fail("testClassDomMethods_cf1455401_cf1458627 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testClassDomMethods_cf1455389_cf1459494_failAssert29() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
            org.jsoup.nodes.Element span = els.get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = span.className();
            // MethodAssertGenerator build local variable
            Object o_9_0 = span.hasClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_11_0 = span.hasClass("yellow");
            java.util.Set<java.lang.String> classes = span.classNames();
            // MethodAssertGenerator build local variable
            Object o_15_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = classes.contains("mellow");
            // MethodAssertGenerator build local variable
            Object o_19_0 = classes.contains("yellow");
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.className();
            classes = doc.classNames();
            // MethodAssertGenerator build local variable
            Object o_25_0 = classes.size();
            // AssertGenerator replace invocation
            java.lang.String o_testClassDomMethods_cf1455389__27 = // StatementAdderMethod cloned existing statement
span.ownText();
            // MethodAssertGenerator build local variable
            Object o_29_0 = o_testClassDomMethods_cf1455389__27;
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderMethod cloned existing statement
            span.is(result);
            // MethodAssertGenerator build local variable
            Object o_37_0 = doc.hasClass("mellow");
            org.junit.Assert.fail("testClassDomMethods_cf1455389_cf1459494 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testClassDomMethods_cf1455309_cf1456267_failAssert24() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
            org.jsoup.nodes.Element span = els.get(0);
            // MethodAssertGenerator build local variable
            Object o_7_0 = span.className();
            // MethodAssertGenerator build local variable
            Object o_9_0 = span.hasClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_11_0 = span.hasClass("yellow");
            java.util.Set<java.lang.String> classes = span.classNames();
            // MethodAssertGenerator build local variable
            Object o_15_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = classes.contains("mellow");
            // MethodAssertGenerator build local variable
            Object o_19_0 = classes.contains("yellow");
            // MethodAssertGenerator build local variable
            Object o_21_0 = doc.className();
            classes = doc.classNames();
            // MethodAssertGenerator build local variable
            Object o_25_0 = classes.size();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // MethodAssertGenerator build local variable
            Object o_31_0 = result;
            // AssertGenerator replace invocation
            boolean o_testClassDomMethods_cf1455309__31 = // StatementAdderMethod cloned existing statement
span.hasClass(result);
            // MethodAssertGenerator build local variable
            Object o_35_0 = o_testClassDomMethods_cf1455309__31;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_382960 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_382960.hasClass(result);
            // MethodAssertGenerator build local variable
            Object o_41_0 = doc.hasClass("mellow");
            org.junit.Assert.fail("testClassDomMethods_cf1455309_cf1456267 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testClassDomMethods_cf1455330_cf1458266_failAssert31_literalMutation1463694_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
                java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
                org.jsoup.nodes.Element span = els.get(0);
                // MethodAssertGenerator build local variable
                Object o_7_0 = span.className();
                // MethodAssertGenerator build local variable
                Object o_9_0 = span.hasClass("mellow");
                // MethodAssertGenerator build local variable
                Object o_11_0 = span.hasClass("yellow");
                java.util.Set<java.lang.String> classes = span.classNames();
                // MethodAssertGenerator build local variable
                Object o_15_0 = classes.size();
                // MethodAssertGenerator build local variable
                Object o_17_0 = classes.contains("mellow");
                // MethodAssertGenerator build local variable
                Object o_19_0 = classes.contains("yellow");
                // MethodAssertGenerator build local variable
                Object o_21_0 = doc.className();
                classes = doc.classNames();
                // MethodAssertGenerator build local variable
                Object o_25_0 = classes.size();
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_59685 = "";
                // MethodAssertGenerator build local variable
                Object o_29_0 = String_vc_59685;
                // AssertGenerator replace invocation
                boolean o_testClassDomMethods_cf1455330__29 = // StatementAdderMethod cloned existing statement
span.is(String_vc_59685);
                // MethodAssertGenerator build local variable
                Object o_33_0 = o_testClassDomMethods_cf1455330__29;
                // StatementAdderOnAssert create random local variable
                int vc_383469 = -483826772;
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_383467 = (org.jsoup.nodes.Element)null;
                // StatementAdderMethod cloned existing statement
                vc_383467.getElementsByIndexLessThan(vc_383469);
                // MethodAssertGenerator build local variable
                Object o_41_0 = doc.hasClass("mellow");
                org.junit.Assert.fail("testClassDomMethods_cf1455330_cf1458266 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testClassDomMethods_cf1455330_cf1458266_failAssert31_literalMutation1463694 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testClassDomMethods_cf1455330_cf1457402_failAssert62_literalMutation1463784_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>");
                java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("class");
                org.jsoup.nodes.Element span = els.get(0);
                // MethodAssertGenerator build local variable
                Object o_7_0 = span.className();
                // MethodAssertGenerator build local variable
                Object o_9_0 = span.hasClass("mellow");
                // MethodAssertGenerator build local variable
                Object o_11_0 = span.hasClass("yellow");
                java.util.Set<java.lang.String> classes = span.classNames();
                // MethodAssertGenerator build local variable
                Object o_15_0 = classes.size();
                // MethodAssertGenerator build local variable
                Object o_17_0 = classes.contains("mellow");
                // MethodAssertGenerator build local variable
                Object o_19_0 = classes.contains("yellow");
                // MethodAssertGenerator build local variable
                Object o_21_0 = doc.className();
                classes = doc.classNames();
                // MethodAssertGenerator build local variable
                Object o_25_0 = classes.size();
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_59685 = "";
                // MethodAssertGenerator build local variable
                Object o_29_0 = String_vc_59685;
                // AssertGenerator replace invocation
                boolean o_testClassDomMethods_cf1455330__29 = // StatementAdderMethod cloned existing statement
span.is(String_vc_59685);
                // MethodAssertGenerator build local variable
                Object o_33_0 = o_testClassDomMethods_cf1455330__29;
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_59772 = "mellow";
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div2 = doc.select("div").get(1);
                // StatementAdderMethod cloned existing statement
                div2.hasClass(String_vc_59772);
                // MethodAssertGenerator build local variable
                Object o_43_0 = doc.hasClass("mellow");
                org.junit.Assert.fail("testClassDomMethods_cf1455330_cf1457402 should have thrown IndexOutOfBoundsException");
            } catch (java.lang.IndexOutOfBoundsException eee) {
            }
            org.junit.Assert.fail("testClassDomMethods_cf1455330_cf1457402_failAssert62_literalMutation1463784 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1463877_failAssert63() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.className();
            final java.util.Set<java.lang.String> set1 = div.classNames();
            final java.lang.Object[] arr1 = set1.toArray();
            // MethodAssertGenerator build local variable
            Object o_12_0 = (arr1.length) == 2;
            // MethodAssertGenerator build local variable
            Object o_13_0 = arr1[0];
            // MethodAssertGenerator build local variable
            Object o_14_0 = arr1[1];
            // Changes to the set should not be reflected in the Elements getters
            set1.add("c3");
            // MethodAssertGenerator build local variable
            Object o_17_0 = 2 == (div.classNames().size());
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            // Update the class names to a fresh set
            final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
            newSet.addAll(set1);
            newSet.add("c3");
            div.classNames(newSet);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            final java.util.Set<java.lang.String> set2 = div.classNames();
            final java.lang.Object[] arr2 = set2.toArray();
            // MethodAssertGenerator build local variable
            Object o_34_0 = (arr2.length) == 3;
            // MethodAssertGenerator build local variable
            Object o_35_0 = arr2[0];
            // MethodAssertGenerator build local variable
            Object o_36_0 = arr2[1];
            // StatementAdderOnAssert create null value
            java.lang.String vc_384936 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // StatementAdderMethod cloned existing statement
            div2.hasClass(vc_384936);
            // MethodAssertGenerator build local variable
            Object o_45_0 = arr2[2];
            org.junit.Assert.fail("testClassNames_cf1463877 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1464190() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
        org.jsoup.nodes.Element div = doc.select("div").get(0);
        org.junit.Assert.assertEquals("c1 c2", div.className());
        final java.util.Set<java.lang.String> set1 = div.classNames();
        final java.lang.Object[] arr1 = set1.toArray();
        org.junit.Assert.assertTrue(((arr1.length) == 2));
        org.junit.Assert.assertEquals("c1", arr1[0]);
        org.junit.Assert.assertEquals("c2", arr1[1]);
        // Changes to the set should not be reflected in the Elements getters
        set1.add("c3");
        org.junit.Assert.assertTrue((2 == (div.classNames().size())));
        org.junit.Assert.assertEquals("c1 c2", div.className());
        // Update the class names to a fresh set
        final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
        newSet.addAll(set1);
        newSet.add("c3");
        div.classNames(newSet);
        org.junit.Assert.assertEquals("c1 c2 c3", div.className());
        final java.util.Set<java.lang.String> set2 = div.classNames();
        final java.lang.Object[] arr2 = set2.toArray();
        org.junit.Assert.assertTrue(((arr2.length) == 3));
        org.junit.Assert.assertEquals("c1", arr2[0]);
        org.junit.Assert.assertEquals("c2", arr2[1]);
        // AssertGenerator replace invocation
        org.jsoup.nodes.Element o_testClassNames_cf1464190__37 = // StatementAdderMethod cloned existing statement
div.firstElementSibling();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(o_testClassNames_cf1464190__37);
        org.junit.Assert.assertEquals("c3", arr2[2]);
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1464100_failAssert72() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.className();
            final java.util.Set<java.lang.String> set1 = div.classNames();
            final java.lang.Object[] arr1 = set1.toArray();
            // MethodAssertGenerator build local variable
            Object o_12_0 = (arr1.length) == 2;
            // MethodAssertGenerator build local variable
            Object o_13_0 = arr1[0];
            // MethodAssertGenerator build local variable
            Object o_14_0 = arr1[1];
            // Changes to the set should not be reflected in the Elements getters
            set1.add("c3");
            // MethodAssertGenerator build local variable
            Object o_17_0 = 2 == (div.classNames().size());
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            // Update the class names to a fresh set
            final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
            newSet.addAll(set1);
            newSet.add("c3");
            div.classNames(newSet);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            final java.util.Set<java.lang.String> set2 = div.classNames();
            final java.lang.Object[] arr2 = set2.toArray();
            // MethodAssertGenerator build local variable
            Object o_34_0 = (arr2.length) == 3;
            // MethodAssertGenerator build local variable
            Object o_35_0 = arr2[0];
            // MethodAssertGenerator build local variable
            Object o_36_0 = arr2[1];
            // StatementAdderOnAssert create random local variable
            boolean vc_385018 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_385017 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.attr(vc_385017, vc_385018);
            // MethodAssertGenerator build local variable
            Object o_43_0 = arr2[2];
            org.junit.Assert.fail("testClassNames_cf1464100 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1463997_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.className();
            final java.util.Set<java.lang.String> set1 = div.classNames();
            final java.lang.Object[] arr1 = set1.toArray();
            // MethodAssertGenerator build local variable
            Object o_12_0 = (arr1.length) == 2;
            // MethodAssertGenerator build local variable
            Object o_13_0 = arr1[0];
            // MethodAssertGenerator build local variable
            Object o_14_0 = arr1[1];
            // Changes to the set should not be reflected in the Elements getters
            set1.add("c3");
            // MethodAssertGenerator build local variable
            Object o_17_0 = 2 == (div.classNames().size());
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            // Update the class names to a fresh set
            final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
            newSet.addAll(set1);
            newSet.add("c3");
            div.classNames(newSet);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            final java.util.Set<java.lang.String> set2 = div.classNames();
            final java.lang.Object[] arr2 = set2.toArray();
            // MethodAssertGenerator build local variable
            Object o_34_0 = (arr2.length) == 3;
            // MethodAssertGenerator build local variable
            Object o_35_0 = arr2[0];
            // MethodAssertGenerator build local variable
            Object o_36_0 = arr2[1];
            // StatementAdderOnAssert create null value
            java.lang.String vc_384988 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element body = doc.appendElement("body");
            // StatementAdderMethod cloned existing statement
            body.addClass(vc_384988);
            // MethodAssertGenerator build local variable
            Object o_44_0 = arr2[2];
            org.junit.Assert.fail("testClassNames_cf1463997 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1464428_failAssert34() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.className();
            final java.util.Set<java.lang.String> set1 = div.classNames();
            final java.lang.Object[] arr1 = set1.toArray();
            // MethodAssertGenerator build local variable
            Object o_12_0 = (arr1.length) == 2;
            // MethodAssertGenerator build local variable
            Object o_13_0 = arr1[0];
            // MethodAssertGenerator build local variable
            Object o_14_0 = arr1[1];
            // Changes to the set should not be reflected in the Elements getters
            set1.add("c3");
            // MethodAssertGenerator build local variable
            Object o_17_0 = 2 == (div.classNames().size());
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            // Update the class names to a fresh set
            final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
            newSet.addAll(set1);
            newSet.add("c3");
            div.classNames(newSet);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            final java.util.Set<java.lang.String> set2 = div.classNames();
            final java.lang.Object[] arr2 = set2.toArray();
            // MethodAssertGenerator build local variable
            Object o_34_0 = (arr2.length) == 3;
            // MethodAssertGenerator build local variable
            Object o_35_0 = arr2[0];
            // MethodAssertGenerator build local variable
            Object o_36_0 = arr2[1];
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_385114 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.getElementsByAttribute(vc_385114);
            // MethodAssertGenerator build local variable
            Object o_41_0 = arr2[2];
            org.junit.Assert.fail("testClassNames_cf1464428 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1463917() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
        org.jsoup.nodes.Element div = doc.select("div").get(0);
        org.junit.Assert.assertEquals("c1 c2", div.className());
        final java.util.Set<java.lang.String> set1 = div.classNames();
        final java.lang.Object[] arr1 = set1.toArray();
        org.junit.Assert.assertTrue(((arr1.length) == 2));
        org.junit.Assert.assertEquals("c1", arr1[0]);
        org.junit.Assert.assertEquals("c2", arr1[1]);
        // Changes to the set should not be reflected in the Elements getters
        set1.add("c3");
        org.junit.Assert.assertTrue((2 == (div.classNames().size())));
        org.junit.Assert.assertEquals("c1 c2", div.className());
        // Update the class names to a fresh set
        final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
        newSet.addAll(set1);
        newSet.add("c3");
        div.classNames(newSet);
        org.junit.Assert.assertEquals("c1 c2 c3", div.className());
        final java.util.Set<java.lang.String> set2 = div.classNames();
        final java.lang.Object[] arr2 = set2.toArray();
        org.junit.Assert.assertTrue(((arr2.length) == 3));
        org.junit.Assert.assertEquals("c1", arr2[0]);
        org.junit.Assert.assertEquals("c2", arr2[1]);
        // StatementAdderOnAssert create null value
        org.jsoup.nodes.Node vc_384952 = (org.jsoup.nodes.Node)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_384952);
        // StatementAdderOnAssert create null value
        org.jsoup.nodes.Element vc_384950 = (org.jsoup.nodes.Element)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_384950);
        // AssertGenerator replace invocation
        boolean o_testClassNames_cf1463917__41 = // StatementAdderMethod cloned existing statement
vc_384950.preserveWhitespace(vc_384952);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_testClassNames_cf1463917__41);
        org.junit.Assert.assertEquals("c3", arr2[2]);
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1464365_failAssert65() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.className();
            final java.util.Set<java.lang.String> set1 = div.classNames();
            final java.lang.Object[] arr1 = set1.toArray();
            // MethodAssertGenerator build local variable
            Object o_12_0 = (arr1.length) == 2;
            // MethodAssertGenerator build local variable
            Object o_13_0 = arr1[0];
            // MethodAssertGenerator build local variable
            Object o_14_0 = arr1[1];
            // Changes to the set should not be reflected in the Elements getters
            set1.add("c3");
            // MethodAssertGenerator build local variable
            Object o_17_0 = 2 == (div.classNames().size());
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            // Update the class names to a fresh set
            final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
            newSet.addAll(set1);
            newSet.add("c3");
            div.classNames(newSet);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            final java.util.Set<java.lang.String> set2 = div.classNames();
            final java.lang.Object[] arr2 = set2.toArray();
            // MethodAssertGenerator build local variable
            Object o_34_0 = (arr2.length) == 3;
            // MethodAssertGenerator build local variable
            Object o_35_0 = arr2[0];
            // MethodAssertGenerator build local variable
            Object o_36_0 = arr2[1];
            // StatementAdderOnAssert create null value
            java.lang.String vc_385095 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.toggleClass(vc_385095);
            // MethodAssertGenerator build local variable
            Object o_41_0 = arr2[2];
            org.junit.Assert.fail("testClassNames_cf1464365 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1464725_failAssert56() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.className();
            final java.util.Set<java.lang.String> set1 = div.classNames();
            final java.lang.Object[] arr1 = set1.toArray();
            // MethodAssertGenerator build local variable
            Object o_12_0 = (arr1.length) == 2;
            // MethodAssertGenerator build local variable
            Object o_13_0 = arr1[0];
            // MethodAssertGenerator build local variable
            Object o_14_0 = arr1[1];
            // Changes to the set should not be reflected in the Elements getters
            set1.add("c3");
            // MethodAssertGenerator build local variable
            Object o_17_0 = 2 == (div.classNames().size());
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            // Update the class names to a fresh set
            final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
            newSet.addAll(set1);
            newSet.add("c3");
            div.classNames(newSet);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            final java.util.Set<java.lang.String> set2 = div.classNames();
            final java.lang.Object[] arr2 = set2.toArray();
            // MethodAssertGenerator build local variable
            Object o_34_0 = (arr2.length) == 3;
            // MethodAssertGenerator build local variable
            Object o_35_0 = arr2[0];
            // MethodAssertGenerator build local variable
            Object o_36_0 = arr2[1];
            // StatementAdderOnAssert create null value
            java.lang.String vc_385194 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.select(vc_385194);
            // MethodAssertGenerator build local variable
            Object o_41_0 = arr2[2];
            org.junit.Assert.fail("testClassNames_cf1464725 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1464726_failAssert43() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.className();
            final java.util.Set<java.lang.String> set1 = div.classNames();
            final java.lang.Object[] arr1 = set1.toArray();
            // MethodAssertGenerator build local variable
            Object o_12_0 = (arr1.length) == 2;
            // MethodAssertGenerator build local variable
            Object o_13_0 = arr1[0];
            // MethodAssertGenerator build local variable
            Object o_14_0 = arr1[1];
            // Changes to the set should not be reflected in the Elements getters
            set1.add("c3");
            // MethodAssertGenerator build local variable
            Object o_17_0 = 2 == (div.classNames().size());
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            // Update the class names to a fresh set
            final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
            newSet.addAll(set1);
            newSet.add("c3");
            div.classNames(newSet);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            final java.util.Set<java.lang.String> set2 = div.classNames();
            final java.lang.Object[] arr2 = set2.toArray();
            // MethodAssertGenerator build local variable
            Object o_34_0 = (arr2.length) == 3;
            // MethodAssertGenerator build local variable
            Object o_35_0 = arr2[0];
            // MethodAssertGenerator build local variable
            Object o_36_0 = arr2[1];
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderMethod cloned existing statement
            div.select(result);
            // MethodAssertGenerator build local variable
            Object o_43_0 = arr2[2];
            org.junit.Assert.fail("testClassNames_cf1464726 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1464628_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.className();
            final java.util.Set<java.lang.String> set1 = div.classNames();
            final java.lang.Object[] arr1 = set1.toArray();
            // MethodAssertGenerator build local variable
            Object o_12_0 = (arr1.length) == 2;
            // MethodAssertGenerator build local variable
            Object o_13_0 = arr1[0];
            // MethodAssertGenerator build local variable
            Object o_14_0 = arr1[1];
            // Changes to the set should not be reflected in the Elements getters
            set1.add("c3");
            // MethodAssertGenerator build local variable
            Object o_17_0 = 2 == (div.classNames().size());
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            // Update the class names to a fresh set
            final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
            newSet.addAll(set1);
            newSet.add("c3");
            div.classNames(newSet);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            final java.util.Set<java.lang.String> set2 = div.classNames();
            final java.lang.Object[] arr2 = set2.toArray();
            // MethodAssertGenerator build local variable
            Object o_34_0 = (arr2.length) == 3;
            // MethodAssertGenerator build local variable
            Object o_35_0 = arr2[0];
            // MethodAssertGenerator build local variable
            Object o_36_0 = arr2[1];
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_385165 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.getElementsByTag(vc_385165);
            // MethodAssertGenerator build local variable
            Object o_41_0 = arr2[2];
            org.junit.Assert.fail("testClassNames_cf1464628 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1464519_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.className();
            final java.util.Set<java.lang.String> set1 = div.classNames();
            final java.lang.Object[] arr1 = set1.toArray();
            // MethodAssertGenerator build local variable
            Object o_12_0 = (arr1.length) == 2;
            // MethodAssertGenerator build local variable
            Object o_13_0 = arr1[0];
            // MethodAssertGenerator build local variable
            Object o_14_0 = arr1[1];
            // Changes to the set should not be reflected in the Elements getters
            set1.add("c3");
            // MethodAssertGenerator build local variable
            Object o_17_0 = 2 == (div.classNames().size());
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            // Update the class names to a fresh set
            final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
            newSet.addAll(set1);
            newSet.add("c3");
            div.classNames(newSet);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            final java.util.Set<java.lang.String> set2 = div.classNames();
            final java.lang.Object[] arr2 = set2.toArray();
            // MethodAssertGenerator build local variable
            Object o_34_0 = (arr2.length) == 3;
            // MethodAssertGenerator build local variable
            Object o_35_0 = arr2[0];
            // MethodAssertGenerator build local variable
            Object o_36_0 = arr2[1];
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_385139 = (java.util.regex.Pattern)null;
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_385135 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_385135.getElementsByAttributeValueMatching(result, vc_385139);
            // MethodAssertGenerator build local variable
            Object o_47_0 = arr2[2];
            org.junit.Assert.fail("testClassNames_cf1464519 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1464317_failAssert23() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.className();
            final java.util.Set<java.lang.String> set1 = div.classNames();
            final java.lang.Object[] arr1 = set1.toArray();
            // MethodAssertGenerator build local variable
            Object o_12_0 = (arr1.length) == 2;
            // MethodAssertGenerator build local variable
            Object o_13_0 = arr1[0];
            // MethodAssertGenerator build local variable
            Object o_14_0 = arr1[1];
            // Changes to the set should not be reflected in the Elements getters
            set1.add("c3");
            // MethodAssertGenerator build local variable
            Object o_17_0 = 2 == (div.classNames().size());
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            // Update the class names to a fresh set
            final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
            newSet.addAll(set1);
            newSet.add("c3");
            div.classNames(newSet);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            final java.util.Set<java.lang.String> set2 = div.classNames();
            final java.lang.Object[] arr2 = set2.toArray();
            // MethodAssertGenerator build local variable
            Object o_34_0 = (arr2.length) == 3;
            // MethodAssertGenerator build local variable
            Object o_35_0 = arr2[0];
            // MethodAssertGenerator build local variable
            Object o_36_0 = arr2[1];
            // StatementAdderOnAssert create null value
            java.lang.String vc_385083 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.removeClass(vc_385083);
            // MethodAssertGenerator build local variable
            Object o_41_0 = arr2[2];
            org.junit.Assert.fail("testClassNames_cf1464317 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1464399() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
        org.jsoup.nodes.Element div = doc.select("div").get(0);
        org.junit.Assert.assertEquals("c1 c2", div.className());
        final java.util.Set<java.lang.String> set1 = div.classNames();
        final java.lang.Object[] arr1 = set1.toArray();
        org.junit.Assert.assertTrue(((arr1.length) == 2));
        org.junit.Assert.assertEquals("c1", arr1[0]);
        org.junit.Assert.assertEquals("c2", arr1[1]);
        // Changes to the set should not be reflected in the Elements getters
        set1.add("c3");
        org.junit.Assert.assertTrue((2 == (div.classNames().size())));
        org.junit.Assert.assertEquals("c1 c2", div.className());
        // Update the class names to a fresh set
        final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
        newSet.addAll(set1);
        newSet.add("c3");
        div.classNames(newSet);
        org.junit.Assert.assertEquals("c1 c2 c3", div.className());
        final java.util.Set<java.lang.String> set2 = div.classNames();
        final java.lang.Object[] arr2 = set2.toArray();
        org.junit.Assert.assertTrue(((arr2.length) == 3));
        org.junit.Assert.assertEquals("c1", arr2[0]);
        org.junit.Assert.assertEquals("c2", arr2[1]);
        // StatementAdderOnAssert create literal from method
        java.lang.String String_vc_60058 = "c1";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(String_vc_60058, "c1");
        // AssertGenerator replace invocation
        org.jsoup.nodes.Element o_testClassNames_cf1464399__39 = // StatementAdderMethod cloned existing statement
div.wrap(String_vc_60058);
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(o_testClassNames_cf1464399__39);
        org.junit.Assert.assertEquals("c3", arr2[2]);
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1464198_cf1472743_failAssert26() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.className();
            final java.util.Set<java.lang.String> set1 = div.classNames();
            final java.lang.Object[] arr1 = set1.toArray();
            // MethodAssertGenerator build local variable
            Object o_12_0 = (arr1.length) == 2;
            // MethodAssertGenerator build local variable
            Object o_13_0 = arr1[0];
            // MethodAssertGenerator build local variable
            Object o_14_0 = arr1[1];
            // Changes to the set should not be reflected in the Elements getters
            set1.add("c3");
            // MethodAssertGenerator build local variable
            Object o_17_0 = 2 == (div.classNames().size());
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            // Update the class names to a fresh set
            final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
            newSet.addAll(set1);
            newSet.add("c3");
            div.classNames(newSet);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            final java.util.Set<java.lang.String> set2 = div.classNames();
            final java.lang.Object[] arr2 = set2.toArray();
            // MethodAssertGenerator build local variable
            Object o_34_0 = (arr2.length) == 3;
            // MethodAssertGenerator build local variable
            Object o_35_0 = arr2[0];
            // MethodAssertGenerator build local variable
            Object o_36_0 = arr2[1];
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // MethodAssertGenerator build local variable
            Object o_40_0 = text;
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testClassNames_cf1464198__40 = // StatementAdderMethod cloned existing statement
div.getElementById(text);
            // MethodAssertGenerator build local variable
            Object o_44_0 = o_testClassNames_cf1464198__40;
            // StatementAdderOnAssert create null value
            java.lang.String vc_387339 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.removeClass(vc_387339);
            // MethodAssertGenerator build local variable
            Object o_50_0 = arr2[2];
            org.junit.Assert.fail("testClassNames_cf1464198_cf1472743 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1463919_cf1476173_failAssert35() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.className();
            final java.util.Set<java.lang.String> set1 = div.classNames();
            final java.lang.Object[] arr1 = set1.toArray();
            // MethodAssertGenerator build local variable
            Object o_12_0 = (arr1.length) == 2;
            // MethodAssertGenerator build local variable
            Object o_13_0 = arr1[0];
            // MethodAssertGenerator build local variable
            Object o_14_0 = arr1[1];
            // Changes to the set should not be reflected in the Elements getters
            set1.add("c3");
            // MethodAssertGenerator build local variable
            Object o_17_0 = 2 == (div.classNames().size());
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            // Update the class names to a fresh set
            final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
            newSet.addAll(set1);
            newSet.add("c3");
            div.classNames(newSet);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            final java.util.Set<java.lang.String> set2 = div.classNames();
            final java.lang.Object[] arr2 = set2.toArray();
            // MethodAssertGenerator build local variable
            Object o_34_0 = (arr2.length) == 3;
            // MethodAssertGenerator build local variable
            Object o_35_0 = arr2[0];
            // MethodAssertGenerator build local variable
            Object o_36_0 = arr2[1];
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_384952 = (org.jsoup.nodes.Node)null;
            // MethodAssertGenerator build local variable
            Object o_39_0 = vc_384952;
            // AssertGenerator replace invocation
            boolean o_testClassNames_cf1463919__39 = // StatementAdderMethod cloned existing statement
div.preserveWhitespace(vc_384952);
            // MethodAssertGenerator build local variable
            Object o_43_0 = o_testClassNames_cf1463919__39;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_388267 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.getElementsByTag(vc_388267);
            // MethodAssertGenerator build local variable
            Object o_49_0 = arr2[2];
            org.junit.Assert.fail("testClassNames_cf1463919_cf1476173 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1464198_cf1472610_failAssert71() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.className();
            final java.util.Set<java.lang.String> set1 = div.classNames();
            final java.lang.Object[] arr1 = set1.toArray();
            // MethodAssertGenerator build local variable
            Object o_12_0 = (arr1.length) == 2;
            // MethodAssertGenerator build local variable
            Object o_13_0 = arr1[0];
            // MethodAssertGenerator build local variable
            Object o_14_0 = arr1[1];
            // Changes to the set should not be reflected in the Elements getters
            set1.add("c3");
            // MethodAssertGenerator build local variable
            Object o_17_0 = 2 == (div.classNames().size());
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            // Update the class names to a fresh set
            final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
            newSet.addAll(set1);
            newSet.add("c3");
            div.classNames(newSet);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            final java.util.Set<java.lang.String> set2 = div.classNames();
            final java.lang.Object[] arr2 = set2.toArray();
            // MethodAssertGenerator build local variable
            Object o_34_0 = (arr2.length) == 3;
            // MethodAssertGenerator build local variable
            Object o_35_0 = arr2[0];
            // MethodAssertGenerator build local variable
            Object o_36_0 = arr2[1];
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // MethodAssertGenerator build local variable
            Object o_40_0 = text;
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testClassNames_cf1464198__40 = // StatementAdderMethod cloned existing statement
div.getElementById(text);
            // MethodAssertGenerator build local variable
            Object o_44_0 = o_testClassNames_cf1464198__40;
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element divB = doc.select("div").get(1);
            // StatementAdderMethod cloned existing statement
            divB.getElementById(result);
            // MethodAssertGenerator build local variable
            Object o_56_0 = arr2[2];
            org.junit.Assert.fail("testClassNames_cf1464198_cf1472610 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1464190_cf1475234_failAssert47() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.className();
            final java.util.Set<java.lang.String> set1 = div.classNames();
            final java.lang.Object[] arr1 = set1.toArray();
            // MethodAssertGenerator build local variable
            Object o_12_0 = (arr1.length) == 2;
            // MethodAssertGenerator build local variable
            Object o_13_0 = arr1[0];
            // MethodAssertGenerator build local variable
            Object o_14_0 = arr1[1];
            // Changes to the set should not be reflected in the Elements getters
            set1.add("c3");
            // MethodAssertGenerator build local variable
            Object o_17_0 = 2 == (div.classNames().size());
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            // Update the class names to a fresh set
            final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
            newSet.addAll(set1);
            newSet.add("c3");
            div.classNames(newSet);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            final java.util.Set<java.lang.String> set2 = div.classNames();
            final java.lang.Object[] arr2 = set2.toArray();
            // MethodAssertGenerator build local variable
            Object o_34_0 = (arr2.length) == 3;
            // MethodAssertGenerator build local variable
            Object o_35_0 = arr2[0];
            // MethodAssertGenerator build local variable
            Object o_36_0 = arr2[1];
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testClassNames_cf1464190__37 = // StatementAdderMethod cloned existing statement
div.firstElementSibling();
            // MethodAssertGenerator build local variable
            Object o_39_0 = o_testClassNames_cf1464190__37;
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_388008 = (java.util.regex.Pattern)null;
            // StatementAdderMethod cloned existing statement
            div.getElementsMatchingText(vc_388008);
            // MethodAssertGenerator build local variable
            Object o_45_0 = arr2[2];
            org.junit.Assert.fail("testClassNames_cf1464190_cf1475234 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1464198_cf1473241_failAssert56() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.className();
            final java.util.Set<java.lang.String> set1 = div.classNames();
            final java.lang.Object[] arr1 = set1.toArray();
            // MethodAssertGenerator build local variable
            Object o_12_0 = (arr1.length) == 2;
            // MethodAssertGenerator build local variable
            Object o_13_0 = arr1[0];
            // MethodAssertGenerator build local variable
            Object o_14_0 = arr1[1];
            // Changes to the set should not be reflected in the Elements getters
            set1.add("c3");
            // MethodAssertGenerator build local variable
            Object o_17_0 = 2 == (div.classNames().size());
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            // Update the class names to a fresh set
            final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
            newSet.addAll(set1);
            newSet.add("c3");
            div.classNames(newSet);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            final java.util.Set<java.lang.String> set2 = div.classNames();
            final java.lang.Object[] arr2 = set2.toArray();
            // MethodAssertGenerator build local variable
            Object o_34_0 = (arr2.length) == 3;
            // MethodAssertGenerator build local variable
            Object o_35_0 = arr2[0];
            // MethodAssertGenerator build local variable
            Object o_36_0 = arr2[1];
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // MethodAssertGenerator build local variable
            Object o_40_0 = text;
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testClassNames_cf1464198__40 = // StatementAdderMethod cloned existing statement
div.getElementById(text);
            // MethodAssertGenerator build local variable
            Object o_44_0 = o_testClassNames_cf1464198__40;
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderMethod cloned existing statement
            div.select(result);
            // MethodAssertGenerator build local variable
            Object o_52_0 = arr2[2];
            org.junit.Assert.fail("testClassNames_cf1464198_cf1473241 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1463886_cf1469397_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.className();
            final java.util.Set<java.lang.String> set1 = div.classNames();
            final java.lang.Object[] arr1 = set1.toArray();
            // MethodAssertGenerator build local variable
            Object o_12_0 = (arr1.length) == 2;
            // MethodAssertGenerator build local variable
            Object o_13_0 = arr1[0];
            // MethodAssertGenerator build local variable
            Object o_14_0 = arr1[1];
            // Changes to the set should not be reflected in the Elements getters
            set1.add("c3");
            // MethodAssertGenerator build local variable
            Object o_17_0 = 2 == (div.classNames().size());
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            // Update the class names to a fresh set
            final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
            newSet.addAll(set1);
            newSet.add("c3");
            div.classNames(newSet);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            final java.util.Set<java.lang.String> set2 = div.classNames();
            final java.lang.Object[] arr2 = set2.toArray();
            // MethodAssertGenerator build local variable
            Object o_34_0 = (arr2.length) == 3;
            // MethodAssertGenerator build local variable
            Object o_35_0 = arr2[0];
            // MethodAssertGenerator build local variable
            Object o_36_0 = arr2[1];
            // AssertGenerator replace invocation
            boolean o_testClassNames_cf1463886__37 = // StatementAdderMethod cloned existing statement
div.hasText();
            // MethodAssertGenerator build local variable
            Object o_39_0 = o_testClassNames_cf1463886__37;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_386419 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p2 = doc.select("p").get(1);
            // StatementAdderMethod cloned existing statement
            p2.appendElement(vc_386419);
            // MethodAssertGenerator build local variable
            Object o_49_0 = arr2[2];
            org.junit.Assert.fail("testClassNames_cf1463886_cf1469397 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassNames */
    @org.junit.Test(timeout = 10000)
    public void testClassNames_cf1463894_cf1467830_failAssert31_literalMutation1481020_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class=\"c1 c2\">C</div>");
                org.jsoup.nodes.Element div = doc.select("div").get(0);
                // MethodAssertGenerator build local variable
                Object o_6_0 = div.className();
                final java.util.Set<java.lang.String> set1 = div.classNames();
                final java.lang.Object[] arr1 = set1.toArray();
                // MethodAssertGenerator build local variable
                Object o_12_0 = (arr1.length) == 2;
                // MethodAssertGenerator build local variable
                Object o_13_0 = arr1[0];
                // MethodAssertGenerator build local variable
                Object o_14_0 = arr1[1];
                // Changes to the set should not be reflected in the Elements getters
                set1.add("c3");
                // MethodAssertGenerator build local variable
                Object o_17_0 = 2 == (div.classNames().size());
                // MethodAssertGenerator build local variable
                Object o_20_0 = div.className();
                // Update the class names to a fresh set
                final java.util.Set<java.lang.String> newSet = new java.util.LinkedHashSet<java.lang.String>(3);
                newSet.addAll(set1);
                newSet.add("c3");
                div.classNames(newSet);
                // MethodAssertGenerator build local variable
                Object o_28_0 = div.className();
                final java.util.Set<java.lang.String> set2 = div.classNames();
                final java.lang.Object[] arr2 = set2.toArray();
                // MethodAssertGenerator build local variable
                Object o_34_0 = (arr2.length) == 3;
                // MethodAssertGenerator build local variable
                Object o_35_0 = arr2[-1];
                // MethodAssertGenerator build local variable
                Object o_36_0 = arr2[1];
                // StatementAddOnAssert local variable replacement
                java.lang.String text = doc.text();
                // MethodAssertGenerator build local variable
                Object o_40_0 = text;
                // AssertGenerator replace invocation
                boolean o_testClassNames_cf1463894__40 = // StatementAdderMethod cloned existing statement
div.is(text);
                // MethodAssertGenerator build local variable
                Object o_44_0 = o_testClassNames_cf1463894__40;
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_386023 = new java.lang.String();
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_386020 = (org.jsoup.nodes.Element)null;
                // StatementAdderMethod cloned existing statement
                vc_386020.getElementsMatchingOwnText(vc_386023);
                // MethodAssertGenerator build local variable
                Object o_52_0 = arr2[2];
                org.junit.Assert.fail("testClassNames_cf1463894_cf1467830 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testClassNames_cf1463894_cf1467830_failAssert31_literalMutation1481020 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1483201_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_388836 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_388836.getElementsContainingText(result);
            // MethodAssertGenerator build local variable
            Object o_24_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1483201 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482675_failAssert63() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // StatementAdderOnAssert create random local variable
            boolean vc_388684 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_388683 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.attr(vc_388683, vc_388684);
            // MethodAssertGenerator build local variable
            Object o_22_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482675 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482451() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
        org.jsoup.nodes.Element div = doc.select("div").first();
        div.addClass("green");
        org.junit.Assert.assertEquals("mellow yellow green", div.className());
        div.removeClass("red");// noop
        
        div.removeClass("yellow");
        org.junit.Assert.assertEquals("mellow green", div.className());
        div.toggleClass("green").toggleClass("red");
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_388603 = new java.lang.String();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(vc_388603, "");
        // AssertGenerator replace invocation
        boolean o_testClassUpdates_cf1482451__18 = // StatementAdderMethod cloned existing statement
div.hasClass(vc_388603);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_testClassUpdates_cf1482451__18);
        org.junit.Assert.assertEquals("mellow red", div.className());
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482494() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
        org.jsoup.nodes.Element div = doc.select("div").first();
        div.addClass("green");
        org.junit.Assert.assertEquals("mellow yellow green", div.className());
        div.removeClass("red");// noop
        
        div.removeClass("yellow");
        org.junit.Assert.assertEquals("mellow green", div.className());
        div.toggleClass("green").toggleClass("red");
        // StatementAdderOnAssert create null value
        org.jsoup.nodes.Node vc_388618 = (org.jsoup.nodes.Node)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_388618);
        // AssertGenerator replace invocation
        boolean o_testClassUpdates_cf1482494__18 = // StatementAdderMethod cloned existing statement
div.preserveWhitespace(vc_388618);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_testClassUpdates_cf1482494__18);
        org.junit.Assert.assertEquals("mellow red", div.className());
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482471_failAssert28() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_388609 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.is(vc_388609);
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482471 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482568_failAssert90() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // StatementAdderOnAssert create null value
            java.lang.String vc_388654 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.addClass(vc_388654);
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482568 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482622_failAssert50() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_388670 = (org.jsoup.nodes.Node)null;
            // StatementAdderMethod cloned existing statement
            div.appendChild(vc_388670);
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482622 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482757() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
        org.jsoup.nodes.Element div = doc.select("div").first();
        div.addClass("green");
        org.junit.Assert.assertEquals("mellow yellow green", div.className());
        div.removeClass("red");// noop
        
        div.removeClass("yellow");
        org.junit.Assert.assertEquals("mellow green", div.className());
        div.toggleClass("green").toggleClass("red");
        // AssertGenerator replace invocation
        org.jsoup.nodes.Element o_testClassUpdates_cf1482757__16 = // StatementAdderMethod cloned existing statement
div.firstElementSibling();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(o_testClassUpdates_cf1482757__16);
        org.junit.Assert.assertEquals("mellow red", div.className());
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1483172_failAssert43() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // StatementAdderOnAssert create null value
            java.lang.String vc_388830 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.getElementsByTag(vc_388830);
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1483172 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482987_failAssert82() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_388780 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.getElementsByAttribute(vc_388780);
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482987 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1483144_failAssert34() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // StatementAdderOnAssert create null value
            java.lang.String vc_388817 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.getElementsByClass(vc_388817);
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1483144 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482924_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // StatementAdderOnAssert create null value
            java.lang.String vc_388761 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.toggleClass(vc_388761);
            // MethodAssertGenerator build local variable
            Object o_20_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482924 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482768_failAssert87() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // StatementAdderOnAssert create null value
            java.lang.String vc_388712 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            divA.getElementById(vc_388712);
            // MethodAssertGenerator build local variable
            Object o_24_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482768 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482750_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.clone();
            // MethodAssertGenerator build local variable
            Object o_22_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482750 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482805_cf1483902_failAssert26() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testClassUpdates_cf1482805__16 = // StatementAdderMethod cloned existing statement
div.nextElementSibling();
            // MethodAssertGenerator build local variable
            Object o_18_0 = o_testClassUpdates_cf1482805__16;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_389062 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.getElementsByAttribute(vc_389062);
            // MethodAssertGenerator build local variable
            Object o_24_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482805_cf1483902 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482805_cf1484060_failAssert58() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testClassUpdates_cf1482805__16 = // StatementAdderMethod cloned existing statement
div.nextElementSibling();
            // MethodAssertGenerator build local variable
            Object o_18_0 = o_testClassUpdates_cf1482805__16;
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAdderMethod cloned existing statement
            div.getElementsByClass(text);
            // MethodAssertGenerator build local variable
            Object o_25_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482805_cf1484060 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482451_cf1484651_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_388603 = new java.lang.String();
            // MethodAssertGenerator build local variable
            Object o_18_0 = vc_388603;
            // AssertGenerator replace invocation
            boolean o_testClassUpdates_cf1482451__18 = // StatementAdderMethod cloned existing statement
div.hasClass(vc_388603);
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_testClassUpdates_cf1482451__18;
            // StatementAdderOnAssert create null value
            java.util.Set<java.lang.String> vc_389266 = (java.util.Set)null;
            // StatementAdderMethod cloned existing statement
            div.classNames(vc_389266);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482451_cf1484651 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482521_cf1489013_failAssert60() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // AssertGenerator replace invocation
            java.lang.String o_testClassUpdates_cf1482521__16 = // StatementAdderMethod cloned existing statement
div.id();
            // MethodAssertGenerator build local variable
            Object o_18_0 = o_testClassUpdates_cf1482521__16;
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAdderMethod cloned existing statement
            div.wrap(text);
            // MethodAssertGenerator build local variable
            Object o_25_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482521_cf1489013 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482766_literalMutation1487348_failAssert68() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_60618 = "";
            // MethodAssertGenerator build local variable
            Object o_18_0 = String_vc_60618;
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testClassUpdates_cf1482766__18 = // StatementAdderMethod cloned existing statement
div.getElementById(String_vc_60618);
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_testClassUpdates_cf1482766__18;
            // MethodAssertGenerator build local variable
            Object o_24_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482766_literalMutation1487348 should have thrown Exception");
        } catch (java.lang.Exception eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482805_cf1483827_failAssert31() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testClassUpdates_cf1482805__16 = // StatementAdderMethod cloned existing statement
div.nextElementSibling();
            // MethodAssertGenerator build local variable
            Object o_18_0 = o_testClassUpdates_cf1482805__16;
            // StatementAdderOnAssert create null value
            java.lang.String vc_389039 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.text(vc_389039);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482805_cf1483827 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482521_cf1488612_failAssert22() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // AssertGenerator replace invocation
            java.lang.String o_testClassUpdates_cf1482521__16 = // StatementAdderMethod cloned existing statement
div.id();
            // MethodAssertGenerator build local variable
            Object o_18_0 = o_testClassUpdates_cf1482521__16;
            // StatementAdderOnAssert create null value
            java.lang.String vc_390346 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.addClass(vc_390346);
            // MethodAssertGenerator build local variable
            Object o_24_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482521_cf1488612 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482757_cf1485896_failAssert29() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testClassUpdates_cf1482757__16 = // StatementAdderMethod cloned existing statement
div.firstElementSibling();
            // MethodAssertGenerator build local variable
            Object o_18_0 = o_testClassUpdates_cf1482757__16;
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_389601 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_389601.text(result);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482757_cf1485896 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482766_cf1488376_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            div.toggleClass("green").toggleClass("red");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_60618 = "red";
            // MethodAssertGenerator build local variable
            Object o_18_0 = String_vc_60618;
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testClassUpdates_cf1482766__18 = // StatementAdderMethod cloned existing statement
div.getElementById(String_vc_60618);
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_testClassUpdates_cf1482766__18;
            // StatementAdderOnAssert create null value
            java.lang.String vc_390270 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.select(vc_390270);
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482766_cf1488376 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClassUpdates */
    @org.junit.Test(timeout = 10000)
    public void testClassUpdates_cf1482766_cf1487475_failAssert44_literalMutation1499185() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            div.addClass("green");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.className();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_7_0, "mellow yellow green");
            div.removeClass("red");// noop
            
            div.removeClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_12_0 = div.className();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, "mellow green");
            div.toggleClass("green").toggleClass("red");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_60618 = "Bgg";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_60618, "Bgg");
            // MethodAssertGenerator build local variable
            Object o_18_0 = String_vc_60618;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_18_0, "Bgg");
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testClassUpdates_cf1482766__18 = // StatementAdderMethod cloned existing statement
div.getElementById(String_vc_60618);
            // MethodAssertGenerator build local variable
            Object o_22_0 = o_testClassUpdates_cf1482766__18;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(o_22_0);
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_390050 = (org.jsoup.nodes.Element)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_390050);
            // StatementAdderMethod cloned existing statement
            vc_390050.toString();
            // MethodAssertGenerator build local variable
            Object o_28_0 = div.className();
            org.junit.Assert.fail("testClassUpdates_cf1482766_cf1487475 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClone */
    @org.junit.Test(timeout = 10000)
    public void testClone_cf1499430_failAssert36() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p><span>Two</div>");
            org.jsoup.nodes.Element p = doc.select("p").get(1);
            org.jsoup.nodes.Element clone = p.clone();
            // MethodAssertGenerator build local variable
            Object o_8_0 = clone.parent();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.parent();
            clone.append("<span>Three");
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(clone.outerHtml());
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.body().appendChild(clone);// adopt
            
            // MethodAssertGenerator build local variable
            Object o_27_0 = clone.parent();
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_392830 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_392830.hasClass(text);
            // MethodAssertGenerator build local variable
            Object o_36_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testClone_cf1499430 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClone */
    @org.junit.Test(timeout = 10000)
    public void testClone_cf1499993_failAssert58() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p><span>Two</div>");
            org.jsoup.nodes.Element p = doc.select("p").get(1);
            org.jsoup.nodes.Element clone = p.clone();
            // MethodAssertGenerator build local variable
            Object o_8_0 = clone.parent();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.parent();
            clone.append("<span>Three");
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(clone.outerHtml());
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.body().appendChild(clone);// adopt
            
            // MethodAssertGenerator build local variable
            Object o_27_0 = clone.parent();
            // StatementAdderOnAssert create null value
            java.lang.String vc_393013 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_393011 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_393011.getElementsByAttributeStarting(vc_393013);
            // MethodAssertGenerator build local variable
            Object o_35_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testClone_cf1499993 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClone */
    @org.junit.Test(timeout = 10000)
    public void testClone_cf1499453_failAssert28() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p><span>Two</div>");
            org.jsoup.nodes.Element p = doc.select("p").get(1);
            org.jsoup.nodes.Element clone = p.clone();
            // MethodAssertGenerator build local variable
            Object o_8_0 = clone.parent();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.parent();
            clone.append("<span>Three");
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(clone.outerHtml());
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.body().appendChild(clone);// adopt
            
            // MethodAssertGenerator build local variable
            Object o_27_0 = clone.parent();
            // StatementAdderOnAssert create null value
            java.lang.String vc_392838 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.is(vc_392838);
            // MethodAssertGenerator build local variable
            Object o_33_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testClone_cf1499453 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClone */
    @org.junit.Test(timeout = 10000)
    public void testClone_cf1499456_failAssert78() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p><span>Two</div>");
            org.jsoup.nodes.Element p = doc.select("p").get(1);
            org.jsoup.nodes.Element clone = p.clone();
            // MethodAssertGenerator build local variable
            Object o_8_0 = clone.parent();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.parent();
            clone.append("<span>Three");
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(clone.outerHtml());
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.body().appendChild(clone);// adopt
            
            // MethodAssertGenerator build local variable
            Object o_27_0 = clone.parent();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_392839 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p.is(vc_392839);
            // MethodAssertGenerator build local variable
            Object o_33_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testClone_cf1499456 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClone */
    @org.junit.Test(timeout = 10000)
    public void testClone_cf1499731_failAssert26() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p><span>Two</div>");
            org.jsoup.nodes.Element p = doc.select("p").get(1);
            org.jsoup.nodes.Element clone = p.clone();
            // MethodAssertGenerator build local variable
            Object o_8_0 = clone.parent();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.parent();
            clone.append("<span>Three");
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(clone.outerHtml());
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.body().appendChild(clone);// adopt
            
            // MethodAssertGenerator build local variable
            Object o_27_0 = clone.parent();
            // StatementAdderOnAssert create null value
            java.util.Set<java.lang.String> vc_392932 = (java.util.Set)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p1.classNames(vc_392932);
            // MethodAssertGenerator build local variable
            Object o_37_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testClone_cf1499731 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClone */
    @org.junit.Test(timeout = 10000)
    public void testClone_cf1499997_failAssert56() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p><span>Two</div>");
            org.jsoup.nodes.Element p = doc.select("p").get(1);
            org.jsoup.nodes.Element clone = p.clone();
            // MethodAssertGenerator build local variable
            Object o_8_0 = clone.parent();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.parent();
            clone.append("<span>Three");
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(clone.outerHtml());
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.body().appendChild(clone);// adopt
            
            // MethodAssertGenerator build local variable
            Object o_27_0 = clone.parent();
            // StatementAdderOnAssert create null value
            java.lang.String vc_393013 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.getElementsByAttributeStarting(vc_393013);
            // MethodAssertGenerator build local variable
            Object o_33_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testClone_cf1499997 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClone */
    @org.junit.Test(timeout = 10000)
    public void testClone_cf1499956_failAssert80() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p><span>Two</div>");
            org.jsoup.nodes.Element p = doc.select("p").get(1);
            org.jsoup.nodes.Element clone = p.clone();
            // MethodAssertGenerator build local variable
            Object o_8_0 = clone.parent();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.parent();
            clone.append("<span>Three");
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(clone.outerHtml());
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.body().appendChild(clone);// adopt
            
            // MethodAssertGenerator build local variable
            Object o_27_0 = clone.parent();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_393000 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p.wrap(vc_393000);
            // MethodAssertGenerator build local variable
            Object o_33_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testClone_cf1499956 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClone */
    @org.junit.Test(timeout = 10000)
    public void testClone_cf1499921_failAssert75() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p><span>Two</div>");
            org.jsoup.nodes.Element p = doc.select("p").get(1);
            org.jsoup.nodes.Element clone = p.clone();
            // MethodAssertGenerator build local variable
            Object o_8_0 = clone.parent();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.parent();
            clone.append("<span>Three");
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(clone.outerHtml());
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.body().appendChild(clone);// adopt
            
            // MethodAssertGenerator build local variable
            Object o_27_0 = clone.parent();
            // StatementAdderOnAssert create null value
            java.lang.String vc_392991 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            clone.toggleClass(vc_392991);
            // MethodAssertGenerator build local variable
            Object o_33_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testClone_cf1499921 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClone */
    @org.junit.Test(timeout = 10000)
    public void testClone_cf1500283_failAssert61() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p><span>Two</div>");
            org.jsoup.nodes.Element p = doc.select("p").get(1);
            org.jsoup.nodes.Element clone = p.clone();
            // MethodAssertGenerator build local variable
            Object o_8_0 = clone.parent();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.parent();
            clone.append("<span>Three");
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(clone.outerHtml());
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.body().appendChild(clone);// adopt
            
            // MethodAssertGenerator build local variable
            Object o_27_0 = clone.parent();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_61302 = "<div><p>One</p><p><span>Two</span></p></div><p><span>Two</span><span>Three</span></p>";
            // StatementAdderMethod cloned existing statement
            p.select(String_vc_61302);
            // MethodAssertGenerator build local variable
            Object o_33_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testClone_cf1500283 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClone */
    @org.junit.Test(timeout = 10000)
    public void testClone_cf1500243_failAssert51() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p><span>Two</div>");
            org.jsoup.nodes.Element p = doc.select("p").get(1);
            org.jsoup.nodes.Element clone = p.clone();
            // MethodAssertGenerator build local variable
            Object o_8_0 = clone.parent();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.parent();
            clone.append("<span>Three");
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(clone.outerHtml());
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.body().appendChild(clone);// adopt
            
            // MethodAssertGenerator build local variable
            Object o_27_0 = clone.parent();
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_393076 = (java.util.regex.Pattern)null;
            // StatementAdderMethod cloned existing statement
            p.getElementsMatchingOwnText(vc_393076);
            // MethodAssertGenerator build local variable
            Object o_33_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testClone_cf1500243 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClone */
    @org.junit.Test(timeout = 10000)
    public void testClone_cf1499905_failAssert54() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p><span>Two</div>");
            org.jsoup.nodes.Element p = doc.select("p").get(1);
            org.jsoup.nodes.Element clone = p.clone();
            // MethodAssertGenerator build local variable
            Object o_8_0 = clone.parent();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.parent();
            clone.append("<span>Three");
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(clone.outerHtml());
            // MethodAssertGenerator build local variable
            Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            doc.body().appendChild(clone);// adopt
            
            // MethodAssertGenerator build local variable
            Object o_27_0 = clone.parent();
            // StatementAdderOnAssert create null value
            java.lang.String vc_392987 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.text(vc_392987);
            // MethodAssertGenerator build local variable
            Object o_33_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testClone_cf1499905 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClone */
    @org.junit.Test(timeout = 10000)
    public void testClone_cf1500283_failAssert61_literalMutation1500554_literalMutation1501283_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p><span>Two</div>");
                org.jsoup.nodes.Element p = doc.select("p").get(1);
                org.jsoup.nodes.Element clone = p.clone();
                // MethodAssertGenerator build local variable
                Object o_8_0 = clone.parent();
                // MethodAssertGenerator build local variable
                Object o_13_0 = p.parent();
                clone.append("<span>Three");
                // MethodAssertGenerator build local variable
                Object o_16_0 = org.jsoup.TextUtil.stripNewlines(clone.outerHtml());
                // MethodAssertGenerator build local variable
                Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                doc.body().appendChild(clone);// adopt
                
                // MethodAssertGenerator build local variable
                Object o_27_0 = clone.parent();
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_61302 = "";
                // StatementAdderMethod cloned existing statement
                p.select(String_vc_61302);
                // MethodAssertGenerator build local variable
                Object o_33_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.junit.Assert.fail("testClone_cf1500283 should have thrown SelectorParseException");
            } catch (org.jsoup.select.Selector.SelectorParseException eee) {
            }
            org.junit.Assert.fail("testClone_cf1500283_failAssert61_literalMutation1500554_literalMutation1501283 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClone */
    @org.junit.Test(timeout = 10000)
    public void testClone_cf1500283_failAssert61_add1500551_literalMutation1501163_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One<p><span>Two</div>");
                org.jsoup.nodes.Element p = doc.select("p").get(1);
                org.jsoup.nodes.Element clone = p.clone();
                // MethodAssertGenerator build local variable
                Object o_8_0 = clone.parent();
                // MethodAssertGenerator build local variable
                Object o_13_0 = p.parent();
                clone.append("<span>Three");
                // MethodAssertGenerator build local variable
                Object o_16_0 = org.jsoup.TextUtil.stripNewlines(clone.outerHtml());
                // MethodAssertGenerator build local variable
                Object o_19_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                doc.body().appendChild(clone);// adopt
                
                // MethodAssertGenerator build local variable
                Object o_27_0 = clone.parent();
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_61302 = "";
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                p.select(String_vc_61302);
                // StatementAdderMethod cloned existing statement
                p.select(String_vc_61302);
                // MethodAssertGenerator build local variable
                Object o_33_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.junit.Assert.fail("testClone_cf1500283 should have thrown SelectorParseException");
            } catch (org.jsoup.select.Selector.SelectorParseException eee) {
            }
            org.junit.Assert.fail("testClone_cf1500283_failAssert61_add1500551_literalMutation1501163 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClonesClassnames */
    @org.junit.Test(timeout = 10000)
    public void testClonesClassnames_cf1501862_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='one two'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Set<java.lang.String> classes = div.classNames();
            // MethodAssertGenerator build local variable
            Object o_8_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_10_0 = classes.contains("one");
            // MethodAssertGenerator build local variable
            Object o_12_0 = classes.contains("two");
            org.jsoup.nodes.Element copy = div.clone();
            java.util.Set<java.lang.String> copyClasses = copy.classNames();
            // MethodAssertGenerator build local variable
            Object o_18_0 = copyClasses.size();
            // MethodAssertGenerator build local variable
            Object o_20_0 = copyClasses.contains("one");
            // MethodAssertGenerator build local variable
            Object o_22_0 = copyClasses.contains("two");
            copyClasses.add("three");
            copyClasses.remove("one");
            // MethodAssertGenerator build local variable
            Object o_26_0 = classes.contains("one");
            // MethodAssertGenerator build local variable
            Object o_28_0 = classes.contains("three");
            // MethodAssertGenerator build local variable
            Object o_30_0 = copyClasses.contains("one");
            // MethodAssertGenerator build local variable
            Object o_32_0 = copyClasses.contains("three");
            // MethodAssertGenerator build local variable
            Object o_34_0 = div.html();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_393182 = (org.jsoup.nodes.Node)null;
            // StatementAdderMethod cloned existing statement
            div.appendChild(vc_393182);
            // MethodAssertGenerator build local variable
            Object o_40_0 = copy.html();
            org.junit.Assert.fail("testClonesClassnames_cf1501862 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClonesClassnames */
    @org.junit.Test(timeout = 10000)
    public void testClonesClassnames_cf1502537_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='one two'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Set<java.lang.String> classes = div.classNames();
            // MethodAssertGenerator build local variable
            Object o_8_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_10_0 = classes.contains("one");
            // MethodAssertGenerator build local variable
            Object o_12_0 = classes.contains("two");
            org.jsoup.nodes.Element copy = div.clone();
            java.util.Set<java.lang.String> copyClasses = copy.classNames();
            // MethodAssertGenerator build local variable
            Object o_18_0 = copyClasses.size();
            // MethodAssertGenerator build local variable
            Object o_20_0 = copyClasses.contains("one");
            // MethodAssertGenerator build local variable
            Object o_22_0 = copyClasses.contains("two");
            copyClasses.add("three");
            copyClasses.remove("one");
            // MethodAssertGenerator build local variable
            Object o_26_0 = classes.contains("one");
            // MethodAssertGenerator build local variable
            Object o_28_0 = classes.contains("three");
            // MethodAssertGenerator build local variable
            Object o_30_0 = copyClasses.contains("one");
            // MethodAssertGenerator build local variable
            Object o_32_0 = copyClasses.contains("three");
            // MethodAssertGenerator build local variable
            Object o_34_0 = div.html();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_393370 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_393370.select(result);
            // MethodAssertGenerator build local variable
            Object o_44_0 = copy.html();
            org.junit.Assert.fail("testClonesClassnames_cf1502537 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClonesClassnames */
    @org.junit.Test(timeout = 10000)
    public void testClonesClassnames_cf1502243_failAssert61() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='one two'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Set<java.lang.String> classes = div.classNames();
            // MethodAssertGenerator build local variable
            Object o_8_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_10_0 = classes.contains("one");
            // MethodAssertGenerator build local variable
            Object o_12_0 = classes.contains("two");
            org.jsoup.nodes.Element copy = div.clone();
            java.util.Set<java.lang.String> copyClasses = copy.classNames();
            // MethodAssertGenerator build local variable
            Object o_18_0 = copyClasses.size();
            // MethodAssertGenerator build local variable
            Object o_20_0 = copyClasses.contains("one");
            // MethodAssertGenerator build local variable
            Object o_22_0 = copyClasses.contains("two");
            copyClasses.add("three");
            copyClasses.remove("one");
            // MethodAssertGenerator build local variable
            Object o_26_0 = classes.contains("one");
            // MethodAssertGenerator build local variable
            Object o_28_0 = classes.contains("three");
            // MethodAssertGenerator build local variable
            Object o_30_0 = copyClasses.contains("one");
            // MethodAssertGenerator build local variable
            Object o_32_0 = copyClasses.contains("three");
            // MethodAssertGenerator build local variable
            Object o_34_0 = div.html();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_393292 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            copy.getElementsByAttribute(vc_393292);
            // MethodAssertGenerator build local variable
            Object o_40_0 = copy.html();
            org.junit.Assert.fail("testClonesClassnames_cf1502243 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClonesClassnames */
    @org.junit.Test(timeout = 10000)
    public void testClonesClassnames_cf1501687_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='one two'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Set<java.lang.String> classes = div.classNames();
            // MethodAssertGenerator build local variable
            Object o_8_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_10_0 = classes.contains("one");
            // MethodAssertGenerator build local variable
            Object o_12_0 = classes.contains("two");
            org.jsoup.nodes.Element copy = div.clone();
            java.util.Set<java.lang.String> copyClasses = copy.classNames();
            // MethodAssertGenerator build local variable
            Object o_18_0 = copyClasses.size();
            // MethodAssertGenerator build local variable
            Object o_20_0 = copyClasses.contains("one");
            // MethodAssertGenerator build local variable
            Object o_22_0 = copyClasses.contains("two");
            copyClasses.add("three");
            copyClasses.remove("one");
            // MethodAssertGenerator build local variable
            Object o_26_0 = classes.contains("one");
            // MethodAssertGenerator build local variable
            Object o_28_0 = classes.contains("three");
            // MethodAssertGenerator build local variable
            Object o_30_0 = copyClasses.contains("one");
            // MethodAssertGenerator build local variable
            Object o_32_0 = copyClasses.contains("three");
            // MethodAssertGenerator build local variable
            Object o_34_0 = div.html();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_393115 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_393112 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_393112.hasClass(vc_393115);
            // MethodAssertGenerator build local variable
            Object o_42_0 = copy.html();
            org.junit.Assert.fail("testClonesClassnames_cf1501687 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClonesClassnames */
    @org.junit.Test(timeout = 10000)
    public void testClonesClassnames_cf1501919_failAssert44() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='one two'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Set<java.lang.String> classes = div.classNames();
            // MethodAssertGenerator build local variable
            Object o_8_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_10_0 = classes.contains("one");
            // MethodAssertGenerator build local variable
            Object o_12_0 = classes.contains("two");
            org.jsoup.nodes.Element copy = div.clone();
            java.util.Set<java.lang.String> copyClasses = copy.classNames();
            // MethodAssertGenerator build local variable
            Object o_18_0 = copyClasses.size();
            // MethodAssertGenerator build local variable
            Object o_20_0 = copyClasses.contains("one");
            // MethodAssertGenerator build local variable
            Object o_22_0 = copyClasses.contains("two");
            copyClasses.add("three");
            copyClasses.remove("one");
            // MethodAssertGenerator build local variable
            Object o_26_0 = classes.contains("one");
            // MethodAssertGenerator build local variable
            Object o_28_0 = classes.contains("three");
            // MethodAssertGenerator build local variable
            Object o_30_0 = copyClasses.contains("one");
            // MethodAssertGenerator build local variable
            Object o_32_0 = copyClasses.contains("three");
            // MethodAssertGenerator build local variable
            Object o_34_0 = div.html();
            // StatementAdderOnAssert create random local variable
            boolean vc_393196 = false;
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.attr(text, vc_393196);
            // MethodAssertGenerator build local variable
            Object o_47_0 = copy.html();
            org.junit.Assert.fail("testClonesClassnames_cf1501919 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClonesClassnames */
    @org.junit.Test(timeout = 10000)
    public void testClonesClassnames_cf1502118_failAssert31() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='one two'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Set<java.lang.String> classes = div.classNames();
            // MethodAssertGenerator build local variable
            Object o_8_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_10_0 = classes.contains("one");
            // MethodAssertGenerator build local variable
            Object o_12_0 = classes.contains("two");
            org.jsoup.nodes.Element copy = div.clone();
            java.util.Set<java.lang.String> copyClasses = copy.classNames();
            // MethodAssertGenerator build local variable
            Object o_18_0 = copyClasses.size();
            // MethodAssertGenerator build local variable
            Object o_20_0 = copyClasses.contains("one");
            // MethodAssertGenerator build local variable
            Object o_22_0 = copyClasses.contains("two");
            copyClasses.add("three");
            copyClasses.remove("one");
            // MethodAssertGenerator build local variable
            Object o_26_0 = classes.contains("one");
            // MethodAssertGenerator build local variable
            Object o_28_0 = classes.contains("three");
            // MethodAssertGenerator build local variable
            Object o_30_0 = copyClasses.contains("one");
            // MethodAssertGenerator build local variable
            Object o_32_0 = copyClasses.contains("three");
            // MethodAssertGenerator build local variable
            Object o_34_0 = div.html();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_61321 = "one";
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.prependText(String_vc_61321);
            // MethodAssertGenerator build local variable
            Object o_44_0 = copy.html();
            org.junit.Assert.fail("testClonesClassnames_cf1502118 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testClonesClassnames */
    @org.junit.Test(timeout = 10000)
    public void testClonesClassnames_cf1502015_failAssert68() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='one two'></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            java.util.Set<java.lang.String> classes = div.classNames();
            // MethodAssertGenerator build local variable
            Object o_8_0 = classes.size();
            // MethodAssertGenerator build local variable
            Object o_10_0 = classes.contains("one");
            // MethodAssertGenerator build local variable
            Object o_12_0 = classes.contains("two");
            org.jsoup.nodes.Element copy = div.clone();
            java.util.Set<java.lang.String> copyClasses = copy.classNames();
            // MethodAssertGenerator build local variable
            Object o_18_0 = copyClasses.size();
            // MethodAssertGenerator build local variable
            Object o_20_0 = copyClasses.contains("one");
            // MethodAssertGenerator build local variable
            Object o_22_0 = copyClasses.contains("two");
            copyClasses.add("three");
            copyClasses.remove("one");
            // MethodAssertGenerator build local variable
            Object o_26_0 = classes.contains("one");
            // MethodAssertGenerator build local variable
            Object o_28_0 = classes.contains("three");
            // MethodAssertGenerator build local variable
            Object o_30_0 = copyClasses.contains("one");
            // MethodAssertGenerator build local variable
            Object o_32_0 = copyClasses.contains("three");
            // MethodAssertGenerator build local variable
            Object o_34_0 = div.html();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_393225 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.getElementById(vc_393225);
            // MethodAssertGenerator build local variable
            Object o_40_0 = copy.html();
            org.junit.Assert.fail("testClonesClassnames_cf1502015 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testContainerOutput */
    @org.junit.Test(timeout = 10000)
    public void testContainerOutput_cf1504503_failAssert86() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Hello there</title> <div><p>Hello</p><p>there</p></div> <div>Another</div>");
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.select("title").first().outerHtml();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("div").first().outerHtml();
            // StatementAdderOnAssert create null value
            java.lang.String vc_393577 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_393575 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_393575.getElementsByAttributeStarting(vc_393577);
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.select("body").first().html();
            org.junit.Assert.fail("testContainerOutput_cf1504503 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testContainerOutput */
    @org.junit.Test(timeout = 10000)
    public void testContainerOutput_cf1504105_failAssert46() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Hello there</title> <div><p>Hello</p><p>there</p></div> <div>Another</div>");
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.select("title").first().outerHtml();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("div").first().outerHtml();
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_393394 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_393394.hasClass(text);
            // MethodAssertGenerator build local variable
            Object o_18_0 = doc.select("body").first().html();
            org.junit.Assert.fail("testContainerOutput_cf1504105 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testContainerOutput */
    @org.junit.Test(timeout = 10000)
    public void testContainerOutput_cf1504495_failAssert47() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Hello there</title> <div><p>Hello</p><p>there</p></div> <div>Another</div>");
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.select("title").first().outerHtml();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("div").first().outerHtml();
            // StatementAdderOnAssert create null value
            java.lang.String vc_393573 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.getElementsByAttribute(vc_393573);
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.select("body").first().html();
            org.junit.Assert.fail("testContainerOutput_cf1504495 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testContainerOutput */
    @org.junit.Test(timeout = 10000)
    public void testContainerOutput_cf1504711_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Hello there</title> <div><p>Hello</p><p>there</p></div> <div>Another</div>");
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.select("title").first().outerHtml();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("div").first().outerHtml();
            // StatementAdderOnAssert create null value
            java.lang.String vc_393654 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // StatementAdderMethod cloned existing statement
            div2.select(vc_393654);
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.select("body").first().html();
            org.junit.Assert.fail("testContainerOutput_cf1504711 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testContainerOutput */
    @org.junit.Test(timeout = 10000)
    public void testContainerOutput_cf1504313_failAssert95() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Hello there</title> <div><p>Hello</p><p>there</p></div> <div>Another</div>");
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.select("title").first().outerHtml();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("div").first().outerHtml();
            // StatementAdderOnAssert create null value
            java.util.Set<java.lang.String> vc_393496 = (java.util.Set)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.classNames(vc_393496);
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.select("body").first().html();
            org.junit.Assert.fail("testContainerOutput_cf1504313 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testContainerOutput */
    @org.junit.Test(timeout = 10000)
    public void testContainerOutput_cf1504639_failAssert79() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Hello there</title> <div><p>Hello</p><p>there</p></div> <div>Another</div>");
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.select("title").first().outerHtml();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("div").first().outerHtml();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_393625 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p2 = doc.select("p").get(1);
            // StatementAdderMethod cloned existing statement
            p2.getElementsByTag(vc_393625);
            // MethodAssertGenerator build local variable
            Object o_19_0 = doc.select("body").first().html();
            org.junit.Assert.fail("testContainerOutput_cf1504639 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testContainerOutput */
    /* amplification of org.jsoup.nodes.ElementTest#testContainerOutput_cf1504448_failAssert84_literalMutation1504894 */
    @org.junit.Test(timeout = 10000)
    public void testContainerOutput_cf1504448_failAssert84_literalMutation1504894_literalMutation1505527() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Hello there</title> <div><p>Hello</p><p>there</p></div> <div>Another</div>");
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.select("title").first().outerHtml();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("div").first().outerHtml();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_61367 = "g";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_61367, "g");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_393553 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_393553.toggleClass(String_vc_61367);
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.select("body").first().html();
            org.junit.Assert.fail("testContainerOutput_cf1504448 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testContainerOutput */
    /* amplification of org.jsoup.nodes.ElementTest#testContainerOutput_cf1504106_failAssert81_add1504878 */
    @org.junit.Test(timeout = 10000)
    public void testContainerOutput_cf1504106_failAssert81_add1504878_literalMutation1505431() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Hello there</title> <div><p>Hello</p><p>there</p></div> <div>Another</div>");
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.select("title").first().outerHtml();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("div").first().outerHtml();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_61349 = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_61349, "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_393394 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_393394.hasClass(String_vc_61349);
            // StatementAdderMethod cloned existing statement
            vc_393394.hasClass(String_vc_61349);
            // MethodAssertGenerator build local variable
            Object o_17_0 = doc.select("body").first().html();
            org.junit.Assert.fail("testContainerOutput_cf1504106 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testCssPath */
    @org.junit.Test(timeout = 10000)
    public void testCssPath_cf1506188_failAssert16() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=\"id1\">A</div><div>B</div><div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            org.jsoup.nodes.Element divB = doc.select("div").get(1);
            org.jsoup.nodes.Element divC = doc.select("div").get(2);
            // MethodAssertGenerator build local variable
            Object o_12_0 = divA.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_14_0 = divB.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_16_0 = divC.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_18_0 = divA == (doc.select(divA.cssSelector()).first());
            // MethodAssertGenerator build local variable
            Object o_22_0 = divB == (doc.select(divB.cssSelector()).first());
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_61410 = "<div id=\"id1\">A</div><div>B</div><div class=\"c1 c2\">C</div>";
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.getElementsByAttributeStarting(String_vc_61410);
            // MethodAssertGenerator build local variable
            Object o_34_0 = divC == (doc.select(divC.cssSelector()).first());
            org.junit.Assert.fail("testCssPath_cf1506188 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testCssPath */
    @org.junit.Test(timeout = 10000)
    public void testCssPath_cf1505738_failAssert39() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=\"id1\">A</div><div>B</div><div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            org.jsoup.nodes.Element divB = doc.select("div").get(1);
            org.jsoup.nodes.Element divC = doc.select("div").get(2);
            // MethodAssertGenerator build local variable
            Object o_12_0 = divA.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_14_0 = divB.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_16_0 = divC.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_18_0 = divA == (doc.select(divA.cssSelector()).first());
            // MethodAssertGenerator build local variable
            Object o_22_0 = divB == (doc.select(divB.cssSelector()).first());
            // StatementAdderOnAssert create null value
            java.lang.String vc_393730 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            divA.addClass(vc_393730);
            // MethodAssertGenerator build local variable
            Object o_30_0 = divC == (doc.select(divC.cssSelector()).first());
            org.junit.Assert.fail("testCssPath_cf1505738 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testCssPath */
    @org.junit.Test(timeout = 10000)
    public void testCssPath_cf1506062_failAssert19() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=\"id1\">A</div><div>B</div><div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            org.jsoup.nodes.Element divB = doc.select("div").get(1);
            org.jsoup.nodes.Element divC = doc.select("div").get(2);
            // MethodAssertGenerator build local variable
            Object o_12_0 = divA.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_14_0 = divB.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_16_0 = divC.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_18_0 = divA == (doc.select(divA.cssSelector()).first());
            // MethodAssertGenerator build local variable
            Object o_22_0 = divB == (doc.select(divB.cssSelector()).first());
            // StatementAdderOnAssert create null value
            java.lang.String vc_393825 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.removeClass(vc_393825);
            // MethodAssertGenerator build local variable
            Object o_34_0 = divC == (doc.select(divC.cssSelector()).first());
            org.junit.Assert.fail("testCssPath_cf1506062 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testCssPath */
    @org.junit.Test(timeout = 10000)
    public void testCssPath_cf1506366_failAssert56() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=\"id1\">A</div><div>B</div><div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            org.jsoup.nodes.Element divB = doc.select("div").get(1);
            org.jsoup.nodes.Element divC = doc.select("div").get(2);
            // MethodAssertGenerator build local variable
            Object o_12_0 = divA.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_14_0 = divB.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_16_0 = divC.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_18_0 = divA == (doc.select(divA.cssSelector()).first());
            // MethodAssertGenerator build local variable
            Object o_22_0 = divB == (doc.select(divB.cssSelector()).first());
            // StatementAdderOnAssert create null value
            java.lang.String vc_393906 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            divC.getElementsByTag(vc_393906);
            // MethodAssertGenerator build local variable
            Object o_30_0 = divC == (doc.select(divC.cssSelector()).first());
            org.junit.Assert.fail("testCssPath_cf1506366 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testCssPath */
    @org.junit.Test(timeout = 10000)
    public void testCssPath_cf1505916_failAssert27() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=\"id1\">A</div><div>B</div><div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            org.jsoup.nodes.Element divB = doc.select("div").get(1);
            org.jsoup.nodes.Element divC = doc.select("div").get(2);
            // MethodAssertGenerator build local variable
            Object o_12_0 = divA.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_14_0 = divB.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_16_0 = divC.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_18_0 = divA == (doc.select(divA.cssSelector()).first());
            // MethodAssertGenerator build local variable
            Object o_22_0 = divB == (doc.select(divB.cssSelector()).first());
            // StatementAdderOnAssert create null value
            java.util.Set<java.lang.String> vc_393778 = (java.util.Set)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // StatementAdderMethod cloned existing statement
            div2.classNames(vc_393778);
            // MethodAssertGenerator build local variable
            Object o_34_0 = divC == (doc.select(divC.cssSelector()).first());
            org.junit.Assert.fail("testCssPath_cf1505916 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testCssPath */
    @org.junit.Test(timeout = 10000)
    public void testCssPath_cf1506326_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=\"id1\">A</div><div>B</div><div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            org.jsoup.nodes.Element divB = doc.select("div").get(1);
            org.jsoup.nodes.Element divC = doc.select("div").get(2);
            // MethodAssertGenerator build local variable
            Object o_12_0 = divA.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_14_0 = divB.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_16_0 = divC.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_18_0 = divA == (doc.select(divA.cssSelector()).first());
            // MethodAssertGenerator build local variable
            Object o_22_0 = divB == (doc.select(divB.cssSelector()).first());
            // StatementAdderOnAssert create null value
            java.lang.String vc_393893 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            divC.getElementsByClass(vc_393893);
            // MethodAssertGenerator build local variable
            Object o_30_0 = divC == (doc.select(divC.cssSelector()).first());
            org.junit.Assert.fail("testCssPath_cf1506326 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testCssPath */
    @org.junit.Test(timeout = 10000)
    public void testCssPath_cf1506403_failAssert29() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=\"id1\">A</div><div>B</div><div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            org.jsoup.nodes.Element divB = doc.select("div").get(1);
            org.jsoup.nodes.Element divC = doc.select("div").get(2);
            // MethodAssertGenerator build local variable
            Object o_12_0 = divA.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_14_0 = divB.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_16_0 = divC.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_18_0 = divA == (doc.select(divA.cssSelector()).first());
            // MethodAssertGenerator build local variable
            Object o_22_0 = divB == (doc.select(divB.cssSelector()).first());
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.getElementsContainingText(result);
            // MethodAssertGenerator build local variable
            Object o_36_0 = divC == (doc.select(divC.cssSelector()).first());
            org.junit.Assert.fail("testCssPath_cf1506403 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testCssPath */
    @org.junit.Test(timeout = 10000)
    public void testCssPath_cf1506428_failAssert37() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=\"id1\">A</div><div>B</div><div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            org.jsoup.nodes.Element divB = doc.select("div").get(1);
            org.jsoup.nodes.Element divC = doc.select("div").get(2);
            // MethodAssertGenerator build local variable
            Object o_12_0 = divA.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_14_0 = divB.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_16_0 = divC.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_18_0 = divA == (doc.select(divA.cssSelector()).first());
            // MethodAssertGenerator build local variable
            Object o_22_0 = divB == (doc.select(divB.cssSelector()).first());
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_393922 = (java.util.regex.Pattern)null;
            // StatementAdderMethod cloned existing statement
            divC.getElementsMatchingOwnText(vc_393922);
            // MethodAssertGenerator build local variable
            Object o_30_0 = divC == (doc.select(divC.cssSelector()).first());
            org.junit.Assert.fail("testCssPath_cf1506428 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testCssPath */
    @org.junit.Test(timeout = 10000)
    public void testCssPath_cf1505614_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=\"id1\">A</div><div>B</div><div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            org.jsoup.nodes.Element divB = doc.select("div").get(1);
            org.jsoup.nodes.Element divC = doc.select("div").get(2);
            // MethodAssertGenerator build local variable
            Object o_12_0 = divA.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_14_0 = divB.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_16_0 = divC.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_18_0 = divA == (doc.select(divA.cssSelector()).first());
            // MethodAssertGenerator build local variable
            Object o_22_0 = divB == (doc.select(divB.cssSelector()).first());
            // StatementAdderOnAssert create null value
            java.lang.String vc_393678 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_393676 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_393676.hasClass(vc_393678);
            // MethodAssertGenerator build local variable
            Object o_32_0 = divC == (doc.select(divC.cssSelector()).first());
            org.junit.Assert.fail("testCssPath_cf1505614 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testCssPath */
    /* amplification of org.jsoup.nodes.ElementTest#testCssPath_cf1505624_failAssert63_add1506667 */
    @org.junit.Test(timeout = 10000)
    public void testCssPath_cf1505624_failAssert63_add1506667_literalMutation1507204() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=\"id1\">A</div><div>B</div><div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            org.jsoup.nodes.Element divB = doc.select("div").get(1);
            org.jsoup.nodes.Element divC = doc.select("div").get(2);
            // MethodAssertGenerator build local variable
            Object o_12_0 = divA.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_14_0 = divB.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_16_0 = divC.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_18_0 = divA == (doc.select(divA.cssSelector()).first());
            // MethodAssertGenerator build local variable
            Object o_22_0 = divB == (doc.select(divB.cssSelector()).first());
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_61386 = "dv";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_61386, "dv");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            p.hasClass(String_vc_61386);
            // StatementAdderMethod cloned existing statement
            p.hasClass(String_vc_61386);
            // MethodAssertGenerator build local variable
            Object o_33_0 = divC == (doc.select(divC.cssSelector()).first());
            org.junit.Assert.fail("testCssPath_cf1505624 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testCssPath */
    /* amplification of org.jsoup.nodes.ElementTest#testCssPath_cf1506188_failAssert16_literalMutation1506571 */
    @org.junit.Test(timeout = 10000)
    public void testCssPath_cf1506188_failAssert16_literalMutation1506571_literalMutation1506800() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=\"id1\">A</div><div>B</div><div class=\"c1 c2\">C</div>");
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            org.jsoup.nodes.Element divB = doc.select("div").get(1);
            org.jsoup.nodes.Element divC = doc.select("div").get(2);
            // MethodAssertGenerator build local variable
            Object o_12_0 = divA.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_14_0 = divB.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_16_0 = divC.cssSelector();
            // MethodAssertGenerator build local variable
            Object o_18_0 = divA == (doc.select(divA.cssSelector()).first());
            // MethodAssertGenerator build local variable
            Object o_22_0 = divB == (doc.select(divB.cssSelector()).first());
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_61410 = "h}:8&Z@dkk9@t,)7Gp7+9O1SJIb$:ez4A?fyMEVMd(($EfP7>|:u`:JPF(";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_61410, "h}:8&Z@dkk9@t,)7Gp7+9O1SJIb$:ez4A?fyMEVMd(($EfP7>|:u`:JPF(");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.getElementsByAttributeStarting(String_vc_61410);
            // MethodAssertGenerator build local variable
            Object o_34_0 = divC == (doc.select(divC.cssSelector()).first());
            org.junit.Assert.fail("testCssPath_cf1506188 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testElementSiblingIndex */
    @org.junit.Test(timeout = 10000)
    public void testElementSiblingIndex_cf1507772_failAssert16() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One</p>...<p>Two</p>...<p>Three</p>");
            org.jsoup.select.Elements ps = doc.select("p");
            // MethodAssertGenerator build local variable
            Object o_5_0 = 0 == (ps.get(0).elementSiblingIndex());
            // MethodAssertGenerator build local variable
            Object o_8_0 = 1 == (ps.get(1).elementSiblingIndex());
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_394128 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.wrap(vc_394128);
            // MethodAssertGenerator build local variable
            Object o_19_0 = 2 == (ps.get(2).elementSiblingIndex());
            org.junit.Assert.fail("testElementSiblingIndex_cf1507772 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testElementSiblingIndex */
    @org.junit.Test(timeout = 10000)
    public void testElementSiblingIndex_cf1507943_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One</p>...<p>Two</p>...<p>Three</p>");
            org.jsoup.select.Elements ps = doc.select("p");
            // MethodAssertGenerator build local variable
            Object o_5_0 = 0 == (ps.get(0).elementSiblingIndex());
            // MethodAssertGenerator build local variable
            Object o_8_0 = 1 == (ps.get(1).elementSiblingIndex());
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_394189 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p1.getElementsByTag(vc_394189);
            // MethodAssertGenerator build local variable
            Object o_19_0 = 2 == (ps.get(2).elementSiblingIndex());
            org.junit.Assert.fail("testElementSiblingIndex_cf1507943 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testElementSiblingIndex */
    @org.junit.Test(timeout = 10000)
    public void testElementSiblingIndex_cf1507484_failAssert35() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One</p>...<p>Two</p>...<p>Three</p>");
            org.jsoup.select.Elements ps = doc.select("p");
            // MethodAssertGenerator build local variable
            Object o_5_0 = 0 == (ps.get(0).elementSiblingIndex());
            // MethodAssertGenerator build local variable
            Object o_8_0 = 1 == (ps.get(1).elementSiblingIndex());
            // StatementAdderOnAssert create null value
            java.lang.String vc_394012 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.addClass(vc_394012);
            // MethodAssertGenerator build local variable
            Object o_19_0 = 2 == (ps.get(2).elementSiblingIndex());
            org.junit.Assert.fail("testElementSiblingIndex_cf1507484 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testElementSiblingIndex */
    @org.junit.Test(timeout = 10000)
    public void testElementSiblingIndex_cf1507390_failAssert62() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One</p>...<p>Two</p>...<p>Three</p>");
            org.jsoup.select.Elements ps = doc.select("p");
            // MethodAssertGenerator build local variable
            Object o_5_0 = 0 == (ps.get(0).elementSiblingIndex());
            // MethodAssertGenerator build local variable
            Object o_8_0 = 1 == (ps.get(1).elementSiblingIndex());
            // StatementAdderOnAssert create null value
            java.lang.String vc_393960 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_393958 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_393958.hasClass(vc_393960);
            // MethodAssertGenerator build local variable
            Object o_17_0 = 2 == (ps.get(2).elementSiblingIndex());
            org.junit.Assert.fail("testElementSiblingIndex_cf1507390 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testElementSiblingIndex */
    @org.junit.Test(timeout = 10000)
    public void testElementSiblingIndex_cf1507949_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One</p>...<p>Two</p>...<p>Three</p>");
            org.jsoup.select.Elements ps = doc.select("p");
            // MethodAssertGenerator build local variable
            Object o_5_0 = 0 == (ps.get(0).elementSiblingIndex());
            // MethodAssertGenerator build local variable
            Object o_8_0 = 1 == (ps.get(1).elementSiblingIndex());
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_394190 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_394190.getElementsContainingOwnText(result);
            // MethodAssertGenerator build local variable
            Object o_19_0 = 2 == (ps.get(2).elementSiblingIndex());
            org.junit.Assert.fail("testElementSiblingIndex_cf1507949 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testElementSiblingIndex */
    @org.junit.Test(timeout = 10000)
    public void testElementSiblingIndex_cf1507793_failAssert32() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One</p>...<p>Two</p>...<p>Three</p>");
            org.jsoup.select.Elements ps = doc.select("p");
            // MethodAssertGenerator build local variable
            Object o_5_0 = 0 == (ps.get(0).elementSiblingIndex());
            // MethodAssertGenerator build local variable
            Object o_8_0 = 1 == (ps.get(1).elementSiblingIndex());
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_394138 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.getElementsByAttribute(vc_394138);
            // MethodAssertGenerator build local variable
            Object o_19_0 = 2 == (ps.get(2).elementSiblingIndex());
            org.junit.Assert.fail("testElementSiblingIndex_cf1507793 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testElementSiblingIndex */
    @org.junit.Test(timeout = 10000)
    public void testElementSiblingIndex_cf1507622_failAssert63() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One</p>...<p>Two</p>...<p>Three</p>");
            org.jsoup.select.Elements ps = doc.select("p");
            // MethodAssertGenerator build local variable
            Object o_5_0 = 0 == (ps.get(0).elementSiblingIndex());
            // MethodAssertGenerator build local variable
            Object o_8_0 = 1 == (ps.get(1).elementSiblingIndex());
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_394071 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.getElementById(vc_394071);
            // MethodAssertGenerator build local variable
            Object o_19_0 = 2 == (ps.get(2).elementSiblingIndex());
            org.junit.Assert.fail("testElementSiblingIndex_cf1507622 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testElementSiblingIndexSameContent */
    @org.junit.Test(timeout = 10000)
    public void testElementSiblingIndexSameContent_cf1511708_failAssert63() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One</p>...<p>One</p>...<p>One</p>");
            org.jsoup.select.Elements ps = doc.select("p");
            // MethodAssertGenerator build local variable
            Object o_5_0 = 0 == (ps.get(0).elementSiblingIndex());
            // MethodAssertGenerator build local variable
            Object o_8_0 = 1 == (ps.get(1).elementSiblingIndex());
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_394480 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_394480.getElementsMatchingOwnText(result);
            // MethodAssertGenerator build local variable
            Object o_19_0 = 2 == (ps.get(2).elementSiblingIndex());
            org.junit.Assert.fail("testElementSiblingIndexSameContent_cf1511708 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testElementSiblingIndexSameContent */
    @org.junit.Test(timeout = 10000)
    public void testElementSiblingIndexSameContent_cf1511129_failAssert69() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>One</p>...<p>One</p>...<p>One</p>");
            org.jsoup.select.Elements ps = doc.select("p");
            // MethodAssertGenerator build local variable
            Object o_5_0 = 0 == (ps.get(0).elementSiblingIndex());
            // MethodAssertGenerator build local variable
            Object o_8_0 = 1 == (ps.get(1).elementSiblingIndex());
            // StatementAdderOnAssert create null value
            java.lang.String vc_394242 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.hasClass(vc_394242);
            // MethodAssertGenerator build local variable
            Object o_19_0 = 2 == (ps.get(2).elementSiblingIndex());
            org.junit.Assert.fail("testElementSiblingIndexSameContent_cf1511129 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testEmptyElementFormatHtml */
    @org.junit.Test(timeout = 10000)
    public void testEmptyElementFormatHtml_cf1514816_failAssert89() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // don't put newlines into empty blocks
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<section><div></div></section>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_394524 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_394522 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_394522.hasClass(vc_394524);
            // MethodAssertGenerator build local variable
            Object o_10_0 = doc.select("section").first().outerHtml();
            org.junit.Assert.fail("testEmptyElementFormatHtml_cf1514816 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testEmptyElementFormatHtml */
    @org.junit.Test(timeout = 10000)
    public void testEmptyElementFormatHtml_cf1515219_failAssert75() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // don't put newlines into empty blocks
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<section><div></div></section>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_394705 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.getElementsByAttributeStarting(vc_394705);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.select("section").first().outerHtml();
            org.junit.Assert.fail("testEmptyElementFormatHtml_cf1515219 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testEmptyElementFormatHtml */
    @org.junit.Test(timeout = 10000)
    public void testEmptyElementFormatHtml_cf1515327_failAssert54() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // don't put newlines into empty blocks
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<section><div></div></section>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_394739 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.getElementsByClass(vc_394739);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.select("section").first().outerHtml();
            org.junit.Assert.fail("testEmptyElementFormatHtml_cf1515327 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testEmptyElementFormatHtml */
    @org.junit.Test(timeout = 10000)
    public void testEmptyElementFormatHtml_cf1515151_failAssert60() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // don't put newlines into empty blocks
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<section><div></div></section>");
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.text(text);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.select("section").first().outerHtml();
            org.junit.Assert.fail("testEmptyElementFormatHtml_cf1515151 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testEmptyElementFormatHtml */
    @org.junit.Test(timeout = 10000)
    public void testEmptyElementFormatHtml_cf1515372_failAssert12_add1515485_cf1712936_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // don't put newlines into empty blocks
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<section><div></div></section>");
                // StatementAdderOnAssert create null value
                java.lang.String vc_394760 = (java.lang.String)null;
                // MethodAssertGenerator build local variable
                Object o_8_0 = vc_394760;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element p = doc.select("p").first();
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div = doc.select("div").first();
                // StatementAdderMethod cloned existing statement
                div.getElementsByClass(vc_394760);
                // MethodAssertGenerator build local variable
                Object o_20_0 = p;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                p.getElementsContainingText(vc_394760);
                // StatementAdderMethod cloned existing statement
                p.getElementsContainingText(vc_394760);
                // MethodAssertGenerator build local variable
                Object o_12_0 = doc.select("section").first().outerHtml();
                org.junit.Assert.fail("testEmptyElementFormatHtml_cf1515372 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testEmptyElementFormatHtml_cf1515372_failAssert12_add1515485_cf1712936 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testEmptyElementFormatHtml */
    @org.junit.Test(timeout = 10000)
    public void testEmptyElementFormatHtml_cf1514956_failAssert33_literalMutation1515532_cf1620875_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // don't put newlines into empty blocks
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<section><div></div></section>");
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_61523 = "";
                // MethodAssertGenerator build local variable
                Object o_8_0 = String_vc_61523;
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_394594 = (org.jsoup.nodes.Element)null;
                // StatementAddOnAssert local variable replacement
                java.lang.String text = doc.text();
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div1 = doc.select("div").get(0);
                // StatementAdderMethod cloned existing statement
                div1.prependElement(text);
                // MethodAssertGenerator build local variable
                Object o_21_0 = vc_394594;
                // StatementAdderMethod cloned existing statement
                vc_394594.appendElement(String_vc_61523);
                // MethodAssertGenerator build local variable
                Object o_10_0 = doc.select("section").first().outerHtml();
                org.junit.Assert.fail("testEmptyElementFormatHtml_cf1514956 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testEmptyElementFormatHtml_cf1514956_failAssert33_literalMutation1515532_cf1620875 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testEmptyElementFormatHtml */
    @org.junit.Test(timeout = 10000)
    public void testEmptyElementFormatHtml_cf1515372_failAssert12_add1515485_cf1712125_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // don't put newlines into empty blocks
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<section><div></div></section>");
                // StatementAdderOnAssert create null value
                java.lang.String vc_394760 = (java.lang.String)null;
                // MethodAssertGenerator build local variable
                Object o_8_0 = vc_394760;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element p = doc.select("p").first();
                // StatementAddOnAssert local variable replacement
                java.lang.String result = doc.toString().replaceAll("\\s+", "");
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div = doc.select("div").get(0);
                // StatementAdderMethod cloned existing statement
                div.is(result);
                // MethodAssertGenerator build local variable
                Object o_24_0 = p;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                p.getElementsContainingText(vc_394760);
                // StatementAdderMethod cloned existing statement
                p.getElementsContainingText(vc_394760);
                // MethodAssertGenerator build local variable
                Object o_12_0 = doc.select("section").first().outerHtml();
                org.junit.Assert.fail("testEmptyElementFormatHtml_cf1515372 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testEmptyElementFormatHtml_cf1515372_failAssert12_add1515485_cf1712125 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatHtml */
    @org.junit.Test(timeout = 10000)
    public void testFormatHtml_cf1722617_failAssert51() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.is(text);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.html();
            org.junit.Assert.fail("testFormatHtml_cf1722617 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatHtml */
    @org.junit.Test(timeout = 10000)
    public void testFormatHtml_cf1723207_failAssert63() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_449773 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").get(1);
            // StatementAdderMethod cloned existing statement
            p.select(vc_449773);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.html();
            org.junit.Assert.fail("testFormatHtml_cf1723207 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatHtml */
    @org.junit.Test(timeout = 10000)
    public void testFormatHtml_cf1723111_failAssert31() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_449730 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p2 = doc.select("p").get(1);
            // StatementAdderMethod cloned existing statement
            p2.getElementsByClass(vc_449730);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.html();
            org.junit.Assert.fail("testFormatHtml_cf1723111 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatHtml */
    @org.junit.Test(timeout = 10000)
    public void testFormatHtml_cf1723106_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_70126 = "<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>";
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_449727 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_449727.getElementsByClass(String_vc_70126);
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.html();
            org.junit.Assert.fail("testFormatHtml_cf1723106 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatHtml */
    @org.junit.Test(timeout = 10000)
    public void testFormatHtml_cf1722988_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_449691 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p1.getElementsByAttribute(vc_449691);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.html();
            org.junit.Assert.fail("testFormatHtml_cf1722988 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatHtml */
    @org.junit.Test(timeout = 10000)
    public void testFormatHtml_cf1722618_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_70097 = "<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>Hello <span>jsoup <span>users</span></span></p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>";
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.is(String_vc_70097);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.html();
            org.junit.Assert.fail("testFormatHtml_cf1722618 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatHtml */
    @org.junit.Test(timeout = 10000)
    public void testFormatHtml_cf1722904_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_449659 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_449659.removeClass(result);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.html();
            org.junit.Assert.fail("testFormatHtml_cf1722904 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatHtml */
    @org.junit.Test(timeout = 10000)
    public void testFormatHtml_cf1723000_failAssert64() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_449695 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.getElementsByAttributeStarting(vc_449695);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.html();
            org.junit.Assert.fail("testFormatHtml_cf1723000 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatHtml */
    @org.junit.Test(timeout = 10000)
    public void testFormatHtml_cf1722823_failAssert54() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_449624 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            divA.getElementById(vc_449624);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.html();
            org.junit.Assert.fail("testFormatHtml_cf1722823 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatHtml */
    @org.junit.Test(timeout = 10000)
    public void testFormatHtml_cf1722598_failAssert41() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_449512 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_449512.hasClass(result);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.html();
            org.junit.Assert.fail("testFormatHtml_cf1722598 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatHtml */
    /* amplification of org.jsoup.nodes.ElementTest#testFormatHtml_cf1722905_failAssert29_literalMutation1723298 */
    @org.junit.Test(timeout = 10000)
    public void testFormatHtml_cf1722905_failAssert29_literalMutation1723298_literalMutation1723669() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_70111 = "<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <{div>\n   <p>Hello <span>jsoup <span>users</span></spKan></p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_70111, "<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <{div>\n   <p>Hello <span>jsoup <span>users</span></spKan></p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_449659 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_449659.removeClass(String_vc_70111);
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.html();
            org.junit.Assert.fail("testFormatHtml_cf1722905 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatHtml */
    /* amplification of org.jsoup.nodes.ElementTest#testFormatHtml_cf1722618_failAssert1_add1723245 */
    @org.junit.Test(timeout = 10000)
    public void testFormatHtml_cf1722618_failAssert1_add1723245_literalMutation1723450() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_70097 = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_70097, "");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            div.is(String_vc_70097);
            // StatementAdderMethod cloned existing statement
            div.is(String_vc_70097);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.html();
            org.junit.Assert.fail("testFormatHtml_cf1722618 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatHtml */
    /* amplification of org.jsoup.nodes.ElementTest#testFormatHtml_cf1722618_failAssert1_literalMutation1723248 */
    @org.junit.Test(timeout = 10000)
    public void testFormatHtml_cf1722618_failAssert1_literalMutation1723248_literalMutation1723465() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_70097 = "O2Hz8&l]-S(DB)[=dgT2*]05Wkim},8t)cT12Q{O[C%H_[gwJO,VxDc{-61Ob|8Kh=M& ;uKh+;b#l=/kORQ5#Ea_84o$-1pS}bBTASu5/2OUz9h* sC3|c`n=6Xjk:]z2LBGm9!6#,lp_F5+_z{L`wD<?-pmIHO416{P";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_70097, "O2Hz8&l]-S(DB)[=dgT2*]05Wkim},8t)cT12Q{O[C%H_[gwJO,VxDc{-61Ob|8Kh=M& ;uKh+;b#l=/kORQ5#Ea_84o$-1pS}bBTASu5/2OUz9h* sC3|c`n=6Xjk:]z2LBGm9!6#,lp_F5+_z{L`wD<?-pmIHO416{P");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.is(String_vc_70097);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.html();
            org.junit.Assert.fail("testFormatHtml_cf1722618 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatOutline */
    @org.junit.Test(timeout = 10000)
    public void testFormatOutline_cf1724762_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            doc.outputSettings().outline(true);
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_450040 = (java.util.regex.Pattern)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p1.getElementsMatchingOwnText(vc_450040);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.html();
            org.junit.Assert.fail("testFormatOutline_cf1724762 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatOutline */
    @org.junit.Test(timeout = 10000)
    public void testFormatOutline_cf1724193_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            doc.outputSettings().outline(true);
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_70134 = "<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>\n    Hello \n    <span>\n     jsoup \n     <span>users</span>\n    </span>\n   </p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>";
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p1.is(String_vc_70134);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.html();
            org.junit.Assert.fail("testFormatOutline_cf1724193 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatOutline */
    @org.junit.Test(timeout = 10000)
    public void testFormatOutline_cf1724348_failAssert29() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            doc.outputSettings().outline(true);
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_70141 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_449877 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            divA.attr(vc_449877, boolean_vc_70141);
            // MethodAssertGenerator build local variable
            Object o_15_0 = doc.html();
            org.junit.Assert.fail("testFormatOutline_cf1724348 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatOutline */
    @org.junit.Test(timeout = 10000)
    public void testFormatOutline_cf1724794_failAssert72() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            doc.outputSettings().outline(true);
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_450055 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.select(vc_450055);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.html();
            org.junit.Assert.fail("testFormatOutline_cf1724794 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatOutline */
    @org.junit.Test(timeout = 10000)
    public void testFormatOutline_cf1724578_failAssert61() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            doc.outputSettings().outline(true);
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_449974 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div.getElementsByAttribute(vc_449974);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.html();
            org.junit.Assert.fail("testFormatOutline_cf1724578 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatOutline */
    @org.junit.Test(timeout = 10000)
    public void testFormatOutline_cf1724409_failAssert20() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            doc.outputSettings().outline(true);
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_449907 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_449904 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_449904.getElementById(vc_449907);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.html();
            org.junit.Assert.fail("testFormatOutline_cf1724409 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatOutline */
    @org.junit.Test(timeout = 10000)
    public void testFormatOutline_cf1724494_failAssert27() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            doc.outputSettings().outline(true);
            // StatementAdderOnAssert create null value
            java.lang.String vc_449943 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.removeClass(vc_449943);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.html();
            org.junit.Assert.fail("testFormatOutline_cf1724494 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatOutline */
    @org.junit.Test(timeout = 10000)
    public void testFormatOutline_cf1724791_failAssert23() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            doc.outputSettings().outline(true);
            // StatementAdderOnAssert create null value
            java.lang.String vc_450054 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.select(vc_450054);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.html();
            org.junit.Assert.fail("testFormatOutline_cf1724791 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatOutline */
    @org.junit.Test(timeout = 10000)
    public void testFormatOutline_cf1724173_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            doc.outputSettings().outline(true);
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_449794 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_449794.hasClass(result);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.html();
            org.junit.Assert.fail("testFormatOutline_cf1724173 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatOutline */
    @org.junit.Test(timeout = 10000)
    public void testFormatOutline_cf1724749_failAssert36() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            doc.outputSettings().outline(true);
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_450034 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_450034.getElementsMatchingOwnText(result);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.html();
            org.junit.Assert.fail("testFormatOutline_cf1724749 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatOutline */
    @org.junit.Test(timeout = 10000)
    public void testFormatOutline_cf1724342_failAssert44() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            doc.outputSettings().outline(true);
            // StatementAdderOnAssert create literal from method
            boolean boolean_vc_70141 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_449876 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            divA.attr(vc_449876, boolean_vc_70141);
            // MethodAssertGenerator build local variable
            Object o_15_0 = doc.html();
            org.junit.Assert.fail("testFormatOutline_cf1724342 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatOutline */
    @org.junit.Test(timeout = 10000)
    public void testFormatOutline_cf1724539_failAssert48_add1724952() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
            doc.outputSettings().outline(true);
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(result, "<html><head><title>Formattest</title></head><body><div><p>Hello<span>jsoup<span>users</span></span></p><p>Good.</p></div></body></html>");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_449957 = (org.jsoup.nodes.Element)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_449957);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_449957.val(result);
            // StatementAdderMethod cloned existing statement
            vc_449957.val(result);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.html();
            org.junit.Assert.fail("testFormatOutline_cf1724539 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testFormatOutline */
    @org.junit.Test(timeout = 10000)
    public void testFormatOutline_cf1724174_failAssert71_literalMutation1725021_cf1777464_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>");
                doc.outputSettings().outline(true);
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_70133 = "";
                // MethodAssertGenerator build local variable
                Object o_9_0 = String_vc_70133;
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_449794 = (org.jsoup.nodes.Element)null;
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_72287 = "";
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element p = doc.select("p").first();
                // StatementAdderMethod cloned existing statement
                p.is(String_vc_72287);
                // MethodAssertGenerator build local variable
                Object o_21_0 = vc_449794;
                // StatementAdderMethod cloned existing statement
                vc_449794.hasClass(String_vc_70133);
                // MethodAssertGenerator build local variable
                Object o_11_0 = doc.html();
                org.junit.Assert.fail("testFormatOutline_cf1724174 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testFormatOutline_cf1724174_failAssert71_literalMutation1725021_cf1777464 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetChildText */
    @org.junit.Test(timeout = 10000)
    public void testGetChildText_cf1847268_failAssert26() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>Hello <b>there</b> now");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = p.text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_481150 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.addClass(vc_481150);
            // MethodAssertGenerator build local variable
            Object o_12_0 = p.ownText();
            org.junit.Assert.fail("testGetChildText_cf1847268 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetChildText */
    @org.junit.Test(timeout = 10000)
    public void testGetChildText_cf1847934_failAssert40() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>Hello <b>there</b> now");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = p.text();
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_481342 = (java.util.regex.Pattern)null;
            // StatementAdderMethod cloned existing statement
            p.getElementsMatchingOwnText(vc_481342);
            // MethodAssertGenerator build local variable
            Object o_12_0 = p.ownText();
            org.junit.Assert.fail("testGetChildText_cf1847934 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetChildText */
    @org.junit.Test(timeout = 10000)
    public void testGetChildText_cf1847681_failAssert48() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>Hello <b>there</b> now");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = p.text();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_481273 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_481273.getElementsByAttribute(result);
            // MethodAssertGenerator build local variable
            Object o_16_0 = p.ownText();
            org.junit.Assert.fail("testGetChildText_cf1847681 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetChildText */
    @org.junit.Test(timeout = 10000)
    public void testGetChildText_cf1847624_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>Hello <b>there</b> now");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = p.text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_481257 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.toggleClass(vc_481257);
            // MethodAssertGenerator build local variable
            Object o_12_0 = p.ownText();
            org.junit.Assert.fail("testGetChildText_cf1847624 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetChildText */
    @org.junit.Test(timeout = 10000)
    public void testGetChildText_cf1847171_failAssert63() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>Hello <b>there</b> now");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = p.text();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_481105 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p.is(vc_481105);
            // MethodAssertGenerator build local variable
            Object o_12_0 = p.ownText();
            org.junit.Assert.fail("testGetChildText_cf1847171 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetChildText */
    @org.junit.Test(timeout = 10000)
    public void testGetChildText_cf1847972_failAssert35() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>Hello <b>there</b> now");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = p.text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_481356 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.select(vc_481356);
            // MethodAssertGenerator build local variable
            Object o_12_0 = p.ownText();
            org.junit.Assert.fail("testGetChildText_cf1847972 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetChildText */
    @org.junit.Test(timeout = 10000)
    public void testGetChildText_cf1847684_failAssert43() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>Hello <b>there</b> now");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = p.text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_481275 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.getElementsByAttribute(vc_481275);
            // MethodAssertGenerator build local variable
            Object o_12_0 = p.ownText();
            org.junit.Assert.fail("testGetChildText_cf1847684 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetChildText */
    @org.junit.Test(timeout = 10000)
    public void testGetChildText_cf1847164_failAssert52() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>Hello <b>there</b> now");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = p.text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_481104 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_481102 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_481102.is(vc_481104);
            // MethodAssertGenerator build local variable
            Object o_14_0 = p.ownText();
            org.junit.Assert.fail("testGetChildText_cf1847164 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetChildText */
    /* amplification of org.jsoup.nodes.ElementTest#testGetChildText_cf1847174_failAssert16_add1848054 */
    @org.junit.Test(timeout = 10000)
    public void testGetChildText_cf1847174_failAssert16_add1848054_literalMutation1848307() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>Hello <b>there</b> now");
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_6_0 = p.text();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75122 = "!iZs2)L4.W%c|_j";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_75122, "!iZs2)L4.W%c|_j");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            div.is(String_vc_75122);
            // StatementAdderMethod cloned existing statement
            div.is(String_vc_75122);
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.ownText();
            org.junit.Assert.fail("testGetChildText_cf1847174 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1849015_failAssert56() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
            org.jsoup.nodes.Element script = doc.select("script").first();
            org.jsoup.nodes.Element style = doc.select("style").first();
            org.jsoup.nodes.Element p = doc.select("p").first();
            java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_14_0 = scriptData.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = scriptData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_21_0 = styleData.size();
            // MethodAssertGenerator build local variable
            Object o_23_0 = styleData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
            // StatementAdderOnAssert create null value
            java.lang.String vc_481490 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.getElementById(vc_481490);
            // MethodAssertGenerator build local variable
            Object o_32_0 = pData.size();
            org.junit.Assert.fail("testGetDataNodes_cf1849015 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1848698() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
        org.jsoup.nodes.Element script = doc.select("script").first();
        org.jsoup.nodes.Element style = doc.select("style").first();
        org.jsoup.nodes.Element p = doc.select("p").first();
        java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
        org.junit.Assert.assertEquals(1, scriptData.size());
        org.junit.Assert.assertEquals("One Two", scriptData.get(0).getWholeData());
        java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
        org.junit.Assert.assertEquals(1, styleData.size());
        org.junit.Assert.assertEquals("Three Four", styleData.get(0).getWholeData());
        java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_481381 = new java.lang.String();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(vc_481381, "");
        // AssertGenerator replace invocation
        boolean o_testGetDataNodes_cf1848698__30 = // StatementAdderMethod cloned existing statement
style.hasClass(vc_481381);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_testGetDataNodes_cf1848698__30);
        org.junit.Assert.assertEquals(0, pData.size());
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1849196_failAssert41() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
            org.jsoup.nodes.Element script = doc.select("script").first();
            org.jsoup.nodes.Element style = doc.select("style").first();
            org.jsoup.nodes.Element p = doc.select("p").first();
            java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_14_0 = scriptData.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = scriptData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_21_0 = styleData.size();
            // MethodAssertGenerator build local variable
            Object o_23_0 = styleData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_481541 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_481541.val(result);
            // MethodAssertGenerator build local variable
            Object o_36_0 = pData.size();
            org.junit.Assert.fail("testGetDataNodes_cf1849196 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1848739() {
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
        org.jsoup.nodes.Element script = doc.select("script").first();
        org.jsoup.nodes.Element style = doc.select("style").first();
        org.jsoup.nodes.Element p = doc.select("p").first();
        java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
        org.junit.Assert.assertEquals(1, scriptData.size());
        org.junit.Assert.assertEquals("One Two", scriptData.get(0).getWholeData());
        java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
        org.junit.Assert.assertEquals(1, styleData.size());
        org.junit.Assert.assertEquals("Three Four", styleData.get(0).getWholeData());
        java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
        // StatementAdderOnAssert create null value
        org.jsoup.nodes.Node vc_481396 = (org.jsoup.nodes.Node)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_481396);
        // StatementAdderOnAssert create null value
        org.jsoup.nodes.Element vc_481394 = (org.jsoup.nodes.Element)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_481394);
        // AssertGenerator replace invocation
        boolean o_testGetDataNodes_cf1848739__32 = // StatementAdderMethod cloned existing statement
vc_481394.preserveWhitespace(vc_481396);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_testGetDataNodes_cf1848739__32);
        org.junit.Assert.assertEquals(0, pData.size());
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1849167_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
            org.jsoup.nodes.Element script = doc.select("script").first();
            org.jsoup.nodes.Element style = doc.select("style").first();
            org.jsoup.nodes.Element p = doc.select("p").first();
            java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_14_0 = scriptData.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = scriptData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_21_0 = styleData.size();
            // MethodAssertGenerator build local variable
            Object o_23_0 = styleData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
            // StatementAdderOnAssert create null value
            java.lang.String vc_481535 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.text(vc_481535);
            // MethodAssertGenerator build local variable
            Object o_32_0 = pData.size();
            org.junit.Assert.fail("testGetDataNodes_cf1849167 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1849218_failAssert42() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
            org.jsoup.nodes.Element script = doc.select("script").first();
            org.jsoup.nodes.Element style = doc.select("style").first();
            org.jsoup.nodes.Element p = doc.select("p").first();
            java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_14_0 = scriptData.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = scriptData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_21_0 = styleData.size();
            // MethodAssertGenerator build local variable
            Object o_23_0 = styleData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_481548 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            style.wrap(vc_481548);
            // MethodAssertGenerator build local variable
            Object o_32_0 = pData.size();
            org.junit.Assert.fail("testGetDataNodes_cf1849218 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1849064_cf1852299_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
            org.jsoup.nodes.Element script = doc.select("script").first();
            org.jsoup.nodes.Element style = doc.select("style").first();
            org.jsoup.nodes.Element p = doc.select("p").first();
            java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_14_0 = scriptData.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = scriptData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_21_0 = styleData.size();
            // MethodAssertGenerator build local variable
            Object o_23_0 = styleData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testGetDataNodes_cf1849064__28 = // StatementAdderMethod cloned existing statement
p.nextElementSibling();
            // MethodAssertGenerator build local variable
            Object o_30_0 = o_testGetDataNodes_cf1849064__28;
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.getElementsByAttributeStarting(result);
            // MethodAssertGenerator build local variable
            Object o_42_0 = pData.size();
            org.junit.Assert.fail("testGetDataNodes_cf1849064_cf1852299 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1849064_cf1852564_failAssert49() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
            org.jsoup.nodes.Element script = doc.select("script").first();
            org.jsoup.nodes.Element style = doc.select("style").first();
            org.jsoup.nodes.Element p = doc.select("p").first();
            java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_14_0 = scriptData.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = scriptData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_21_0 = styleData.size();
            // MethodAssertGenerator build local variable
            Object o_23_0 = styleData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testGetDataNodes_cf1849064__28 = // StatementAdderMethod cloned existing statement
p.nextElementSibling();
            // MethodAssertGenerator build local variable
            Object o_30_0 = o_testGetDataNodes_cf1849064__28;
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_482478 = (java.util.regex.Pattern)null;
            // StatementAdderMethod cloned existing statement
            script.getElementsMatchingText(vc_482478);
            // MethodAssertGenerator build local variable
            Object o_36_0 = pData.size();
            org.junit.Assert.fail("testGetDataNodes_cf1849064_cf1852564 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1849017_cf1853308_failAssert57() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
            org.jsoup.nodes.Element script = doc.select("script").first();
            org.jsoup.nodes.Element style = doc.select("style").first();
            org.jsoup.nodes.Element p = doc.select("p").first();
            java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_14_0 = scriptData.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = scriptData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_21_0 = styleData.size();
            // MethodAssertGenerator build local variable
            Object o_23_0 = styleData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75169 = "style";
            // MethodAssertGenerator build local variable
            Object o_30_0 = String_vc_75169;
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testGetDataNodes_cf1849017__30 = // StatementAdderMethod cloned existing statement
p.getElementById(String_vc_75169);
            // MethodAssertGenerator build local variable
            Object o_34_0 = o_testGetDataNodes_cf1849017__30;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_482676 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p.wrap(vc_482676);
            // MethodAssertGenerator build local variable
            Object o_40_0 = pData.size();
            org.junit.Assert.fail("testGetDataNodes_cf1849017_cf1853308 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1848698_cf1851617_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
            org.jsoup.nodes.Element script = doc.select("script").first();
            org.jsoup.nodes.Element style = doc.select("style").first();
            org.jsoup.nodes.Element p = doc.select("p").first();
            java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_14_0 = scriptData.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = scriptData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_21_0 = styleData.size();
            // MethodAssertGenerator build local variable
            Object o_23_0 = styleData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_481381 = new java.lang.String();
            // MethodAssertGenerator build local variable
            Object o_30_0 = vc_481381;
            // AssertGenerator replace invocation
            boolean o_testGetDataNodes_cf1848698__30 = // StatementAdderMethod cloned existing statement
style.hasClass(vc_481381);
            // MethodAssertGenerator build local variable
            Object o_34_0 = o_testGetDataNodes_cf1848698__30;
            // StatementAdderMethod cloned existing statement
            style.select(vc_481381);
            // MethodAssertGenerator build local variable
            Object o_38_0 = pData.size();
            org.junit.Assert.fail("testGetDataNodes_cf1848698_cf1851617 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1848698_cf1851180_failAssert36() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
            org.jsoup.nodes.Element script = doc.select("script").first();
            org.jsoup.nodes.Element style = doc.select("style").first();
            org.jsoup.nodes.Element p = doc.select("p").first();
            java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_14_0 = scriptData.size();
            // MethodAssertGenerator build local variable
            Object o_16_0 = scriptData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_21_0 = styleData.size();
            // MethodAssertGenerator build local variable
            Object o_23_0 = styleData.get(0).getWholeData();
            java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_481381 = new java.lang.String();
            // MethodAssertGenerator build local variable
            Object o_30_0 = vc_481381;
            // AssertGenerator replace invocation
            boolean o_testGetDataNodes_cf1848698__30 = // StatementAdderMethod cloned existing statement
style.hasClass(vc_481381);
            // MethodAssertGenerator build local variable
            Object o_34_0 = o_testGetDataNodes_cf1848698__30;
            // StatementAdderOnAssert create null value
            java.lang.String vc_482103 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.toggleClass(vc_482103);
            // MethodAssertGenerator build local variable
            Object o_40_0 = pData.size();
            org.junit.Assert.fail("testGetDataNodes_cf1848698_cf1851180 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1849247_failAssert1_add1857650_cf1858154_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_32_1 = 1;
                // MethodAssertGenerator build local variable
                Object o_19_1 = 1;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
                org.jsoup.nodes.Element script = doc.select("script").first();
                org.jsoup.nodes.Element style = doc.select("style").first();
                org.jsoup.nodes.Element p = doc.select("p").first();
                java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
                // MethodAssertGenerator build local variable
                Object o_14_0 = scriptData.size();
                // MethodAssertGenerator build local variable
                Object o_19_0 = o_14_0;
                // MethodAssertGenerator build local variable
                Object o_16_0 = scriptData.get(0).getWholeData();
                // MethodAssertGenerator build local variable
                Object o_25_0 = o_16_0;
                java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
                // MethodAssertGenerator build local variable
                Object o_21_0 = styleData.size();
                // MethodAssertGenerator build local variable
                Object o_32_0 = o_21_0;
                // MethodAssertGenerator build local variable
                Object o_23_0 = styleData.get(0).getWholeData();
                // MethodAssertGenerator build local variable
                Object o_38_0 = o_23_0;
                java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
                // StatementAdderOnAssert create null value
                java.lang.String vc_481557 = (java.lang.String)null;
                // MethodAssertGenerator build local variable
                Object o_44_0 = vc_481557;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element table = doc.select("tbody").first();
                // StatementAdderOnAssert create null value
                java.lang.String vc_484028 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                style.getElementById(vc_484028);
                // MethodAssertGenerator build local variable
                Object o_54_0 = table;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                table.getElementsByAttribute(vc_481557);
                // StatementAdderMethod cloned existing statement
                table.getElementsByAttribute(vc_481557);
                // MethodAssertGenerator build local variable
                Object o_36_0 = pData.size();
                org.junit.Assert.fail("testGetDataNodes_cf1849247 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testGetDataNodes_cf1849247_failAssert1_add1857650_cf1858154 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1849247_failAssert1_add1857650_cf1858128_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_32_1 = 1;
                // MethodAssertGenerator build local variable
                Object o_19_1 = 1;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
                org.jsoup.nodes.Element script = doc.select("script").first();
                org.jsoup.nodes.Element style = doc.select("style").first();
                org.jsoup.nodes.Element p = doc.select("p").first();
                java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
                // MethodAssertGenerator build local variable
                Object o_14_0 = scriptData.size();
                // MethodAssertGenerator build local variable
                Object o_19_0 = o_14_0;
                // MethodAssertGenerator build local variable
                Object o_16_0 = scriptData.get(0).getWholeData();
                // MethodAssertGenerator build local variable
                Object o_25_0 = o_16_0;
                java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
                // MethodAssertGenerator build local variable
                Object o_21_0 = styleData.size();
                // MethodAssertGenerator build local variable
                Object o_32_0 = o_21_0;
                // MethodAssertGenerator build local variable
                Object o_23_0 = styleData.get(0).getWholeData();
                // MethodAssertGenerator build local variable
                Object o_38_0 = o_23_0;
                java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
                // StatementAdderOnAssert create null value
                java.lang.String vc_481557 = (java.lang.String)null;
                // MethodAssertGenerator build local variable
                Object o_44_0 = vc_481557;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element table = doc.select("tbody").first();
                // StatementAdderOnAssert create null value
                java.util.Set<java.lang.String> vc_484018 = (java.util.Set)null;
                // StatementAdderMethod cloned existing statement
                script.classNames(vc_484018);
                // MethodAssertGenerator build local variable
                Object o_54_0 = table;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                table.getElementsByAttribute(vc_481557);
                // StatementAdderMethod cloned existing statement
                table.getElementsByAttribute(vc_481557);
                // MethodAssertGenerator build local variable
                Object o_36_0 = pData.size();
                org.junit.Assert.fail("testGetDataNodes_cf1849247 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testGetDataNodes_cf1849247_failAssert1_add1857650_cf1858128 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1849247_failAssert1_add1857650_cf1858430_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_32_1 = 1;
                // MethodAssertGenerator build local variable
                Object o_19_1 = 1;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
                org.jsoup.nodes.Element script = doc.select("script").first();
                org.jsoup.nodes.Element style = doc.select("style").first();
                org.jsoup.nodes.Element p = doc.select("p").first();
                java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
                // MethodAssertGenerator build local variable
                Object o_14_0 = scriptData.size();
                // MethodAssertGenerator build local variable
                Object o_19_0 = o_14_0;
                // MethodAssertGenerator build local variable
                Object o_16_0 = scriptData.get(0).getWholeData();
                // MethodAssertGenerator build local variable
                Object o_25_0 = o_16_0;
                java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
                // MethodAssertGenerator build local variable
                Object o_21_0 = styleData.size();
                // MethodAssertGenerator build local variable
                Object o_32_0 = o_21_0;
                // MethodAssertGenerator build local variable
                Object o_23_0 = styleData.get(0).getWholeData();
                // MethodAssertGenerator build local variable
                Object o_38_0 = o_23_0;
                java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
                // StatementAdderOnAssert create null value
                java.lang.String vc_481557 = (java.lang.String)null;
                // MethodAssertGenerator build local variable
                Object o_44_0 = vc_481557;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element table = doc.select("tbody").first();
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_484096 = new java.lang.String();
                // StatementAdderMethod cloned existing statement
                script.getElementsByAttribute(vc_484096);
                // MethodAssertGenerator build local variable
                Object o_54_0 = table;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                table.getElementsByAttribute(vc_481557);
                // StatementAdderMethod cloned existing statement
                table.getElementsByAttribute(vc_481557);
                // MethodAssertGenerator build local variable
                Object o_36_0 = pData.size();
                org.junit.Assert.fail("testGetDataNodes_cf1849247 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testGetDataNodes_cf1849247_failAssert1_add1857650_cf1858430 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1849247_failAssert1_add1857650_cf1858791_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_32_1 = 1;
                // MethodAssertGenerator build local variable
                Object o_19_1 = 1;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
                org.jsoup.nodes.Element script = doc.select("script").first();
                org.jsoup.nodes.Element style = doc.select("style").first();
                org.jsoup.nodes.Element p = doc.select("p").first();
                java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
                // MethodAssertGenerator build local variable
                Object o_14_0 = scriptData.size();
                // MethodAssertGenerator build local variable
                Object o_19_0 = o_14_0;
                // MethodAssertGenerator build local variable
                Object o_16_0 = scriptData.get(0).getWholeData();
                // MethodAssertGenerator build local variable
                Object o_25_0 = o_16_0;
                java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
                // MethodAssertGenerator build local variable
                Object o_21_0 = styleData.size();
                // MethodAssertGenerator build local variable
                Object o_32_0 = o_21_0;
                // MethodAssertGenerator build local variable
                Object o_23_0 = styleData.get(0).getWholeData();
                // MethodAssertGenerator build local variable
                Object o_38_0 = o_23_0;
                java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
                // StatementAdderOnAssert create null value
                java.lang.String vc_481557 = (java.lang.String)null;
                // MethodAssertGenerator build local variable
                Object o_44_0 = vc_481557;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element table = doc.select("tbody").first();
                // StatementAdderMethod cloned existing statement
                script.select(vc_481557);
                // MethodAssertGenerator build local variable
                Object o_52_0 = table;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                table.getElementsByAttribute(vc_481557);
                // StatementAdderMethod cloned existing statement
                table.getElementsByAttribute(vc_481557);
                // MethodAssertGenerator build local variable
                Object o_36_0 = pData.size();
                org.junit.Assert.fail("testGetDataNodes_cf1849247 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testGetDataNodes_cf1849247_failAssert1_add1857650_cf1858791 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1849247_failAssert1_add1857650_cf1857821_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_32_1 = 1;
                // MethodAssertGenerator build local variable
                Object o_19_1 = 1;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
                org.jsoup.nodes.Element script = doc.select("script").first();
                org.jsoup.nodes.Element style = doc.select("style").first();
                org.jsoup.nodes.Element p = doc.select("p").first();
                java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
                // MethodAssertGenerator build local variable
                Object o_14_0 = scriptData.size();
                // MethodAssertGenerator build local variable
                Object o_19_0 = o_14_0;
                // MethodAssertGenerator build local variable
                Object o_16_0 = scriptData.get(0).getWholeData();
                // MethodAssertGenerator build local variable
                Object o_25_0 = o_16_0;
                java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
                // MethodAssertGenerator build local variable
                Object o_21_0 = styleData.size();
                // MethodAssertGenerator build local variable
                Object o_32_0 = o_21_0;
                // MethodAssertGenerator build local variable
                Object o_23_0 = styleData.get(0).getWholeData();
                // MethodAssertGenerator build local variable
                Object o_38_0 = o_23_0;
                java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
                // StatementAdderOnAssert create null value
                java.lang.String vc_481557 = (java.lang.String)null;
                // MethodAssertGenerator build local variable
                Object o_44_0 = vc_481557;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element table = doc.select("tbody").first();
                // StatementAddOnAssert local variable replacement
                java.lang.String result = doc.toString().replaceAll("\\s+", "");
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element body = doc.appendElement("body");
                // StatementAdderMethod cloned existing statement
                body.is(result);
                // MethodAssertGenerator build local variable
                Object o_59_0 = table;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                table.getElementsByAttribute(vc_481557);
                // StatementAdderMethod cloned existing statement
                table.getElementsByAttribute(vc_481557);
                // MethodAssertGenerator build local variable
                Object o_36_0 = pData.size();
                org.junit.Assert.fail("testGetDataNodes_cf1849247 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testGetDataNodes_cf1849247_failAssert1_add1857650_cf1857821 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1848760_cf1854820_failAssert14_add1858895() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
            org.jsoup.nodes.Element script = doc.select("script").first();
            org.jsoup.nodes.Element style = doc.select("style").first();
            org.jsoup.nodes.Element p = doc.select("p").first();
            java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_14_0 = scriptData.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, 1);
            // MethodAssertGenerator build local variable
            Object o_16_0 = scriptData.get(0).getWholeData();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_16_0, "One Two");
            java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
            // MethodAssertGenerator build local variable
            Object o_21_0 = styleData.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_21_0, 1);
            // MethodAssertGenerator build local variable
            Object o_23_0 = styleData.get(0).getWholeData();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_23_0, "Three Four");
            java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
            // AssertGenerator replace invocation
            java.lang.String o_testGetDataNodes_cf1848760__28 = // StatementAdderMethod cloned existing statement
p.data();
            // MethodAssertGenerator build local variable
            Object o_30_0 = o_testGetDataNodes_cf1848760__28;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_30_0, "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_483084 = (org.jsoup.nodes.Element)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_483084);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_483084.isBlock();
            // StatementAdderMethod cloned existing statement
            vc_483084.isBlock();
            // MethodAssertGenerator build local variable
            Object o_36_0 = pData.size();
            org.junit.Assert.fail("testGetDataNodes_cf1848760_cf1854820 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetDataNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetDataNodes_cf1849247_failAssert1_add1857650_cf1857820_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_32_1 = 1;
                // MethodAssertGenerator build local variable
                Object o_19_1 = 1;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>");
                org.jsoup.nodes.Element script = doc.select("script").first();
                org.jsoup.nodes.Element style = doc.select("style").first();
                org.jsoup.nodes.Element p = doc.select("p").first();
                java.util.List<org.jsoup.nodes.DataNode> scriptData = script.dataNodes();
                // MethodAssertGenerator build local variable
                Object o_14_0 = scriptData.size();
                // MethodAssertGenerator build local variable
                Object o_19_0 = o_14_0;
                // MethodAssertGenerator build local variable
                Object o_16_0 = scriptData.get(0).getWholeData();
                // MethodAssertGenerator build local variable
                Object o_25_0 = o_16_0;
                java.util.List<org.jsoup.nodes.DataNode> styleData = style.dataNodes();
                // MethodAssertGenerator build local variable
                Object o_21_0 = styleData.size();
                // MethodAssertGenerator build local variable
                Object o_32_0 = o_21_0;
                // MethodAssertGenerator build local variable
                Object o_23_0 = styleData.get(0).getWholeData();
                // MethodAssertGenerator build local variable
                Object o_38_0 = o_23_0;
                java.util.List<org.jsoup.nodes.DataNode> pData = p.dataNodes();
                // StatementAdderOnAssert create null value
                java.lang.String vc_481557 = (java.lang.String)null;
                // MethodAssertGenerator build local variable
                Object o_44_0 = vc_481557;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element table = doc.select("tbody").first();
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element body = doc.appendElement("body");
                // StatementAdderMethod cloned existing statement
                body.is(vc_481557);
                // MethodAssertGenerator build local variable
                Object o_55_0 = table;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                table.getElementsByAttribute(vc_481557);
                // StatementAdderMethod cloned existing statement
                table.getElementsByAttribute(vc_481557);
                // MethodAssertGenerator build local variable
                Object o_36_0 = pData.size();
                org.junit.Assert.fail("testGetDataNodes_cf1849247 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testGetDataNodes_cf1849247_failAssert1_add1857650_cf1857820 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementById */
    @org.junit.Test(timeout = 10000)
    public void testGetElementById_cf1859627_failAssert24() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            org.jsoup.nodes.Element div = doc.getElementById("div1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = div.id();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.getElementById("none");
            org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>");
            org.jsoup.nodes.Element div2 = doc2.getElementById("2");
            // MethodAssertGenerator build local variable
            Object o_13_0 = div2.tagName();
            org.jsoup.nodes.Element span = div2.child(0).getElementById("2");// called from <p> context should be span
            
            // StatementAdderOnAssert create null value
            java.lang.String vc_484381 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p2 = doc.select("p").get(1);
            // StatementAdderMethod cloned existing statement
            p2.getElementsByAttributeStarting(vc_484381);
            // MethodAssertGenerator build local variable
            Object o_28_0 = span.tagName();
            org.junit.Assert.fail("testGetElementById_cf1859627 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementById */
    @org.junit.Test(timeout = 10000)
    public void testGetElementById_cf1859807_failAssert49() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            org.jsoup.nodes.Element div = doc.getElementById("div1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = div.id();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.getElementById("none");
            org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>");
            org.jsoup.nodes.Element div2 = doc2.getElementById("2");
            // MethodAssertGenerator build local variable
            Object o_13_0 = div2.tagName();
            org.jsoup.nodes.Element span = div2.child(0).getElementById("2");// called from <p> context should be span
            
            // StatementAdderOnAssert create null value
            java.lang.String vc_484428 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div2.getElementsByTag(vc_484428);
            // MethodAssertGenerator build local variable
            Object o_24_0 = span.tagName();
            org.junit.Assert.fail("testGetElementById_cf1859807 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementById */
    @org.junit.Test(timeout = 10000)
    public void testGetElementById_cf1859604_failAssert55() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            org.jsoup.nodes.Element div = doc.getElementById("div1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = div.id();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.getElementById("none");
            org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>");
            org.jsoup.nodes.Element div2 = doc2.getElementById("2");
            // MethodAssertGenerator build local variable
            Object o_13_0 = div2.tagName();
            org.jsoup.nodes.Element span = div2.child(0).getElementById("2");// called from <p> context should be span
            
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_484375 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_484375.getElementsByAttribute(result);
            // MethodAssertGenerator build local variable
            Object o_28_0 = span.tagName();
            org.junit.Assert.fail("testGetElementById_cf1859604 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementById */
    @org.junit.Test(timeout = 10000)
    public void testGetElementById_cf1859083_failAssert52() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            org.jsoup.nodes.Element div = doc.getElementById("div1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = div.id();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.getElementById("none");
            org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>");
            org.jsoup.nodes.Element div2 = doc2.getElementById("2");
            // MethodAssertGenerator build local variable
            Object o_13_0 = div2.tagName();
            org.jsoup.nodes.Element span = div2.child(0).getElementById("2");// called from <p> context should be span
            
            // StatementAdderOnAssert create null value
            java.lang.String vc_484206 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.is(vc_484206);
            // MethodAssertGenerator build local variable
            Object o_28_0 = span.tagName();
            org.junit.Assert.fail("testGetElementById_cf1859083 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementById */
    @org.junit.Test(timeout = 10000)
    public void testGetElementById_cf1859179_failAssert54() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            org.jsoup.nodes.Element div = doc.getElementById("div1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = div.id();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.getElementById("none");
            org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>");
            org.jsoup.nodes.Element div2 = doc2.getElementById("2");
            // MethodAssertGenerator build local variable
            Object o_13_0 = div2.tagName();
            org.jsoup.nodes.Element span = div2.child(0).getElementById("2");// called from <p> context should be span
            
            // StatementAdderOnAssert create null value
            java.lang.String vc_484252 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div2.addClass(vc_484252);
            // MethodAssertGenerator build local variable
            Object o_24_0 = span.tagName();
            org.junit.Assert.fail("testGetElementById_cf1859179 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementById */
    @org.junit.Test(timeout = 10000)
    public void testGetElementById_cf1859611_failAssert70() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            org.jsoup.nodes.Element div = doc.getElementById("div1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = div.id();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.getElementById("none");
            org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>");
            org.jsoup.nodes.Element div2 = doc2.getElementById("2");
            // MethodAssertGenerator build local variable
            Object o_13_0 = div2.tagName();
            org.jsoup.nodes.Element span = div2.child(0).getElementById("2");// called from <p> context should be span
            
            // StatementAdderOnAssert create null value
            java.lang.String vc_484377 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element img = doc.select("img").first();
            // StatementAdderMethod cloned existing statement
            img.getElementsByAttribute(vc_484377);
            // MethodAssertGenerator build local variable
            Object o_28_0 = span.tagName();
            org.junit.Assert.fail("testGetElementById_cf1859611 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementById */
    @org.junit.Test(timeout = 10000)
    public void testGetElementById_cf1859280_failAssert58() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            org.jsoup.nodes.Element div = doc.getElementById("div1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = div.id();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.getElementById("none");
            org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>");
            org.jsoup.nodes.Element div2 = doc2.getElementById("2");
            // MethodAssertGenerator build local variable
            Object o_13_0 = div2.tagName();
            org.jsoup.nodes.Element span = div2.child(0).getElementById("2");// called from <p> context should be span
            
            // StatementAdderOnAssert create random local variable
            boolean vc_484282 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_484280 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div2.attr(vc_484280, vc_484282);
            // MethodAssertGenerator build local variable
            Object o_26_0 = span.tagName();
            org.junit.Assert.fail("testGetElementById_cf1859280 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementById */
    @org.junit.Test(timeout = 10000)
    public void testGetElementById_cf1859499_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            org.jsoup.nodes.Element div = doc.getElementById("div1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = div.id();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.getElementById("none");
            org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>");
            org.jsoup.nodes.Element div2 = doc2.getElementById("2");
            // MethodAssertGenerator build local variable
            Object o_13_0 = div2.tagName();
            org.jsoup.nodes.Element span = div2.child(0).getElementById("2");// called from <p> context should be span
            
            // StatementAdderOnAssert create null value
            java.lang.String vc_484347 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div2.removeClass(vc_484347);
            // MethodAssertGenerator build local variable
            Object o_24_0 = span.tagName();
            org.junit.Assert.fail("testGetElementById_cf1859499 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementById */
    @org.junit.Test(timeout = 10000)
    public void testGetElementById_cf1859057_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            org.jsoup.nodes.Element div = doc.getElementById("div1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = div.id();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.getElementById("none");
            org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>");
            org.jsoup.nodes.Element div2 = doc2.getElementById("2");
            // MethodAssertGenerator build local variable
            Object o_13_0 = div2.tagName();
            org.jsoup.nodes.Element span = div2.child(0).getElementById("2");// called from <p> context should be span
            
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75598 = "div1";
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_484198 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_484198.hasClass(String_vc_75598);
            // MethodAssertGenerator build local variable
            Object o_26_0 = span.tagName();
            org.junit.Assert.fail("testGetElementById_cf1859057 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementById */
    /* amplification of org.jsoup.nodes.ElementTest#testGetElementById_cf1859280_failAssert58_add1860072 */
    @org.junit.Test(timeout = 10000)
    public void testGetElementById_cf1859280_failAssert58_add1860072_literalMutation1860378() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            org.jsoup.nodes.Element div = doc.getElementById("div1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = div.id();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.getElementById("none");
            org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>");
            org.jsoup.nodes.Element div2 = doc2.getElementById("2");
            // MethodAssertGenerator build local variable
            Object o_13_0 = div2.tagName();
            org.jsoup.nodes.Element span = div2.child(0).getElementById("2");// called from <p> context should be span
            
            // StatementAdderOnAssert create random local variable
            boolean vc_484282 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_484282);
            // StatementAdderOnAssert create null value
            java.lang.String vc_484280 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            div2.attr(vc_484280, vc_484282);
            // StatementAdderMethod cloned existing statement
            div2.attr(vc_484280, vc_484282);
            // MethodAssertGenerator build local variable
            Object o_26_0 = span.tagName();
            org.junit.Assert.fail("testGetElementById_cf1859280 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementById */
    /* amplification of org.jsoup.nodes.ElementTest#testGetElementById_cf1859286_failAssert17_add1860012 */
    @org.junit.Test(timeout = 10000)
    public void testGetElementById_cf1859286_failAssert17_add1860012_literalMutation1860191() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            org.jsoup.nodes.Element div = doc.getElementById("div1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = div.id();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.getElementById("none");
            org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>");
            org.jsoup.nodes.Element div2 = doc2.getElementById("2");
            // MethodAssertGenerator build local variable
            Object o_13_0 = div2.tagName();
            org.jsoup.nodes.Element span = div2.child(0).getElementById("2");// called from <p> context should be span
            
            // StatementAdderOnAssert create random local variable
            boolean vc_484282 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_484282);
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_484281 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            div2.attr(vc_484281, vc_484282);
            // StatementAdderMethod cloned existing statement
            div2.attr(vc_484281, vc_484282);
            // MethodAssertGenerator build local variable
            Object o_26_0 = span.tagName();
            org.junit.Assert.fail("testGetElementById_cf1859286 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementById */
    /* amplification of org.jsoup.nodes.ElementTest#testGetElementById_cf1859286_failAssert17_literalMutation1860013 */
    @org.junit.Test(timeout = 10000)
    public void testGetElementById_cf1859286_failAssert17_literalMutation1860013_literalMutation1860193() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            org.jsoup.nodes.Element div = doc.getElementById("div1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = div.id();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.getElementById("none");
            org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>");
            org.jsoup.nodes.Element div2 = doc2.getElementById("2");
            // MethodAssertGenerator build local variable
            Object o_13_0 = div2.tagName();
            org.jsoup.nodes.Element span = div2.child(0).getElementById("2");// called from <p> context should be span
            
            // StatementAdderOnAssert create random local variable
            boolean vc_484282 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(vc_484282);
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_484281 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div2.attr(vc_484281, vc_484282);
            // MethodAssertGenerator build local variable
            Object o_26_0 = span.tagName();
            org.junit.Assert.fail("testGetElementById_cf1859286 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementById */
    /* amplification of org.jsoup.nodes.ElementTest#testGetElementById_cf1859057_failAssert2_add1859988 */
    @org.junit.Test(timeout = 10000)
    public void testGetElementById_cf1859057_failAssert2_add1859988_literalMutation1860098() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            org.jsoup.nodes.Element div = doc.getElementById("div1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = div.id();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.getElementById("none");
            org.jsoup.nodes.Document doc2 = org.jsoup.Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>");
            org.jsoup.nodes.Element div2 = doc2.getElementById("2");
            // MethodAssertGenerator build local variable
            Object o_13_0 = div2.tagName();
            org.jsoup.nodes.Element span = div2.child(0).getElementById("2");// called from <p> context should be span
            
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75598 = "driv1";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_75598, "driv1");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_484198 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_484198.hasClass(String_vc_75598);
            // StatementAdderMethod cloned existing statement
            vc_484198.hasClass(String_vc_75598);
            // MethodAssertGenerator build local variable
            Object o_26_0 = span.tagName();
            org.junit.Assert.fail("testGetElementById_cf1859057 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttribute */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttribute_cf1860812_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div style='bold'><p title=qux><p><b style></b></p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("style");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByAttribute("class");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_484635 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_484635.text(result);
            // MethodAssertGenerator build local variable
            Object o_23_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithAttribute_cf1860812 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttribute */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttribute_cf1860477_failAssert89() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div style='bold'><p title=qux><p><b style></b></p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("style");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByAttribute("class");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element divB = doc.select("div").get(1);
            // StatementAdderMethod cloned existing statement
            divB.hasClass(result);
            // MethodAssertGenerator build local variable
            Object o_25_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithAttribute_cf1860477 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttribute */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttribute_cf1860827_failAssert29() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div style='bold'><p title=qux><p><b style></b></p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("style");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByAttribute("class");
            // StatementAdderOnAssert create null value
            java.lang.String vc_484641 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div.toggleClass(vc_484641);
            // MethodAssertGenerator build local variable
            Object o_23_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithAttribute_cf1860827 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttribute */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttribute_cf1860854_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div style='bold'><p title=qux><p><b style></b></p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("style");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByAttribute("class");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_484650 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            divA.wrap(vc_484650);
            // MethodAssertGenerator build local variable
            Object o_23_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithAttribute_cf1860854 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttribute */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttribute_cf1860884_failAssert85() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div style='bold'><p title=qux><p><b style></b></p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("style");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByAttribute("class");
            // StatementAdderOnAssert create null value
            java.lang.String vc_484663 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.getElementsByAttributeStarting(vc_484663);
            // MethodAssertGenerator build local variable
            Object o_23_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithAttribute_cf1860884 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttribute */
    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttribute_cf1860478_failAssert84_add1861318 */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttribute_cf1860478_failAssert84_add1861318_literalMutation1861965() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div style='bold'><p title=qux><p><b style></b></p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttribute("style");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByAttribute("class");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75642 = "SsbtI";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_75642, "SsbtI");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element divB = doc.select("div").get(1);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            divB.hasClass(String_vc_75642);
            // StatementAdderMethod cloned existing statement
            divB.hasClass(String_vc_75642);
            // MethodAssertGenerator build local variable
            Object o_23_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithAttribute_cf1860478 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeDash */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttributeDash_cf1862142_failAssert77() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<meta http-equiv=content-type value=utf8 id=1> <meta name=foo content=bar id=2> <div http-equiv=content-type value=utf8 id=3>");
            org.jsoup.select.Elements meta = doc.select("meta[http-equiv=content-type], meta[charset]");
            // MethodAssertGenerator build local variable
            Object o_5_0 = meta.size();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75690 = "meta[http-equiv=content-type], meta[charset]";
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.append(String_vc_75690);
            // MethodAssertGenerator build local variable
            Object o_15_0 = meta.first().id();
            org.junit.Assert.fail("testGetElementsWithAttributeDash_cf1862142 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeDash */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttributeDash_cf1862348_failAssert20() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<meta http-equiv=content-type value=utf8 id=1> <meta name=foo content=bar id=2> <div http-equiv=content-type value=utf8 id=3>");
            org.jsoup.select.Elements meta = doc.select("meta[http-equiv=content-type], meta[charset]");
            // MethodAssertGenerator build local variable
            Object o_5_0 = meta.size();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p2 = doc.select("p").get(1);
            // StatementAdderMethod cloned existing statement
            p2.tagName(result);
            // MethodAssertGenerator build local variable
            Object o_17_0 = meta.first().id();
            org.junit.Assert.fail("testGetElementsWithAttributeDash_cf1862348 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeDash */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttributeDash_cf1862029_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<meta http-equiv=content-type value=utf8 id=1> <meta name=foo content=bar id=2> <div http-equiv=content-type value=utf8 id=3>");
            org.jsoup.select.Elements meta = doc.select("meta[http-equiv=content-type], meta[charset]");
            // MethodAssertGenerator build local variable
            Object o_5_0 = meta.size();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.hasText();
            // MethodAssertGenerator build local variable
            Object o_13_0 = meta.first().id();
            org.junit.Assert.fail("testGetElementsWithAttributeDash_cf1862029 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeDash */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttributeDash_cf1862228_failAssert53() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<meta http-equiv=content-type value=utf8 id=1> <meta name=foo content=bar id=2> <div http-equiv=content-type value=utf8 id=3>");
            org.jsoup.select.Elements meta = doc.select("meta[http-equiv=content-type], meta[charset]");
            // MethodAssertGenerator build local variable
            Object o_5_0 = meta.size();
            // StatementAdderOnAssert create null value
            java.util.Set<java.lang.String> vc_484864 = (java.util.Set)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            p.classNames(vc_484864);
            // MethodAssertGenerator build local variable
            Object o_14_0 = meta.first().id();
            org.junit.Assert.fail("testGetElementsWithAttributeDash_cf1862228 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeDash */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttributeDash_cf1862630_failAssert62() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<meta http-equiv=content-type value=utf8 id=1> <meta name=foo content=bar id=2> <div http-equiv=content-type value=utf8 id=3>");
            org.jsoup.select.Elements meta = doc.select("meta[http-equiv=content-type], meta[charset]");
            // MethodAssertGenerator build local variable
            Object o_5_0 = meta.size();
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_485016 = (java.util.regex.Pattern)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.getElementsMatchingText(vc_485016);
            // MethodAssertGenerator build local variable
            Object o_15_0 = meta.first().id();
            org.junit.Assert.fail("testGetElementsWithAttributeDash_cf1862630 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeDash */
    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeDash_cf1862033_failAssert57_add1862820 */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttributeDash_cf1862033_failAssert57_add1862820_literalMutation1863387() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<meta http-equiv=content-type value=utf8 id=1> <meta name=foo content=bar id=2> <div http-equiv=content-type value=utf8 id=3>");
            org.jsoup.select.Elements meta = doc.select("meta[http-equiv=content-type], meta[charset]");
            // MethodAssertGenerator build local variable
            Object o_5_0 = meta.size();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75687 = "<m#ta http-equiv=content-type value=utf8 id=1> <meta name=foo content=bar id=2> <div http-equiv=content-type value=utf8 id=3>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_75687, "<m#ta http-equiv=content-type value=utf8 id=1> <meta name=foo content=bar id=2> <div http-equiv=content-type value=utf8 id=3>");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_484768 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_484768.is(String_vc_75687);
            // StatementAdderMethod cloned existing statement
            vc_484768.is(String_vc_75687);
            // MethodAssertGenerator build local variable
            Object o_13_0 = meta.first().id();
            org.junit.Assert.fail("testGetElementsWithAttributeDash_cf1862033 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeDash */
    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeDash_cf1862142_failAssert77_literalMutation1862871 */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttributeDash_cf1862142_failAssert77_literalMutation1862871_literalMutation1863601() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<meta http-equiv=content-type value=utf8 id=1> <meta name=foo content=bar id=2> <div http-equiv=content-type value=utf8 id=3>");
            org.jsoup.select.Elements meta = doc.select("meta[http-equiv=content-type], meta[charset]");
            // MethodAssertGenerator build local variable
            Object o_5_0 = meta.size();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75690 = "meKta[http-equiv=content-type], Qeta[charset]";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_75690, "meKta[http-equiv=content-type], Qeta[charset]");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.append(String_vc_75690);
            // MethodAssertGenerator build local variable
            Object o_15_0 = meta.first().id();
            org.junit.Assert.fail("testGetElementsWithAttributeDash_cf1862142 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeValue */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttributeValue_cf1864025_failAssert33() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div style='bold'><p><p><b style></b></p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttributeValue("style", "bold");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByAttributeValue("style", "none");
            // StatementAdderOnAssert create null value
            java.lang.String vc_485205 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element span = els.get(0);
            // StatementAdderMethod cloned existing statement
            span.toggleClass(vc_485205);
            // MethodAssertGenerator build local variable
            Object o_19_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithAttributeValue_cf1864025 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeValue */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttributeValue_cf1863764_failAssert29() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div style='bold'><p><p><b style></b></p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttributeValue("style", "bold");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByAttributeValue("style", "none");
            // StatementAdderOnAssert create null value
            java.lang.String vc_485098 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.addClass(vc_485098);
            // MethodAssertGenerator build local variable
            Object o_20_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithAttributeValue_cf1863764 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeValue */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttributeValue_cf1863804_failAssert31() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div style='bold'><p><p><b style></b></p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttributeValue("style", "bold");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByAttributeValue("style", "none");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_485114 = (org.jsoup.nodes.Node)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element span = els.get(0);
            // StatementAdderMethod cloned existing statement
            span.appendChild(vc_485114);
            // MethodAssertGenerator build local variable
            Object o_19_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithAttributeValue_cf1863804 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeValue */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttributeValue_cf1864253_failAssert36() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div style='bold'><p><p><b style></b></p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttributeValue("style", "bold");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByAttributeValue("style", "none");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_485284 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_485284.getElementsMatchingOwnText(result);
            // MethodAssertGenerator build local variable
            Object o_20_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithAttributeValue_cf1864253 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeValue */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttributeValue_cf1864221_failAssert62() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div style='bold'><p><p><b style></b></p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttributeValue("style", "bold");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByAttributeValue("style", "none");
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.getElementsByTag(text);
            // MethodAssertGenerator build local variable
            Object o_21_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithAttributeValue_cf1864221 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeValue */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttributeValue_cf1863670_failAssert58() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div style='bold'><p><p><b style></b></p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttributeValue("style", "bold");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByAttributeValue("style", "none");
            // StatementAdderOnAssert create null value
            java.lang.String vc_485046 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_485044 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_485044.hasClass(vc_485046);
            // MethodAssertGenerator build local variable
            Object o_18_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithAttributeValue_cf1863670 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeValue */
    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeValue_cf1863833_failAssert52_literalMutation1864467 */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttributeValue_cf1863833_failAssert52_literalMutation1864467_literalMutation1864989() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div style='bold'><p><p><b style></b></p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttributeValue("style", "bold");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByAttributeValue("style", "none");
            // StatementAdderOnAssert create random local variable
            boolean vc_485128 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_485128);
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_485124 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_485124.attr(result, vc_485128);
            // MethodAssertGenerator build local variable
            Object o_22_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithAttributeValue_cf1863833 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeValue */
    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithAttributeValue_cf1863762_failAssert59_add1864474 */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithAttributeValue_cf1863762_failAssert59_add1864474_literalMutation1865006() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div style='bold'><p><p><b style></b></p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByAttributeValue("style", "bold");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByAttributeValue("style", "none");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75732 = "<div style=\'bold\'>p><p><b style></b></p></div>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_75732, "<div style=\'bold\'>p><p><b style></b></p></div>");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_485096 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_485096.addClass(String_vc_75732);
            // StatementAdderMethod cloned existing statement
            vc_485096.addClass(String_vc_75732);
            // MethodAssertGenerator build local variable
            Object o_18_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithAttributeValue_cf1863762 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithClass */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithClass_cf1865544_failAssert75() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> els2 = doc.getElementsByClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_15_0 = els2.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = els2.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_20_0 = els2.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByClass("solo");
            // StatementAdderOnAssert create null value
            java.lang.String vc_485505 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.getElementsByAttribute(vc_485505);
            // MethodAssertGenerator build local variable
            Object o_33_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithClass_cf1865544 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithClass */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithClass_cf1865150_failAssert45() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> els2 = doc.getElementsByClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_15_0 = els2.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = els2.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_20_0 = els2.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByClass("solo");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75774 = "mellow";
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            div.hasClass(String_vc_75774);
            // MethodAssertGenerator build local variable
            Object o_32_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithClass_cf1865150 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithClass */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithClass_cf1865472_failAssert72() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> els2 = doc.getElementsByClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_15_0 = els2.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = els2.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_20_0 = els2.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByClass("solo");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_485477 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_485477.tagName(result);
            // MethodAssertGenerator build local variable
            Object o_33_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithClass_cf1865472 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithClass */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithClass_cf1865694_failAssert81() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> els2 = doc.getElementsByClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_15_0 = els2.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = els2.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_20_0 = els2.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByClass("solo");
            // StatementAdderOnAssert create null value
            java.lang.String vc_485556 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.getElementsByTag(vc_485556);
            // MethodAssertGenerator build local variable
            Object o_33_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithClass_cf1865694 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithClass */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithClass_cf1865499_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> els2 = doc.getElementsByClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_15_0 = els2.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = els2.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_20_0 = els2.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByClass("solo");
            // StatementAdderOnAssert create null value
            java.lang.String vc_485487 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.toggleClass(vc_485487);
            // MethodAssertGenerator build local variable
            Object o_33_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithClass_cf1865499 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithClass */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithClass_cf1865740_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> els2 = doc.getElementsByClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_15_0 = els2.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = els2.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_20_0 = els2.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByClass("solo");
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_485572 = (java.util.regex.Pattern)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.getElementsMatchingOwnText(vc_485572);
            // MethodAssertGenerator build local variable
            Object o_33_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithClass_cf1865740 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithClass */
    /* amplification of org.jsoup.nodes.ElementTest#testGetElementsWithClass_cf1865150_failAssert45_add1865915 */
    @org.junit.Test(timeout = 10000)
    public void testGetElementsWithClass_cf1865150_failAssert45_add1865915_literalMutation1866372() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>");
            java.util.List<org.jsoup.nodes.Element> els = doc.getElementsByClass("mellow");
            // MethodAssertGenerator build local variable
            Object o_5_0 = els.size();
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_10_0 = els.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> els2 = doc.getElementsByClass("yellow");
            // MethodAssertGenerator build local variable
            Object o_15_0 = els2.size();
            // MethodAssertGenerator build local variable
            Object o_17_0 = els2.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_20_0 = els2.get(1).tagName();
            java.util.List<org.jsoup.nodes.Element> none = doc.getElementsByClass("solo");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75774 = "mel5ow";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_75774, "mel5ow");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            div.hasClass(String_vc_75774);
            // StatementAdderMethod cloned existing statement
            div.hasClass(String_vc_75774);
            // MethodAssertGenerator build local variable
            Object o_32_0 = none.size();
            org.junit.Assert.fail("testGetElementsWithClass_cf1865150 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetParents */
    @org.junit.Test(timeout = 10000)
    public void testGetParents_cf1867435_failAssert50() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello <span>there</span></div>");
            org.jsoup.nodes.Element span = doc.select("span").first();
            org.jsoup.select.Elements parents = span.parents();
            // MethodAssertGenerator build local variable
            Object o_8_0 = parents.size();
            // MethodAssertGenerator build local variable
            Object o_10_0 = parents.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_13_0 = parents.get(1).tagName();
            // MethodAssertGenerator build local variable
            Object o_16_0 = parents.get(2).tagName();
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_485813 = (java.util.regex.Pattern)null;
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_485809 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_485809.getElementsByAttributeValueMatching(result, vc_485813);
            // MethodAssertGenerator build local variable
            Object o_29_0 = parents.get(3).tagName();
            org.junit.Assert.fail("testGetParents_cf1867435 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetParents */
    @org.junit.Test(timeout = 10000)
    public void testGetParents_cf1866791_failAssert42() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello <span>there</span></div>");
            org.jsoup.nodes.Element span = doc.select("span").first();
            org.jsoup.select.Elements parents = span.parents();
            // MethodAssertGenerator build local variable
            Object o_8_0 = parents.size();
            // MethodAssertGenerator build local variable
            Object o_10_0 = parents.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_13_0 = parents.get(1).tagName();
            // MethodAssertGenerator build local variable
            Object o_16_0 = parents.get(2).tagName();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75818 = "div";
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_485608 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_485608.hasClass(String_vc_75818);
            // MethodAssertGenerator build local variable
            Object o_25_0 = parents.get(3).tagName();
            org.junit.Assert.fail("testGetParents_cf1866791 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetParents */
    @org.junit.Test(timeout = 10000)
    public void testGetParents_cf1867265_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello <span>there</span></div>");
            org.jsoup.nodes.Element span = doc.select("span").first();
            org.jsoup.select.Elements parents = span.parents();
            // MethodAssertGenerator build local variable
            Object o_8_0 = parents.size();
            // MethodAssertGenerator build local variable
            Object o_10_0 = parents.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_13_0 = parents.get(1).tagName();
            // MethodAssertGenerator build local variable
            Object o_16_0 = parents.get(2).tagName();
            // StatementAdderOnAssert create null value
            java.lang.String vc_485765 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            span.text(vc_485765);
            // MethodAssertGenerator build local variable
            Object o_23_0 = parents.get(3).tagName();
            org.junit.Assert.fail("testGetParents_cf1867265 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetParents */
    @org.junit.Test(timeout = 10000)
    public void testGetParents_cf1867233_failAssert64() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello <span>there</span></div>");
            org.jsoup.nodes.Element span = doc.select("span").first();
            org.jsoup.select.Elements parents = span.parents();
            // MethodAssertGenerator build local variable
            Object o_8_0 = parents.size();
            // MethodAssertGenerator build local variable
            Object o_10_0 = parents.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_13_0 = parents.get(1).tagName();
            // MethodAssertGenerator build local variable
            Object o_16_0 = parents.get(2).tagName();
            // StatementAdderOnAssert create null value
            java.lang.String vc_485757 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            span.removeClass(vc_485757);
            // MethodAssertGenerator build local variable
            Object o_23_0 = parents.get(3).tagName();
            org.junit.Assert.fail("testGetParents_cf1867233 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetParents */
    @org.junit.Test(timeout = 10000)
    public void testGetParents_cf1866816_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello <span>there</span></div>");
            org.jsoup.nodes.Element span = doc.select("span").first();
            org.jsoup.select.Elements parents = span.parents();
            // MethodAssertGenerator build local variable
            Object o_8_0 = parents.size();
            // MethodAssertGenerator build local variable
            Object o_10_0 = parents.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_13_0 = parents.get(1).tagName();
            // MethodAssertGenerator build local variable
            Object o_16_0 = parents.get(2).tagName();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_485617 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            span.is(vc_485617);
            // MethodAssertGenerator build local variable
            Object o_23_0 = parents.get(3).tagName();
            org.junit.Assert.fail("testGetParents_cf1866816 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetParents */
    @org.junit.Test(timeout = 10000)
    public void testGetParents_cf1866917_failAssert26() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello <span>there</span></div>");
            org.jsoup.nodes.Element span = doc.select("span").first();
            org.jsoup.select.Elements parents = span.parents();
            // MethodAssertGenerator build local variable
            Object o_8_0 = parents.size();
            // MethodAssertGenerator build local variable
            Object o_10_0 = parents.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_13_0 = parents.get(1).tagName();
            // MethodAssertGenerator build local variable
            Object o_16_0 = parents.get(2).tagName();
            // StatementAdderOnAssert create null value
            java.lang.String vc_485662 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.addClass(vc_485662);
            // MethodAssertGenerator build local variable
            Object o_27_0 = parents.get(3).tagName();
            org.junit.Assert.fail("testGetParents_cf1866917 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetParents */
    @org.junit.Test(timeout = 10000)
    public void testGetParents_cf1867545_failAssert58() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello <span>there</span></div>");
            org.jsoup.nodes.Element span = doc.select("span").first();
            org.jsoup.select.Elements parents = span.parents();
            // MethodAssertGenerator build local variable
            Object o_8_0 = parents.size();
            // MethodAssertGenerator build local variable
            Object o_10_0 = parents.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_13_0 = parents.get(1).tagName();
            // MethodAssertGenerator build local variable
            Object o_16_0 = parents.get(2).tagName();
            // StatementAdderOnAssert create null value
            java.lang.String vc_485838 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.getElementsByTag(vc_485838);
            // MethodAssertGenerator build local variable
            Object o_27_0 = parents.get(3).tagName();
            org.junit.Assert.fail("testGetParents_cf1867545 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetParents */
    @org.junit.Test(timeout = 10000)
    public void testGetParents_cf1867645_failAssert46() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello <span>there</span></div>");
            org.jsoup.nodes.Element span = doc.select("span").first();
            org.jsoup.select.Elements parents = span.parents();
            // MethodAssertGenerator build local variable
            Object o_8_0 = parents.size();
            // MethodAssertGenerator build local variable
            Object o_10_0 = parents.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_13_0 = parents.get(1).tagName();
            // MethodAssertGenerator build local variable
            Object o_16_0 = parents.get(2).tagName();
            // StatementAdderOnAssert create null value
            java.lang.String vc_485868 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.select(vc_485868);
            // MethodAssertGenerator build local variable
            Object o_27_0 = parents.get(3).tagName();
            org.junit.Assert.fail("testGetParents_cf1867645 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetParents */
    /* amplification of org.jsoup.nodes.ElementTest#testGetParents_cf1866791_failAssert42_add1867808 */
    @org.junit.Test(timeout = 10000)
    public void testGetParents_cf1866791_failAssert42_add1867808_literalMutation1868236() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello <span>there</span></div>");
            org.jsoup.nodes.Element span = doc.select("span").first();
            org.jsoup.select.Elements parents = span.parents();
            // MethodAssertGenerator build local variable
            Object o_8_0 = parents.size();
            // MethodAssertGenerator build local variable
            Object o_10_0 = parents.get(0).tagName();
            // MethodAssertGenerator build local variable
            Object o_13_0 = parents.get(1).tagName();
            // MethodAssertGenerator build local variable
            Object o_16_0 = parents.get(2).tagName();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75818 = "dwiv";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_75818, "dwiv");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_485608 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_485608.hasClass(String_vc_75818);
            // StatementAdderMethod cloned existing statement
            vc_485608.hasClass(String_vc_75818);
            // MethodAssertGenerator build local variable
            Object o_25_0 = parents.get(3).tagName();
            org.junit.Assert.fail("testGetParents_cf1866791 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblings */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblings_cf1869166_failAssert35() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.firstElementSibling().text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_486120 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            div.getElementsByTag(vc_486120);
            // MethodAssertGenerator build local variable
            Object o_23_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblings_cf1869166 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblings */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblings_cf1868436_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.firstElementSibling().text();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75862 = "<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>";
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_485890 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_485890.hasClass(String_vc_75862);
            // MethodAssertGenerator build local variable
            Object o_22_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblings_cf1868436 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblings */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblings_cf1868852_failAssert44() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.firstElementSibling().text();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75876 = "there";
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
            // StatementAdderMethod cloned existing statement
            ret.prependText(String_vc_75876);
            // MethodAssertGenerator build local variable
            Object o_23_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblings_cf1868852 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblings */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblings_cf1868911_failAssert51() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.firstElementSibling().text();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_486049 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_486049.toggleClass(result);
            // MethodAssertGenerator build local variable
            Object o_24_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblings_cf1868911 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblings */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblings_cf1868458_failAssert34() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.firstElementSibling().text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_485898 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.is(vc_485898);
            // MethodAssertGenerator build local variable
            Object o_20_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblings_cf1868458 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblings */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblings_cf1868949_failAssert54() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.firstElementSibling().text();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_486060 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p.wrap(vc_486060);
            // MethodAssertGenerator build local variable
            Object o_20_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblings_cf1868949 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblings */
    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblings_cf1868852_failAssert44_literalMutation1869396 */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblings_cf1868852_failAssert44_literalMutation1869396_literalMutation1869788() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.firstElementSibling().text();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75876 = "th#e";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_75876, "th#e");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
            // StatementAdderMethod cloned existing statement
            ret.prependText(String_vc_75876);
            // MethodAssertGenerator build local variable
            Object o_23_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblings_cf1868852 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblings */
    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblings_cf1868436_failAssert9_add1869322 */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblings_cf1868436_failAssert9_add1869322_literalMutation1869482() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.firstElementSibling().text();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75862 = "0wa1J?R0k 7ilque_BT*(U[%y{0&Ae+*4]&[$5Vt<@fq8 3jzV8 t[u9KEnnxf#c&/<";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_75862, "0wa1J?R0k 7ilque_BT*(U[%y{0&Ae+*4]&[$5Vt<@fq8 3jzV8 t[u9KEnnxf#c&/<");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_485890 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_485890.hasClass(String_vc_75862);
            // StatementAdderMethod cloned existing statement
            vc_485890.hasClass(String_vc_75862);
            // MethodAssertGenerator build local variable
            Object o_22_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblings_cf1868436 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblingsWithDuplicateContent */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblingsWithDuplicateContent_cf1870520_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.nextElementSibling().nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_22_0 = p.firstElementSibling().text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_486351 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.getElementsByAttribute(vc_486351);
            // MethodAssertGenerator build local variable
            Object o_29_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblingsWithDuplicateContent_cf1870520 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblingsWithDuplicateContent */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblingsWithDuplicateContent_cf1870303_failAssert52() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.nextElementSibling().nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_22_0 = p.firstElementSibling().text();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_486285 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p.getElementById(vc_486285);
            // MethodAssertGenerator build local variable
            Object o_29_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblingsWithDuplicateContent_cf1870303 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblingsWithDuplicateContent */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblingsWithDuplicateContent_cf1870680_failAssert30() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.nextElementSibling().nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_22_0 = p.firstElementSibling().text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_486389 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.getElementsByClass(vc_486389);
            // MethodAssertGenerator build local variable
            Object o_29_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblingsWithDuplicateContent_cf1870680 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblingsWithDuplicateContent */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblingsWithDuplicateContent_cf1870004_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.nextElementSibling().nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_22_0 = p.firstElementSibling().text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_486180 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.is(vc_486180);
            // MethodAssertGenerator build local variable
            Object o_29_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblingsWithDuplicateContent_cf1870004 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblingsWithDuplicateContent */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblingsWithDuplicateContent_cf1870493_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.nextElementSibling().nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_22_0 = p.firstElementSibling().text();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderMethod cloned existing statement
            p.wrap(result);
            // MethodAssertGenerator build local variable
            Object o_31_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblingsWithDuplicateContent_cf1870493 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblingsWithDuplicateContent */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblingsWithDuplicateContent_cf1870772_failAssert45() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.nextElementSibling().nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_22_0 = p.firstElementSibling().text();
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_486418 = (java.util.regex.Pattern)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            div.getElementsMatchingOwnText(vc_486418);
            // MethodAssertGenerator build local variable
            Object o_32_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblingsWithDuplicateContent_cf1870772 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblingsWithDuplicateContent */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblingsWithDuplicateContent_cf1870008_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.nextElementSibling().nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_22_0 = p.firstElementSibling().text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_486180 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            div.is(vc_486180);
            // MethodAssertGenerator build local variable
            Object o_32_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblingsWithDuplicateContent_cf1870008 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblingsWithDuplicateContent */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblingsWithDuplicateContent_cf1870104_failAssert71() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.nextElementSibling().nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_22_0 = p.firstElementSibling().text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_486226 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.addClass(vc_486226);
            // MethodAssertGenerator build local variable
            Object o_29_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblingsWithDuplicateContent_cf1870104 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblingsWithDuplicateContent */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblingsWithDuplicateContent_cf1870412_failAssert33() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.nextElementSibling().nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_22_0 = p.firstElementSibling().text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_486321 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.removeClass(vc_486321);
            // MethodAssertGenerator build local variable
            Object o_29_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblingsWithDuplicateContent_cf1870412 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblingsWithDuplicateContent */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblingsWithDuplicateContent_cf1870777_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.nextElementSibling().nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_22_0 = p.firstElementSibling().text();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_486420 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_486420.getElementsMatchingText(result);
            // MethodAssertGenerator build local variable
            Object o_33_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblingsWithDuplicateContent_cf1870777 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblingsWithDuplicateContent */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblingsWithDuplicateContent_cf1870275_failAssert70() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.nextElementSibling().nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_22_0 = p.firstElementSibling().text();
            // StatementAdderOnAssert create null value
            java.util.Set<java.lang.String> vc_486274 = (java.util.Set)null;
            // StatementAdderMethod cloned existing statement
            p.classNames(vc_486274);
            // MethodAssertGenerator build local variable
            Object o_29_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblingsWithDuplicateContent_cf1870275 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetSiblingsWithDuplicateContent */
    @org.junit.Test(timeout = 10000)
    public void testGetSiblingsWithDuplicateContent_cf1870811_failAssert54() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>");
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // MethodAssertGenerator build local variable
            Object o_5_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.previousElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_10_0 = p.nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.nextElementSibling().nextElementSibling().nextElementSibling().text();
            // MethodAssertGenerator build local variable
            Object o_22_0 = p.firstElementSibling().text();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_486433 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p.select(vc_486433);
            // MethodAssertGenerator build local variable
            Object o_29_0 = p.lastElementSibling().text();
            org.junit.Assert.fail("testGetSiblingsWithDuplicateContent_cf1870811 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetText */
    @org.junit.Test(timeout = 10000)
    public void testGetText_cf1871611_failAssert48() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_486603 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.removeClass(vc_486603);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.getElementsByTag("p").get(1).text();
            org.junit.Assert.fail("testGetText_cf1871611 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetText */
    @org.junit.Test(timeout = 10000)
    public void testGetText_cf1871695_failAssert73() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.text();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_486634 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element divB = doc.select("div").get(1);
            // StatementAdderMethod cloned existing statement
            divB.getElementsByAttribute(vc_486634);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.getElementsByTag("p").get(1).text();
            org.junit.Assert.fail("testGetText_cf1871695 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetText */
    @org.junit.Test(timeout = 10000)
    public void testGetText_cf1871504_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.text();
            // StatementAdderOnAssert create null value
            java.util.Set<java.lang.String> vc_486556 = (java.util.Set)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.classNames(vc_486556);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.getElementsByTag("p").get(1).text();
            org.junit.Assert.fail("testGetText_cf1871504 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetText */
    @org.junit.Test(timeout = 10000)
    public void testGetText_cf1871647_failAssert38() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_486615 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p1.toggleClass(vc_486615);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.getElementsByTag("p").get(1).text();
            org.junit.Assert.fail("testGetText_cf1871647 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetText */
    @org.junit.Test(timeout = 10000)
    public void testGetText_cf1871314_failAssert22() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.text();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_486463 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.is(vc_486463);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.getElementsByTag("p").get(1).text();
            org.junit.Assert.fail("testGetText_cf1871314 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetText */
    @org.junit.Test(timeout = 10000)
    public void testGetText_cf1871863_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.text();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_486690 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_486690.getElementsContainingText(result);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.getElementsByTag("p").get(1).text();
            org.junit.Assert.fail("testGetText_cf1871863 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetText */
    @org.junit.Test(timeout = 10000)
    public void testGetText_cf1871842_failAssert36() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_486684 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.getElementsByTag(vc_486684);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.getElementsByTag("p").get(1).text();
            org.junit.Assert.fail("testGetText_cf1871842 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetText */
    @org.junit.Test(timeout = 10000)
    public void testGetText_cf1871293_failAssert65() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.text();
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_486454 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_486454.hasClass(text);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.getElementsByTag("p").get(1).text();
            org.junit.Assert.fail("testGetText_cf1871293 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetText */
    @org.junit.Test(timeout = 10000)
    public void testGetText_cf1871311_failAssert42() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_486462 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.is(vc_486462);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.getElementsByTag("p").get(1).text();
            org.junit.Assert.fail("testGetText_cf1871311 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetText */
    /* amplification of org.jsoup.nodes.ElementTest#testGetText_cf1871298_failAssert18_add1872012 */
    @org.junit.Test(timeout = 10000)
    public void testGetText_cf1871298_failAssert18_add1872012_literalMutation1872268() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.text();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75936 = "f!+3)j;`y1t;AmY";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_75936, "f!+3)j;`y1t;AmY");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            div.hasClass(String_vc_75936);
            // StatementAdderMethod cloned existing statement
            div.hasClass(String_vc_75936);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.getElementsByTag("p").get(1).text();
            org.junit.Assert.fail("testGetText_cf1871298 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetText */
    /* amplification of org.jsoup.nodes.ElementTest#testGetText_cf1871459_failAssert3_literalMutation1871980 */
    @org.junit.Test(timeout = 10000)
    public void testGetText_cf1871459_failAssert3_literalMutation1871980_literalMutation1872128() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(reference);
            // MethodAssertGenerator build local variable
            Object o_3_0 = doc.text();
            // StatementAdderOnAssert create random local variable
            boolean vc_486538 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_486538);
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            div.attr(result, vc_486538);
            // MethodAssertGenerator build local variable
            Object o_16_0 = doc.getElementsByTag("p").get(1).text();
            org.junit.Assert.fail("testGetText_cf1871459 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetTextNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetTextNodes_cf1873004_failAssert51() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>One <span>Two</span> Three <br> Four</p>");
            java.util.List<org.jsoup.nodes.TextNode> textNodes = doc.select("p").first().textNodes();
            // MethodAssertGenerator build local variable
            Object o_7_0 = textNodes.size();
            // MethodAssertGenerator build local variable
            Object o_9_0 = textNodes.get(0).text();
            // MethodAssertGenerator build local variable
            Object o_12_0 = textNodes.get(1).text();
            // MethodAssertGenerator build local variable
            Object o_15_0 = textNodes.get(2).text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_486893 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.text(vc_486893);
            // MethodAssertGenerator build local variable
            Object o_26_0 = doc.select("br").first().textNodes().size();
            org.junit.Assert.fail("testGetTextNodes_cf1873004 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetTextNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetTextNodes_cf1873131_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>One <span>Two</span> Three <br> Four</p>");
            java.util.List<org.jsoup.nodes.TextNode> textNodes = doc.select("p").first().textNodes();
            // MethodAssertGenerator build local variable
            Object o_7_0 = textNodes.size();
            // MethodAssertGenerator build local variable
            Object o_9_0 = textNodes.get(0).text();
            // MethodAssertGenerator build local variable
            Object o_12_0 = textNodes.get(1).text();
            // MethodAssertGenerator build local variable
            Object o_15_0 = textNodes.get(2).text();
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_486941 = (java.util.regex.Pattern)null;
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_486937 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_486937.getElementsByAttributeValueMatching(result, vc_486941);
            // MethodAssertGenerator build local variable
            Object o_28_0 = doc.select("br").first().textNodes().size();
            org.junit.Assert.fail("testGetTextNodes_cf1873131 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetTextNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetTextNodes_cf1873064_failAssert81() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>One <span>Two</span> Three <br> Four</p>");
            java.util.List<org.jsoup.nodes.TextNode> textNodes = doc.select("p").first().textNodes();
            // MethodAssertGenerator build local variable
            Object o_7_0 = textNodes.size();
            // MethodAssertGenerator build local variable
            Object o_9_0 = textNodes.get(0).text();
            // MethodAssertGenerator build local variable
            Object o_12_0 = textNodes.get(1).text();
            // MethodAssertGenerator build local variable
            Object o_15_0 = textNodes.get(2).text();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_486916 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.getElementsByAttribute(vc_486916);
            // MethodAssertGenerator build local variable
            Object o_26_0 = doc.select("br").first().textNodes().size();
            org.junit.Assert.fail("testGetTextNodes_cf1873064 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetTextNodes */
    @org.junit.Test(timeout = 10000)
    public void testGetTextNodes_cf1872661_failAssert27() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>One <span>Two</span> Three <br> Four</p>");
            java.util.List<org.jsoup.nodes.TextNode> textNodes = doc.select("p").first().textNodes();
            // MethodAssertGenerator build local variable
            Object o_7_0 = textNodes.size();
            // MethodAssertGenerator build local variable
            Object o_9_0 = textNodes.get(0).text();
            // MethodAssertGenerator build local variable
            Object o_12_0 = textNodes.get(1).text();
            // MethodAssertGenerator build local variable
            Object o_15_0 = textNodes.get(2).text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_486738 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_486736 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_486736.hasClass(vc_486738);
            // MethodAssertGenerator build local variable
            Object o_24_0 = doc.select("br").first().textNodes().size();
            org.junit.Assert.fail("testGetTextNodes_cf1872661 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testGetTextNodes */
    /* amplification of org.jsoup.nodes.ElementTest#testGetTextNodes_cf1872678_failAssert36_add1873412 */
    @org.junit.Test(timeout = 10000)
    public void testGetTextNodes_cf1872678_failAssert36_add1873412_literalMutation1873762() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>One <span>Two</span> Three <br> Four</p>");
            java.util.List<org.jsoup.nodes.TextNode> textNodes = doc.select("p").first().textNodes();
            // MethodAssertGenerator build local variable
            Object o_7_0 = textNodes.size();
            // MethodAssertGenerator build local variable
            Object o_9_0 = textNodes.get(0).text();
            // MethodAssertGenerator build local variable
            Object o_12_0 = textNodes.get(1).text();
            // MethodAssertGenerator build local variable
            Object o_15_0 = textNodes.get(2).text();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_75981 = " F;ur";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_75981, " F;ur");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_486742 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_486742.is(String_vc_75981);
            // StatementAdderMethod cloned existing statement
            vc_486742.is(String_vc_75981);
            // MethodAssertGenerator build local variable
            Object o_24_0 = doc.select("br").first().textNodes().size();
            org.junit.Assert.fail("testGetTextNodes_cf1872678 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testHasClassDomMethods_cf1874670_failAssert28() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf("a");
            org.jsoup.nodes.Attributes attribs = new org.jsoup.nodes.Attributes();
            org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(tag, "", attribs);
            attribs.put("class", "toto");
            boolean hasClass = el.hasClass("toto");
            attribs.put("class", " toto");
            hasClass = el.hasClass("toto");
            attribs.put("class", "toto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "\ttoto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "  toto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "ab");
            hasClass = el.hasClass("toto");
            attribs.put("class", "     ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "tototo");
            hasClass = el.hasClass("toto");
            attribs.put("class", "raulpismuth  ");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd  raulpismuth efgh ");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd efgh raulpismuth");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd efgh raulpismuth ");
            hasClass = el.hasClass("raulpismuth");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_487198 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            el.getElementsByAttribute(vc_487198);
            org.junit.Assert.fail("testHasClassDomMethods_cf1874670 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testHasClassDomMethods_cf1874955_failAssert24() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf("a");
            org.jsoup.nodes.Attributes attribs = new org.jsoup.nodes.Attributes();
            org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(tag, "", attribs);
            attribs.put("class", "toto");
            boolean hasClass = el.hasClass("toto");
            attribs.put("class", " toto");
            hasClass = el.hasClass("toto");
            attribs.put("class", "toto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "\ttoto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "  toto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "ab");
            hasClass = el.hasClass("toto");
            attribs.put("class", "     ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "tototo");
            hasClass = el.hasClass("toto");
            attribs.put("class", "raulpismuth  ");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd  raulpismuth efgh ");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd efgh raulpismuth");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd efgh raulpismuth ");
            hasClass = el.hasClass("raulpismuth");
            // StatementAdderOnAssert create null value
            java.lang.String vc_487278 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            el.select(vc_487278);
            org.junit.Assert.fail("testHasClassDomMethods_cf1874955 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testHasClassDomMethods_cf1874683_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf("a");
            org.jsoup.nodes.Attributes attribs = new org.jsoup.nodes.Attributes();
            org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(tag, "", attribs);
            attribs.put("class", "toto");
            boolean hasClass = el.hasClass("toto");
            attribs.put("class", " toto");
            hasClass = el.hasClass("toto");
            attribs.put("class", "toto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "\ttoto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "  toto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "ab");
            hasClass = el.hasClass("toto");
            attribs.put("class", "     ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "tototo");
            hasClass = el.hasClass("toto");
            attribs.put("class", "raulpismuth  ");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd  raulpismuth efgh ");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd efgh raulpismuth");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd efgh raulpismuth ");
            hasClass = el.hasClass("raulpismuth");
            // StatementAdderOnAssert create null value
            java.lang.String vc_487201 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            el.getElementsByAttributeStarting(vc_487201);
            org.junit.Assert.fail("testHasClassDomMethods_cf1874683 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testHasClassDomMethods_cf1874607_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf("a");
            org.jsoup.nodes.Attributes attribs = new org.jsoup.nodes.Attributes();
            org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(tag, "", attribs);
            attribs.put("class", "toto");
            boolean hasClass = el.hasClass("toto");
            attribs.put("class", " toto");
            hasClass = el.hasClass("toto");
            attribs.put("class", "toto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "\ttoto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "  toto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "ab");
            hasClass = el.hasClass("toto");
            attribs.put("class", "     ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "tototo");
            hasClass = el.hasClass("toto");
            attribs.put("class", "raulpismuth  ");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd  raulpismuth efgh ");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd efgh raulpismuth");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd efgh raulpismuth ");
            hasClass = el.hasClass("raulpismuth");
            // StatementAdderOnAssert create null value
            java.lang.String vc_487179 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            el.toggleClass(vc_487179);
            org.junit.Assert.fail("testHasClassDomMethods_cf1874607 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testHasClassDomMethods_cf1874151_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf("a");
            org.jsoup.nodes.Attributes attribs = new org.jsoup.nodes.Attributes();
            org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(tag, "", attribs);
            attribs.put("class", "toto");
            boolean hasClass = el.hasClass("toto");
            attribs.put("class", " toto");
            hasClass = el.hasClass("toto");
            attribs.put("class", "toto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "\ttoto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "  toto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "ab");
            hasClass = el.hasClass("toto");
            attribs.put("class", "     ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "tototo");
            hasClass = el.hasClass("toto");
            attribs.put("class", "raulpismuth  ");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd  raulpismuth efgh ");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd efgh raulpismuth");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd efgh raulpismuth ");
            hasClass = el.hasClass("raulpismuth");
            // StatementAdderOnAssert create null value
            java.lang.String vc_487026 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            el.is(vc_487026);
            org.junit.Assert.fail("testHasClassDomMethods_cf1874151 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testHasClassDomMethods_cf1874269_failAssert34() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf("a");
            org.jsoup.nodes.Attributes attribs = new org.jsoup.nodes.Attributes();
            org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(tag, "", attribs);
            attribs.put("class", "toto");
            boolean hasClass = el.hasClass("toto");
            attribs.put("class", " toto");
            hasClass = el.hasClass("toto");
            attribs.put("class", "toto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "\ttoto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "  toto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "ab");
            hasClass = el.hasClass("toto");
            attribs.put("class", "     ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "tototo");
            hasClass = el.hasClass("toto");
            attribs.put("class", "raulpismuth  ");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd  raulpismuth efgh ");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd efgh raulpismuth");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd efgh raulpismuth ");
            hasClass = el.hasClass("raulpismuth");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_76027 = "raulpismuth";
            // StatementAdderMethod cloned existing statement
            el.after(String_vc_76027);
            org.junit.Assert.fail("testHasClassDomMethods_cf1874269 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testHasClassDomMethods_cf1874224() {
        org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf("a");
        org.jsoup.nodes.Attributes attribs = new org.jsoup.nodes.Attributes();
        org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(tag, "", attribs);
        attribs.put("class", "toto");
        boolean hasClass = el.hasClass("toto");
        org.junit.Assert.assertTrue(hasClass);
        attribs.put("class", " toto");
        hasClass = el.hasClass("toto");
        org.junit.Assert.assertTrue(hasClass);
        attribs.put("class", "toto ");
        hasClass = el.hasClass("toto");
        org.junit.Assert.assertTrue(hasClass);
        attribs.put("class", "\ttoto ");
        hasClass = el.hasClass("toto");
        org.junit.Assert.assertTrue(hasClass);
        attribs.put("class", "  toto ");
        hasClass = el.hasClass("toto");
        org.junit.Assert.assertTrue(hasClass);
        attribs.put("class", "ab");
        hasClass = el.hasClass("toto");
        org.junit.Assert.assertFalse(hasClass);
        attribs.put("class", "     ");
        hasClass = el.hasClass("toto");
        org.junit.Assert.assertFalse(hasClass);
        attribs.put("class", "tototo");
        hasClass = el.hasClass("toto");
        org.junit.Assert.assertFalse(hasClass);
        attribs.put("class", "raulpismuth  ");
        hasClass = el.hasClass("raulpismuth");
        org.junit.Assert.assertTrue(hasClass);
        attribs.put("class", " abcd  raulpismuth efgh ");
        hasClass = el.hasClass("raulpismuth");
        org.junit.Assert.assertTrue(hasClass);
        attribs.put("class", " abcd efgh raulpismuth");
        hasClass = el.hasClass("raulpismuth");
        org.junit.Assert.assertTrue(hasClass);
        attribs.put("class", " abcd efgh raulpismuth ");
        hasClass = el.hasClass("raulpismuth");
        // AssertGenerator replace invocation
        java.lang.String o_testHasClassDomMethods_cf1874224__54 = // StatementAdderMethod cloned existing statement
el.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_testHasClassDomMethods_cf1874224__54, "<a class=\" abcd efgh raulpismuth \"></a>");
        org.junit.Assert.assertTrue(hasClass);
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testHasClassDomMethods_cf1874133_cf1875680_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf("a");
            org.jsoup.nodes.Attributes attribs = new org.jsoup.nodes.Attributes();
            org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(tag, "", attribs);
            attribs.put("class", "toto");
            boolean hasClass = el.hasClass("toto");
            attribs.put("class", " toto");
            hasClass = el.hasClass("toto");
            attribs.put("class", "toto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "\ttoto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "  toto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "ab");
            hasClass = el.hasClass("toto");
            attribs.put("class", "     ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "tototo");
            hasClass = el.hasClass("toto");
            attribs.put("class", "raulpismuth  ");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd  raulpismuth efgh ");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd efgh raulpismuth");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd efgh raulpismuth ");
            hasClass = el.hasClass("raulpismuth");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_76024 = "class";
            // MethodAssertGenerator build local variable
            Object o_56_0 = String_vc_76024;
            // AssertGenerator replace invocation
            boolean o_testHasClassDomMethods_cf1874133__56 = // StatementAdderMethod cloned existing statement
el.hasClass(String_vc_76024);
            // MethodAssertGenerator build local variable
            Object o_60_0 = o_testHasClassDomMethods_cf1874133__56;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_487480 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            el.getElementsByAttribute(vc_487480);
            org.junit.Assert.fail("testHasClassDomMethods_cf1874133_cf1875680 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testHasClassDomMethods_cf1874212_cf1880034_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf("a");
            org.jsoup.nodes.Attributes attribs = new org.jsoup.nodes.Attributes();
            org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(tag, "", attribs);
            attribs.put("class", "toto");
            boolean hasClass = el.hasClass("toto");
            attribs.put("class", " toto");
            hasClass = el.hasClass("toto");
            attribs.put("class", "toto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "\ttoto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "  toto ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "ab");
            hasClass = el.hasClass("toto");
            attribs.put("class", "     ");
            hasClass = el.hasClass("toto");
            attribs.put("class", "tototo");
            hasClass = el.hasClass("toto");
            attribs.put("class", "raulpismuth  ");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd  raulpismuth efgh ");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd efgh raulpismuth");
            hasClass = el.hasClass("raulpismuth");
            attribs.put("class", " abcd efgh raulpismuth ");
            hasClass = el.hasClass("raulpismuth");
            // AssertGenerator replace invocation
            java.lang.String o_testHasClassDomMethods_cf1874212__54 = // StatementAdderMethod cloned existing statement
el.ownText();
            // MethodAssertGenerator build local variable
            Object o_56_0 = o_testHasClassDomMethods_cf1874212__54;
            // StatementAdderOnAssert create null value
            java.lang.String vc_488688 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            el.select(vc_488688);
            org.junit.Assert.fail("testHasClassDomMethods_cf1874212_cf1880034 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasClassDomMethods */
    @org.junit.Test(timeout = 10000)
    public void testHasClassDomMethods_cf1874886_failAssert30_add1880620_cf1885219_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf("a");
                org.jsoup.nodes.Attributes attribs = new org.jsoup.nodes.Attributes();
                org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(tag, "", attribs);
                attribs.put("class", "toto");
                boolean hasClass = el.hasClass("toto");
                attribs.put("class", " toto");
                hasClass = el.hasClass("toto");
                attribs.put("class", "toto ");
                hasClass = el.hasClass("toto");
                attribs.put("class", "\ttoto ");
                hasClass = el.hasClass("toto");
                attribs.put("class", "  toto ");
                hasClass = el.hasClass("toto");
                attribs.put("class", "ab");
                hasClass = el.hasClass("toto");
                attribs.put("class", "     ");
                hasClass = el.hasClass("toto");
                attribs.put("class", "tototo");
                hasClass = el.hasClass("toto");
                attribs.put("class", "raulpismuth  ");
                hasClass = el.hasClass("raulpismuth");
                attribs.put("class", " abcd  raulpismuth efgh ");
                hasClass = el.hasClass("raulpismuth");
                attribs.put("class", " abcd efgh raulpismuth");
                hasClass = el.hasClass("raulpismuth");
                // MethodCallAdder
                attribs.put("class", " abcd efgh raulpismuth ");
                attribs.put("class", " abcd efgh raulpismuth ");
                hasClass = el.hasClass("raulpismuth");
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_487257 = new java.lang.String();
                // MethodAssertGenerator build local variable
                Object o_49_0 = vc_487257;
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_487254 = (org.jsoup.nodes.Element)null;
                // StatementAdderOnAssert create null value
                java.lang.String vc_489892 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                el.addClass(vc_489892);
                // MethodAssertGenerator build local variable
                Object o_57_0 = vc_487254;
                // StatementAdderMethod cloned existing statement
                vc_487254.getElementsContainingText(vc_487257);
                org.junit.Assert.fail("testHasClassDomMethods_cf1874886 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testHasClassDomMethods_cf1874886_failAssert30_add1880620_cf1885219 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasText */
    @org.junit.Test(timeout = 10000)
    public void testHasText_cf1904454_failAssert38() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p></p></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            org.jsoup.select.Elements ps = doc.select("p");
            // MethodAssertGenerator build local variable
            Object o_8_0 = div.hasText();
            // MethodAssertGenerator build local variable
            Object o_10_0 = ps.first().hasText();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_494702 = (org.jsoup.nodes.Node)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.appendChild(vc_494702);
            // MethodAssertGenerator build local variable
            Object o_21_0 = ps.last().hasText();
            org.junit.Assert.fail("testHasText_cf1904454 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasText */
    @org.junit.Test(timeout = 10000)
    public void testHasText_cf1904830_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p></p></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            org.jsoup.select.Elements ps = doc.select("p");
            // MethodAssertGenerator build local variable
            Object o_8_0 = div.hasText();
            // MethodAssertGenerator build local variable
            Object o_10_0 = ps.first().hasText();
            // StatementAdderOnAssert create null value
            java.lang.String vc_494815 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.getElementsByAttributeStarting(vc_494815);
            // MethodAssertGenerator build local variable
            Object o_17_0 = ps.last().hasText();
            org.junit.Assert.fail("testHasText_cf1904830 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasText */
    @org.junit.Test(timeout = 10000)
    public void testHasText_cf1904783_failAssert22() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p></p></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            org.jsoup.select.Elements ps = doc.select("p");
            // MethodAssertGenerator build local variable
            Object o_8_0 = div.hasText();
            // MethodAssertGenerator build local variable
            Object o_10_0 = ps.first().hasText();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_494799 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_494799.wrap(result);
            // MethodAssertGenerator build local variable
            Object o_21_0 = ps.last().hasText();
            org.junit.Assert.fail("testHasText_cf1904783 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasText */
    @org.junit.Test(timeout = 10000)
    public void testHasText_cf1904276_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p></p></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            org.jsoup.select.Elements ps = doc.select("p");
            // MethodAssertGenerator build local variable
            Object o_8_0 = div.hasText();
            // MethodAssertGenerator build local variable
            Object o_10_0 = ps.first().hasText();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_77205 = "p";
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_494632 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_494632.hasClass(String_vc_77205);
            // MethodAssertGenerator build local variable
            Object o_19_0 = ps.last().hasText();
            org.junit.Assert.fail("testHasText_cf1904276 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasText */
    @org.junit.Test(timeout = 10000)
    public void testHasText_cf1905102_failAssert30() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p></p></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            org.jsoup.select.Elements ps = doc.select("p");
            // MethodAssertGenerator build local variable
            Object o_8_0 = div.hasText();
            // MethodAssertGenerator build local variable
            Object o_10_0 = ps.first().hasText();
            // StatementAdderOnAssert create null value
            java.lang.String vc_494892 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.select(vc_494892);
            // MethodAssertGenerator build local variable
            Object o_17_0 = ps.last().hasText();
            org.junit.Assert.fail("testHasText_cf1905102 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasText */
    @org.junit.Test(timeout = 10000)
    public void testHasText_cf1904594_failAssert58() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p></p></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            org.jsoup.select.Elements ps = doc.select("p");
            // MethodAssertGenerator build local variable
            Object o_8_0 = div.hasText();
            // MethodAssertGenerator build local variable
            Object o_10_0 = ps.first().hasText();
            // StatementAdderOnAssert create null value
            java.lang.String vc_494744 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.getElementById(vc_494744);
            // MethodAssertGenerator build local variable
            Object o_17_0 = ps.last().hasText();
            org.junit.Assert.fail("testHasText_cf1904594 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasText */
    @org.junit.Test(timeout = 10000)
    public void testHasText_cf1904301_failAssert50() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p></p></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            org.jsoup.select.Elements ps = doc.select("p");
            // MethodAssertGenerator build local variable
            Object o_8_0 = div.hasText();
            // MethodAssertGenerator build local variable
            Object o_10_0 = ps.first().hasText();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_494641 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.is(vc_494641);
            // MethodAssertGenerator build local variable
            Object o_17_0 = ps.last().hasText();
            org.junit.Assert.fail("testHasText_cf1904301 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHasText */
    /* amplification of org.jsoup.nodes.ElementTest#testHasText_cf1904276_failAssert1_add1905151 */
    @org.junit.Test(timeout = 10000)
    public void testHasText_cf1904276_failAssert1_add1905151_literalMutation1905262() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p></p></div>");
            org.jsoup.nodes.Element div = doc.select("div").first();
            org.jsoup.select.Elements ps = doc.select("p");
            // MethodAssertGenerator build local variable
            Object o_8_0 = div.hasText();
            // MethodAssertGenerator build local variable
            Object o_10_0 = ps.first().hasText();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_77205 = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_77205, "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_494632 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_494632.hasClass(String_vc_77205);
            // StatementAdderMethod cloned existing statement
            vc_494632.hasClass(String_vc_77205);
            // MethodAssertGenerator build local variable
            Object o_19_0 = ps.last().hasText();
            org.junit.Assert.fail("testHasText_cf1904276 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHashcodeIsStableWithContentChanges */
    @org.junit.Test(timeout = 10000)
    public void testHashcodeIsStableWithContentChanges_cf2359095_failAssert35() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("root"), "");
            java.util.HashSet<org.jsoup.nodes.Element> set = new java.util.HashSet<org.jsoup.nodes.Element>();
            // Add root node:
            set.add(root);
            root.appendChild(new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("a"), ""));
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_608066 = (org.jsoup.nodes.Node)null;
            // StatementAdderMethod cloned existing statement
            root.appendChild(vc_608066);
            // MethodAssertGenerator build local variable
            Object o_15_0 = set.contains(root);
            org.junit.Assert.fail("testHashcodeIsStableWithContentChanges_cf2359095 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHashcodeIsStableWithContentChanges */
    @org.junit.Test(timeout = 10000)
    public void testHashcodeIsStableWithContentChanges_cf2359617_failAssert56() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("root"), "");
            java.util.HashSet<org.jsoup.nodes.Element> set = new java.util.HashSet<org.jsoup.nodes.Element>();
            // Add root node:
            set.add(root);
            root.appendChild(new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("a"), ""));
            // StatementAdderOnAssert create null value
            java.lang.String vc_608213 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            root.getElementsByClass(vc_608213);
            // MethodAssertGenerator build local variable
            Object o_15_0 = set.contains(root);
            org.junit.Assert.fail("testHashcodeIsStableWithContentChanges_cf2359617 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHashcodeIsStableWithContentChanges */
    @org.junit.Test(timeout = 10000)
    public void testHashcodeIsStableWithContentChanges_cf2359473_failAssert40() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("root"), "");
            java.util.HashSet<org.jsoup.nodes.Element> set = new java.util.HashSet<org.jsoup.nodes.Element>();
            // Add root node:
            set.add(root);
            root.appendChild(new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("a"), ""));
            // StatementAdderOnAssert create null value
            java.lang.String vc_608179 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            root.getElementsByAttributeStarting(vc_608179);
            // MethodAssertGenerator build local variable
            Object o_15_0 = set.contains(root);
            org.junit.Assert.fail("testHashcodeIsStableWithContentChanges_cf2359473 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHashcodeIsStableWithContentChanges */
    @org.junit.Test(timeout = 10000)
    public void testHashcodeIsStableWithContentChanges_cf2358967() {
        org.jsoup.nodes.Element root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("root"), "");
        java.util.HashSet<org.jsoup.nodes.Element> set = new java.util.HashSet<org.jsoup.nodes.Element>();
        // Add root node:
        set.add(root);
        root.appendChild(new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("a"), ""));
        // StatementAdderOnAssert create null value
        org.jsoup.nodes.Node vc_608014 = (org.jsoup.nodes.Node)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_608014);
        // AssertGenerator replace invocation
        boolean o_testHashcodeIsStableWithContentChanges_cf2358967__13 = // StatementAdderMethod cloned existing statement
root.preserveWhitespace(vc_608014);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_testHashcodeIsStableWithContentChanges_cf2358967__13);
        org.junit.Assert.assertTrue(set.contains(root));
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHashcodeIsStableWithContentChanges */
    @org.junit.Test(timeout = 10000)
    public void testHashcodeIsStableWithContentChanges_cf2359431_failAssert39() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("root"), "");
            java.util.HashSet<org.jsoup.nodes.Element> set = new java.util.HashSet<org.jsoup.nodes.Element>();
            // Add root node:
            set.add(root);
            root.appendChild(new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("a"), ""));
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_94912 = "";
            // StatementAdderMethod cloned existing statement
            root.wrap(String_vc_94912);
            // MethodAssertGenerator build local variable
            Object o_15_0 = set.contains(root);
            org.junit.Assert.fail("testHashcodeIsStableWithContentChanges_cf2359431 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHashcodeIsStableWithContentChanges */
    @org.junit.Test(timeout = 10000)
    public void testHashcodeIsStableWithContentChanges_cf2359148_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("root"), "");
            java.util.HashSet<org.jsoup.nodes.Element> set = new java.util.HashSet<org.jsoup.nodes.Element>();
            // Add root node:
            set.add(root);
            root.appendChild(new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("a"), ""));
            // StatementAdderOnAssert create random local variable
            boolean vc_608080 = false;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_608079 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            root.attr(vc_608079, vc_608080);
            // MethodAssertGenerator build local variable
            Object o_17_0 = set.contains(root);
            org.junit.Assert.fail("testHashcodeIsStableWithContentChanges_cf2359148 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHashcodeIsStableWithContentChanges */
    @org.junit.Test(timeout = 10000)
    public void testHashcodeIsStableWithContentChanges_cf2359240_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("root"), "");
            java.util.HashSet<org.jsoup.nodes.Element> set = new java.util.HashSet<org.jsoup.nodes.Element>();
            // Add root node:
            set.add(root);
            root.appendChild(new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("a"), ""));
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_608109 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            root.getElementById(vc_608109);
            // MethodAssertGenerator build local variable
            Object o_15_0 = set.contains(root);
            org.junit.Assert.fail("testHashcodeIsStableWithContentChanges_cf2359240 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHashcodeIsStableWithContentChanges */
    @org.junit.Test(timeout = 10000)
    public void testHashcodeIsStableWithContentChanges_cf2358978_cf2360040_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("root"), "");
            java.util.HashSet<org.jsoup.nodes.Element> set = new java.util.HashSet<org.jsoup.nodes.Element>();
            // Add root node:
            set.add(root);
            root.appendChild(new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("a"), ""));
            // AssertGenerator replace invocation
            java.lang.String o_testHashcodeIsStableWithContentChanges_cf2358978__11 = // StatementAdderMethod cloned existing statement
root.className();
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testHashcodeIsStableWithContentChanges_cf2358978__11;
            // StatementAdderOnAssert create random local variable
            boolean vc_608362 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_608361 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            root.attr(vc_608361, vc_608362);
            // MethodAssertGenerator build local variable
            Object o_21_0 = set.contains(root);
            org.junit.Assert.fail("testHashcodeIsStableWithContentChanges_cf2358978_cf2360040 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHashcodeIsStableWithContentChanges */
    @org.junit.Test(timeout = 10000)
    public void testHashcodeIsStableWithContentChanges_cf2358923_cf2361308_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("root"), "");
            java.util.HashSet<org.jsoup.nodes.Element> set = new java.util.HashSet<org.jsoup.nodes.Element>();
            // Add root node:
            set.add(root);
            root.appendChild(new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("a"), ""));
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_94892 = "a";
            // MethodAssertGenerator build local variable
            Object o_13_0 = String_vc_94892;
            // AssertGenerator replace invocation
            boolean o_testHashcodeIsStableWithContentChanges_cf2358923__13 = // StatementAdderMethod cloned existing statement
root.hasClass(String_vc_94892);
            // MethodAssertGenerator build local variable
            Object o_17_0 = o_testHashcodeIsStableWithContentChanges_cf2358923__13;
            // StatementAdderOnAssert create null value
            java.lang.String vc_608717 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            root.text(vc_608717);
            // MethodAssertGenerator build local variable
            Object o_23_0 = set.contains(root);
            org.junit.Assert.fail("testHashcodeIsStableWithContentChanges_cf2358923_cf2361308 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHashcodeIsStableWithContentChanges */
    @org.junit.Test(timeout = 10000)
    public void testHashcodeIsStableWithContentChanges_cf2359010_cf2362853_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("root"), "");
            java.util.HashSet<org.jsoup.nodes.Element> set = new java.util.HashSet<org.jsoup.nodes.Element>();
            // Add root node:
            set.add(root);
            root.appendChild(new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("a"), ""));
            // AssertGenerator replace invocation
            java.lang.String o_testHashcodeIsStableWithContentChanges_cf2359010__11 = // StatementAdderMethod cloned existing statement
root.text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testHashcodeIsStableWithContentChanges_cf2359010__11;
            // StatementAdderOnAssert create null value
            java.lang.String vc_609132 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            root.is(vc_609132);
            // MethodAssertGenerator build local variable
            Object o_19_0 = set.contains(root);
            org.junit.Assert.fail("testHashcodeIsStableWithContentChanges_cf2359010_cf2362853 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHashcodeIsStableWithContentChanges */
    @org.junit.Test(timeout = 10000)
    public void testHashcodeIsStableWithContentChanges_cf2359010_cf2363153_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("root"), "");
            java.util.HashSet<org.jsoup.nodes.Element> set = new java.util.HashSet<org.jsoup.nodes.Element>();
            // Add root node:
            set.add(root);
            root.appendChild(new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("a"), ""));
            // AssertGenerator replace invocation
            java.lang.String o_testHashcodeIsStableWithContentChanges_cf2359010__11 = // StatementAdderMethod cloned existing statement
root.text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testHashcodeIsStableWithContentChanges_cf2359010__11;
            // StatementAdderOnAssert create null value
            java.lang.String vc_609236 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            root.getElementById(vc_609236);
            // MethodAssertGenerator build local variable
            Object o_19_0 = set.contains(root);
            org.junit.Assert.fail("testHashcodeIsStableWithContentChanges_cf2359010_cf2363153 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHashcodeIsStableWithContentChanges */
    @org.junit.Test(timeout = 10000)
    public void testHashcodeIsStableWithContentChanges_cf2358978_cf2360108_failAssert19() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("root"), "");
            java.util.HashSet<org.jsoup.nodes.Element> set = new java.util.HashSet<org.jsoup.nodes.Element>();
            // Add root node:
            set.add(root);
            root.appendChild(new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("a"), ""));
            // AssertGenerator replace invocation
            java.lang.String o_testHashcodeIsStableWithContentChanges_cf2358978__11 = // StatementAdderMethod cloned existing statement
root.className();
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testHashcodeIsStableWithContentChanges_cf2358978__11;
            // StatementAdderOnAssert create null value
            java.util.Set<java.lang.String> vc_608380 = (java.util.Set)null;
            // StatementAdderMethod cloned existing statement
            root.classNames(vc_608380);
            // MethodAssertGenerator build local variable
            Object o_19_0 = set.contains(root);
            org.junit.Assert.fail("testHashcodeIsStableWithContentChanges_cf2358978_cf2360108 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHashcodeIsStableWithContentChanges */
    @org.junit.Test(timeout = 10000)
    public void testHashcodeIsStableWithContentChanges_cf2359002_cf2363803_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("root"), "");
            java.util.HashSet<org.jsoup.nodes.Element> set = new java.util.HashSet<org.jsoup.nodes.Element>();
            // Add root node:
            set.add(root);
            root.appendChild(new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("a"), ""));
            // AssertGenerator replace invocation
            java.lang.String o_testHashcodeIsStableWithContentChanges_cf2359002__11 = // StatementAdderMethod cloned existing statement
root.ownText();
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testHashcodeIsStableWithContentChanges_cf2359002__11;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_95106 = "";
            // StatementAdderMethod cloned existing statement
            root.is(String_vc_95106);
            // MethodAssertGenerator build local variable
            Object o_19_0 = set.contains(root);
            org.junit.Assert.fail("testHashcodeIsStableWithContentChanges_cf2359002_cf2363803 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHashcodeIsStableWithContentChanges */
    @org.junit.Test(timeout = 10000)
    public void testHashcodeIsStableWithContentChanges_cf2359010_cf2363058_failAssert33() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Element root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("root"), "");
            java.util.HashSet<org.jsoup.nodes.Element> set = new java.util.HashSet<org.jsoup.nodes.Element>();
            // Add root node:
            set.add(root);
            root.appendChild(new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("a"), ""));
            // AssertGenerator replace invocation
            java.lang.String o_testHashcodeIsStableWithContentChanges_cf2359010__11 = // StatementAdderMethod cloned existing statement
root.text();
            // MethodAssertGenerator build local variable
            Object o_13_0 = o_testHashcodeIsStableWithContentChanges_cf2359010__11;
            // StatementAdderOnAssert create random local variable
            boolean vc_609208 = false;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_95068 = "";
            // StatementAdderMethod cloned existing statement
            root.attr(String_vc_95068, vc_609208);
            // MethodAssertGenerator build local variable
            Object o_21_0 = set.contains(root);
            org.junit.Assert.fail("testHashcodeIsStableWithContentChanges_cf2359010_cf2363058 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHashcodeIsStableWithContentChanges */
    @org.junit.Test(timeout = 10000)
    public void testHashcodeIsStableWithContentChanges_cf2359252_failAssert1_add2364717_cf2367580_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Element root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("root"), "");
                java.util.HashSet<org.jsoup.nodes.Element> set = new java.util.HashSet<org.jsoup.nodes.Element>();
                // AssertGenerator replace invocation
                boolean o_testHashcodeIsStableWithContentChanges_cf2359252_failAssert1_add2364717__8 = // Add root node:
// MethodCallAdder
set.add(root);
                // MethodAssertGenerator build local variable
                Object o_10_0 = o_testHashcodeIsStableWithContentChanges_cf2359252_failAssert1_add2364717__8;
                // Add root node:
                set.add(root);
                root.appendChild(new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("a"), ""));
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_608113 = new java.lang.String();
                // MethodAssertGenerator build local variable
                Object o_19_0 = vc_608113;
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_608110 = (org.jsoup.nodes.Element)null;
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_610311 = new java.lang.String();
                // StatementAdderMethod cloned existing statement
                root.after(vc_610311);
                // MethodAssertGenerator build local variable
                Object o_27_0 = vc_608110;
                // StatementAdderMethod cloned existing statement
                vc_608110.html(vc_608113);
                // MethodAssertGenerator build local variable
                Object o_17_0 = set.contains(root);
                org.junit.Assert.fail("testHashcodeIsStableWithContentChanges_cf2359252 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testHashcodeIsStableWithContentChanges_cf2359252_failAssert1_add2364717_cf2367580 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHashcodeIsStableWithContentChanges */
    @org.junit.Test(timeout = 10000)
    public void testHashcodeIsStableWithContentChanges_cf2359138_failAssert6_literalMutation2364765_cf2367203_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Element root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("root"), "");
                java.util.HashSet<org.jsoup.nodes.Element> set = new java.util.HashSet<org.jsoup.nodes.Element>();
                // Add root node:
                set.add(root);
                root.appendChild(new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf("a"), ""));
                // StatementAdderOnAssert create random local variable
                boolean vc_608080 = true;
                // MethodAssertGenerator build local variable
                Object o_16_0 = vc_608080;
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_94899 = "";
                // MethodAssertGenerator build local variable
                Object o_20_0 = String_vc_94899;
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_608076 = (org.jsoup.nodes.Element)null;
                // StatementAdderOnAssert create null value
                java.lang.String vc_610200 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                root.getElementsByTag(vc_610200);
                // MethodAssertGenerator build local variable
                Object o_28_0 = vc_608076;
                // StatementAdderMethod cloned existing statement
                vc_608076.attr(String_vc_94899, vc_608080);
                // MethodAssertGenerator build local variable
                Object o_19_0 = set.contains(root);
                org.junit.Assert.fail("testHashcodeIsStableWithContentChanges_cf2359138 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testHashcodeIsStableWithContentChanges_cf2359138_failAssert6_literalMutation2364765_cf2367203 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHtmlContainsOuter */
    @org.junit.Test(timeout = 10000)
    public void testHtmlContainsOuter_cf2373032_failAssert34() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Check</title> <div>Hello there</div>");
            doc.outputSettings().indentAmount(0);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html().contains(doc.select("title").outerHtml());
            // StatementAdderOnAssert create null value
            java.lang.String vc_611664 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_611662 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_611662.hasClass(vc_611664);
            // MethodAssertGenerator build local variable
            Object o_16_0 = doc.html().contains(doc.select("div").outerHtml());
            org.junit.Assert.fail("testHtmlContainsOuter_cf2373032 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHtmlContainsOuter */
    @org.junit.Test(timeout = 10000)
    public void testHtmlContainsOuter_cf2373585_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Check</title> <div>Hello there</div>");
            doc.outputSettings().indentAmount(0);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html().contains(doc.select("title").outerHtml());
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_611893 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.getElementsByTag(vc_611893);
            // MethodAssertGenerator build local variable
            Object o_18_0 = doc.html().contains(doc.select("div").outerHtml());
            org.junit.Assert.fail("testHtmlContainsOuter_cf2373585 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHtmlContainsOuter */
    @org.junit.Test(timeout = 10000)
    public void testHtmlContainsOuter_cf2373628_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Check</title> <div>Hello there</div>");
            doc.outputSettings().indentAmount(0);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html().contains(doc.select("title").outerHtml());
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_611908 = (java.util.regex.Pattern)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.getElementsMatchingOwnText(vc_611908);
            // MethodAssertGenerator build local variable
            Object o_18_0 = doc.html().contains(doc.select("div").outerHtml());
            org.junit.Assert.fail("testHtmlContainsOuter_cf2373628 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testHtmlContainsOuter */
    @org.junit.Test(timeout = 10000)
    public void testHtmlContainsOuter_cf2373504_failAssert22() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<title>Check</title> <div>Hello there</div>");
            doc.outputSettings().indentAmount(0);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html().contains(doc.select("title").outerHtml());
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_611867 = (java.util.regex.Pattern)null;
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_95487 = "<title>Check</title> <div>Hello there</div>";
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_611863 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_611863.getElementsByAttributeValueMatching(String_vc_95487, vc_611867);
            // MethodAssertGenerator build local variable
            Object o_18_0 = doc.html().contains(doc.select("div").outerHtml());
            org.junit.Assert.fail("testHtmlContainsOuter_cf2373504 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testInnerHtml */
    @org.junit.Test(timeout = 10000)
    public void testInnerHtml_cf2375290_failAssert30() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>\n <p>Hello</p> </div>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_612105 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.toggleClass(vc_612105);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.getElementsByTag("div").get(0).html();
            org.junit.Assert.fail("testInnerHtml_cf2375290 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testInnerHtml */
    @org.junit.Test(timeout = 10000)
    public void testInnerHtml_cf2374937_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>\n <p>Hello</p> </div>");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_95502 = "div";
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_611944 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_611944.hasClass(String_vc_95502);
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.getElementsByTag("div").get(0).html();
            org.junit.Assert.fail("testInnerHtml_cf2374937 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testInnerHtml */
    @org.junit.Test(timeout = 10000)
    public void testInnerHtml_cf2375531_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>\n <p>Hello</p> </div>");
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_612190 = (java.util.regex.Pattern)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.getElementsMatchingOwnText(vc_612190);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.getElementsByTag("div").get(0).html();
            org.junit.Assert.fail("testInnerHtml_cf2375531 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testInnerHtml */
    @org.junit.Test(timeout = 10000)
    public void testInnerHtml_cf2374957_failAssert55() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>\n <p>Hello</p> </div>");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_611953 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.is(vc_611953);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.getElementsByTag("div").get(0).html();
            org.junit.Assert.fail("testInnerHtml_cf2374957 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testInnerHtml */
    @org.junit.Test(timeout = 10000)
    public void testInnerHtml_cf2375275_failAssert54() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>\n <p>Hello</p> </div>");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_612099 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_612099.text(result);
            // MethodAssertGenerator build local variable
            Object o_11_0 = doc.getElementsByTag("div").get(0).html();
            org.junit.Assert.fail("testInnerHtml_cf2375275 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testInnerHtml */
    /* amplification of org.jsoup.nodes.ElementTest#testInnerHtml_cf2374937_failAssert9_add2375637 */
    @org.junit.Test(timeout = 10000)
    public void testInnerHtml_cf2374937_failAssert9_add2375637_literalMutation2375847() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>\n <p>Hello</p> </div>");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_95502 = "z{R";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_95502, "z{R");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_611944 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_611944.hasClass(String_vc_95502);
            // StatementAdderMethod cloned existing statement
            vc_611944.hasClass(String_vc_95502);
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.getElementsByTag("div").get(0).html();
            org.junit.Assert.fail("testInnerHtml_cf2374937 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2376400_failAssert55() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAdderOnAssert create null value
            java.lang.String vc_612234 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.is(vc_612234);
            // MethodAssertGenerator build local variable
            Object o_38_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2376400 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2376997_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_612403 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_612403.getElementsByAttribute(result);
            // MethodAssertGenerator build local variable
            Object o_42_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2376997 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2377000_failAssert44() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAdderOnAssert create null value
            java.lang.String vc_612405 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            q.getElementsByAttribute(vc_612405);
            // MethodAssertGenerator build local variable
            Object o_38_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2377000 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2376868_failAssert37() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAdderOnAssert create null value
            java.lang.String vc_612375 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.removeClass(vc_612375);
            // MethodAssertGenerator build local variable
            Object o_38_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2376868 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2376571_failAssert27() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_612296 = (org.jsoup.nodes.Node)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
            // StatementAdderMethod cloned existing statement
            ret.appendChild(vc_612296);
            // MethodAssertGenerator build local variable
            Object o_41_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2376571 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2376376_failAssert39() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAdderOnAssert create null value
            java.lang.String vc_612228 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            q.hasClass(vc_612228);
            // MethodAssertGenerator build local variable
            Object o_38_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2376376 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2376409_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_612235 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.is(vc_612235);
            // MethodAssertGenerator build local variable
            Object o_42_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2376409 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2376644_failAssert32() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAdderOnAssert create random local variable
            boolean vc_612310 = true;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_612309 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.attr(vc_612309, vc_612310);
            // MethodAssertGenerator build local variable
            Object o_44_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2376644 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2376740_failAssert74() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_612339 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            q.getElementById(vc_612339);
            // MethodAssertGenerator build local variable
            Object o_38_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2376740 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2376928_failAssert51() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAdderOnAssert create null value
            java.lang.String vc_612387 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.toggleClass(vc_612387);
            // MethodAssertGenerator build local variable
            Object o_38_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2376928 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2376977_failAssert23() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_612396 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element divA = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            divA.wrap(vc_612396);
            // MethodAssertGenerator build local variable
            Object o_42_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2376977 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2376626_failAssert67() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAdderOnAssert create random local variable
            boolean vc_612310 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_612308 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.attr(vc_612308, vc_612310);
            // MethodAssertGenerator build local variable
            Object o_40_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2376626 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2377020_failAssert43() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAdderOnAssert create null value
            java.lang.String vc_612409 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            q.getElementsByAttributeStarting(vc_612409);
            // MethodAssertGenerator build local variable
            Object o_38_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2377020 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2377236_failAssert64() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<div><p>One <a class=big>Two</a> Three</p><p>Another</p>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_612457 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p.getElementsByTag(vc_612457);
            // MethodAssertGenerator build local variable
            Object o_38_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2377236 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2376644_failAssert32_literalMutation2377627_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "j#S5]=#0(a<7MQWi0VS^[j<Oll1`#H/}ZV*}Wqo!`IQhibDYrn=YFmZm";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element p = doc.select("p").first();
                // MethodAssertGenerator build local variable
                Object o_7_0 = p.is("p");
                // MethodAssertGenerator build local variable
                Object o_9_0 = p.is("div");
                // MethodAssertGenerator build local variable
                Object o_11_0 = p.is("p:has(a)");
                // MethodAssertGenerator build local variable
                Object o_13_0 = p.is("p:first-child");
                // MethodAssertGenerator build local variable
                Object o_15_0 = p.is("p:last-child");
                // MethodAssertGenerator build local variable
                Object o_17_0 = p.is("*");
                // MethodAssertGenerator build local variable
                Object o_19_0 = p.is("div p");
                org.jsoup.nodes.Element q = doc.select("p").last();
                // MethodAssertGenerator build local variable
                Object o_24_0 = q.is("p");
                // MethodAssertGenerator build local variable
                Object o_26_0 = q.is("p ~ p");
                // MethodAssertGenerator build local variable
                Object o_28_0 = q.is("p + p");
                // MethodAssertGenerator build local variable
                Object o_30_0 = q.is("p:last-child");
                // MethodAssertGenerator build local variable
                Object o_32_0 = q.is("p a");
                // StatementAdderOnAssert create random local variable
                boolean vc_612310 = true;
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_612309 = new java.lang.String();
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div = doc.select("div").first();
                // StatementAdderMethod cloned existing statement
                div.attr(vc_612309, vc_612310);
                // MethodAssertGenerator build local variable
                Object o_44_0 = q.is("a");
                org.junit.Assert.fail("testIs_cf2376644 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("testIs_cf2376644_failAssert32_literalMutation2377627 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2377349_failAssert11_literalMutation2377494() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "O|VfJzYctq/^S?A#9qSpwN]<i{{6)ytdYV;0U4X+N@]zGM5<Ur!-(5JE";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "O|VfJzYctq/^S?A#9qSpwN]<i{{6)ytdYV;0U4X+N@]zGM5<Ur!-(5JE");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_612484 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_612484.select(text);
            // MethodAssertGenerator build local variable
            Object o_41_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2377349 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2377298_failAssert17_literalMutation2377537() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "Nq!x!>Xc<+/g]$|zS/H2E $Y@u .!)()u*|:7-xDUh25|p[!T3kZ{[GB";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "Nq!x!>Xc<+/g]$|zS/H2E $Y@u .!)()u*|:7-xDUh25|p[!T3kZ{[GB");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            div.getElementsMatchingOwnText(html);
            // MethodAssertGenerator build local variable
            Object o_39_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2377298 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2376383_failAssert70_literalMutation2377871_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
                org.jsoup.nodes.Element p = doc.select("p").first();
                // MethodAssertGenerator build local variable
                Object o_7_0 = p.is("p");
                // MethodAssertGenerator build local variable
                Object o_9_0 = p.is("div");
                // MethodAssertGenerator build local variable
                Object o_11_0 = p.is("p:has(a)");
                // MethodAssertGenerator build local variable
                Object o_13_0 = p.is("p:first-child");
                // MethodAssertGenerator build local variable
                Object o_15_0 = p.is("p:last-child");
                // MethodAssertGenerator build local variable
                Object o_17_0 = p.is("*");
                // MethodAssertGenerator build local variable
                Object o_19_0 = p.is("div p");
                org.jsoup.nodes.Element q = doc.select("p").last();
                // MethodAssertGenerator build local variable
                Object o_24_0 = q.is("p");
                // MethodAssertGenerator build local variable
                Object o_26_0 = q.is("p ~ p");
                // MethodAssertGenerator build local variable
                Object o_28_0 = q.is("p + p");
                // MethodAssertGenerator build local variable
                Object o_30_0 = q.is("p:last-child");
                // MethodAssertGenerator build local variable
                Object o_32_0 = q.is("p a");
                // StatementAddOnAssert local variable replacement
                java.lang.String text = doc.text();
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element divC = doc.select("div").get(2);
                // StatementAdderMethod cloned existing statement
                divC.hasClass(text);
                // MethodAssertGenerator build local variable
                Object o_43_0 = q.is("a");
                org.junit.Assert.fail("testIs_cf2376383 should have thrown IndexOutOfBoundsException");
            } catch (java.lang.IndexOutOfBoundsException eee) {
            }
            org.junit.Assert.fail("testIs_cf2376383_failAssert70_literalMutation2377871 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2377349_failAssert11_literalMutation2377492() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_612484 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_612484.select(text);
            // MethodAssertGenerator build local variable
            Object o_41_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2377349 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2377318_failAssert9_literalMutation2377478() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = ">p_K[&xiCCc],Ka)##1Kgq8k;4uq]fHov>5)D7aQ*#`!VcDO19Y9dL]=";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, ">p_K[&xiCCc],Ka)##1Kgq8k;4uq]fHov>5)D7aQ*#`!VcDO19Y9dL]=");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_95581 = "p";
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_612474 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_612474.getElementsMatchingText(String_vc_95581);
            // MethodAssertGenerator build local variable
            Object o_40_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2377318 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2376966_failAssert40_literalMutation2377676() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "2i#.}gUn!3MX$]SsKsIxV>t_[ymyZo>>LeGILykSaWa!X+aDTvoAD][O";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "2i#.}gUn!3MX$]SsKsIxV>t_[ymyZo>>LeGILykSaWa!X+aDTvoAD][O");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_95566 = "*";
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_612393 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_612393.wrap(String_vc_95566);
            // MethodAssertGenerator build local variable
            Object o_40_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2376966 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testIs */
    @org.junit.Test(timeout = 10000)
    public void testIs_cf2376745_failAssert46_literalMutation2377711() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "2>v;l-9E<2D6:V=EgmA{<ckA_cM4E`vq$[YW$KH:&bck!{kI/d|X(Pg@";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "2>v;l-9E<2D6:V=EgmA{<ckA_cM4E`vq$[YW$KH:&bck!{kI/d|X(Pg@");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html);
            org.jsoup.nodes.Element p = doc.select("p").first();
            // MethodAssertGenerator build local variable
            Object o_7_0 = p.is("p");
            // MethodAssertGenerator build local variable
            Object o_9_0 = p.is("div");
            // MethodAssertGenerator build local variable
            Object o_11_0 = p.is("p:has(a)");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.is("p:first-child");
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_17_0 = p.is("*");
            // MethodAssertGenerator build local variable
            Object o_19_0 = p.is("div p");
            org.jsoup.nodes.Element q = doc.select("p").last();
            // MethodAssertGenerator build local variable
            Object o_24_0 = q.is("p");
            // MethodAssertGenerator build local variable
            Object o_26_0 = q.is("p ~ p");
            // MethodAssertGenerator build local variable
            Object o_28_0 = q.is("p + p");
            // MethodAssertGenerator build local variable
            Object o_30_0 = q.is("p:last-child");
            // MethodAssertGenerator build local variable
            Object o_32_0 = q.is("p a");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_612339 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            div.getElementById(vc_612339);
            // MethodAssertGenerator build local variable
            Object o_41_0 = q.is("a");
            org.junit.Assert.fail("testIs_cf2376745 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testKeepsPreText */
    @org.junit.Test(timeout = 10000)
    public void testKeepsPreText_cf2398091_failAssert66() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<p>Hello \n \n there.</p> <div><pre>  What\'s \n\n  that?</pre>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            java.lang.String vc_624509 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div.text(vc_624509);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.text();
            org.junit.Assert.fail("testKeepsPreText_cf2398091 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testKeepsPreText */
    @org.junit.Test(timeout = 10000)
    public void testKeepsPreText_cf2397854_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<p>Hello \n \n there.</p> <div><pre>  What\'s \n\n  that?</pre>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_624422 = (org.jsoup.nodes.Node)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.appendChild(vc_624422);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.text();
            org.junit.Assert.fail("testKeepsPreText_cf2397854 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testKeepsPreText */
    @org.junit.Test(timeout = 10000)
    public void testKeepsPreText_cf2398103_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<p>Hello \n \n there.</p> <div><pre>  What\'s \n\n  that?</pre>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_624511 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_624511.toggleClass(result);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.text();
            org.junit.Assert.fail("testKeepsPreText_cf2398103 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testKeepsPreText */
    @org.junit.Test(timeout = 10000)
    public void testKeepsPreText_cf2398175_failAssert31() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<p>Hello \n \n there.</p> <div><pre>  What\'s \n\n  that?</pre>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            java.lang.String vc_624535 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.getElementsByAttributeStarting(vc_624535);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.text();
            org.junit.Assert.fail("testKeepsPreText_cf2398175 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testKeepsPreText */
    @org.junit.Test(timeout = 10000)
    public void testKeepsPreText_cf2397705_failAssert64() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<p>Hello \n \n there.</p> <div><pre>  What\'s \n\n  that?</pre>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // StatementAdderOnAssert create null value
            java.lang.String vc_624354 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_624352 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_624352.hasClass(vc_624354);
            // MethodAssertGenerator build local variable
            Object o_10_0 = doc.text();
            org.junit.Assert.fail("testKeepsPreText_cf2397705 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testKeepsPreText */
    @org.junit.Test(timeout = 10000)
    public void testKeepsPreText_cf2398175_failAssert31_literalMutation2398687_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String h = "";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                // StatementAdderOnAssert create null value
                java.lang.String vc_624535 = (java.lang.String)null;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element q = doc.select("p").last();
                // StatementAdderMethod cloned existing statement
                q.getElementsByAttributeStarting(vc_624535);
                // MethodAssertGenerator build local variable
                Object o_12_0 = doc.text();
                org.junit.Assert.fail("testKeepsPreText_cf2398175 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("testKeepsPreText_cf2398175_failAssert31_literalMutation2398687 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testKeepsPreTextInCode */
    @org.junit.Test(timeout = 10000)
    public void testKeepsPreTextInCode_cf2607263_failAssert84() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<pre><code>code\n\ncode</code></pre>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.text();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_678925 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_678925.removeClass(result);
            // MethodAssertGenerator build local variable
            Object o_14_0 = doc.body().html();
            org.junit.Assert.fail("testKeepsPreTextInCode_cf2607263 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testKeepsPreTextInCode */
    @org.junit.Test(timeout = 10000)
    public void testKeepsPreTextInCode_cf2606914_failAssert53() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<pre><code>code\n\ncode</code></pre>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.text();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_678781 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_678778 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_678778.hasClass(vc_678781);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.body().html();
            org.junit.Assert.fail("testKeepsPreTextInCode_cf2606914 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testKeepsPreTextInCode */
    @org.junit.Test(timeout = 10000)
    public void testKeepsPreTextInCode_cf2606952() {
        java.lang.String h = "<pre><code>code\n\ncode</code></pre>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("code\n\ncode", doc.text());
        // StatementAdderOnAssert create null value
        org.jsoup.nodes.Node vc_678796 = (org.jsoup.nodes.Node)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_678796);
        // StatementAdderOnAssert create null value
        org.jsoup.nodes.Element vc_678794 = (org.jsoup.nodes.Element)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_678794);
        // AssertGenerator replace invocation
        boolean o_testKeepsPreTextInCode_cf2606952__10 = // StatementAdderMethod cloned existing statement
vc_678794.preserveWhitespace(vc_678796);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_testKeepsPreTextInCode_cf2606952__10);
        org.junit.Assert.assertEquals("<pre><code>code\n\ncode</code></pre>", doc.body().html());
    }

    /* amplification of org.jsoup.nodes.ElementTest#testKeepsPreTextInCode */
    @org.junit.Test(timeout = 10000)
    public void testKeepsPreTextInCode_cf2607627_failAssert26_literalMutation2608965() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<pre><ode>code\n\ncode</code></pre>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<pre><ode>code\n\ncode</code></pre>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.text();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_4_0, "code\n\ncode");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_105957 = "<pre><code>code\n\ncode</code></pre>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_105957, "<pre><code>code\n\ncode</code></pre>");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_679036 = (org.jsoup.nodes.Element)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_679036);
            // StatementAdderMethod cloned existing statement
            vc_679036.select(String_vc_105957);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.body().html();
            org.junit.Assert.fail("testKeepsPreTextInCode_cf2607627 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testKeepsPreTextInCode */
    @org.junit.Test(timeout = 10000)
    public void testKeepsPreTextInCode_cf2607602_failAssert24_literalMutation2608955() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<pre><code>code\n\ncode<|code></pre>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<pre><code>code\n\ncode<|code></pre>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.text();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_4_0, "code\n\ncode<|code>");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(result, "<html><head></head><body><pre><code>codecode&lt;|code&gt;</code></pre></body></html>");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_679026 = (org.jsoup.nodes.Element)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_679026);
            // StatementAdderMethod cloned existing statement
            vc_679026.getElementsMatchingText(result);
            // MethodAssertGenerator build local variable
            Object o_14_0 = doc.body().html();
            org.junit.Assert.fail("testKeepsPreTextInCode_cf2607602 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testKeepsPreTextInCode */
    @org.junit.Test(timeout = 10000)
    public void testKeepsPreTextInCode_cf2606931_failAssert5_literalMutation2608835_cf2657331_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String h = "<pre><code>code\n\ncode</code></pre>";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                // MethodAssertGenerator build local variable
                Object o_4_0 = doc.text();
                // MethodAssertGenerator build local variable
                Object o_9_0 = o_4_0;
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_105922 = "<pre><code>code\n\ncode</cude></pre>";
                // MethodAssertGenerator build local variable
                Object o_13_0 = String_vc_105922;
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_678784 = (org.jsoup.nodes.Element)null;
                // StatementAdderOnAssert create null value
                java.lang.String vc_691611 = (java.lang.String)null;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div2 = doc.select("div").get(1);
                // StatementAdderMethod cloned existing statement
                div2.prependText(vc_691611);
                // MethodAssertGenerator build local variable
                Object o_25_0 = vc_678784;
                // StatementAdderMethod cloned existing statement
                vc_678784.is(String_vc_105922);
                // MethodAssertGenerator build local variable
                Object o_12_0 = doc.body().html();
                org.junit.Assert.fail("testKeepsPreTextInCode_cf2606931 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testKeepsPreTextInCode_cf2606931_failAssert5_literalMutation2608835_cf2657331 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testManipulateTextNodes */
    @org.junit.Test(timeout = 10000)
    public void testManipulateTextNodes_cf2688574_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>One <span>Two</span> Three <br> Four</p>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            java.util.List<org.jsoup.nodes.TextNode> textNodes = p.textNodes();
            textNodes.get(1).text(" three-more ");
            textNodes.get(2).splitText(3).text("-ur");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.ownText();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_699505 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_699505.prependText(result);
            // MethodAssertGenerator build local variable
            Object o_25_0 = p.textNodes().size();
            org.junit.Assert.fail("testManipulateTextNodes_cf2688574 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testManipulateTextNodes */
    @org.junit.Test(timeout = 10000)
    public void testManipulateTextNodes_cf2689005_failAssert36() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>One <span>Two</span> Three <br> Four</p>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            java.util.List<org.jsoup.nodes.TextNode> textNodes = p.textNodes();
            textNodes.get(1).text(" three-more ");
            textNodes.get(2).splitText(3).text("-ur");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.ownText();
            // StatementAdderOnAssert create null value
            java.lang.String vc_699624 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.select(vc_699624);
            // MethodAssertGenerator build local variable
            Object o_21_0 = p.textNodes().size();
            org.junit.Assert.fail("testManipulateTextNodes_cf2689005 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testManipulateTextNodes */
    @org.junit.Test(timeout = 10000)
    public void testManipulateTextNodes_cf2688865_failAssert43() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>One <span>Two</span> Three <br> Four</p>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            java.util.List<org.jsoup.nodes.TextNode> textNodes = p.textNodes();
            textNodes.get(1).text(" three-more ");
            textNodes.get(2).splitText(3).text("-ur");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.ownText();
            // StatementAdderOnAssert create null value
            java.lang.String vc_699581 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.getElementsByClass(vc_699581);
            // MethodAssertGenerator build local variable
            Object o_21_0 = p.textNodes().size();
            org.junit.Assert.fail("testManipulateTextNodes_cf2688865 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testManipulateTextNodes */
    @org.junit.Test(timeout = 10000)
    public void testManipulateTextNodes_cf2688705_failAssert57() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>One <span>Two</span> Three <br> Four</p>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            java.util.List<org.jsoup.nodes.TextNode> textNodes = p.textNodes();
            textNodes.get(1).text(" three-more ");
            textNodes.get(2).splitText(3).text("-ur");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.ownText();
            // StatementAdderOnAssert create null value
            java.lang.String vc_699543 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.getElementsByAttribute(vc_699543);
            // MethodAssertGenerator build local variable
            Object o_21_0 = p.textNodes().size();
            org.junit.Assert.fail("testManipulateTextNodes_cf2688705 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testManipulateTextNodes */
    @org.junit.Test(timeout = 10000)
    public void testManipulateTextNodes_cf2688153_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>One <span>Two</span> Three <br> Four</p>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            java.util.List<org.jsoup.nodes.TextNode> textNodes = p.textNodes();
            textNodes.get(1).text(" three-more ");
            textNodes.get(2).splitText(3).text("-ur");
            // MethodAssertGenerator build local variable
            Object o_13_0 = p.text();
            // MethodAssertGenerator build local variable
            Object o_15_0 = p.ownText();
            // StatementAdderOnAssert create null value
            java.lang.String vc_699366 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_699364 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_699364.hasClass(vc_699366);
            // MethodAssertGenerator build local variable
            Object o_23_0 = p.textNodes().size();
            org.junit.Assert.fail("testManipulateTextNodes_cf2688153 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testManipulateTextNodes */
    @org.junit.Test(timeout = 10000)
    public void testManipulateTextNodes_cf2688635_failAssert77_add2689382_failAssert16() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<p>One <span>Two</span> Three <br> Four</p>");
                org.jsoup.nodes.Element p = doc.select("p").first();
                java.util.List<org.jsoup.nodes.TextNode> textNodes = p.textNodes();
                textNodes.get(1).text(" three-more ");
                // MethodCallAdder
                textNodes.get(2).splitText(3).text("-ur");
                textNodes.get(2).splitText(3).text("-ur");
                // MethodAssertGenerator build local variable
                Object o_13_0 = p.text();
                // MethodAssertGenerator build local variable
                Object o_15_0 = p.ownText();
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_109146 = "-ur";
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div = doc.select("div").get(0);
                // StatementAdderMethod cloned existing statement
                div.text(String_vc_109146);
                // MethodAssertGenerator build local variable
                Object o_25_0 = p.textNodes().size();
                org.junit.Assert.fail("testManipulateTextNodes_cf2688635 should have thrown IndexOutOfBoundsException");
            } catch (java.lang.IndexOutOfBoundsException eee) {
            }
            org.junit.Assert.fail("testManipulateTextNodes_cf2688635_failAssert77_add2689382 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNamespacedElements */
    @org.junit.Test(timeout = 10000)
    public void testNamespacedElements_cf2689637_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // Namespaces with ns:tag in HTML must be translated to ns|tag in CSS.
            java.lang.String html = "<html><body><fb:comments /></body></html>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com/bar/");
            org.jsoup.select.Elements els = doc.select("fb|comments");
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.size();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_699646 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_699646.hasClass(html);
            // MethodAssertGenerator build local variable
            Object o_13_0 = els.get(0).cssSelector();
            org.junit.Assert.fail("testNamespacedElements_cf2689637 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNamespacedElements */
    @org.junit.Test(timeout = 10000)
    public void testNamespacedElements_cf2689980_failAssert49_literalMutation2690777() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // Namespaces with ns:tag in HTML must be translated to ns|tag in CSS.
            java.lang.String html = "<html><body><fb:comments #/></body></html>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<html><body><fb:comments #/></body></html>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com/bar/");
            org.jsoup.select.Elements els = doc.select("fb|comments");
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_7_0, 1);
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(result, "<html><head></head><body><fb:comments#/></body></html>");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_699787 = (org.jsoup.nodes.Element)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_699787);
            // StatementAdderMethod cloned existing statement
            vc_699787.prependText(result);
            // MethodAssertGenerator build local variable
            Object o_17_0 = els.get(0).cssSelector();
            org.junit.Assert.fail("testNamespacedElements_cf2689980 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNamespacedElements */
    @org.junit.Test(timeout = 10000)
    public void testNamespacedElements_cf2690325_failAssert93_literalMutation2691101() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // Namespaces with ns:tag in HTML must be translated to ns|tag in CSS.
            java.lang.String html = "#O`m0qNK5)L}=wu<_Hcz/hfL9DBo$c7SMzq?gQ-9p";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "#O`m0qNK5)L}=wu<_Hcz/hfL9DBo$c7SMzq?gQ-9p");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com/bar/");
            org.jsoup.select.Elements els = doc.select("fb|comments");
            // MethodAssertGenerator build local variable
            Object o_7_0 = els.size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_7_0, 0);
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(text, "#O`m0qNK5)L}=wu<_Hcz/hfL9DBo$c7SMzq?gQ-9p");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_699886 = (org.jsoup.nodes.Element)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_699886);
            // StatementAdderMethod cloned existing statement
            vc_699886.getElementsMatchingOwnText(text);
            // MethodAssertGenerator build local variable
            Object o_16_0 = els.get(0).cssSelector();
            org.junit.Assert.fail("testNamespacedElements_cf2690325 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNoIndentOnScriptAndStyle */
    @org.junit.Test(timeout = 10000)
    public void testNoIndentOnScriptAndStyle_cf2908984_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // don't newline+indent closing </script> and </style> tags
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>one\ntwo</script>\n<style>three\nfour</style>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_756440 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.getElementById(vc_756440);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.head().html();
            org.junit.Assert.fail("testNoIndentOnScriptAndStyle_cf2908984 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNoIndentOnScriptAndStyle */
    @org.junit.Test(timeout = 10000)
    public void testNoIndentOnScriptAndStyle_cf2909266_failAssert35() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // don't newline+indent closing </script> and </style> tags
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>one\ntwo</script>\n<style>three\nfour</style>");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_756543 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_756543.getElementsByClass(result);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.head().html();
            org.junit.Assert.fail("testNoIndentOnScriptAndStyle_cf2909266 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNoIndentOnScriptAndStyle */
    @org.junit.Test(timeout = 10000)
    public void testNoIndentOnScriptAndStyle_cf2908762_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // don't newline+indent closing </script> and </style> tags
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>one\ntwo</script>\n<style>three\nfour</style>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_756330 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // StatementAdderMethod cloned existing statement
            div2.hasClass(vc_756330);
            // MethodAssertGenerator build local variable
            Object o_12_0 = doc.head().html();
            org.junit.Assert.fail("testNoIndentOnScriptAndStyle_cf2908762 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNoIndentOnScriptAndStyle */
    /* amplification of org.jsoup.nodes.ElementTest#testNoIndentOnScriptAndStyle_cf2908775_failAssert59_add2909530 */
    @org.junit.Test(timeout = 10000)
    public void testNoIndentOnScriptAndStyle_cf2908775_failAssert59_add2909530_literalMutation2910169() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // don't newline+indent closing </script> and </style> tags
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<script>one\ntwo</script>\n<style>three\nfour</style>");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_118021 = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_118021, "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_756334 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_756334.is(String_vc_118021);
            // StatementAdderMethod cloned existing statement
            vc_756334.is(String_vc_118021);
            // MethodAssertGenerator build local variable
            Object o_10_0 = doc.head().html();
            org.junit.Assert.fail("testNoIndentOnScriptAndStyle_cf2908775 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNormalisesText */
    @org.junit.Test(timeout = 10000)
    public void testNormalisesText_cf2910890_failAssert43() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<p>Hello<p>There.</p> \n <p>Here <b>is</b> \n s<b>om</b>e text.";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            java.lang.String text = doc.text();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_756787 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_756787.getElementsByAttribute(result);
            org.junit.Assert.fail("testNormalisesText_cf2910890 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNormalisesText */
    @org.junit.Test(timeout = 10000)
    public void testNormalisesText_cf2910453_failAssert83() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<p>Hello<p>There.</p> \n <p>Here <b>is</b> \n s<b>om</b>e text.";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            java.lang.String text = doc.text();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_756614 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_756614.hasText();
            org.junit.Assert.fail("testNormalisesText_cf2910453 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNormalisesText */
    @org.junit.Test(timeout = 10000)
    public void testNormalisesText_cf2910628_failAssert10_literalMutation2911272() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<p>Hello<p>There.</p> \n <p>Here <b>is<]b> \n s<b>om</b>e text.";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<p>Hello<p>There.</p> \n <p>Here <b>is<]b> \n s<b>om</b>e text.");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            java.lang.String text = doc.text();
            // StatementAdderOnAssert create random local variable
            boolean vc_756694 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(vc_756694);
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(result, "<html><head></head><body><p>Hello</p><p>There.</p><p>Here<b>is&lt;]b&gt;s<b>om</b>etext.</b></p></body></html>");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element span = doc.select("span").first();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(span);
            // StatementAdderMethod cloned existing statement
            span.attr(result, vc_756694);
            org.junit.Assert.fail("testNormalisesText_cf2910628 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNormalisesText */
    @org.junit.Test(timeout = 10000)
    public void testNormalisesText_cf2910813_failAssert6_literalMutation2911242_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String h = "b)B.S;)s.y%Rt8N*P:llML@,sGb&uzK1bz/yJ8dp_7:RcmC!ak!oh{CwFbKI3";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                java.lang.String text = doc.text();
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_756764 = new java.lang.String();
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element q = doc.select("p").last();
                // StatementAdderMethod cloned existing statement
                q.tagName(vc_756764);
                org.junit.Assert.fail("testNormalisesText_cf2910813 should have thrown IllegalArgumentException");
            } catch (java.lang.IllegalArgumentException eee) {
            }
            org.junit.Assert.fail("testNormalisesText_cf2910813_failAssert6_literalMutation2911242 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNormalisesText */
    @org.junit.Test(timeout = 10000)
    public void testNormalisesText_cf2910849_failAssert71_literalMutation2911669() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<p>Hello<p>There.</p> \n <p>Here <b>is</b> \n s<b>om</y>e text.";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<p>Hello<p>There.</p> \n <p>Here <b>is</b> \n s<b>om</y>e text.");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            java.lang.String text = doc.text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_756775 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_756775);
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_756773 = (org.jsoup.nodes.Element)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_756773);
            // StatementAdderMethod cloned existing statement
            vc_756773.val(vc_756775);
            org.junit.Assert.fail("testNormalisesText_cf2910849 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNormalisesText */
    @org.junit.Test(timeout = 10000)
    public void testNormalisesText_cf2910796_failAssert39_literalMutation2911456_cf3000126_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String h = "<p>Hello<p>There.</p> \n <pHere <b>is</b> \n s<b>om</b>e text.";
                // MethodAssertGenerator build local variable
                Object o_4_0 = h;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                java.lang.String text = doc.text();
                // StatementAddOnAssert local variable replacement
                java.lang.String result = doc.toString().replaceAll("\\s+", "");
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element p = doc.getElementById("1");
                // StatementAdderMethod cloned existing statement
                p.elementSiblingIndex();
                // MethodAssertGenerator build local variable
                Object o_19_0 = result;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div2 = doc.select("div").get(1);
                // StatementAdderMethod cloned existing statement
                div2.removeClass(result);
                org.junit.Assert.fail("testNormalisesText_cf2910796 should have thrown IndexOutOfBoundsException");
            } catch (java.lang.IndexOutOfBoundsException eee) {
            }
            org.junit.Assert.fail("testNormalisesText_cf2910796_failAssert39_literalMutation2911456_cf3000126 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty */
    @org.junit.Test(timeout = 10000)
    public void testNotPretty_cf3113547_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>");
            doc.outputSettings().prettyPrint(false);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html();
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_811572 = (java.util.regex.Pattern)null;
            // StatementAdderMethod cloned existing statement
            div.getElementsMatchingText(vc_811572);
            // MethodAssertGenerator build local variable
            Object o_14_0 = div.html();
            org.junit.Assert.fail("testNotPretty_cf3113547 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty */
    @org.junit.Test(timeout = 10000)
    public void testNotPretty_cf3113213_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>");
            doc.outputSettings().prettyPrint(false);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html();
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderOnAssert create null value
            java.lang.String vc_811479 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.toggleClass(vc_811479);
            // MethodAssertGenerator build local variable
            Object o_14_0 = div.html();
            org.junit.Assert.fail("testNotPretty_cf3113213 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty */
    @org.junit.Test(timeout = 10000)
    public void testNotPretty_cf3113273_failAssert62() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>");
            doc.outputSettings().prettyPrint(false);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html();
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderOnAssert create null value
            java.lang.String vc_811497 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.getElementsByAttribute(vc_811497);
            // MethodAssertGenerator build local variable
            Object o_14_0 = div.html();
            org.junit.Assert.fail("testNotPretty_cf3113273 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty */
    @org.junit.Test(timeout = 10000)
    public void testNotPretty_cf3113429_failAssert32() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>");
            doc.outputSettings().prettyPrint(false);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html();
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderOnAssert create null value
            java.lang.String vc_811535 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_811533 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_811533.getElementsByClass(vc_811535);
            // MethodAssertGenerator build local variable
            Object o_16_0 = div.html();
            org.junit.Assert.fail("testNotPretty_cf3113429 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty */
    @org.junit.Test(timeout = 10000)
    public void testNotPretty_cf3112959_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>");
            doc.outputSettings().prettyPrint(false);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html();
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderOnAssert create random local variable
            boolean vc_811402 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_811400 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element body = doc.appendElement("body");
            // StatementAdderMethod cloned existing statement
            body.attr(vc_811400, vc_811402);
            // MethodAssertGenerator build local variable
            Object o_19_0 = div.html();
            org.junit.Assert.fail("testNotPretty_cf3112959 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty */
    @org.junit.Test(timeout = 10000)
    public void testNotPretty_cf3112845_failAssert16() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>");
            doc.outputSettings().prettyPrint(false);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html();
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderOnAssert create null value
            java.lang.String vc_811372 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p1.addClass(vc_811372);
            // MethodAssertGenerator build local variable
            Object o_18_0 = div.html();
            org.junit.Assert.fail("testNotPretty_cf3112845 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty */
    @org.junit.Test(timeout = 10000)
    public void testNotPretty_cf3113028_failAssert35() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>");
            doc.outputSettings().prettyPrint(false);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html();
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderOnAssert create null value
            java.util.Set<java.lang.String> vc_811420 = (java.util.Set)null;
            // StatementAdderMethod cloned existing statement
            div.classNames(vc_811420);
            // MethodAssertGenerator build local variable
            Object o_14_0 = div.html();
            org.junit.Assert.fail("testNotPretty_cf3113028 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty */
    @org.junit.Test(timeout = 10000)
    public void testNotPretty_cf3112895_failAssert39() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>");
            doc.outputSettings().prettyPrint(false);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html();
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_811388 = (org.jsoup.nodes.Node)null;
            // StatementAdderMethod cloned existing statement
            div.appendChild(vc_811388);
            // MethodAssertGenerator build local variable
            Object o_14_0 = div.html();
            org.junit.Assert.fail("testNotPretty_cf3112895 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty */
    @org.junit.Test(timeout = 10000)
    public void testNotPretty_cf3113201_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>");
            doc.outputSettings().prettyPrint(false);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html();
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderOnAssert create null value
            java.lang.String vc_811475 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.text(vc_811475);
            // MethodAssertGenerator build local variable
            Object o_18_0 = div.html();
            org.junit.Assert.fail("testNotPretty_cf3113201 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty */
    @org.junit.Test(timeout = 10000)
    public void testNotPretty_cf3112720_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>");
            doc.outputSettings().prettyPrint(false);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html();
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_811321 = new java.lang.String();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_811318 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_811318.hasClass(vc_811321);
            // MethodAssertGenerator build local variable
            Object o_16_0 = div.html();
            org.junit.Assert.fail("testNotPretty_cf3112720 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty */
    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty_cf3112959_failAssert11_literalMutation3113644 */
    @org.junit.Test(timeout = 10000)
    public void testNotPretty_cf3112959_failAssert11_literalMutation3113644_literalMutation3113923() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>");
            doc.outputSettings().prettyPrint(false);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html();
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderOnAssert create random local variable
            boolean vc_811402 = true;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(vc_811402);
            // StatementAdderOnAssert create null value
            java.lang.String vc_811400 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element body = doc.appendElement("body");
            // StatementAdderMethod cloned existing statement
            body.attr(vc_811400, vc_811402);
            // MethodAssertGenerator build local variable
            Object o_19_0 = div.html();
            org.junit.Assert.fail("testNotPretty_cf3112959 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty */
    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty_cf3112855_failAssert9_add3113628 */
    @org.junit.Test(timeout = 10000)
    public void testNotPretty_cf3112855_failAssert9_add3113628_literalMutation3113824() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>");
            // MethodCallAdder
            doc.outputSettings().prettyPrint(false);
            doc.outputSettings().prettyPrint(false);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html();
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_126595 = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_126595, "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_811374 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_811374.after(String_vc_126595);
            // MethodAssertGenerator build local variable
            Object o_16_0 = div.html();
            org.junit.Assert.fail("testNotPretty_cf3112855 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty */
    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty_cf3113163_failAssert24_literalMutation3113673 */
    @org.junit.Test(timeout = 10000)
    public void testNotPretty_cf3113163_failAssert24_literalMutation3113673_literalMutation3114054() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>");
            doc.outputSettings().prettyPrint(false);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html();
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_126608 = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_126608, "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_811465 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_811465.removeClass(String_vc_126608);
            // MethodAssertGenerator build local variable
            Object o_16_0 = div.html();
            org.junit.Assert.fail("testNotPretty_cf3113163 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty */
    /* amplification of org.jsoup.nodes.ElementTest#testNotPretty_cf3112959_failAssert11_add3113642 */
    @org.junit.Test(timeout = 10000)
    public void testNotPretty_cf3112959_failAssert11_add3113642_literalMutation3113916() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>");
            // MethodCallAdder
            doc.outputSettings().prettyPrint(false);
            doc.outputSettings().prettyPrint(false);
            // MethodAssertGenerator build local variable
            Object o_5_0 = doc.html();
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderOnAssert create random local variable
            boolean vc_811402 = false;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(vc_811402);
            // StatementAdderOnAssert create null value
            java.lang.String vc_811400 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element body = doc.appendElement("body");
            // StatementAdderMethod cloned existing statement
            body.attr(vc_811400, vc_811402);
            // MethodAssertGenerator build local variable
            Object o_19_0 = div.html();
            org.junit.Assert.fail("testNotPretty_cf3112959 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testOuterHtml */
    @org.junit.Test(timeout = 10000)
    public void testOuterHtml_cf3114731_failAssert34() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there");
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_811805 = (java.util.regex.Pattern)null;
            // StatementAdderOnAssert create null value
            java.lang.String vc_811803 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_811801 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_811801.getElementsByAttributeValueMatching(vc_811803, vc_811805);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.outerHtml());
            org.junit.Assert.fail("testOuterHtml_cf3114731 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testOuterHtml */
    @org.junit.Test(timeout = 10000)
    public void testOuterHtml_cf3114291_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there");
            // StatementAdderOnAssert create null value
            java.lang.String vc_811608 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p1.is(vc_811608);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.outerHtml());
            org.junit.Assert.fail("testOuterHtml_cf3114291 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testOuterHtml */
    @org.junit.Test(timeout = 10000)
    public void testOuterHtml_cf3114294_failAssert51() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_811609 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p1 = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p1.is(vc_811609);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.outerHtml());
            org.junit.Assert.fail("testOuterHtml_cf3114294 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testOuterHtml */
    @org.junit.Test(timeout = 10000)
    public void testOuterHtml_cf3114807_failAssert37() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_811831 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.getElementsByTag(vc_811831);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.outerHtml());
            org.junit.Assert.fail("testOuterHtml_cf3114807 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependElement */
    @org.junit.Test(timeout = 10000)
    public void testPrependElement_cf3116031_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prependElement("p").text("Before");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.child(0).text();
            // StatementAdderOnAssert create null value
            java.util.Set<java.lang.String> vc_811984 = (java.util.Set)null;
            // StatementAdderMethod cloned existing statement
            div.classNames(vc_811984);
            // MethodAssertGenerator build local variable
            Object o_14_0 = div.child(1).text();
            org.junit.Assert.fail("testPrependElement_cf3116031 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependElement */
    @org.junit.Test(timeout = 10000)
    public void testPrependElement_cf3115740_failAssert36() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prependElement("p").text("Before");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.child(0).text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_811884 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element span = doc.select("span").first();
            // StatementAdderMethod cloned existing statement
            span.hasClass(vc_811884);
            // MethodAssertGenerator build local variable
            Object o_18_0 = div.child(1).text();
            org.junit.Assert.fail("testPrependElement_cf3115740 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependElement */
    @org.junit.Test(timeout = 10000)
    public void testPrependElement_cf3115957_failAssert51() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prependElement("p").text("Before");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.child(0).text();
            // StatementAdderOnAssert create random local variable
            boolean vc_811966 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_811964 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.attr(vc_811964, vc_811966);
            // MethodAssertGenerator build local variable
            Object o_16_0 = div.child(1).text();
            org.junit.Assert.fail("testPrependElement_cf3115957 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependElement */
    @org.junit.Test(timeout = 10000)
    public void testPrependElement_cf3116281_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prependElement("p").text("Before");
            // MethodAssertGenerator build local variable
            Object o_7_0 = div.child(0).text();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_812059 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_812059.getElementsByAttribute(result);
            // MethodAssertGenerator build local variable
            Object o_18_0 = div.child(1).text();
            org.junit.Assert.fail("testPrependElement_cf3116281 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testPrependNewHtml_cf3118081_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prepend("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create random local variable
                boolean vc_812248 = false;
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_812247 = new java.lang.String();
                // StatementAdderMethod cloned existing statement
                div.attr(vc_812247, vc_812248);
            }
            org.junit.Assert.fail("testPrependNewHtml_cf3118081 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testPrependNewHtml_cf3117978_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prepend("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.lang.String vc_812218 = (java.lang.String)null;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div1 = doc.select("div").get(0);
                // StatementAdderMethod cloned existing statement
                div1.addClass(vc_812218);
            }
            org.junit.Assert.fail("testPrependNewHtml_cf3117978 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testPrependNewHtml_cf3117876_failAssert28() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prepend("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_126712 = "<p>there</p><p>now</p>";
                // StatementAdderMethod cloned existing statement
                div.is(String_vc_126712);
            }
            org.junit.Assert.fail("testPrependNewHtml_cf3117876 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testPrependNewHtml_cf3117850_failAssert63() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prepend("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.lang.String vc_812166 = (java.lang.String)null;
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_812164 = (org.jsoup.nodes.Element)null;
                // StatementAdderMethod cloned existing statement
                vc_812164.hasClass(vc_812166);
            }
            org.junit.Assert.fail("testPrependNewHtml_cf3117850 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testPrependNewHtml_cf3118149_failAssert16() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prepend("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.util.Set<java.lang.String> vc_812266 = (java.util.Set)null;
                // StatementAdderMethod cloned existing statement
                div.classNames(vc_812266);
            }
            org.junit.Assert.fail("testPrependNewHtml_cf3118149 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testPrependNewHtml_cf3118177_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prepend("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_812277 = new java.lang.String();
                // StatementAdderMethod cloned existing statement
                div.getElementById(vc_812277);
            }
            org.junit.Assert.fail("testPrependNewHtml_cf3118177 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testPrependNewHtml_cf3118030_failAssert53() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prepend("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Node vc_812234 = (org.jsoup.nodes.Node)null;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element p1 = doc.select("p").first();
                // StatementAdderMethod cloned existing statement
                p1.appendChild(vc_812234);
            }
            org.junit.Assert.fail("testPrependNewHtml_cf3118030 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testPrependNewHtml_cf3118705_failAssert41() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prepend("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_812425 = new java.lang.String();
                // StatementAdderMethod cloned existing statement
                div.select(vc_812425);
            }
            org.junit.Assert.fail("testPrependNewHtml_cf3118705 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testPrependNewHtml_cf3118402_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prepend("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.lang.String vc_812343 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                div.getElementsByAttribute(vc_812343);
            }
            org.junit.Assert.fail("testPrependNewHtml_cf3118402 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testPrependNewHtml_cf3118500_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prepend("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.util.regex.Pattern vc_812369 = (java.util.regex.Pattern)null;
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_812368 = new java.lang.String();
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_812365 = (org.jsoup.nodes.Element)null;
                // StatementAdderMethod cloned existing statement
                vc_812365.getElementsByAttributeValueMatching(vc_812368, vc_812369);
            }
            org.junit.Assert.fail("testPrependNewHtml_cf3118500 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testPrependNewHtml_cf3118418_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prepend("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.lang.String vc_812347 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                div.getElementsByAttributeStarting(vc_812347);
            }
            org.junit.Assert.fail("testPrependNewHtml_cf3118418 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependNewHtml */
    @org.junit.Test(timeout = 10000)
    public void testPrependNewHtml_cf3118602_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prepend("<p>there</p><p>now</p>");
            // MethodAssertGenerator build local variable
            Object o_6_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("p");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                java.lang.String vc_812394 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                div.getElementsByTag(vc_812394);
            }
            org.junit.Assert.fail("testPrependNewHtml_cf3118602 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testPrependRowToTable_cf3120587_failAssert26() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
            org.jsoup.nodes.Element table = doc.select("tbody").first();
            table.prepend("<tr><td>2</td></tr>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("tr");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Node vc_812516 = (org.jsoup.nodes.Node)null;
                // StatementAdderMethod cloned existing statement
                table.appendChild(vc_812516);
            }
            org.junit.Assert.fail("testPrependRowToTable_cf3120587 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testPrependRowToTable_cf3120419_failAssert38() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
            org.jsoup.nodes.Element table = doc.select("tbody").first();
            table.prepend("<tr><td>2</td></tr>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("tr");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_126755 = "tbody";
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div = doc.select("div").first();
                // StatementAdderMethod cloned existing statement
                div.hasClass(String_vc_126755);
            }
            org.junit.Assert.fail("testPrependRowToTable_cf3120419 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testPrependRowToTable_cf3121164_failAssert42() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
            org.jsoup.nodes.Element table = doc.select("tbody").first();
            table.prepend("<tr><td>2</td></tr>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("tr");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_812677 = new java.lang.String();
                // StatementAdderMethod cloned existing statement
                table.getElementsByTag(vc_812677);
            }
            org.junit.Assert.fail("testPrependRowToTable_cf3121164 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testPrependRowToTable_cf3120634_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
            org.jsoup.nodes.Element table = doc.select("tbody").first();
            table.prepend("<tr><td>2</td></tr>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("tr");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create random local variable
                boolean vc_812530 = false;
                // StatementAdderOnAssert create null value
                java.lang.String vc_812528 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                table.attr(vc_812528, vc_812530);
            }
            org.junit.Assert.fail("testPrependRowToTable_cf3120634 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testPrependRowToTable_cf3120955_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
            org.jsoup.nodes.Element table = doc.select("tbody").first();
            table.prepend("<tr><td>2</td></tr>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("tr");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div = doc.select("div").first();
                // StatementAdderMethod cloned existing statement
                div.getAllElements();
            }
            org.junit.Assert.fail("testPrependRowToTable_cf3120955 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependRowToTable */
    @org.junit.Test(timeout = 10000)
    public void testPrependRowToTable_cf3120891_failAssert69() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<table><tr><td>1</td></tr></table>");
            org.jsoup.nodes.Element table = doc.select("tbody").first();
            table.prepend("<tr><td>2</td></tr>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // check sibling index (reindexChildren):
            org.jsoup.select.Elements ps = doc.select("tr");
            for (int i = 0; i < (ps.size()); i++) {
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_126774 = "<table><tr><td>1</td></tr></table>";
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element q = doc.select("p").last();
                // StatementAdderMethod cloned existing statement
                q.text(String_vc_126774);
            }
            org.junit.Assert.fail("testPrependRowToTable_cf3120891 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependText */
    @org.junit.Test(timeout = 10000)
    public void testPrependText_cf3123090_failAssert41() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prependText("there & now > ");
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.text();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderMethod cloned existing statement
            div.is(result);
            // MethodAssertGenerator build local variable
            Object o_14_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testPrependText_cf3123090 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependText */
    @org.junit.Test(timeout = 10000)
    public void testPrependText_cf3123768_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prependText("there & now > ");
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.text();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_812946 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.getElementsByClass(vc_812946);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testPrependText_cf3123768 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependText */
    @org.junit.Test(timeout = 10000)
    public void testPrependText_cf3123857_failAssert49() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prependText("there & now > ");
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.text();
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_812974 = (java.util.regex.Pattern)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.getElementsMatchingOwnText(vc_812974);
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testPrependText_cf3123857 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependText */
    @org.junit.Test(timeout = 10000)
    public void testPrependText_cf3123893_failAssert37() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prependText("there & now > ");
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_812988 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.select(vc_812988);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testPrependText_cf3123893 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependText */
    @org.junit.Test(timeout = 10000)
    public void testPrependText_cf3123558_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prependText("there & now > ");
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.text();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_812891 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_812891.val(result);
            // MethodAssertGenerator build local variable
            Object o_16_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testPrependText_cf3123558 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependText */
    @org.junit.Test(timeout = 10000)
    public void testPrependText_cf3123388_failAssert40() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prependText("there & now > ");
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.text();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_812841 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.getElementById(vc_812841);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testPrependText_cf3123388 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependText */
    @org.junit.Test(timeout = 10000)
    public void testPrependText_cf3123608_failAssert77() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prependText("there & now > ");
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.text();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_812908 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.getElementsByAttribute(vc_812908);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testPrependText_cf3123608 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testPrependText */
    @org.junit.Test(timeout = 10000)
    public void testPrependText_cf3123065_failAssert12() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.prependText("there & now > ");
            // MethodAssertGenerator build local variable
            Object o_6_0 = div.text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_812730 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_812728 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_812728.hasClass(vc_812730);
            // MethodAssertGenerator build local variable
            Object o_14_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testPrependText_cf3123065 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testRelativeUrls */
    @org.junit.Test(timeout = 10000)
    public void testRelativeUrls_cf3125131_failAssert104() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<body><a href='./one.html'>One</a> <a href='two.html'>two</a> <a href='../three.html'>Three</a> <a href='//example2.com/four/'>Four</a> <a href='https://example2.com/five/'>Five</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com/bar/");
            org.jsoup.select.Elements els = doc.select("a");
            // MethodAssertGenerator build local variable
            Object o_6_0 = els.get(0).absUrl("href");
            // MethodAssertGenerator build local variable
            Object o_9_0 = els.get(1).absUrl("href");
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.get(2).absUrl("href");
            // MethodAssertGenerator build local variable
            Object o_15_0 = els.get(3).absUrl("href");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_813010 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_813010.hasClass(html);
            // MethodAssertGenerator build local variable
            Object o_22_0 = els.get(4).absUrl("href");
            org.junit.Assert.fail("testRelativeUrls_cf3125131 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testRelativeUrls */
    @org.junit.Test(timeout = 10000)
    public void testRelativeUrls_cf3125819_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<body><a href='./one.html'>One</a> <a href='two.html'>two</a> <a href='../three.html'>Three</a> <a href='//example2.com/four/'>Four</a> <a href='https://example2.com/five/'>Five</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com/bar/");
            org.jsoup.select.Elements els = doc.select("a");
            // MethodAssertGenerator build local variable
            Object o_6_0 = els.get(0).absUrl("href");
            // MethodAssertGenerator build local variable
            Object o_9_0 = els.get(1).absUrl("href");
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.get(2).absUrl("href");
            // MethodAssertGenerator build local variable
            Object o_15_0 = els.get(3).absUrl("href");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_813250 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_813250.getElementsMatchingOwnText(result);
            // MethodAssertGenerator build local variable
            Object o_26_0 = els.get(4).absUrl("href");
            org.junit.Assert.fail("testRelativeUrls_cf3125819 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testRelativeUrls */
    @org.junit.Test(timeout = 10000)
    public void testRelativeUrls_cf3125794_failAssert36() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<body><a href='./one.html'>One</a> <a href='two.html'>two</a> <a href='../three.html'>Three</a> <a href='//example2.com/four/'>Four</a> <a href='https://example2.com/five/'>Five</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com/bar/");
            org.jsoup.select.Elements els = doc.select("a");
            // MethodAssertGenerator build local variable
            Object o_6_0 = els.get(0).absUrl("href");
            // MethodAssertGenerator build local variable
            Object o_9_0 = els.get(1).absUrl("href");
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.get(2).absUrl("href");
            // MethodAssertGenerator build local variable
            Object o_15_0 = els.get(3).absUrl("href");
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // StatementAdderMethod cloned existing statement
            q.getElementsContainingOwnText(text);
            // MethodAssertGenerator build local variable
            Object o_27_0 = els.get(4).absUrl("href");
            org.junit.Assert.fail("testRelativeUrls_cf3125794 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testRelativeUrls */
    @org.junit.Test(timeout = 10000)
    public void testRelativeUrls_cf3125796_failAssert27_add3126092() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<body><a href='./one.html'>One</a> <a href='two.html'>two</a> <a href='../three.html'>Three</a> <a href='//example2.com/four/'>Four</a> <a href='https://example2.com/five/'>Five</a>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com/bar/");
            org.jsoup.select.Elements els = doc.select("a");
            // MethodAssertGenerator build local variable
            Object o_6_0 = els.get(0).absUrl("href");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_6_0, "http://example.com/bar/one.html");
            // MethodAssertGenerator build local variable
            Object o_9_0 = els.get(1).absUrl("href");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_9_0, "http://example.com/bar/two.html");
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.get(2).absUrl("href");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, "http://example.com/three.html");
            // MethodAssertGenerator build local variable
            Object o_15_0 = els.get(3).absUrl("href");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_15_0, "http://example2.com/four/");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_813245 = new java.lang.String();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_813245, "");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element q = doc.select("p").last();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(q);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            q.getElementsContainingOwnText(vc_813245);
            // StatementAdderMethod cloned existing statement
            q.getElementsContainingOwnText(vc_813245);
            // MethodAssertGenerator build local variable
            Object o_26_0 = els.get(4).absUrl("href");
            org.junit.Assert.fail("testRelativeUrls_cf3125796 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testRelativeUrls */
    @org.junit.Test(timeout = 10000)
    public void testRelativeUrls_cf3125391_failAssert15_literalMutation3126020_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "O*[OY{0%)b$h./[hkT-lj0/estb?xPjr>kL>jx>@C!O9qd%y@`d2*OwBsrZ;4#kh9tcc<c!K2&@R(_8agPc{0sT!vCx?fn! [C=QRQ]&t(t!`dmof8P?(k(A-S9AnVdn{Cb3[tY//-o3VH)aYQ=7tY{Y=W!Ykw584)yUo%PX;&H!8mngn8DLd";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com/bar/");
                org.jsoup.select.Elements els = doc.select("a");
                // MethodAssertGenerator build local variable
                Object o_6_0 = els.get(0).absUrl("href");
                // MethodAssertGenerator build local variable
                Object o_9_0 = els.get(1).absUrl("href");
                // MethodAssertGenerator build local variable
                Object o_12_0 = els.get(2).absUrl("href");
                // MethodAssertGenerator build local variable
                Object o_15_0 = els.get(3).absUrl("href");
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element p = doc.select("p").first();
                // StatementAdderMethod cloned existing statement
                p.getElementById(html);
                // MethodAssertGenerator build local variable
                Object o_24_0 = els.get(4).absUrl("href");
                org.junit.Assert.fail("testRelativeUrls_cf3125391 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testRelativeUrls_cf3125391_failAssert15_literalMutation3126020 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testRelativeUrls */
    @org.junit.Test(timeout = 10000)
    public void testRelativeUrls_cf3125695_failAssert82_literalMutation3126448() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<body><a href=./one.html\'>One</a> <a href=\'two.html\'>two</a> <a href=\'../three.html\'>Three</a> <a href=\'//example2.com/four/\'>Four</a> <a href=\'https://example2.com/five/\'>Five</a>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<body><a href=./one.html\'>One</a> <a href=\'two.html\'>two</a> <a href=\'../three.html\'>Three</a> <a href=\'//example2.com/four/\'>Four</a> <a href=\'https://example2.com/five/\'>Five</a>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com/bar/");
            org.jsoup.select.Elements els = doc.select("a");
            // MethodAssertGenerator build local variable
            Object o_6_0 = els.get(0).absUrl("href");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_6_0, "http://example.com/bar/one.html\'");
            // MethodAssertGenerator build local variable
            Object o_9_0 = els.get(1).absUrl("href");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_9_0, "http://example.com/bar/two.html");
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.get(2).absUrl("href");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, "http://example.com/three.html");
            // MethodAssertGenerator build local variable
            Object o_15_0 = els.get(3).absUrl("href");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_15_0, "http://example2.com/four/");
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_813215 = (java.util.regex.Pattern)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_813215);
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_126865 = "href";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_126865, "href");
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").get(1);
            // StatementAdderMethod cloned existing statement
            p.getElementsByAttributeValueMatching(String_vc_126865, vc_813215);
            // MethodAssertGenerator build local variable
            Object o_28_0 = els.get(4).absUrl("href");
            org.junit.Assert.fail("testRelativeUrls_cf3125695 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testRelativeUrls */
    @org.junit.Test(timeout = 10000)
    public void testRelativeUrls_cf3125863_failAssert12_literalMutation3126002() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String html = "<body><a href=\'./one.html\'>One</a> <a href=\'two.html\'>two</a> <a href=\'../three.html\'>Three</E> <a href=\'//example2.com/four/\'>Four</a> <a href=\'https://example2.com/five/\'>Five</a>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(html, "<body><a href=\'./one.html\'>One</a> <a href=\'two.html\'>two</a> <a href=\'../three.html\'>Three</E> <a href=\'//example2.com/four/\'>Four</a> <a href=\'https://example2.com/five/\'>Five</a>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com/bar/");
            org.jsoup.select.Elements els = doc.select("a");
            // MethodAssertGenerator build local variable
            Object o_6_0 = els.get(0).absUrl("href");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_6_0, "http://example.com/bar/one.html");
            // MethodAssertGenerator build local variable
            Object o_9_0 = els.get(1).absUrl("href");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_9_0, "http://example.com/bar/two.html");
            // MethodAssertGenerator build local variable
            Object o_12_0 = els.get(2).absUrl("href");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_12_0, "http://example.com/three.html");
            // MethodAssertGenerator build local variable
            Object o_15_0 = els.get(3).absUrl("href");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_15_0, "http://example2.com/four/");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_813268 = (org.jsoup.nodes.Element)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_813268);
            // StatementAdderMethod cloned existing statement
            vc_813268.select(html);
            // MethodAssertGenerator build local variable
            Object o_22_0 = els.get(4).absUrl("href");
            org.junit.Assert.fail("testRelativeUrls_cf3125863 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testRelativeUrls */
    @org.junit.Test(timeout = 10000)
    public void testRelativeUrls_cf3125178_failAssert28_literalMutation3126101_failAssert34() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "=>q/$x4VTR`*yqh}^u#xcrB^&^>n.rtM[eDP?zLy+pK}vc|(]oO}/}Ss&ToD)j5hgtOZ3*_,X[o[mr0JV[x4zGZiNCM#skOz88<]CxBg&3__<#h@)Bh|%[W[@)J!q)A7P#s#&#&T!NUATRAP}8-f$1Me&6@D|k1/m@wc5G`lY}2&p!Mvg&+:P";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com/bar/");
                org.jsoup.select.Elements els = doc.select("a");
                // MethodAssertGenerator build local variable
                Object o_6_0 = els.get(0).absUrl("href");
                // MethodAssertGenerator build local variable
                Object o_9_0 = els.get(1).absUrl("href");
                // MethodAssertGenerator build local variable
                Object o_12_0 = els.get(2).absUrl("href");
                // MethodAssertGenerator build local variable
                Object o_15_0 = els.get(3).absUrl("href");
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_813030 = (org.jsoup.nodes.Element)null;
                // StatementAdderMethod cloned existing statement
                vc_813030.elementSiblingIndex();
                // MethodAssertGenerator build local variable
                Object o_22_0 = els.get(4).absUrl("href");
                org.junit.Assert.fail("testRelativeUrls_cf3125178 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testRelativeUrls_cf3125178_failAssert28_literalMutation3126101 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testRelativeUrls */
    @org.junit.Test(timeout = 10000)
    public void testRelativeUrls_cf3125391_failAssert15_literalMutation3126019_cf3197146_failAssert26() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String html = "<body><a href=\'./one.html\'>One</a> <a href=\'two.html\'>two</a> <a href=\'./three.html\'>Three</a> <a href=\'//example2.com/four/\'>Four</a> <a href=\'https://example2.com/five/\'>Five</a>";
                // MethodAssertGenerator build local variable
                Object o_4_0 = html;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(html, "http://example.com/bar/");
                org.jsoup.select.Elements els = doc.select("a");
                // MethodAssertGenerator build local variable
                Object o_6_0 = els.get(0).absUrl("href");
                // MethodAssertGenerator build local variable
                Object o_14_0 = o_6_0;
                // MethodAssertGenerator build local variable
                Object o_9_0 = els.get(1).absUrl("href");
                // MethodAssertGenerator build local variable
                Object o_20_0 = o_9_0;
                // MethodAssertGenerator build local variable
                Object o_12_0 = els.get(2).absUrl("href");
                // MethodAssertGenerator build local variable
                Object o_26_0 = o_12_0;
                // MethodAssertGenerator build local variable
                Object o_15_0 = els.get(3).absUrl("href");
                // MethodAssertGenerator build local variable
                Object o_32_0 = o_15_0;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element p = doc.select("p").first();
                // StatementAdderOnAssert create literal from method
                int int_vc_129867 = 3;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element e7 = els.get(7);
                // StatementAdderMethod cloned existing statement
                e7.getElementsByIndexLessThan(int_vc_129867);
                // MethodAssertGenerator build local variable
                Object o_45_0 = p;
                // StatementAdderMethod cloned existing statement
                p.getElementById(html);
                // MethodAssertGenerator build local variable
                Object o_24_0 = els.get(4).absUrl("href");
                org.junit.Assert.fail("testRelativeUrls_cf3125391 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testRelativeUrls_cf3125391_failAssert15_literalMutation3126019_cf3197146 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetHtml */
    @org.junit.Test(timeout = 10000)
    public void testSetHtml_cf3289372_failAssert68() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.html("<p>there</p><p>now</p>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_858132 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_858130 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_858130.hasClass(vc_858132);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testSetHtml_cf3289372 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetHtml */
    @org.junit.Test(timeout = 10000)
    public void testSetHtml_cf3289552_failAssert38() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.html("<p>there</p><p>now</p>");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_858200 = (org.jsoup.nodes.Node)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            p.appendChild(vc_858200);
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testSetHtml_cf3289552 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetHtml */
    @org.junit.Test(timeout = 10000)
    public void testSetHtml_cf3289912_failAssert58() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.html("<p>there</p><p>now</p>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_858309 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.getElementsByAttribute(vc_858309);
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testSetHtml_cf3289912 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetHtml */
    @org.junit.Test(timeout = 10000)
    public void testSetHtml_cf3289597_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.html("<p>there</p><p>now</p>");
            // StatementAdderOnAssert create random local variable
            boolean vc_858214 = false;
            // StatementAdderOnAssert create null value
            java.lang.String vc_858212 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.attr(vc_858212, vc_858214);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testSetHtml_cf3289597 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetHtml */
    @org.junit.Test(timeout = 10000)
    public void testSetHtml_cf3290201_failAssert54() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.html("<p>there</p><p>now</p>");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderMethod cloned existing statement
            div.select(result);
            // MethodAssertGenerator build local variable
            Object o_12_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testSetHtml_cf3290201 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetHtml */
    @org.junit.Test(timeout = 10000)
    public void testSetHtml_cf3290169_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.html("<p>there</p><p>now</p>");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_858378 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_858378.getElementsMatchingText(result);
            // MethodAssertGenerator build local variable
            Object o_14_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testSetHtml_cf3290169 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetHtml */
    @org.junit.Test(timeout = 10000)
    public void testSetHtml_cf3289667_failAssert51() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.html("<p>there</p><p>now</p>");
            // StatementAdderOnAssert create null value
            java.util.Set<java.lang.String> vc_858232 = (java.util.Set)null;
            // StatementAdderMethod cloned existing statement
            div.classNames(vc_858232);
            // MethodAssertGenerator build local variable
            Object o_10_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testSetHtml_cf3289667 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetHtml */
    @org.junit.Test(timeout = 10000)
    public void testSetHtml_cf3289932_failAssert21() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.html("<p>there</p><p>now</p>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_858313 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").get(1);
            // StatementAdderMethod cloned existing statement
            p.getElementsByAttributeStarting(vc_858313);
            // MethodAssertGenerator build local variable
            Object o_14_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testSetHtml_cf3289932 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetHtml */
    @org.junit.Test(timeout = 10000)
    public void testSetHtml_cf3289808_failAssert70() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            div.html("<p>there</p><p>now</p>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_858279 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element copy = div.clone();
            // StatementAdderMethod cloned existing statement
            copy.removeClass(vc_858279);
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.TextUtil.stripNewlines(div.html());
            org.junit.Assert.fail("testSetHtml_cf3289808 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetHtmlTitle */
    @org.junit.Test(timeout = 10000)
    public void testSetHtmlTitle_cf3291410_failAssert50() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head id=2><title id=1></title></head></html>");
            org.jsoup.nodes.Element title = doc.getElementById("1");
            title.html("good");
            // MethodAssertGenerator build local variable
            Object o_6_0 = title.html();
            title.html("<i>bad</i>");
            // MethodAssertGenerator build local variable
            Object o_9_0 = title.html();
            org.jsoup.nodes.Element head = doc.getElementById("2");
            head.html("<title><i>bad</i></title>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_858528 = (java.lang.String)null;
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_858526 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_858526.html(vc_858528);
            // MethodAssertGenerator build local variable
            Object o_20_0 = head.html();
            org.junit.Assert.fail("testSetHtmlTitle_cf3291410 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetHtmlTitle */
    @org.junit.Test(timeout = 10000)
    public void testSetHtmlTitle_cf3291104_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head id=2><title id=1></title></head></html>");
            org.jsoup.nodes.Element title = doc.getElementById("1");
            title.html("good");
            // MethodAssertGenerator build local variable
            Object o_6_0 = title.html();
            title.html("<i>bad</i>");
            // MethodAssertGenerator build local variable
            Object o_9_0 = title.html();
            org.jsoup.nodes.Element head = doc.getElementById("2");
            head.html("<title><i>bad</i></title>");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_133922 = "<html><head id=2><title id=1></title></head></html>";
            // StatementAdderMethod cloned existing statement
            head.is(String_vc_133922);
            // MethodAssertGenerator build local variable
            Object o_18_0 = head.html();
            org.junit.Assert.fail("testSetHtmlTitle_cf3291104 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetHtmlTitle */
    @org.junit.Test(timeout = 10000)
    public void testSetHtmlTitle_cf3291202_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head id=2><title id=1></title></head></html>");
            org.jsoup.nodes.Element title = doc.getElementById("1");
            title.html("good");
            // MethodAssertGenerator build local variable
            Object o_6_0 = title.html();
            title.html("<i>bad</i>");
            // MethodAssertGenerator build local variable
            Object o_9_0 = title.html();
            org.jsoup.nodes.Element head = doc.getElementById("2");
            head.html("<title><i>bad</i></title>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_858466 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            head.addClass(vc_858466);
            // MethodAssertGenerator build local variable
            Object o_18_0 = head.html();
            org.junit.Assert.fail("testSetHtmlTitle_cf3291202 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetHtmlTitle */
    @org.junit.Test(timeout = 10000)
    public void testSetHtmlTitle_cf3291086_failAssert51() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head id=2><title id=1></title></head></html>");
            org.jsoup.nodes.Element title = doc.getElementById("1");
            title.html("good");
            // MethodAssertGenerator build local variable
            Object o_6_0 = title.html();
            title.html("<i>bad</i>");
            // MethodAssertGenerator build local variable
            Object o_9_0 = title.html();
            org.jsoup.nodes.Element head = doc.getElementById("2");
            head.html("<title><i>bad</i></title>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_858414 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.hasClass(vc_858414);
            // MethodAssertGenerator build local variable
            Object o_22_0 = head.html();
            org.junit.Assert.fail("testSetHtmlTitle_cf3291086 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetHtmlTitle */
    @org.junit.Test(timeout = 10000)
    public void testSetHtmlTitle_cf3291558_failAssert44() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<html><head id=2><title id=1></title></head></html>");
            org.jsoup.nodes.Element title = doc.getElementById("1");
            title.html("good");
            // MethodAssertGenerator build local variable
            Object o_6_0 = title.html();
            title.html("<i>bad</i>");
            // MethodAssertGenerator build local variable
            Object o_9_0 = title.html();
            org.jsoup.nodes.Element head = doc.getElementById("2");
            head.html("<title><i>bad</i></title>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_858573 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            head.toggleClass(vc_858573);
            // MethodAssertGenerator build local variable
            Object o_18_0 = head.html();
            org.junit.Assert.fail("testSetHtmlTitle_cf3291558 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetIndent */
    @org.junit.Test(timeout = 10000)
    public void testSetIndent_cf3293680_failAssert36() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello\nthere</p></div>");
            doc.outputSettings().indentAmount(0);
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_133959 = "<html>\n<head></head>\n<body>\n<div>\n<p>Hello there</p>\n</div>\n</body>\n</html>";
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.is(String_vc_133959);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.html();
            org.junit.Assert.fail("testSetIndent_cf3293680 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetIndent */
    @org.junit.Test(timeout = 10000)
    public void testSetIndent_cf3294011_failAssert21() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello\nthere</p></div>");
            doc.outputSettings().indentAmount(0);
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_858853 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_858853.toggleClass(result);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.html();
            org.junit.Assert.fail("testSetIndent_cf3294011 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetIndent */
    @org.junit.Test(timeout = 10000)
    public void testSetIndent_cf3293664_failAssert57() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello\nthere</p></div>");
            doc.outputSettings().indentAmount(0);
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // StatementAdderMethod cloned existing statement
            div.hasClass(text);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.html();
            org.junit.Assert.fail("testSetIndent_cf3293664 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetIndent */
    @org.junit.Test(timeout = 10000)
    public void testSetIndent_cf3294287_failAssert25() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello\nthere</p></div>");
            doc.outputSettings().indentAmount(0);
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_858955 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element p = doc.select("p").first();
            // StatementAdderMethod cloned existing statement
            p.select(vc_858955);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.html();
            org.junit.Assert.fail("testSetIndent_cf3294287 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetIndent */
    @org.junit.Test(timeout = 10000)
    public void testSetIndent_cf3293999_failAssert33_add3294424() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello\nthere</p></div>");
            doc.outputSettings().indentAmount(0);
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(result, "<html><head></head><body><div><p>Hellothere</p></div></body></html>");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_858849 = (org.jsoup.nodes.Element)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_858849);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_858849.text(result);
            // StatementAdderMethod cloned existing statement
            vc_858849.text(result);
            // MethodAssertGenerator build local variable
            Object o_13_0 = doc.html();
            org.junit.Assert.fail("testSetIndent_cf3293999 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetIndent */
    @org.junit.Test(timeout = 10000)
    public void testSetIndent_cf3293783_failAssert2_add3294348_cf3353256_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello\nthere</p></div>");
                doc.outputSettings().indentAmount(0);
                // StatementAdderOnAssert create null value
                java.lang.String vc_858760 = (java.lang.String)null;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div = doc.select("div").get(0);
                // StatementAdderMethod cloned existing statement
                div.select(vc_858760);
                // MethodAssertGenerator build local variable
                Object o_15_0 = vc_858760;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div2 = doc.select("div").get(1);
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                div2.append(vc_858760);
                // StatementAdderMethod cloned existing statement
                div2.append(vc_858760);
                // MethodAssertGenerator build local variable
                Object o_13_0 = doc.html();
                org.junit.Assert.fail("testSetIndent_cf3293783 should have thrown IndexOutOfBoundsException");
            } catch (java.lang.IndexOutOfBoundsException eee) {
            }
            org.junit.Assert.fail("testSetIndent_cf3293783_failAssert2_add3294348_cf3353256 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetIndent */
    @org.junit.Test(timeout = 10000)
    public void testSetIndent_cf3293728_failAssert67_add3294525_cf3296143_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello\nthere</p></div>");
                doc.outputSettings().indentAmount(0);
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_858732 = (org.jsoup.nodes.Element)null;
                // StatementAddOnAssert local variable replacement
                java.lang.String result = doc.toString().replaceAll("\\s+", "");
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element divC = doc.select("div").get(2);
                // StatementAdderMethod cloned existing statement
                divC.removeClass(result);
                // MethodAssertGenerator build local variable
                Object o_19_0 = vc_858732;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                vc_858732.text();
                // StatementAdderMethod cloned existing statement
                vc_858732.text();
                // MethodAssertGenerator build local variable
                Object o_9_0 = doc.html();
                org.junit.Assert.fail("testSetIndent_cf3293728 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testSetIndent_cf3293728_failAssert67_add3294525_cf3296143 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetIndent */
    @org.junit.Test(timeout = 10000)
    public void testSetIndent_cf3293850_failAssert31_add3294420_cf3346868_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello\nthere</p></div>");
                doc.outputSettings().indentAmount(0);
                // StatementAddOnAssert local variable replacement
                java.lang.String result = doc.toString().replaceAll("\\s+", "");
                // MethodAssertGenerator build local variable
                Object o_11_0 = result;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element table = doc.select("tbody").first();
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element p2 = doc.select("p").get(1);
                // StatementAdderMethod cloned existing statement
                p2.getElementsMatchingText(result);
                // MethodAssertGenerator build local variable
                Object o_23_0 = table;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                table.before(result);
                // StatementAdderMethod cloned existing statement
                table.before(result);
                // MethodAssertGenerator build local variable
                Object o_15_0 = doc.html();
                org.junit.Assert.fail("testSetIndent_cf3293850 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testSetIndent_cf3293850_failAssert31_add3294420_cf3346868 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetText */
    @org.junit.Test(timeout = 10000)
    public void testSetText_cf3404559_failAssert62() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<div id=1>Hello <p>there <b>now</b></p></div>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("p").get(0).text();
            org.jsoup.nodes.Element div = doc.getElementById("1").text("Gone");
            // MethodAssertGenerator build local variable
            Object o_14_0 = div.text();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_888313 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.is(vc_888313);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.select("p").size();
            org.junit.Assert.fail("testSetText_cf3404559 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetText */
    @org.junit.Test(timeout = 10000)
    public void testSetText_cf3405132_failAssert63() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<div id=1>Hello <p>there <b>now</b></p></div>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("p").get(0).text();
            org.jsoup.nodes.Element div = doc.getElementById("1").text("Gone");
            // MethodAssertGenerator build local variable
            Object o_14_0 = div.text();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_888471 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_888471.wrap(result);
            // MethodAssertGenerator build local variable
            Object o_24_0 = doc.select("p").size();
            org.junit.Assert.fail("testSetText_cf3405132 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetText */
    @org.junit.Test(timeout = 10000)
    public void testSetText_cf3405376_failAssert70() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<div id=1>Hello <p>there <b>now</b></p></div>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("p").get(0).text();
            org.jsoup.nodes.Element div = doc.getElementById("1").text("Gone");
            // MethodAssertGenerator build local variable
            Object o_14_0 = div.text();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_888522 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.getElementsByClass(vc_888522);
            // MethodAssertGenerator build local variable
            Object o_24_0 = doc.select("p").size();
            org.junit.Assert.fail("testSetText_cf3405376 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetText */
    @org.junit.Test(timeout = 10000)
    public void testSetText_cf3404582() {
        java.lang.String h = "<div id=1>Hello <p>there <b>now</b></p></div>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("Hello there now", doc.text());// need to sort out node whitespace
        
        org.junit.Assert.assertEquals("there now", doc.select("p").get(0).text());
        org.jsoup.nodes.Element div = doc.getElementById("1").text("Gone");
        org.junit.Assert.assertEquals("Gone", div.text());
        // StatementAdderOnAssert create null value
        org.jsoup.nodes.Node vc_888322 = (org.jsoup.nodes.Node)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_888322);
        // StatementAdderOnAssert create null value
        org.jsoup.nodes.Element vc_888320 = (org.jsoup.nodes.Element)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_888320);
        // AssertGenerator replace invocation
        boolean o_testSetText_cf3404582__20 = // StatementAdderMethod cloned existing statement
vc_888320.preserveWhitespace(vc_888322);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_testSetText_cf3404582__20);
        org.junit.Assert.assertEquals(0, doc.select("p").size());
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetText */
    @org.junit.Test(timeout = 10000)
    public void testSetText_cf3404528_failAssert71() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<div id=1>Hello <p>there <b>now</b></p></div>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("p").get(0).text();
            org.jsoup.nodes.Element div = doc.getElementById("1").text("Gone");
            // MethodAssertGenerator build local variable
            Object o_14_0 = div.text();
            // StatementAddOnAssert local variable replacement
            java.lang.String text = doc.text();
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_888304 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_888304.hasClass(text);
            // MethodAssertGenerator build local variable
            Object o_23_0 = doc.select("p").size();
            org.junit.Assert.fail("testSetText_cf3404528 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetText */
    @org.junit.Test(timeout = 10000)
    public void testSetText_cf3404947() {
        java.lang.String h = "<div id=1>Hello <p>there <b>now</b></p></div>";
        org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
        org.junit.Assert.assertEquals("Hello there now", doc.text());// need to sort out node whitespace
        
        org.junit.Assert.assertEquals("there now", doc.select("p").get(0).text());
        org.jsoup.nodes.Element div = doc.getElementById("1").text("Gone");
        org.junit.Assert.assertEquals("Gone", div.text());
        // AssertGenerator replace invocation
        org.jsoup.nodes.Element o_testSetText_cf3404947__16 = // StatementAdderMethod cloned existing statement
div.lastElementSibling();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(o_testSetText_cf3404947__16);
        org.junit.Assert.assertEquals(0, doc.select("p").size());
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetText */
    @org.junit.Test(timeout = 10000)
    public void testSetText_cf3405531_failAssert51() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<div id=1>Hello <p>there <b>now</b></p></div>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("p").get(0).text();
            org.jsoup.nodes.Element div = doc.getElementById("1").text("Gone");
            // MethodAssertGenerator build local variable
            Object o_14_0 = div.text();
            // StatementAdderOnAssert create null value
            java.lang.String vc_888564 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.select(vc_888564);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.select("p").size();
            org.junit.Assert.fail("testSetText_cf3405531 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetText */
    @org.junit.Test(timeout = 10000)
    public void testSetText_cf3404947_cf3409052_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<div id=1>Hello <p>there <b>now</b></p></div>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("p").get(0).text();
            org.jsoup.nodes.Element div = doc.getElementById("1").text("Gone");
            // MethodAssertGenerator build local variable
            Object o_14_0 = div.text();
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testSetText_cf3404947__16 = // StatementAdderMethod cloned existing statement
div.lastElementSibling();
            // MethodAssertGenerator build local variable
            Object o_18_0 = o_testSetText_cf3404947__16;
            // StatementAdderMethod cloned existing statement
            div.is(h);
            // MethodAssertGenerator build local variable
            Object o_22_0 = doc.select("p").size();
            org.junit.Assert.fail("testSetText_cf3404947_cf3409052 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetText */
    @org.junit.Test(timeout = 10000)
    public void testSetText_cf3405431_failAssert66_literalMutation3410522() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<div id=1>Hello <p>there <bf>now</b></p></div>";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(h, "<div id=1>Hello <p>there <bf>now</b></p></div>");
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.text();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_4_0, "Hello there now");
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("p").get(0).text();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_7_0, "there now");
            org.jsoup.nodes.Element div = doc.getElementById("1").text("Gone");
            // MethodAssertGenerator build local variable
            Object o_14_0 = div.text();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_14_0, "Gone");
            // StatementAdderOnAssert create null value
            java.lang.String vc_888538 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_888538);
            // StatementAdderMethod cloned existing statement
            div.getElementsContainingOwnText(vc_888538);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.select("p").size();
            org.junit.Assert.fail("testSetText_cf3405431 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetText */
    @org.junit.Test(timeout = 10000)
    public void testSetText_cf3404896_cf3407936_failAssert62() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<div id=1>Hello <p>there <b>now</b></p></div>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("p").get(0).text();
            org.jsoup.nodes.Element div = doc.getElementById("1").text("Gone");
            // MethodAssertGenerator build local variable
            Object o_14_0 = div.text();
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testSetText_cf3404896__16 = // StatementAdderMethod cloned existing statement
div.getElementById(h);
            // MethodAssertGenerator build local variable
            Object o_18_0 = o_testSetText_cf3404896__16;
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_889159 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            div.is(vc_889159);
            // MethodAssertGenerator build local variable
            Object o_24_0 = doc.select("p").size();
            org.junit.Assert.fail("testSetText_cf3404896_cf3407936 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetText */
    @org.junit.Test(timeout = 10000)
    public void testSetText_cf3404947_cf3409907_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<div id=1>Hello <p>there <b>now</b></p></div>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("p").get(0).text();
            org.jsoup.nodes.Element div = doc.getElementById("1").text("Gone");
            // MethodAssertGenerator build local variable
            Object o_14_0 = div.text();
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testSetText_cf3404947__16 = // StatementAdderMethod cloned existing statement
div.lastElementSibling();
            // MethodAssertGenerator build local variable
            Object o_18_0 = o_testSetText_cf3404947__16;
            // StatementAdderOnAssert create null value
            java.lang.String vc_889662 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.getElementsByTag(vc_889662);
            // MethodAssertGenerator build local variable
            Object o_24_0 = doc.select("p").size();
            org.junit.Assert.fail("testSetText_cf3404947_cf3409907 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetText */
    @org.junit.Test(timeout = 10000)
    public void testSetText_cf3404896_cf3408908_failAssert68() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.lang.String h = "<div id=1>Hello <p>there <b>now</b></p></div>";
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
            // MethodAssertGenerator build local variable
            Object o_4_0 = doc.text();
            // MethodAssertGenerator build local variable
            Object o_7_0 = doc.select("p").get(0).text();
            org.jsoup.nodes.Element div = doc.getElementById("1").text("Gone");
            // MethodAssertGenerator build local variable
            Object o_14_0 = div.text();
            // AssertGenerator replace invocation
            org.jsoup.nodes.Element o_testSetText_cf3404896__16 = // StatementAdderMethod cloned existing statement
div.getElementById(h);
            // MethodAssertGenerator build local variable
            Object o_18_0 = o_testSetText_cf3404896__16;
            // StatementAdderOnAssert create null value
            java.lang.String vc_889410 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            div.select(vc_889410);
            // MethodAssertGenerator build local variable
            Object o_24_0 = doc.select("p").size();
            org.junit.Assert.fail("testSetText_cf3404896_cf3408908 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetText */
    @org.junit.Test(timeout = 10000)
    public void testSetText_cf3404896_cf3408417_failAssert53_literalMutation3426548_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String h = "Wo[{R[`%#R7-l|c*wd:cd|o(WQ(LMU<v%d?Wwj&cjf;Ql";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                // MethodAssertGenerator build local variable
                Object o_4_0 = doc.text();
                // MethodAssertGenerator build local variable
                Object o_7_0 = doc.select("p").get(0).text();
                org.jsoup.nodes.Element div = doc.getElementById("1").text("Gone");
                // MethodAssertGenerator build local variable
                Object o_14_0 = div.text();
                // AssertGenerator replace invocation
                org.jsoup.nodes.Element o_testSetText_cf3404896__16 = // StatementAdderMethod cloned existing statement
div.getElementById(h);
                // MethodAssertGenerator build local variable
                Object o_18_0 = o_testSetText_cf3404896__16;
                // StatementAdderOnAssert create null value
                java.lang.String vc_889299 = (java.lang.String)null;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element p1 = doc.select("p").first();
                // StatementAdderMethod cloned existing statement
                p1.removeClass(vc_889299);
                // MethodAssertGenerator build local variable
                Object o_28_0 = doc.select("p").size();
                org.junit.Assert.fail("testSetText_cf3404896_cf3408417 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testSetText_cf3404896_cf3408417_failAssert53_literalMutation3426548 should have thrown IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testSetText */
    @org.junit.Test(timeout = 10000)
    public void testSetText_cf3405009_failAssert12_literalMutation3410189_cf3413079_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                java.lang.String h = "<div id=1>Hello <p>there <b>now</b></p></div>";
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse(h);
                // MethodAssertGenerator build local variable
                Object o_4_0 = doc.text();
                // MethodAssertGenerator build local variable
                Object o_9_0 = o_4_0;
                // MethodAssertGenerator build local variable
                Object o_7_0 = doc.select("p").get(0).text();
                // MethodAssertGenerator build local variable
                Object o_16_0 = o_7_0;
                org.jsoup.nodes.Element div = doc.getElementById("1").text("Gone");
                // MethodAssertGenerator build local variable
                Object o_14_0 = div.text();
                // MethodAssertGenerator build local variable
                Object o_24_0 = o_14_0;
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_138596 = "Dbs&";
                // MethodAssertGenerator build local variable
                Object o_28_0 = String_vc_138596;
                // StatementAdderOnAssert create null value
                org.jsoup.nodes.Element vc_888445 = (org.jsoup.nodes.Element)null;
                // StatementAdderOnAssert create null value
                java.lang.String vc_890332 = (java.lang.String)null;
                // StatementAdderMethod cloned existing statement
                div.addClass(vc_890332);
                // MethodAssertGenerator build local variable
                Object o_36_0 = vc_888445;
                // StatementAdderMethod cloned existing statement
                vc_888445.prependText(String_vc_138596);
                // MethodAssertGenerator build local variable
                Object o_22_0 = doc.select("p").size();
                org.junit.Assert.fail("testSetText_cf3405009 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testSetText_cf3405009_failAssert12_literalMutation3410189_cf3413079 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testTagNameSet */
    @org.junit.Test(timeout = 10000)
    public void testTagNameSet_cf3426689_failAssert47() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><i>Hello</i>");
            doc.select("i").first().tagName("em");
            // MethodAssertGenerator build local variable
            Object o_6_0 = doc.select("i").size();
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.select("em").size();
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_139416 = "div";
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_893662 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_893662.hasClass(String_vc_139416);
            // MethodAssertGenerator build local variable
            Object o_18_0 = doc.select("div").first().html();
            org.junit.Assert.fail("testTagNameSet_cf3426689 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testTagNameSet */
    @org.junit.Test(timeout = 10000)
    public void testTagNameSet_cf3427312_failAssert67() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><i>Hello</i>");
            doc.select("i").first().tagName("em");
            // MethodAssertGenerator build local variable
            Object o_6_0 = doc.select("i").size();
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.select("em").size();
            // StatementAdderOnAssert create null value
            java.lang.String vc_893922 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.select(vc_893922);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.select("div").first().html();
            org.junit.Assert.fail("testTagNameSet_cf3427312 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testTagNameSet */
    @org.junit.Test(timeout = 10000)
    public void testTagNameSet_cf3427084_failAssert71() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><i>Hello</i>");
            doc.select("i").first().tagName("em");
            // MethodAssertGenerator build local variable
            Object o_6_0 = doc.select("i").size();
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.select("em").size();
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_893839 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_893839.getElementsByAttribute(result);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.select("div").first().html();
            org.junit.Assert.fail("testTagNameSet_cf3427084 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testTagNameSet */
    @org.junit.Test(timeout = 10000)
    public void testTagNameSet_cf3427315_failAssert78() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><i>Hello</i>");
            doc.select("i").first().tagName("em");
            // MethodAssertGenerator build local variable
            Object o_6_0 = doc.select("i").size();
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.select("em").size();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_893923 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.select(vc_893923);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.select("div").first().html();
            org.junit.Assert.fail("testTagNameSet_cf3427315 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testTagNameSet */
    @org.junit.Test(timeout = 10000)
    public void testTagNameSet_cf3427288_failAssert89_add3427603() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><i>Hello</i>");
            doc.select("i").first().tagName("em");
            // MethodAssertGenerator build local variable
            Object o_6_0 = doc.select("i").size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_6_0, 0);
            // MethodAssertGenerator build local variable
            Object o_9_0 = doc.select("em").size();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_9_0, 1);
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(result, "<html><head></head><body><div><em>Hello</em></div></body></html>");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_893910 = (org.jsoup.nodes.Element)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_893910);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_893910.getElementsMatchingText(result);
            // StatementAdderMethod cloned existing statement
            vc_893910.getElementsMatchingText(result);
            // MethodAssertGenerator build local variable
            Object o_20_0 = doc.select("div").first().html();
            org.junit.Assert.fail("testTagNameSet_cf3427288 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testTagNameSet */
    @org.junit.Test(timeout = 10000)
    public void testTagNameSet_cf3426855_failAssert17_add3427413_cf3439119_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                // MethodAssertGenerator build local variable
                Object o_18_1 = 1;
                // MethodAssertGenerator build local variable
                Object o_12_1 = 0;
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><i>Hello</i>");
                doc.select("i").first().tagName("em");
                // MethodAssertGenerator build local variable
                Object o_6_0 = doc.select("i").size();
                // MethodAssertGenerator build local variable
                Object o_12_0 = o_6_0;
                // MethodAssertGenerator build local variable
                Object o_9_0 = doc.select("em").size();
                // MethodAssertGenerator build local variable
                Object o_18_0 = o_9_0;
                // StatementAdderOnAssert create random local variable
                boolean vc_893746 = false;
                // MethodAssertGenerator build local variable
                Object o_22_0 = vc_893746;
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_139423 = "div";
                // MethodAssertGenerator build local variable
                Object o_26_0 = String_vc_139423;
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element div = doc.getElementById("1");
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_896995 = new java.lang.String();
                // StatementAddOnAssert local variable replacement
                org.jsoup.nodes.Element body = doc.appendElement("body");
                // StatementAdderMethod cloned existing statement
                body.getElementsByTag(vc_896995);
                // MethodAssertGenerator build local variable
                Object o_38_0 = div;
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                div.attr(String_vc_139423, vc_893746);
                // StatementAdderMethod cloned existing statement
                div.attr(String_vc_139423, vc_893746);
                // MethodAssertGenerator build local variable
                Object o_21_0 = doc.select("div").first().html();
                org.junit.Assert.fail("testTagNameSet_cf3426855 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("testTagNameSet_cf3426855_failAssert17_add3427413_cf3439119 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testThrowsOnAddNullText */
    @org.junit.Test(timeout = 10000)
    public void testThrowsOnAddNullText_add3555370_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // MethodCallAdder
            div.appendText(null);
            div.appendText(null);
            org.junit.Assert.fail("testThrowsOnAddNullText_add3555370 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testThrowsOnPrependNullText */
    @org.junit.Test(timeout = 10000)
    public void testThrowsOnPrependNullText_add3555379_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div id=1><p>Hello</p></div>");
            org.jsoup.nodes.Element div = doc.getElementById("1");
            // MethodCallAdder
            div.prependText(null);
            div.prependText(null);
            org.junit.Assert.fail("testThrowsOnPrependNullText_add3555379 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrap */
    @org.junit.Test(timeout = 10000)
    public void testWrap_cf3555585_failAssert27() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.jsoup.nodes.Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_928136 = (org.jsoup.nodes.Node)null;
            // StatementAdderMethod cloned existing statement
            p.appendChild(vc_928136);
            org.junit.Assert.fail("testWrap_cf3555585 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrap */
    @org.junit.Test(timeout = 10000)
    public void testWrap_cf3556114_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.jsoup.nodes.Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_928284 = new java.lang.String();
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.getElementsByClass(vc_928284);
            org.junit.Assert.fail("testWrap_cf3556114 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrap */
    @org.junit.Test(timeout = 10000)
    public void testWrap_cf3555875_failAssert53() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.jsoup.nodes.Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // StatementAdderOnAssert create null value
            java.lang.String vc_928223 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.text(vc_928223);
            org.junit.Assert.fail("testWrap_cf3555875 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrap */
    @org.junit.Test(timeout = 10000)
    public void testWrap_cf3555415_failAssert37() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.jsoup.nodes.Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // StatementAdderOnAssert create null value
            java.lang.String vc_928068 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.hasClass(vc_928068);
            org.junit.Assert.fail("testWrap_cf3555415 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrap */
    @org.junit.Test(timeout = 10000)
    public void testWrap_cf3556197_failAssert48() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.jsoup.nodes.Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_928312 = (java.util.regex.Pattern)null;
            // StatementAdderMethod cloned existing statement
            ret.getElementsMatchingOwnText(vc_928312);
            org.junit.Assert.fail("testWrap_cf3556197 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrap */
    @org.junit.Test(timeout = 10000)
    public void testWrap_cf3555727_failAssert46() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.jsoup.nodes.Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // StatementAdderOnAssert create null value
            java.lang.String vc_928178 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            ret.getElementById(vc_928178);
            org.junit.Assert.fail("testWrap_cf3555727 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrap */
    @org.junit.Test(timeout = 10000)
    public void testWrap_cf3555891_failAssert34() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.jsoup.nodes.Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // StatementAdderOnAssert create null value
            java.lang.String vc_928227 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // StatementAdderMethod cloned existing statement
            div2.toggleClass(vc_928227);
            org.junit.Assert.fail("testWrap_cf3555891 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrap */
    @org.junit.Test(timeout = 10000)
    public void testWrap_cf3556227_failAssert41() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.jsoup.nodes.Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_928322 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_928322.parents();
            org.junit.Assert.fail("testWrap_cf3556227 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrap */
    @org.junit.Test(timeout = 10000)
    public void testWrap_cf3555702_failAssert59() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.jsoup.nodes.Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // StatementAdderOnAssert create null value
            java.util.Set<java.lang.String> vc_928168 = (java.util.Set)null;
            // StatementAdderMethod cloned existing statement
            p.classNames(vc_928168);
            org.junit.Assert.fail("testWrap_cf3555702 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrap */
    @org.junit.Test(timeout = 10000)
    public void testWrap_cf3555640_failAssert62() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.jsoup.nodes.Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // StatementAdderOnAssert create random local variable
            boolean vc_928150 = true;
            // StatementAdderOnAssert create null value
            java.lang.String vc_928148 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div = doc.select("div").first();
            // StatementAdderMethod cloned existing statement
            div.attr(vc_928148, vc_928150);
            org.junit.Assert.fail("testWrap_cf3555640 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrap */
    @org.junit.Test(timeout = 10000)
    public void testWrap_cf3556237_failAssert36() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div>");
            // MethodAssertGenerator build local variable
            Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.jsoup.nodes.Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
            // MethodAssertGenerator build local variable
            Object o_13_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_144833 = "<div><div class=foo></div><p>What?</p></div>";
            // StatementAdderMethod cloned existing statement
            ret.select(String_vc_144833);
            org.junit.Assert.fail("testWrap_cf3556237 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrap */
    @org.junit.Test(timeout = 10000)
    public void testWrap_cf3556237_failAssert36_literalMutation3556375_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p><p>There</p></div>");
                org.jsoup.nodes.Element p = doc.select("p").first();
                p.wrap("<div class='head'></div>");
                // MethodAssertGenerator build local variable
                Object o_7_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.jsoup.nodes.Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
                // MethodAssertGenerator build local variable
                Object o_13_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_144833 = "";
                // StatementAdderMethod cloned existing statement
                ret.select(String_vc_144833);
                org.junit.Assert.fail("testWrap_cf3556237 should have thrown SelectorParseException");
            } catch (org.jsoup.select.Selector.SelectorParseException eee) {
            }
            org.junit.Assert.fail("testWrap_cf3556237_failAssert36_literalMutation3556375 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrapWithRemainder */
    @org.junit.Test(timeout = 10000)
    public void testWrapWithRemainder_cf3556638_failAssert78() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div><p>There!</p>");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Node vc_928418 = (org.jsoup.nodes.Node)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div2 = doc.select("div").get(1);
            // StatementAdderMethod cloned existing statement
            div2.appendChild(vc_928418);
            // MethodAssertGenerator build local variable
            Object o_15_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testWrapWithRemainder_cf3556638 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrapWithRemainder */
    @org.junit.Test(timeout = 10000)
    public void testWrapWithRemainder_cf3557286_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div><p>There!</p>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_928608 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.select(vc_928608);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testWrapWithRemainder_cf3557286 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrapWithRemainder */
    @org.junit.Test(timeout = 10000)
    public void testWrapWithRemainder_cf3557272_failAssert11() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div><p>There!</p>");
            // StatementAdderOnAssert create null value
            java.util.regex.Pattern vc_928602 = (java.util.regex.Pattern)null;
            // StatementAdderMethod cloned existing statement
            p.getElementsMatchingText(vc_928602);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testWrapWithRemainder_cf3557272 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrapWithRemainder */
    @org.junit.Test(timeout = 10000)
    public void testWrapWithRemainder_cf3556998_failAssert35() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div><p>There!</p>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_928527 = (java.lang.String)null;
            // StatementAdderMethod cloned existing statement
            p.getElementsByAttribute(vc_928527);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testWrapWithRemainder_cf3556998 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrapWithRemainder */
    @org.junit.Test(timeout = 10000)
    public void testWrapWithRemainder_cf3556485_failAssert70() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div><p>There!</p>");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_928357 = new java.lang.String();
            // StatementAdderMethod cloned existing statement
            p.is(vc_928357);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testWrapWithRemainder_cf3556485 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrapWithRemainder */
    @org.junit.Test(timeout = 10000)
    public void testWrapWithRemainder_cf3556753_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div><p>There!</p>");
            // StatementAdderOnAssert create null value
            java.util.Set<java.lang.String> vc_928450 = (java.util.Set)null;
            // StatementAdderMethod cloned existing statement
            p.classNames(vc_928450);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testWrapWithRemainder_cf3556753 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrapWithRemainder */
    @org.junit.Test(timeout = 10000)
    public void testWrapWithRemainder_cf3556887_failAssert19() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div><p>There!</p>");
            // StatementAddOnAssert local variable replacement
            java.lang.String result = doc.toString().replaceAll("\\s+", "");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_928495 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_928495.removeClass(result);
            // MethodAssertGenerator build local variable
            Object o_15_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testWrapWithRemainder_cf3556887 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrapWithRemainder */
    @org.junit.Test(timeout = 10000)
    public void testWrapWithRemainder_cf3556474_failAssert74() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div><p>There!</p>");
            // StatementAdderOnAssert create null value
            org.jsoup.nodes.Element vc_928352 = (org.jsoup.nodes.Element)null;
            // StatementAdderMethod cloned existing statement
            vc_928352.hasText();
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testWrapWithRemainder_cf3556474 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrapWithRemainder */
    @org.junit.Test(timeout = 10000)
    public void testWrapWithRemainder_cf3557288_failAssert26() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div><p>There!</p>");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_144870 = "<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>";
            // StatementAdderMethod cloned existing statement
            p.select(String_vc_144870);
            // MethodAssertGenerator build local variable
            Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testWrapWithRemainder_cf3557288 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrapWithRemainder */
    @org.junit.Test(timeout = 10000)
    public void testWrapWithRemainder_cf3556486_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p></div>");
            org.jsoup.nodes.Element p = doc.select("p").first();
            p.wrap("<div class='head'></div><p>There!</p>");
            // StatementAdderOnAssert create null value
            java.lang.String vc_928356 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            org.jsoup.nodes.Element div1 = doc.select("div").get(0);
            // StatementAdderMethod cloned existing statement
            div1.is(vc_928356);
            // MethodAssertGenerator build local variable
            Object o_15_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
            org.junit.Assert.fail("testWrapWithRemainder_cf3556486 should have thrown SelectorParseException");
        } catch (org.jsoup.select.Selector.SelectorParseException eee) {
        }
    }

    /* amplification of org.jsoup.nodes.ElementTest#testWrapWithRemainder */
    @org.junit.Test(timeout = 10000)
    public void testWrapWithRemainder_cf3557288_failAssert26_literalMutation3557383_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                org.jsoup.nodes.Document doc = org.jsoup.Jsoup.parse("<div><p>Hello</p></div>");
                org.jsoup.nodes.Element p = doc.select("p").first();
                p.wrap("<div class='head'></div><p>There!</p>");
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_144870 = "";
                // StatementAdderMethod cloned existing statement
                p.select(String_vc_144870);
                // MethodAssertGenerator build local variable
                Object o_11_0 = org.jsoup.TextUtil.stripNewlines(doc.body().html());
                org.junit.Assert.fail("testWrapWithRemainder_cf3557288 should have thrown SelectorParseException");
            } catch (org.jsoup.select.Selector.SelectorParseException eee) {
            }
            org.junit.Assert.fail("testWrapWithRemainder_cf3557288_failAssert26_literalMutation3557383 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }
}

