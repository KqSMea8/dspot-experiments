

package org.jsoup.parser;


/**
 * Test suite for character reader.
 *
 * @author Jonathan Hedley, jonathan@hedley.net
 */
public class AmplCharacterReaderTest {
    @org.junit.Test
    public void nextIndexOfChar() {
        java.lang.String in = "blah blah";
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        org.junit.Assert.assertEquals((-1), r.nextIndexOf('x'));
        org.junit.Assert.assertEquals(3, r.nextIndexOf('h'));
        java.lang.String pull = r.consumeTo('h');
        org.junit.Assert.assertEquals("bla", pull);
        r.consume();
        org.junit.Assert.assertEquals(2, r.nextIndexOf('l'));
        org.junit.Assert.assertEquals(" blah", r.consumeToEnd());
        org.junit.Assert.assertEquals((-1), r.nextIndexOf('x'));
    }

    @org.junit.Test
    public void nextIndexOfString() {
        java.lang.String in = "One Two something Two Three Four";
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        org.junit.Assert.assertEquals((-1), r.nextIndexOf("Foo"));
        org.junit.Assert.assertEquals(4, r.nextIndexOf("Two"));
        org.junit.Assert.assertEquals("One Two ", r.consumeTo("something"));
        org.junit.Assert.assertEquals(10, r.nextIndexOf("Two"));
        org.junit.Assert.assertEquals("something Two Three Four", r.consumeToEnd());
        org.junit.Assert.assertEquals((-1), r.nextIndexOf("Two"));
    }

    @org.junit.Test
    public void nextIndexOfUnmatched() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<[[one]]");
        org.junit.Assert.assertEquals((-1), r.nextIndexOf("]]>"));
    }

    @org.junit.Test(timeout = 10000)
    public void consumeToEnd() {
        java.lang.String in = "one two three";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
        java.lang.String String_11 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_11);
        java.lang.String String_12 = toEnd;
        r.isEmpty();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_12);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
    }

    @org.junit.Test(timeout = 10000)
    public void consumeLetterSequence() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence__3 = r.consumeLetterSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_consumeLetterSequence__3);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence__4 = r.consumeTo("bar;");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &", o_consumeLetterSequence__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence__5 = r.consumeLetterSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeLetterSequence__5);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence__6 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("; qux", o_consumeLetterSequence__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeLetterSequence__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &", o_consumeLetterSequence__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_consumeLetterSequence__3);
    }

    @org.junit.Test(timeout = 10000)
    public void containsIgnoreCase() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One TWO three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase__3 = r.containsIgnoreCase("two");
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase__4 = r.containsIgnoreCase("three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase__5 = r.containsIgnoreCase("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase__3);
    }

    @org.junit.Test(timeout = 10000)
    public void consumeToChar() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar__3 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToChar__3);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar__4 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToChar__4);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToChar__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar__5)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar__6 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToChar__6);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToChar__7 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar__8 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hree", o_consumeToChar__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToChar__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToChar__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToChar__3);
    }

    @org.junit.Test(timeout = 10000)
    public void cachesStrings() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE\tA string that is longer than 16 chars");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.String one = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", one);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings__5)));
        java.lang.String two = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", two);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings__8 = r.consume();
        java.lang.String three = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", three);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings__11 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings__11)));
        java.lang.String four = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE", four);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings__14 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings__14)));
        java.lang.String five = r.consumeTo('\t');
        java.lang.String String_0 = one;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_0);
        java.lang.String String_1 = two;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_1);
        java.lang.String String_2 = three;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_2);
        java.lang.String String_3 = four;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE", String_3);
        boolean boolean_4 = one == two;
        boolean boolean_5 = two == three;
        boolean boolean_6 = three != four;
        boolean boolean_7 = four != five;
        java.lang.String String_8 = five;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("A string that is longer than 16 chars", String_8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", three);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE", four);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", one);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE", String_3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_2);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_1);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", two);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("A string that is longer than 16 chars", five);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings__14)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(61, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings__11)));
    }

    @org.junit.Test(timeout = 10000)
    public void matches() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches__3 = r.matches('O');
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches__4 = r.matches("One Two Three");
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches__5 = r.matches("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches__6 = r.matches("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches__6);
        // AssertGenerator create local variable with return value of invocation
        char o_matches__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matches__7)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches__8 = r.matches("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches__8);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches__9 = r.matches("ne Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches__10 = r.matches("ne Two Three Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches__10);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches__11 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches__11);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches__12 = r.matches("ne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches__12);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matches__7)));
    }

    @org.junit.Test(timeout = 10000)
    public void consume() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        int o_consume__3 = r.pos();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (o_consume__3)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume__4 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_consume__4)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_consume__5)));
        // AssertGenerator create local variable with return value of invocation
        int o_consume__6 = r.pos();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume__6)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume__7 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_consume__7)));
        // AssertGenerator create local variable with return value of invocation
        int o_consume__8 = r.pos();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume__8)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume__9 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_consume__9)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume__10 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_consume__10)));
        r.isEmpty();
        char char_9 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_consume__13 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume__13)));
        r.isEmpty();
        char char_10 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_consume__16 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume__16)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (o_consume__3)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_consume__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_consume__10)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume__13)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(5, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_consume__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_consume__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_consume__9)));
    }

    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase__3 = r.matchesIgnoreCase("O");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase__4 = r.matchesIgnoreCase("o");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase__5 = r.matches('O');
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase__6 = r.matches('o');
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase__6);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase__7 = r.matchesIgnoreCase("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase__7);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase__8 = r.matchesIgnoreCase("ONE two THREE");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase__8);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase__9 = r.matchesIgnoreCase("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase__10 = r.matchesIgnoreCase("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase__10);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase__11 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matchesIgnoreCase__11)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase__12 = r.matchesIgnoreCase("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase__12);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase__13 = r.matchesIgnoreCase("NE Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase__13);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase__14 = r.matchesIgnoreCase("ne Two Three Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase__14);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase__15 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase__15);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase__16 = r.matchesIgnoreCase("ne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase__16);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase__15);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase__14);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase__13);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase__12);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matchesIgnoreCase__11)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase__7);
    }

    @org.junit.Test(timeout = 10000)
    public void advance() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_advance__3 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_advance__3)));
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_advance__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_advance__3)));
    }

    @org.junit.Test(timeout = 10000)
    public void consumeToString() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Two Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString__3 = r.consumeTo("Two");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToString__3);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToString__4 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString__4)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString__5 = r.consumeTo("Two");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToString__5);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToString__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString__6)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString__7 = r.consumeTo("Qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo Four", o_consumeToString__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(16, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToString__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToString__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString__6)));
    }

    @org.junit.Test(timeout = 10000)
    public void consumeToAny() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny__4 = r.matches('&');
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny__5 = r.matches("&bar;");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny__5);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny__6 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny__7 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny__7);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(';', ((char) (o_consumeToAny__8)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny__9 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('&', ((char) (o_consumeToAny__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(';', ((char) (o_consumeToAny__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    @org.junit.Test(timeout = 10000)
    public void rangeEquals() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals__3 = r.rangeEquals(0, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals__4 = r.rangeEquals(0, 5, "CHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals__5 = r.rangeEquals(0, 5, "Chec");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals__6 = r.rangeEquals(6, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals__6);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals__7 = r.rangeEquals(6, 5, "Chuck");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals__7);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals__8 = r.rangeEquals(12, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals__8);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals__9 = r.rangeEquals(12, 5, "Cheeky");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals__10 = r.rangeEquals(18, 5, "CHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals__10);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals__11 = r.rangeEquals(18, 5, "CHIKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals__7);
    }

    @org.junit.Test(timeout = 10000)
    public void unconsume() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume__3 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume__3)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume__4 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume__4)));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume__6 = r.current();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume__7)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume__8)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume__9 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume__9)));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume__13 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume__13)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume__14 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume__14)));
        r.isEmpty();
        char char_14 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume__17 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume__17)));
        r.unconsume();
        r.isEmpty();
        char char_15 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume__21 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume__21)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume__3)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume__9)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume__13)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume__14)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume__17)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume__7)));
    }

    @org.junit.Test(timeout = 10000)
    public void matchesAny() {
        char[] scan = new char[]{ ' ' , '\n' , '\t' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny__4 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny__5 = r.consumeToAny(scan);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny__6 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesAny__6);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\n', ((char) (o_matchesAny__7)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny__8 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(4, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\n', ((char) (o_matchesAny__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesAny__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny__5);
    }

    @org.junit.Test(timeout = 10000)
    public void mark() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_mark__3 = r.consume();
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_mark__5)));
        // AssertGenerator create local variable with return value of invocation
        char o_mark__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_mark__6)));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark__9 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_mark__9)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_mark__3)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_mark__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_mark__5)));
    }

    @org.junit.Test(timeout = 10000)
    public void consumeLetterThenDigitSequence() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One12 Two &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence__3 = r.consumeLetterThenDigitSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One12", o_consumeLetterThenDigitSequence__3);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeLetterThenDigitSequence__4 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (o_consumeLetterThenDigitSequence__4)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence__5 = r.consumeLetterThenDigitSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two", o_consumeLetterThenDigitSequence__5);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence__6 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &bar; qux", o_consumeLetterThenDigitSequence__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(19, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (o_consumeLetterThenDigitSequence__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One12", o_consumeLetterThenDigitSequence__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two", o_consumeLetterThenDigitSequence__5);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    @org.junit.Test(timeout = 10000)
    public void advance_sd13() {
        char[] __DSPOT_chars_1 = new char[]{ ',' , 'y' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd13__4 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_advance_sd13__4)));
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd13__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_advance_sd13__6)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_sd13__7 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_1);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Three", o_advance_sd13__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_advance_sd13__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_advance_sd13__6)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    @org.junit.Test(timeout = 10000)
    public void advance_literalMutationString2() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_literalMutationString2__3 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_advance_literalMutationString2__3)));
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_literalMutationString2__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_advance_literalMutationString2__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_advance_literalMutationString2__3)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    @org.junit.Test(timeout = 10000)
    public void advance_sd8() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd8__3 = r.consume();
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd8__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_advance_sd8__5)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_sd8__6 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Three", o_advance_sd8__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_advance_sd8__3)));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_advance_sd8__5)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    @org.junit.Test(timeout = 10000)
    public void advance_literalMutationString3() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_literalMutationString3__3 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (o_advance_literalMutationString3__3)));
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_literalMutationString3__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('p', ((char) (o_advance_literalMutationString3__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('a', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (o_advance_literalMutationString3__3)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    @org.junit.Test(timeout = 10000)
    public void advance_sd10() {
        char __DSPOT_c_0 = 'H';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd10__4 = r.consume();
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd10__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_advance_sd10__6)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_sd10__7 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Three", o_advance_sd10__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_advance_sd10__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_advance_sd10__4)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd13 */
    @org.junit.Test(timeout = 10000)
    public void advance_sd13_literalMutationString224() {
        char[] __DSPOT_chars_1 = new char[]{ ',' , 'y' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_1637 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1638 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1639 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd13__4 = r.consume();
        java.lang.Character Character_1640 = ((char) (o_advance_sd13__4));
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd13__6 = r.consume();
        java.lang.Character Character_1641 = ((char) (o_advance_sd13__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_sd13__7 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_1);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_advance_sd13__7);
        java.lang.String String_1642 = o_advance_sd13__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_1642);
        java.lang.Character Character_1643 = ((char) (o_advance_sd13__4));
        java.lang.Boolean Boolean_1644 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1645 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1646 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_1647 = ((char) (o_advance_sd13__6));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_1642);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_advance_sd13__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_literalMutationString6 */
    @org.junit.Test(timeout = 10000)
    public void advance_literalMutationString6_sd122() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Tree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_611 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_612 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_613 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_literalMutationString6__3 = r.consume();
        java.lang.Character Character_614 = ((char) (o_advance_literalMutationString6__3));
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_literalMutationString6__5 = r.consume();
        java.lang.Character Character_615 = ((char) (o_advance_literalMutationString6__5));
        java.lang.Character Character_616 = ((char) (o_advance_literalMutationString6__3));
        java.lang.Boolean Boolean_617 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_618 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_619 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_literalMutationString6_sd122__19 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Tree", o_advance_literalMutationString6_sd122__19);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd10 */
    @org.junit.Test(timeout = 10000)
    public void advance_sd10_literalMutationString175() {
        char __DSPOT_c_0 = 'H';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_1122 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1123 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1124 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd10__4 = r.consume();
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd10__6 = r.consume();
        java.lang.Character Character_1125 = ((char) (o_advance_sd10__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_sd10__7 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>", o_advance_sd10__7);
        java.lang.String String_1126 = o_advance_sd10__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>", String_1126);
        java.lang.Character Character_1127 = ((char) (o_advance_sd10__6));
        java.lang.Boolean Boolean_1128 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1129 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1130 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_1131 = ((char) (o_advance_sd10__4));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>", String_1126);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('H', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(6, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>", o_advance_sd10__7);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd12 */
    @org.junit.Test(timeout = 10000)
    public void advance_sd12_literalMutationString199() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_1362 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1363 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1364 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd12__3 = r.consume();
        java.lang.Character Character_1365 = ((char) (o_advance_sd12__3));
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd12__5 = r.consume();
        java.lang.Character Character_1366 = ((char) (o_advance_sd12__5));
        // AssertGenerator create local variable with return value of invocation
        int o_advance_sd12__6 = // StatementAdd: add invocation of a method
        r.pos();
        java.lang.Integer Integer_1367 = ((int) (o_advance_sd12__6));
        java.lang.Boolean Boolean_1368 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1369 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1370 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_1371 = ((char) (o_advance_sd12__3));
        java.lang.Character Character_1372 = ((char) (o_advance_sd12__5));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd13 */
    @org.junit.Test(timeout = 10000)
    public void advance_sd13_literalMutationString229() {
        char[] __DSPOT_chars_1 = new char[]{ ',' , 'y' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("z5*yC=M]:bMoV");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('z', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_1692 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1693 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1694 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd13__4 = r.consume();
        java.lang.Character Character_1695 = ((char) (o_advance_sd13__4));
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd13__6 = r.consume();
        java.lang.Character Character_1696 = ((char) (o_advance_sd13__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_sd13__7 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_1);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_advance_sd13__7);
        java.lang.String String_1697 = o_advance_sd13__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_1697);
        java.lang.Character Character_1698 = ((char) (o_advance_sd13__4));
        java.lang.Boolean Boolean_1699 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1700 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1701 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_1702 = ((char) (o_advance_sd13__6));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_1697);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_advance_sd13__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('y', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_literalMutationString3 */
    @org.junit.Test(timeout = 10000)
    public void advance_literalMutationString3_sd88() {
        char[] __DSPOT_chars_7 = new char[]{ 'g' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_318 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_319 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_320 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_literalMutationString3__3 = r.consume();
        java.lang.Character Character_321 = ((char) (o_advance_literalMutationString3__3));
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_literalMutationString3__5 = r.consume();
        java.lang.Character Character_322 = ((char) (o_advance_literalMutationString3__5));
        java.lang.Boolean Boolean_323 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_324 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_325 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_326 = ((char) (o_advance_literalMutationString3__3));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_literalMutationString3_sd88__20 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", o_advance_literalMutationString3_sd88__20);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd11 */
    @org.junit.Test(timeout = 10000)
    public void advance_sd11_sd195() {
        char __DSPOT_c_22 = 'Y';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_1322 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1323 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1324 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd11__3 = r.consume();
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd11__5 = r.consume();
        java.lang.Character Character_1325 = ((char) (o_advance_sd11__5));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd11__6 = // StatementAdd: add invocation of a method
        r.current();
        java.lang.Character Character_1326 = ((char) (o_advance_sd11__6));
        java.lang.Boolean Boolean_1327 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1328 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1329 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_1330 = ((char) (o_advance_sd11__3));
        java.lang.Character Character_1331 = ((char) (o_advance_sd11__5));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_sd11_sd195__25 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_22);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Three", o_advance_sd11_sd195__25);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd13 */
    @org.junit.Test(timeout = 10000)
    public void advance_sd13_literalMutationChar213() {
        char[] __DSPOT_chars_1 = new char[]{ ' ' , 'y' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_1516 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1517 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1518 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd13__4 = r.consume();
        java.lang.Character Character_1519 = ((char) (o_advance_sd13__4));
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd13__6 = r.consume();
        java.lang.Character Character_1520 = ((char) (o_advance_sd13__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_sd13__7 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_1);
        java.lang.String String_1521 = o_advance_sd13__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_1521);
        java.lang.Character Character_1522 = ((char) (o_advance_sd13__4));
        java.lang.Boolean Boolean_1523 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1524 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1525 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_1526 = ((char) (o_advance_sd13__6));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_1521);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_advance_sd13__7);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd10 */
    @org.junit.Test(timeout = 10000)
    public void advance_sd10_literalMutationString174_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            char __DSPOT_c_0 = 'H';
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            java.lang.Boolean Boolean_1112 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_1113 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_1114 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            // AssertGenerator create local variable with return value of invocation
            char o_advance_sd10__4 = r.consume();
            r.advance();
            // AssertGenerator create local variable with return value of invocation
            char o_advance_sd10__6 = r.consume();
            java.lang.Character Character_1115 = ((char) (o_advance_sd10__6));
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_advance_sd10__7 = // StatementAdd: add invocation of a method
            r.consumeTo(__DSPOT_c_0);
            java.lang.String String_1116 = o_advance_sd10__7;
            java.lang.Character Character_1117 = ((char) (o_advance_sd10__6));
            java.lang.Boolean Boolean_1118 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_1119 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_1120 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.Character Character_1121 = ((char) (o_advance_sd10__4));
            org.junit.Assert.fail("advance_sd10_literalMutationString174 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd10 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd10_sd181 */
    @org.junit.Test(timeout = 10000)
    public void advance_sd10_sd181_sd2616() {
        char __DSPOT_c_276 = 'n';
        char __DSPOT_c_0 = 'H';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_3237 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_3238 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_3239 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_1182 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1183 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1184 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd10__4 = r.consume();
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd10__6 = r.consume();
        java.lang.Character Character_1185 = ((char) (o_advance_sd10__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_sd10__7 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_0);
        java.lang.String String_3240 = o_advance_sd10__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Three", String_3240);
        java.lang.String String_1186 = o_advance_sd10__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Three", String_1186);
        java.lang.Character Character_1187 = ((char) (o_advance_sd10__6));
        java.lang.Boolean Boolean_1188 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1189 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1190 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_1191 = ((char) (o_advance_sd10__4));
        // StatementAdd: add invocation of a method
        r.isEmpty();
        java.lang.String String_3241 = String_1186;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Three", String_3241);
        java.lang.String String_3242 = o_advance_sd10__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Three", String_3242);
        java.lang.Boolean Boolean_3243 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_3244 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_3245 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_sd10_sd181_sd2616__37 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_276);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_advance_sd10_sd181_sd2616__37);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Three", String_3241);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Three", String_1186);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Three", String_3242);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Three", o_advance_sd10__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Three", String_3240);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_literalMutationString5 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_literalMutationString5_sd112 */
    @org.junit.Test(timeout = 10000)
    public void advance_literalMutationString5_sd112_sd1562() {
        char __DSPOT_c_142 = '@';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("GdhscbCS@!x*z");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('G', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_2914 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_2915 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_2916 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_524 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_525 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_526 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_literalMutationString5__3 = r.consume();
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_literalMutationString5__5 = r.consume();
        java.lang.Character Character_527 = ((char) (o_advance_literalMutationString5__5));
        java.lang.Character Character_528 = ((char) (o_advance_literalMutationString5__3));
        java.lang.Boolean Boolean_529 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_530 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_531 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_literalMutationString5_sd112__18 = // StatementAdd: add invocation of a method
        r.current();
        java.lang.Character Character_2917 = ((char) (o_advance_literalMutationString5_sd112__18));
        java.lang.Boolean Boolean_2918 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_2919 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_2920 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_literalMutationString5_sd112_sd1562__30 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_142);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("scbCS", o_advance_literalMutationString5_sd112_sd1562__30);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('@', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(8, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd13 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd13_literalMutationString229 */
    @org.junit.Test(timeout = 10000)
    public void advance_sd13_literalMutationString229_literalMutationString3519() {
        char[] __DSPOT_chars_1 = new char[]{ ',' , 'y' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("v5*yC=M]:bMoV");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('v', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_3258 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_3259 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_3260 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_1692 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1693 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1694 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd13__4 = r.consume();
        java.lang.Character Character_1695 = ((char) (o_advance_sd13__4));
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd13__6 = r.consume();
        java.lang.Character Character_1696 = ((char) (o_advance_sd13__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_sd13__7 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_1);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_advance_sd13__7);
        java.lang.String String_3261 = o_advance_sd13__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_3261);
        java.lang.String String_1697 = o_advance_sd13__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_1697);
        java.lang.String String_3262 = String_1697;
        java.lang.Character Character_1698 = ((char) (o_advance_sd13__4));
        java.lang.Boolean Boolean_1699 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1700 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1701 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_1702 = ((char) (o_advance_sd13__6));
        java.lang.String String_3263 = String_1697;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_3263);
        java.lang.String String_3264 = o_advance_sd13__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_3264);
        java.lang.Boolean Boolean_3265 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_3266 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_3267 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_3263);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_1697);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('y', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_3261);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_3262);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_3264);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_advance_sd13__7);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd12 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd12_literalMutationString204 */
    @org.junit.Test(timeout = 10000)
    public void advance_sd12_literalMutationString204_sd2971() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Thr>ee");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_1965 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1966 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1967 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_1417 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1418 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1419 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd12__3 = r.consume();
        java.lang.Character Character_1420 = ((char) (o_advance_sd12__3));
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd12__5 = r.consume();
        java.lang.Character Character_1421 = ((char) (o_advance_sd12__5));
        // AssertGenerator create local variable with return value of invocation
        int o_advance_sd12__6 = // StatementAdd: add invocation of a method
        r.pos();
        java.lang.Integer Integer_1422 = ((int) (o_advance_sd12__6));
        java.lang.Boolean Boolean_1423 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1424 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1425 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_1426 = ((char) (o_advance_sd12__3));
        java.lang.Character Character_1427 = ((char) (o_advance_sd12__5));
        java.lang.Boolean Boolean_1968 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1969 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1970 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_sd12_literalMutationString204_sd2971__31 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Thr>ee", o_advance_sd12_literalMutationString204_sd2971__31);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd7 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd7_literalMutationString128 */
    @org.junit.Test(timeout = 10000)
    public void advance_sd7_literalMutationString128_sd1803() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_3165 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_3166 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_3167 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_665 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_666 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_667 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd7__3 = r.consume();
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd7__5 = r.consume();
        java.lang.Character Character_668 = ((char) (o_advance_sd7__5));
        // StatementAdd: add invocation of a method
        r.advance();
        java.lang.Character Character_669 = ((char) (o_advance_sd7__3));
        java.lang.Character Character_670 = ((char) (o_advance_sd7__5));
        java.lang.Boolean Boolean_671 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_672 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_673 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_3168 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_3169 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_3170 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(5, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd9 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd9_sd166 */
    @org.junit.Test(timeout = 10000)
    public void advance_sd9_sd166_literalMutationString2342() {
        char[] __DSPOT_chars_19 = new char[]{ 'a' , '<' , '}' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_2475 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_2476 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_2477 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_1032 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1033 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1034 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd9__3 = r.consume();
        java.lang.Character Character_1035 = ((char) (o_advance_sd9__3));
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd9__5 = r.consume();
        java.lang.Character Character_1036 = ((char) (o_advance_sd9__5));
        // StatementAdd: add invocation of a method
        r.isEmpty();
        java.lang.Boolean Boolean_1037 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1038 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1039 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_1040 = ((char) (o_advance_sd9__3));
        java.lang.Character Character_1041 = ((char) (o_advance_sd9__5));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_sd9_sd166__23 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_19);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_advance_sd9_sd166__23);
        java.lang.String String_2478 = o_advance_sd9_sd166__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_2478);
        java.lang.Boolean Boolean_2479 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_2480 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_2481 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_2478);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_advance_sd9_sd166__23);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('a', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd11 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd11_sd198 */
    @org.junit.Test(timeout = 10000)
    public void advance_sd11_sd198_literalMutationChar2868() {
        char[] __DSPOT_chars_23 = new char[]{ ')' , 'd' , 'M' , '7' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_3268 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_3269 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_3270 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_1352 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1353 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1354 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd11__3 = r.consume();
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd11__5 = r.consume();
        java.lang.Character Character_1355 = ((char) (o_advance_sd11__5));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd11__6 = // StatementAdd: add invocation of a method
        r.current();
        java.lang.Character Character_1356 = ((char) (o_advance_sd11__6));
        java.lang.Boolean Boolean_1357 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1358 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1359 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_1360 = ((char) (o_advance_sd11__3));
        java.lang.Character Character_1361 = ((char) (o_advance_sd11__5));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_sd11_sd198__25 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_23);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Three", o_advance_sd11_sd198__25);
        java.lang.String String_3271 = o_advance_sd11_sd198__25;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Three", String_3271);
        java.lang.Boolean Boolean_3272 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_3273 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_3274 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Three", String_3271);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Three", o_advance_sd11_sd198__25);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd13 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd13_sd232 */
    @org.junit.Test(timeout = 10000)
    public void advance_sd13_sd232_literalMutationString3589() {
        char[] __DSPOT_chars_1 = new char[]{ ',' , 'y' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_3094 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_3095 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_3096 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_1725 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1726 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1727 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd13__4 = r.consume();
        java.lang.Character Character_1728 = ((char) (o_advance_sd13__4));
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd13__6 = r.consume();
        java.lang.Character Character_1729 = ((char) (o_advance_sd13__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_sd13__7 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_1);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_advance_sd13__7);
        java.lang.String String_1730 = o_advance_sd13__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_1730);
        java.lang.String String_3097 = String_1730;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_3097);
        java.lang.Character Character_1731 = ((char) (o_advance_sd13__4));
        java.lang.Boolean Boolean_1732 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1733 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1734 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_1735 = ((char) (o_advance_sd13__6));
        // StatementAdd: add invocation of a method
        r.isEmpty();
        java.lang.Boolean Boolean_3098 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_3099 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_3100 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_3101 = String_1730;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_3101);
        java.lang.String String_3102 = o_advance_sd13__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_3102);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_1730);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_advance_sd13__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_3097);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_3101);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd10 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_sd10_literalMutationChar167 */
    @org.junit.Test(timeout = 10000)
    public void advance_sd10_literalMutationChar167_literalMutationString2364() {
        char __DSPOT_c_0 = ' ';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Thlee");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_2394 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_2395 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_2396 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_1042 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1043 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1044 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd10__4 = r.consume();
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_sd10__6 = r.consume();
        java.lang.Character Character_1045 = ((char) (o_advance_sd10__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_sd10__7 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_0);
        java.lang.String String_2397 = o_advance_sd10__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Thlee", String_2397);
        java.lang.String String_1046 = o_advance_sd10__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Thlee", String_1046);
        java.lang.String String_2398 = String_1046;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Thlee", String_2398);
        java.lang.Character Character_1047 = ((char) (o_advance_sd10__6));
        java.lang.Boolean Boolean_1048 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_1049 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_1050 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_1051 = ((char) (o_advance_sd10__4));
        java.lang.Boolean Boolean_2399 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_2400 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_2401 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_2402 = o_advance_sd10__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Thlee", String_2402);
        java.lang.String String_2403 = String_1046;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Thlee", String_2403);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Thlee", String_2398);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Thlee", String_2402);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Thlee", o_advance_sd10__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Thlee", String_1046);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" Two Thlee", String_2397);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#advance */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_literalMutationString3 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#advance_literalMutationString3_sd85 */
    @org.junit.Test(timeout = 10000)
    public void advance_literalMutationString3_sd85_sd1190() {
        char __DSPOT_c_6 = 'c';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_3065 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_3066 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_3067 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_291 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_292 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_293 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_advance_literalMutationString3__3 = r.consume();
        java.lang.Character Character_294 = ((char) (o_advance_literalMutationString3__3));
        r.advance();
        // AssertGenerator create local variable with return value of invocation
        char o_advance_literalMutationString3__5 = r.consume();
        java.lang.Character Character_295 = ((char) (o_advance_literalMutationString3__5));
        java.lang.Boolean Boolean_296 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_297 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_298 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_299 = ((char) (o_advance_literalMutationString3__3));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_advance_literalMutationString3_sd85__20 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", o_advance_literalMutationString3_sd85__20);
        java.lang.String String_3068 = o_advance_literalMutationString3_sd85__20;
        java.lang.Boolean Boolean_3069 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_3070 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_3071 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", String_3068);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", o_advance_literalMutationString3_sd85__20);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(53, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#cachesStrings */
    @org.junit.Test(timeout = 10000)
    public void cachesStrings_literalMutationChar4387_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE\tA string that is longer than 16 chars");
            java.lang.String one = r.consumeTo('\t');
            r.consume();
            java.lang.String two = r.consumeTo(' ');
            r.consume();
            java.lang.String three = r.consumeTo('\t');
            r.consume();
            java.lang.String four = r.consumeTo('\t');
            r.consume();
            java.lang.String five = r.consumeTo('\t');
            java.lang.String String_3452 = one;
            java.lang.String String_3453 = two;
            java.lang.String String_3454 = three;
            java.lang.String String_3455 = four;
            boolean boolean_3456 = one == two;
            boolean boolean_3457 = two == three;
            boolean boolean_3458 = three != four;
            boolean boolean_3459 = four != five;
            java.lang.String String_3460 = five;
            org.junit.Assert.fail("cachesStrings_literalMutationChar4387 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#cachesStrings */
    @org.junit.Test(timeout = 10000)
    public void cachesStrings_literalMutationString4375_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            java.lang.String one = r.consumeTo('\t');
            r.consume();
            java.lang.String two = r.consumeTo('\t');
            r.consume();
            java.lang.String three = r.consumeTo('\t');
            r.consume();
            java.lang.String four = r.consumeTo('\t');
            r.consume();
            java.lang.String five = r.consumeTo('\t');
            java.lang.String String_3353 = one;
            java.lang.String String_3354 = two;
            java.lang.String String_3355 = three;
            java.lang.String String_3356 = four;
            boolean boolean_3357 = one == two;
            boolean boolean_3358 = two == three;
            boolean boolean_3359 = three != four;
            boolean boolean_3360 = four != five;
            java.lang.String String_3361 = five;
            org.junit.Assert.fail("cachesStrings_literalMutationString4375 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#cachesStrings */
    @org.junit.Test(timeout = 10000)
    public void cachesStrings_literalMutationChar4388_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE\tA string that is longer than 16 chars");
            java.lang.String one = r.consumeTo('\t');
            r.consume();
            java.lang.String two = r.consumeTo(' ');
            r.consume();
            java.lang.String three = r.consumeTo('\t');
            r.consume();
            java.lang.String four = r.consumeTo('\t');
            r.consume();
            java.lang.String five = r.consumeTo('\t');
            java.lang.String String_3461 = one;
            java.lang.String String_3462 = two;
            java.lang.String String_3463 = three;
            java.lang.String String_3464 = four;
            boolean boolean_3465 = one == two;
            boolean boolean_3466 = two == three;
            boolean boolean_3467 = three != four;
            boolean boolean_3468 = four != five;
            java.lang.String String_3469 = five;
            org.junit.Assert.fail("cachesStrings_literalMutationChar4388 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#cachesStrings */
    @org.junit.Test(timeout = 10000)
    public void cachesStrings_sd4417() {
        char[] __DSPOT_chars_397 = new char[]{ ')' , 'd' , 'Y' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE\tA string that is longer than 16 chars");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.String one = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", one);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings_sd4417__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4417__6)));
        java.lang.String two = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", two);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings_sd4417__9 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4417__9)));
        java.lang.String three = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", three);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings_sd4417__12 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4417__12)));
        java.lang.String four = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE", four);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings_sd4417__15 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4417__15)));
        java.lang.String five = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("A string that is longer than 16 chars", five);
        java.lang.String String_3686 = one;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3686);
        java.lang.String String_3687 = two;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3687);
        java.lang.String String_3688 = three;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3688);
        java.lang.String String_3689 = four;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE", String_3689);
        boolean boolean_3690 = one == two;
        boolean boolean_3691 = two == three;
        boolean boolean_3692 = three != four;
        boolean boolean_3693 = four != five;
        java.lang.String String_3694 = five;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("A string that is longer than 16 chars", String_3694);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_cachesStrings_sd4417__27 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_397);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_cachesStrings_sd4417__27);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4417__15)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", three);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE", String_3689);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4417__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("A string that is longer than 16 chars", String_3694);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4417__12)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3686);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3688);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", one);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(61, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE", four);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", two);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("A string that is longer than 16 chars", five);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3687);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4417__9)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#cachesStrings */
    @org.junit.Test(timeout = 10000)
    public void cachesStrings_sd4411() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE\tA string that is longer than 16 chars");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.String one = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", one);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings_sd4411__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4411__5)));
        java.lang.String two = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", two);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings_sd4411__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4411__8)));
        java.lang.String three = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", three);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings_sd4411__11 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4411__11)));
        java.lang.String four = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE", four);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings_sd4411__14 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4411__14)));
        java.lang.String five = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("A string that is longer than 16 chars", five);
        java.lang.String String_3632 = one;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3632);
        java.lang.String String_3633 = two;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3633);
        java.lang.String String_3634 = three;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3634);
        java.lang.String String_3635 = four;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE", String_3635);
        boolean boolean_3636 = one == two;
        boolean boolean_3637 = two == three;
        boolean boolean_3638 = three != four;
        boolean boolean_3639 = four != five;
        java.lang.String String_3640 = five;
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3633);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4411__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(62, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", one);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", two);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4411__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE", String_3635);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", three);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3632);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3634);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("A string that is longer than 16 chars", String_3640);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("A string that is longer than 16 chars", five);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4411__11)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4411__14)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE", four);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#cachesStrings */
    @org.junit.Test(timeout = 10000)
    public void cachesStrings_literalMutationChar4400() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE\tA string that is longer than 16 chars");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.String one = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", one);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings_literalMutationChar4400__5 = r.consume();
        java.lang.String two = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", two);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings_literalMutationChar4400__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_literalMutationChar4400__8)));
        java.lang.String three = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", three);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings_literalMutationChar4400__11 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_literalMutationChar4400__11)));
        java.lang.String four = r.consumeTo(' ');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE\tA", four);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings_literalMutationChar4400__14 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (o_cachesStrings_literalMutationChar4400__14)));
        java.lang.String five = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("string that is longer than 16 chars", five);
        java.lang.String String_3551 = one;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3551);
        java.lang.String String_3552 = two;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3552);
        java.lang.String String_3553 = three;
        java.lang.String String_3554 = four;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE\tA", String_3554);
        boolean boolean_3555 = one == two;
        boolean boolean_3556 = two == three;
        boolean boolean_3557 = three != four;
        boolean boolean_3558 = four != five;
        java.lang.String String_3559 = five;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("string that is longer than 16 chars", String_3559);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3551);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("string that is longer than 16 chars", five);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3552);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3553);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_literalMutationChar4400__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", one);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(61, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_literalMutationChar4400__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE\tA", String_3554);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (o_cachesStrings_literalMutationChar4400__14)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", two);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE\tA", four);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", three);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_literalMutationChar4400__11)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#cachesStrings */
    @org.junit.Test(timeout = 10000)
    public void cachesStrings_sd4412() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE\tA string that is longer than 16 chars");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.String one = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", one);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings_sd4412__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4412__5)));
        java.lang.String two = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", two);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings_sd4412__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4412__8)));
        java.lang.String three = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", three);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings_sd4412__11 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4412__11)));
        java.lang.String four = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE", four);
        // AssertGenerator create local variable with return value of invocation
        char o_cachesStrings_sd4412__14 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4412__14)));
        java.lang.String five = r.consumeTo('\t');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("A string that is longer than 16 chars", five);
        java.lang.String String_3641 = one;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3641);
        java.lang.String String_3642 = two;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3642);
        java.lang.String String_3643 = three;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3643);
        java.lang.String String_3644 = four;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE", String_3644);
        boolean boolean_3645 = one == two;
        boolean boolean_3646 = two == three;
        boolean boolean_3647 = three != four;
        boolean boolean_3648 = four != five;
        java.lang.String String_3649 = five;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("A string that is longer than 16 chars", String_3649);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_cachesStrings_sd4412__26 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_cachesStrings_sd4412__26);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3643);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4412__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE", four);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("A string that is longer than 16 chars", String_3649);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(61, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", one);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3642);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4412__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4412__11)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", two);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", String_3641);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("A string that is longer than 16 chars", five);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\t', ((char) (o_cachesStrings_sd4412__14)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CHOKE", String_3644);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check", three);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#cachesStrings */
    @org.junit.Test(timeout = 10000)
    public void cachesStrings_literalMutationString4377_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("| IN8 CihQSC<[>#j:%:_<cBEu#P/,w[il`jzs}>*e:K5_SF>=Hd[v*m?bWX!");
            java.lang.String one = r.consumeTo('\t');
            r.consume();
            java.lang.String two = r.consumeTo('\t');
            r.consume();
            java.lang.String three = r.consumeTo('\t');
            r.consume();
            java.lang.String four = r.consumeTo('\t');
            r.consume();
            java.lang.String five = r.consumeTo('\t');
            java.lang.String String_3371 = one;
            java.lang.String String_3372 = two;
            java.lang.String String_3373 = three;
            java.lang.String String_3374 = four;
            boolean boolean_3375 = one == two;
            boolean boolean_3376 = two == three;
            boolean boolean_3377 = three != four;
            boolean boolean_3378 = four != five;
            java.lang.String String_3379 = five;
            org.junit.Assert.fail("cachesStrings_literalMutationString4377 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consume */
    @org.junit.Test(timeout = 10000)
    public void consume_sd16101_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            char __DSPOT_c_874 = 'e';
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
            r.pos();
            r.current();
            r.consume();
            r.pos();
            r.current();
            r.pos();
            r.consume();
            r.consume();
            r.isEmpty();
            char char_9240 = org.jsoup.parser.CharacterReader.EOF;
            r.consume();
            r.isEmpty();
            char char_9241 = org.jsoup.parser.CharacterReader.EOF;
            r.consume();
            // StatementAdd: add invocation of a method
            r.consumeTo(__DSPOT_c_874);
            org.junit.Assert.fail("consume_sd16101 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consume */
    @org.junit.Test(timeout = 10000)
    public void consume_sd16098() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        int o_consume_sd16098__3 = r.pos();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (o_consume_sd16098__3)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_sd16098__4 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_consume_sd16098__4)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_sd16098__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_consume_sd16098__5)));
        // AssertGenerator create local variable with return value of invocation
        int o_consume_sd16098__6 = r.pos();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume_sd16098__6)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_sd16098__7 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_consume_sd16098__7)));
        // AssertGenerator create local variable with return value of invocation
        int o_consume_sd16098__8 = r.pos();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume_sd16098__8)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_sd16098__9 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_consume_sd16098__9)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_sd16098__10 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_consume_sd16098__10)));
        r.isEmpty();
        char char_9234 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_consume_sd16098__13 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_sd16098__13)));
        r.isEmpty();
        char char_9235 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_consume_sd16098__16 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_sd16098__16)));
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume_sd16098__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_consume_sd16098__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_sd16098__13)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(6, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_consume_sd16098__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (o_consume_sd16098__3)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_consume_sd16098__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_sd16098__16)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume_sd16098__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_consume_sd16098__9)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_consume_sd16098__10)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consume */
    @org.junit.Test(timeout = 10000)
    public void consume_literalMutationString16092() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        int o_consume_literalMutationString16092__3 = r.pos();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (o_consume_literalMutationString16092__3)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_literalMutationString16092__4 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_literalMutationString16092__4)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_literalMutationString16092__5 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        int o_consume_literalMutationString16092__6 = r.pos();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume_literalMutationString16092__6)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_literalMutationString16092__7 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_literalMutationString16092__7)));
        // AssertGenerator create local variable with return value of invocation
        int o_consume_literalMutationString16092__8 = r.pos();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume_literalMutationString16092__8)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_literalMutationString16092__9 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_literalMutationString16092__9)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_literalMutationString16092__10 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_literalMutationString16092__10)));
        r.isEmpty();
        char char_9222 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_consume_literalMutationString16092__13 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_literalMutationString16092__13)));
        r.isEmpty();
        char char_9223 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_consume_literalMutationString16092__16 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_literalMutationString16092__16)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume_literalMutationString16092__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_literalMutationString16092__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_literalMutationString16092__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_literalMutationString16092__9)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume_literalMutationString16092__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_literalMutationString16092__10)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (o_consume_literalMutationString16092__3)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(5, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_literalMutationString16092__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_literalMutationString16092__13)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consume */
    @org.junit.Test(timeout = 10000)
    public void consume_sd16099_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
            r.pos();
            r.current();
            r.consume();
            r.pos();
            r.current();
            r.pos();
            r.consume();
            r.consume();
            r.isEmpty();
            char char_9236 = org.jsoup.parser.CharacterReader.EOF;
            r.consume();
            r.isEmpty();
            char char_9237 = org.jsoup.parser.CharacterReader.EOF;
            r.consume();
            // StatementAdd: add invocation of a method
            r.toString();
            org.junit.Assert.fail("consume_sd16099 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consume */
    @org.junit.Test(timeout = 10000)
    public void consume_literalMutationString16095() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("oe");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        int o_consume_literalMutationString16095__3 = r.pos();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (o_consume_literalMutationString16095__3)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_literalMutationString16095__4 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_consume_literalMutationString16095__4)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_literalMutationString16095__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_consume_literalMutationString16095__5)));
        // AssertGenerator create local variable with return value of invocation
        int o_consume_literalMutationString16095__6 = r.pos();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume_literalMutationString16095__6)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_literalMutationString16095__7 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_consume_literalMutationString16095__7)));
        // AssertGenerator create local variable with return value of invocation
        int o_consume_literalMutationString16095__8 = r.pos();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume_literalMutationString16095__8)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_literalMutationString16095__9 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_consume_literalMutationString16095__9)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_literalMutationString16095__10 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_literalMutationString16095__10)));
        r.isEmpty();
        char char_9228 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_consume_literalMutationString16095__13 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_literalMutationString16095__13)));
        r.isEmpty();
        char char_9229 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_consume_literalMutationString16095__16 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_literalMutationString16095__16)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_consume_literalMutationString16095__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_consume_literalMutationString16095__9)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (o_consume_literalMutationString16095__3)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume_literalMutationString16095__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_consume_literalMutationString16095__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume_literalMutationString16095__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_consume_literalMutationString16095__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_literalMutationString16095__13)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(5, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_literalMutationString16095__10)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consume */
    @org.junit.Test(timeout = 10000)
    public void consume_sd16104() {
        char[] __DSPOT_chars_875 = new char[]{ '`' , 'i' , '#' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        int o_consume_sd16104__4 = r.pos();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (o_consume_sd16104__4)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_sd16104__5 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_consume_sd16104__5)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_sd16104__6 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        int o_consume_sd16104__7 = r.pos();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume_sd16104__7)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_sd16104__8 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_consume_sd16104__8)));
        // AssertGenerator create local variable with return value of invocation
        int o_consume_sd16104__9 = r.pos();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume_sd16104__9)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_sd16104__10 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_consume_sd16104__10)));
        // AssertGenerator create local variable with return value of invocation
        char o_consume_sd16104__11 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_consume_sd16104__11)));
        r.isEmpty();
        char char_9246 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_consume_sd16104__14 = r.consume();
        r.isEmpty();
        char char_9247 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_consume_sd16104__17 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_sd16104__17)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consume_sd16104__18 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_875);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consume_sd16104__18);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_consume_sd16104__10)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_consume_sd16104__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(5, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume_sd16104__9)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_consume_sd16104__11)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_sd16104__14)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_consume_sd16104__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (o_consume_sd16104__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (o_consume_sd16104__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consume_sd16104__17)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_consume_sd16104__5)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeLetterSequence */
    @org.junit.Test(timeout = 10000)
    public void consumeLetterSequence_literalMutationString20658_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
            r.consumeLetterSequence();
            r.consumeTo("");
            r.consumeLetterSequence();
            r.consumeToEnd();
            org.junit.Assert.fail("consumeLetterSequence_literalMutationString20658 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeLetterSequence */
    @org.junit.Test(timeout = 10000)
    public void consumeLetterSequence_sd20670() {
        char[] __DSPOT_chars_1277 = new char[]{ 'i' , 'o' , '+' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20670__4 = r.consumeLetterSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_consumeLetterSequence_sd20670__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20670__5 = r.consumeTo("bar;");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &", o_consumeLetterSequence_sd20670__5);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20670__6 = r.consumeLetterSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeLetterSequence_sd20670__6);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20670__7 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("; qux", o_consumeLetterSequence_sd20670__7);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20670__8 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_1277);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterSequence_sd20670__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeLetterSequence_sd20670__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("; qux", o_consumeLetterSequence_sd20670__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &", o_consumeLetterSequence_sd20670__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_consumeLetterSequence_sd20670__4);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeLetterSequence */
    @org.junit.Test(timeout = 10000)
    public void consumeLetterSequence_literalMutationString20653() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20653__3 = r.consumeLetterSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterSequence_literalMutationString20653__3);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20653__4 = r.consumeTo("bar;");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", o_consumeLetterSequence_literalMutationString20653__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20653__5 = r.consumeLetterSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterSequence_literalMutationString20653__5);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20653__6 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterSequence_literalMutationString20653__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterSequence_literalMutationString20653__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterSequence_literalMutationString20653__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", o_consumeLetterSequence_literalMutationString20653__4);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeLetterSequence */
    @org.junit.Test(timeout = 10000)
    public void consumeLetterSequence_literalMutationString20663() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20663__3 = r.consumeLetterSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_consumeLetterSequence_literalMutationString20663__3);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20663__4 = r.consumeTo("|a-.");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &bar; qux", o_consumeLetterSequence_literalMutationString20663__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20663__5 = r.consumeLetterSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterSequence_literalMutationString20663__5);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20663__6 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterSequence_literalMutationString20663__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &bar; qux", o_consumeLetterSequence_literalMutationString20663__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_consumeLetterSequence_literalMutationString20663__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterSequence_literalMutationString20663__5);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeLetterSequence */
    @org.junit.Test(timeout = 10000)
    public void consumeLetterSequence_sd20665() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20665__3 = r.consumeLetterSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_consumeLetterSequence_sd20665__3);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20665__4 = r.consumeTo("bar;");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &", o_consumeLetterSequence_sd20665__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20665__5 = r.consumeLetterSequence();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20665__6 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("; qux", o_consumeLetterSequence_sd20665__6);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20665__7 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterSequence_sd20665__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("; qux", o_consumeLetterSequence_sd20665__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_consumeLetterSequence_sd20665__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeLetterSequence_sd20665__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &", o_consumeLetterSequence_sd20665__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeLetterSequence */
    @org.junit.Test(timeout = 10000)
    public void consumeLetterSequence_sd20664() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20664__3 = r.consumeLetterSequence();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20664__4 = r.consumeTo("bar;");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &", o_consumeLetterSequence_sd20664__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20664__5 = r.consumeLetterSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeLetterSequence_sd20664__5);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20664__6 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("; qux", o_consumeLetterSequence_sd20664__6);
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeLetterSequence_sd20664__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("; qux", o_consumeLetterSequence_sd20664__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_consumeLetterSequence_sd20664__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &", o_consumeLetterSequence_sd20664__4);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeLetterSequence */
    @org.junit.Test(timeout = 10000)
    public void consumeLetterSequence_literalMutationString20662() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20662__3 = r.consumeLetterSequence();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20662__4 = r.consumeTo("br;");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &bar; qux", o_consumeLetterSequence_literalMutationString20662__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20662__5 = r.consumeLetterSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterSequence_literalMutationString20662__5);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20662__6 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterSequence_literalMutationString20662__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &bar; qux", o_consumeLetterSequence_literalMutationString20662__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterSequence_literalMutationString20662__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_consumeLetterSequence_literalMutationString20662__3);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeLetterSequence */
    @org.junit.Test(timeout = 10000)
    public void consumeLetterSequence_sd20667() {
        char __DSPOT_c_1276 = 'x';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20667__4 = r.consumeLetterSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_consumeLetterSequence_sd20667__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20667__5 = r.consumeTo("bar;");
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20667__6 = r.consumeLetterSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeLetterSequence_sd20667__6);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20667__7 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("; qux", o_consumeLetterSequence_sd20667__7);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_sd20667__8 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_1276);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterSequence_sd20667__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("; qux", o_consumeLetterSequence_sd20667__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_consumeLetterSequence_sd20667__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeLetterSequence_sd20667__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &", o_consumeLetterSequence_sd20667__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeLetterSequence */
    @org.junit.Test(timeout = 10000)
    public void consumeLetterSequence_literalMutationString20656() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("AdX({me,aDo]b");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('A', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20656__3 = r.consumeLetterSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("AdX", o_consumeLetterSequence_literalMutationString20656__3);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20656__4 = r.consumeTo("bar;");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("({me,aDo]b", o_consumeLetterSequence_literalMutationString20656__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20656__5 = r.consumeLetterSequence();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20656__6 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterSequence_literalMutationString20656__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterSequence_literalMutationString20656__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("({me,aDo]b", o_consumeLetterSequence_literalMutationString20656__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("AdX", o_consumeLetterSequence_literalMutationString20656__3);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeLetterSequence */
    @org.junit.Test(timeout = 10000)
    public void consumeLetterSequence_literalMutationString20655() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("On[ &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20655__3 = r.consumeLetterSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("On", o_consumeLetterSequence_literalMutationString20655__3);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20655__4 = r.consumeTo("bar;");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("[ &", o_consumeLetterSequence_literalMutationString20655__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20655__5 = r.consumeLetterSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeLetterSequence_literalMutationString20655__5);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterSequence_literalMutationString20655__6 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("; qux", o_consumeLetterSequence_literalMutationString20655__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("On", o_consumeLetterSequence_literalMutationString20655__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("[ &", o_consumeLetterSequence_literalMutationString20655__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeLetterSequence_literalMutationString20655__5);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeLetterThenDigitSequence */
    @org.junit.Test(timeout = 10000)
    public void consumeLetterThenDigitSequence_literalMutationString26586_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            r.consumeLetterThenDigitSequence();
            r.consume();
            r.consumeLetterThenDigitSequence();
            r.consumeToEnd();
            org.junit.Assert.fail("consumeLetterThenDigitSequence_literalMutationString26586 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeLetterThenDigitSequence */
    @org.junit.Test(timeout = 10000)
    public void consumeLetterThenDigitSequence_sd26598() {
        char[] __DSPOT_chars_1717 = new char[0];
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One12 Two &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_sd26598__4 = r.consumeLetterThenDigitSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One12", o_consumeLetterThenDigitSequence_sd26598__4);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeLetterThenDigitSequence_sd26598__5 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_sd26598__6 = r.consumeLetterThenDigitSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two", o_consumeLetterThenDigitSequence_sd26598__6);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_sd26598__7 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &bar; qux", o_consumeLetterThenDigitSequence_sd26598__7);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_sd26598__8 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_1717);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterThenDigitSequence_sd26598__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(19, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &bar; qux", o_consumeLetterThenDigitSequence_sd26598__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One12", o_consumeLetterThenDigitSequence_sd26598__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (o_consumeLetterThenDigitSequence_sd26598__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two", o_consumeLetterThenDigitSequence_sd26598__6);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeLetterThenDigitSequence */
    @org.junit.Test(timeout = 10000)
    public void consumeLetterThenDigitSequence_literalMutationString26588() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("G0+B=!H.GkJd)[RsB+E");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('G', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_literalMutationString26588__3 = r.consumeLetterThenDigitSequence();
        // AssertGenerator create local variable with return value of invocation
        char o_consumeLetterThenDigitSequence_literalMutationString26588__4 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('+', ((char) (o_consumeLetterThenDigitSequence_literalMutationString26588__4)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_literalMutationString26588__5 = r.consumeLetterThenDigitSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B", o_consumeLetterThenDigitSequence_literalMutationString26588__5);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_literalMutationString26588__6 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("=!H.GkJd)[RsB+E", o_consumeLetterThenDigitSequence_literalMutationString26588__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("G0", o_consumeLetterThenDigitSequence_literalMutationString26588__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(19, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('+', ((char) (o_consumeLetterThenDigitSequence_literalMutationString26588__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B", o_consumeLetterThenDigitSequence_literalMutationString26588__5);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeLetterThenDigitSequence */
    @org.junit.Test(timeout = 10000)
    public void consumeLetterThenDigitSequence_literalMutationString26587() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_literalMutationString26587__3 = r.consumeLetterThenDigitSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterThenDigitSequence_literalMutationString26587__3);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeLetterThenDigitSequence_literalMutationString26587__4 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_literalMutationString26587__5 = r.consumeLetterThenDigitSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span", o_consumeLetterThenDigitSequence_literalMutationString26587__5);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_literalMutationString26587__6 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(">Hello <div>there</div> <span>now</span></span>", o_consumeLetterThenDigitSequence_literalMutationString26587__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span", o_consumeLetterThenDigitSequence_literalMutationString26587__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (o_consumeLetterThenDigitSequence_literalMutationString26587__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterThenDigitSequence_literalMutationString26587__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeLetterThenDigitSequence */
    @org.junit.Test(timeout = 10000)
    public void consumeLetterThenDigitSequence_sd26592() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One12 Two &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_sd26592__3 = r.consumeLetterThenDigitSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One12", o_consumeLetterThenDigitSequence_sd26592__3);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeLetterThenDigitSequence_sd26592__4 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_sd26592__5 = r.consumeLetterThenDigitSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two", o_consumeLetterThenDigitSequence_sd26592__5);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_sd26592__6 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &bar; qux", o_consumeLetterThenDigitSequence_sd26592__6);
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (o_consumeLetterThenDigitSequence_sd26592__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(20, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &bar; qux", o_consumeLetterThenDigitSequence_sd26592__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One12", o_consumeLetterThenDigitSequence_sd26592__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two", o_consumeLetterThenDigitSequence_sd26592__5);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeLetterThenDigitSequence */
    @org.junit.Test(timeout = 10000)
    public void consumeLetterThenDigitSequence_sd26593() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One12 Two &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_sd26593__3 = r.consumeLetterThenDigitSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One12", o_consumeLetterThenDigitSequence_sd26593__3);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeLetterThenDigitSequence_sd26593__4 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (o_consumeLetterThenDigitSequence_sd26593__4)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_sd26593__5 = r.consumeLetterThenDigitSequence();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_sd26593__6 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &bar; qux", o_consumeLetterThenDigitSequence_sd26593__6);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_sd26593__7 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterThenDigitSequence_sd26593__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two", o_consumeLetterThenDigitSequence_sd26593__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &bar; qux", o_consumeLetterThenDigitSequence_sd26593__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (o_consumeLetterThenDigitSequence_sd26593__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(19, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One12", o_consumeLetterThenDigitSequence_sd26593__3);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeLetterThenDigitSequence */
    @org.junit.Test(timeout = 10000)
    public void consumeLetterThenDigitSequence_sd26595() {
        char __DSPOT_c_1716 = '<';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One12 Two &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_sd26595__4 = r.consumeLetterThenDigitSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One12", o_consumeLetterThenDigitSequence_sd26595__4);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeLetterThenDigitSequence_sd26595__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (o_consumeLetterThenDigitSequence_sd26595__5)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_sd26595__6 = r.consumeLetterThenDigitSequence();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two", o_consumeLetterThenDigitSequence_sd26595__6);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_sd26595__7 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &bar; qux", o_consumeLetterThenDigitSequence_sd26595__7);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeLetterThenDigitSequence_sd26595__8 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_1716);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeLetterThenDigitSequence_sd26595__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two", o_consumeLetterThenDigitSequence_sd26595__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" &bar; qux", o_consumeLetterThenDigitSequence_sd26595__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(19, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (o_consumeLetterThenDigitSequence_sd26595__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One12", o_consumeLetterThenDigitSequence_sd26595__4);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_sd30544() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_sd30544__3 = r.consumeToAny('&', ';');
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_sd30544__4 = r.matches('&');
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_sd30544__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_sd30544__5 = r.matches("&bar;");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_sd30544__5);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_sd30544__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('&', ((char) (o_consumeToAny_sd30544__6)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_sd30544__7 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_sd30544__7);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_sd30544__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(';', ((char) (o_consumeToAny_sd30544__8)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_sd30544__9 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_sd30544__9);
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_sd30544__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_sd30544__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_sd30544__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_sd30544__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('&', ((char) (o_consumeToAny_sd30544__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_sd30544__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(';', ((char) (o_consumeToAny_sd30544__8)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationString30490() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &`ar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30490__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationString30490__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationString30490__4 = r.matches('&');
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_literalMutationString30490__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationString30490__5 = r.matches("&bar;");
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationString30490__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('&', ((char) (o_consumeToAny_literalMutationString30490__6)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30490__7 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("`ar", o_consumeToAny_literalMutationString30490__7);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationString30490__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(';', ((char) (o_consumeToAny_literalMutationString30490__8)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30490__9 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationString30490__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_consumeToAny_literalMutationString30490__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("`ar", o_consumeToAny_literalMutationString30490__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('&', ((char) (o_consumeToAny_literalMutationString30490__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(';', ((char) (o_consumeToAny_literalMutationString30490__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_literalMutationString30490__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationString30490__3);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationString30491() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30491__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30491__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationString30491__4 = r.matches('&');
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_consumeToAny_literalMutationString30491__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationString30491__5 = r.matches("&bar;");
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationString30491__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consumeToAny_literalMutationString30491__6)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30491__7 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30491__7);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationString30491__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consumeToAny_literalMutationString30491__8)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30491__9 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30491__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30491__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consumeToAny_literalMutationString30491__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30491__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_consumeToAny_literalMutationString30491__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consumeToAny_literalMutationString30491__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_consumeToAny_literalMutationString30491__5);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_sd30545() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_sd30545__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_sd30545__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_sd30545__4 = r.matches('&');
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_sd30545__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_sd30545__5 = r.matches("&bar;");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_sd30545__5);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_sd30545__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('&', ((char) (o_consumeToAny_sd30545__6)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_sd30545__7 = r.consumeToAny('&', ';');
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_sd30545__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(';', ((char) (o_consumeToAny_sd30545__8)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_sd30545__9 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_sd30545__9);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_sd30545__10 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_sd30545__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(';', ((char) (o_consumeToAny_sd30545__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_sd30545__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_sd30545__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_sd30545__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_sd30545__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('&', ((char) (o_consumeToAny_sd30545__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_sd30545__7);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationString30492() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30492__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", o_consumeToAny_literalMutationString30492__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationString30492__4 = r.matches('&');
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_consumeToAny_literalMutationString30492__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationString30492__5 = r.matches("&bar;");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_consumeToAny_literalMutationString30492__5);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationString30492__6 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30492__7 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30492__7);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationString30492__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consumeToAny_literalMutationString30492__8)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30492__9 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30492__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(54, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consumeToAny_literalMutationString30492__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30492__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_consumeToAny_literalMutationString30492__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consumeToAny_literalMutationString30492__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", o_consumeToAny_literalMutationString30492__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_consumeToAny_literalMutationString30492__4);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationChar30512() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30512__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30512__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30512__4 = r.matches('%');
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_consumeToAny_literalMutationChar30512__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30512__5 = r.matches("&bar;");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_literalMutationChar30512__5);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30512__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('&', ((char) (o_consumeToAny_literalMutationChar30512__6)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30512__7 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30512__7);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30512__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(';', ((char) (o_consumeToAny_literalMutationChar30512__8)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30512__9 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationChar30512__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_literalMutationChar30512__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30512__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_consumeToAny_literalMutationChar30512__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('&', ((char) (o_consumeToAny_literalMutationChar30512__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30512__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(';', ((char) (o_consumeToAny_literalMutationChar30512__8)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationString30515() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30515__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationString30515__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationString30515__4 = r.matches('&');
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_literalMutationString30515__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationString30515__5 = r.matches("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_consumeToAny_literalMutationString30515__5);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationString30515__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('&', ((char) (o_consumeToAny_literalMutationString30515__6)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30515__7 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationString30515__7);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationString30515__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(';', ((char) (o_consumeToAny_literalMutationString30515__8)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30515__9 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationString30515__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_literalMutationString30515__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationString30515__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(';', ((char) (o_consumeToAny_literalMutationString30515__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_consumeToAny_literalMutationString30515__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('&', ((char) (o_consumeToAny_literalMutationString30515__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationString30515__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_sd30547() {
        char __DSPOT_c_2094 = 'S';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_sd30547__4 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_sd30547__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_sd30547__5 = r.matches('&');
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_sd30547__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_sd30547__6 = r.matches("&bar;");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_sd30547__6);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_sd30547__7 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_sd30547__8 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_sd30547__8);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_sd30547__9 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(';', ((char) (o_consumeToAny_sd30547__9)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_sd30547__10 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_sd30547__10);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_sd30547__11 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_2094);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_sd30547__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_sd30547__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_sd30547__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_consumeToAny_sd30547__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(';', ((char) (o_consumeToAny_sd30547__9)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_sd30547__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('&', ((char) (o_consumeToAny_sd30547__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_sd30547__10);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30541 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationChar30541_literalMutationString33864() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_29354 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_29355 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_29356 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30541__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30541__3);
        java.lang.String String_29357 = o_consumeToAny_literalMutationChar30541__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_29357);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30541__4 = r.matches('&');
        java.lang.Boolean Boolean_29358 = o_consumeToAny_literalMutationChar30541__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30541__5 = r.matches("<span>Hello <div>there</div> <span>now</span></span>");
        java.lang.Boolean Boolean_29359 = o_consumeToAny_literalMutationChar30541__5;
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30541__6 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30541__7 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30541__7);
        java.lang.String String_29360 = o_consumeToAny_literalMutationChar30541__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_29360);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30541__8 = r.consume();
        java.lang.Character Character_29361 = ((char) (o_consumeToAny_literalMutationChar30541__8));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30541__9 = r.consumeToAny('&', '<');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationChar30541__9);
        java.lang.String String_29362 = o_consumeToAny_literalMutationChar30541__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_29362);
        java.lang.Character Character_29363 = ((char) (o_consumeToAny_literalMutationChar30541__8));
        java.lang.Character Character_29364 = ((char) (o_consumeToAny_literalMutationChar30541__6));
        java.lang.String String_29365 = o_consumeToAny_literalMutationChar30541__7;
        java.lang.Boolean Boolean_29366 = o_consumeToAny_literalMutationChar30541__5;
        java.lang.Boolean Boolean_29367 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_29368 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_29369 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_29370 = o_consumeToAny_literalMutationChar30541__4;
        java.lang.String String_29371 = o_consumeToAny_literalMutationChar30541__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_29371);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30541__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_29362);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationChar30541__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30541__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_29365);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_29357);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_29360);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30542 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationChar30542_literalMutationString33901() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_32114 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_32115 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_32116 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30542__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", o_consumeToAny_literalMutationChar30542__3);
        java.lang.String String_32117 = o_consumeToAny_literalMutationChar30542__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_32117);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30542__4 = r.matches('&');
        java.lang.Boolean Boolean_32118 = o_consumeToAny_literalMutationChar30542__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30542__5 = r.matches("&bar;");
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30542__6 = r.consume();
        java.lang.Character Character_32119 = ((char) (o_consumeToAny_literalMutationChar30542__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30542__7 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationChar30542__7);
        java.lang.String String_32120 = o_consumeToAny_literalMutationChar30542__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_32120);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30542__8 = r.consume();
        java.lang.Character Character_32121 = ((char) (o_consumeToAny_literalMutationChar30542__8));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30542__9 = r.consumeToAny('&', ':');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationChar30542__9);
        java.lang.String String_32122 = o_consumeToAny_literalMutationChar30542__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_32122);
        java.lang.Boolean Boolean_32123 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_32124 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_32125 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_32126 = o_consumeToAny_literalMutationChar30542__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_32126);
        java.lang.Character Character_32127 = ((char) (o_consumeToAny_literalMutationChar30542__6));
        java.lang.Boolean Boolean_32128 = o_consumeToAny_literalMutationChar30542__5;
        java.lang.Character Character_32129 = ((char) (o_consumeToAny_literalMutationChar30542__8));
        java.lang.String String_32130 = o_consumeToAny_literalMutationChar30542__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_32130);
        java.lang.Boolean Boolean_32131 = o_consumeToAny_literalMutationChar30542__4;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_32130);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_32120);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(54, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_32117);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationChar30542__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationChar30542__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", o_consumeToAny_literalMutationChar30542__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_32126);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_32122);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30505 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationChar30505_sd31701() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_29687 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_29688 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_29689 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30505__3 = r.consumeToAny('&', '<');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30505__3);
        java.lang.String String_29690 = o_consumeToAny_literalMutationChar30505__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_29690);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30505__4 = r.matches('&');
        java.lang.Boolean Boolean_29691 = o_consumeToAny_literalMutationChar30505__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30505__5 = r.matches("&bar;");
        java.lang.Boolean Boolean_29692 = o_consumeToAny_literalMutationChar30505__5;
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30505__6 = r.consume();
        java.lang.Character Character_29693 = ((char) (o_consumeToAny_literalMutationChar30505__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30505__7 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30505__7);
        java.lang.String String_29694 = o_consumeToAny_literalMutationChar30505__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_29694);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30505__8 = r.consume();
        java.lang.Character Character_29695 = ((char) (o_consumeToAny_literalMutationChar30505__8));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30505__9 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationChar30505__9);
        java.lang.String String_29696 = o_consumeToAny_literalMutationChar30505__9;
        java.lang.Boolean Boolean_29697 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_29698 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_29699 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_29700 = ((char) (o_consumeToAny_literalMutationChar30505__8));
        java.lang.String String_29701 = o_consumeToAny_literalMutationChar30505__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_29701);
        java.lang.Boolean Boolean_29702 = o_consumeToAny_literalMutationChar30505__4;
        java.lang.Character Character_29703 = ((char) (o_consumeToAny_literalMutationChar30505__6));
        java.lang.Boolean Boolean_29704 = o_consumeToAny_literalMutationChar30505__5;
        java.lang.String String_29705 = o_consumeToAny_literalMutationChar30505__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_29705);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30505_sd31701__43 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationChar30505_sd31701__43);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30505__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30505__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_29705);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_29696);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_29690);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationChar30505__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_29701);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_29694);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_sd30545 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_sd30545_literalMutationChar34124_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
            java.lang.Boolean Boolean_29967 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_29968 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_29969 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_consumeToAny_sd30545__3 = r.consumeToAny('&', ';');
            java.lang.String String_29970 = o_consumeToAny_sd30545__3;
            // AssertGenerator create local variable with return value of invocation
            boolean o_consumeToAny_sd30545__4 = r.matches('&');
            java.lang.Boolean Boolean_29971 = o_consumeToAny_sd30545__4;
            // AssertGenerator create local variable with return value of invocation
            boolean o_consumeToAny_sd30545__5 = r.matches("&bar;");
            java.lang.Boolean Boolean_29972 = o_consumeToAny_sd30545__5;
            // AssertGenerator create local variable with return value of invocation
            char o_consumeToAny_sd30545__6 = r.consume();
            java.lang.Character Character_29973 = ((char) (o_consumeToAny_sd30545__6));
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_consumeToAny_sd30545__7 = r.consumeToAny('&', '\n');
            // AssertGenerator create local variable with return value of invocation
            char o_consumeToAny_sd30545__8 = r.consume();
            java.lang.Character Character_29974 = ((char) (o_consumeToAny_sd30545__8));
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_consumeToAny_sd30545__9 = r.consumeToAny('&', ';');
            java.lang.String String_29975 = o_consumeToAny_sd30545__9;
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_consumeToAny_sd30545__10 = // StatementAdd: add invocation of a method
            r.toString();
            java.lang.String String_29976 = o_consumeToAny_sd30545__10;
            java.lang.Character Character_29977 = ((char) (o_consumeToAny_sd30545__8));
            java.lang.String String_29978 = o_consumeToAny_sd30545__3;
            java.lang.Boolean Boolean_29979 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_29980 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_29981 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.Boolean Boolean_29982 = o_consumeToAny_sd30545__5;
            java.lang.Boolean Boolean_29983 = o_consumeToAny_sd30545__4;
            java.lang.String String_29984 = o_consumeToAny_sd30545__9;
            java.lang.Character Character_29985 = ((char) (o_consumeToAny_sd30545__6));
            java.lang.String String_29986 = o_consumeToAny_sd30545__7;
            org.junit.Assert.fail("consumeToAny_sd30545_literalMutationChar34124 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30531 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationChar30531_literalMutationChar33252() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_30192 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_30193 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_30194 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30531__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30531__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30531__4 = r.matches('\n');
        java.lang.Boolean Boolean_30195 = o_consumeToAny_literalMutationChar30531__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30531__5 = r.matches("&bar;");
        java.lang.Boolean Boolean_30196 = o_consumeToAny_literalMutationChar30531__5;
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30531__6 = r.consume();
        java.lang.Character Character_30197 = ((char) (o_consumeToAny_literalMutationChar30531__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30531__7 = r.consumeToAny('&', '\n');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar; qux", o_consumeToAny_literalMutationChar30531__7);
        java.lang.String String_30198 = o_consumeToAny_literalMutationChar30531__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar; qux", String_30198);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30531__8 = r.consume();
        java.lang.Character Character_30199 = ((char) (o_consumeToAny_literalMutationChar30531__8));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30531__9 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationChar30531__9);
        java.lang.String String_30200 = o_consumeToAny_literalMutationChar30531__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_30200);
        java.lang.String String_30201 = o_consumeToAny_literalMutationChar30531__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar; qux", String_30201);
        java.lang.Character Character_30202 = ((char) (o_consumeToAny_literalMutationChar30531__8));
        java.lang.String String_30203 = o_consumeToAny_literalMutationChar30531__3;
        java.lang.Character Character_30204 = ((char) (o_consumeToAny_literalMutationChar30531__6));
        java.lang.Boolean Boolean_30205 = o_consumeToAny_literalMutationChar30531__5;
        java.lang.Boolean Boolean_30206 = o_consumeToAny_literalMutationChar30531__4;
        java.lang.Boolean Boolean_30207 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_30208 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_30209 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_30200);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30531__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar; qux", String_30198);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar; qux", String_30201);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_30203);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar; qux", o_consumeToAny_literalMutationChar30531__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationChar30531__9);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30540 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationChar30540_sd33832() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_32278 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_32279 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_32280 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30540__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30540__3);
        java.lang.String String_32281 = o_consumeToAny_literalMutationChar30540__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_32281);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30540__4 = r.matches('&');
        java.lang.Boolean Boolean_32282 = o_consumeToAny_literalMutationChar30540__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30540__5 = r.matches("&bar;");
        java.lang.Boolean Boolean_32283 = o_consumeToAny_literalMutationChar30540__5;
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30540__6 = r.consume();
        java.lang.Character Character_32284 = ((char) (o_consumeToAny_literalMutationChar30540__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30540__7 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30540__7);
        java.lang.String String_32285 = o_consumeToAny_literalMutationChar30540__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_32285);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30540__8 = r.consume();
        java.lang.Character Character_32286 = ((char) (o_consumeToAny_literalMutationChar30540__8));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30540__9 = r.consumeToAny('&', 'Y');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationChar30540__9);
        java.lang.String String_32287 = o_consumeToAny_literalMutationChar30540__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_32287);
        java.lang.Boolean Boolean_32288 = o_consumeToAny_literalMutationChar30540__5;
        java.lang.Boolean Boolean_32289 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_32290 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_32291 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_32292 = ((char) (o_consumeToAny_literalMutationChar30540__6));
        java.lang.Boolean Boolean_32293 = o_consumeToAny_literalMutationChar30540__4;
        java.lang.String String_32294 = o_consumeToAny_literalMutationChar30540__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_32294);
        java.lang.Character Character_32295 = ((char) (o_consumeToAny_literalMutationChar30540__8));
        java.lang.String String_32296 = o_consumeToAny_literalMutationChar30540__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_32296);
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_32287);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_32296);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30540__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30540__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_32281);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_32294);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationChar30540__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_32285);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_sd30547 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_sd30547_literalMutationChar34258() {
        char __DSPOT_c_2094 = 'S';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_29761 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_29762 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_29763 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_sd30547__4 = r.consumeToAny('&', ';');
        java.lang.String String_29764 = o_consumeToAny_sd30547__4;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_29764);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_sd30547__5 = r.matches('&');
        java.lang.Boolean Boolean_29765 = o_consumeToAny_sd30547__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_sd30547__6 = r.matches("&bar;");
        java.lang.Boolean Boolean_29766 = o_consumeToAny_sd30547__6;
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_sd30547__7 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_sd30547__8 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_sd30547__8);
        java.lang.String String_29767 = o_consumeToAny_sd30547__8;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_29767);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_sd30547__9 = r.consume();
        java.lang.Character Character_29768 = ((char) (o_consumeToAny_sd30547__9));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_sd30547__10 = r.consumeToAny('\n', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_sd30547__10);
        java.lang.String String_29769 = o_consumeToAny_sd30547__10;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_29769);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_sd30547__11 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_2094);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_sd30547__11);
        java.lang.String String_29770 = o_consumeToAny_sd30547__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_29770);
        java.lang.String String_29771 = o_consumeToAny_sd30547__8;
        java.lang.Boolean Boolean_29772 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_29773 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_29774 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_29775 = o_consumeToAny_sd30547__6;
        java.lang.Boolean Boolean_29776 = o_consumeToAny_sd30547__5;
        java.lang.Character Character_29777 = ((char) (o_consumeToAny_sd30547__9));
        java.lang.String String_29778 = o_consumeToAny_sd30547__4;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_29778);
        java.lang.Character Character_29779 = ((char) (o_consumeToAny_sd30547__7));
        java.lang.String String_29780 = o_consumeToAny_sd30547__10;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_29780);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_29778);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_29769);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_sd30547__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_sd30547__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_29767);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_sd30547__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_29771);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_29764);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_29770);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_sd30547__10);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationString30517 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationString30517_literalMutationString32380() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("&KPBl6hE9&ef[");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('&', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_30023 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_30024 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_30025 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30517__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30517__3);
        java.lang.String String_30026 = o_consumeToAny_literalMutationString30517__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_30026);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationString30517__4 = r.matches('&');
        java.lang.Boolean Boolean_30027 = o_consumeToAny_literalMutationString30517__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationString30517__5 = r.matches("&ba;");
        java.lang.Boolean Boolean_30028 = o_consumeToAny_literalMutationString30517__5;
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationString30517__6 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30517__7 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", o_consumeToAny_literalMutationString30517__7);
        java.lang.String String_30029 = o_consumeToAny_literalMutationString30517__7;
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationString30517__8 = r.consume();
        java.lang.Character Character_30030 = ((char) (o_consumeToAny_literalMutationString30517__8));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30517__9 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ef[", o_consumeToAny_literalMutationString30517__9);
        java.lang.String String_30031 = o_consumeToAny_literalMutationString30517__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ef[", String_30031);
        java.lang.Boolean Boolean_30032 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_30033 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_30034 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_30035 = ((char) (o_consumeToAny_literalMutationString30517__6));
        java.lang.Boolean Boolean_30036 = o_consumeToAny_literalMutationString30517__5;
        java.lang.Boolean Boolean_30037 = o_consumeToAny_literalMutationString30517__4;
        java.lang.String String_30038 = o_consumeToAny_literalMutationString30517__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", String_30038);
        java.lang.Character Character_30039 = ((char) (o_consumeToAny_literalMutationString30517__8));
        java.lang.String String_30040 = o_consumeToAny_literalMutationString30517__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_30040);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_30026);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", String_30029);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", String_30038);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30517__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", o_consumeToAny_literalMutationString30517__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ef[", o_consumeToAny_literalMutationString30517__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ef[", String_30031);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30512 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationChar30512_literalMutationString32097() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_28711 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_28712 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_28713 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30512__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30512__3);
        java.lang.String String_28714 = o_consumeToAny_literalMutationChar30512__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_28714);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30512__4 = r.matches('%');
        java.lang.Boolean Boolean_28715 = o_consumeToAny_literalMutationChar30512__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30512__5 = r.matches("");
        java.lang.Boolean Boolean_28716 = o_consumeToAny_literalMutationChar30512__5;
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30512__6 = r.consume();
        java.lang.Character Character_28717 = ((char) (o_consumeToAny_literalMutationChar30512__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30512__7 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30512__7);
        java.lang.String String_28718 = o_consumeToAny_literalMutationChar30512__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_28718);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30512__8 = r.consume();
        java.lang.Character Character_28719 = ((char) (o_consumeToAny_literalMutationChar30512__8));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30512__9 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationChar30512__9);
        java.lang.String String_28720 = o_consumeToAny_literalMutationChar30512__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_28720);
        java.lang.Boolean Boolean_28721 = o_consumeToAny_literalMutationChar30512__5;
        java.lang.Boolean Boolean_28722 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_28723 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_28724 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_28725 = o_consumeToAny_literalMutationChar30512__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_28725);
        java.lang.Boolean Boolean_28726 = o_consumeToAny_literalMutationChar30512__4;
        java.lang.Character Character_28727 = ((char) (o_consumeToAny_literalMutationChar30512__6));
        java.lang.String String_28728 = o_consumeToAny_literalMutationChar30512__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_28728);
        java.lang.Character Character_28729 = ((char) (o_consumeToAny_literalMutationChar30512__8));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_28725);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_28720);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_28718);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_28714);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30512__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationChar30512__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_28728);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30512__3);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30533 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30533_sd33411 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationChar30533_sd33411_sd39240() {
        char[] __DSPOT_chars_2183 = new char[]{ 'c' , ']' , ')' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_32748 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_32749 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_32750 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_29890 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_29891 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_29892 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30533__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30533__3);
        java.lang.String String_32751 = o_consumeToAny_literalMutationChar30533__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_32751);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30533__4 = r.matches('&');
        java.lang.Boolean Boolean_29893 = o_consumeToAny_literalMutationChar30533__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30533__5 = r.matches("&bar;");
        java.lang.Boolean Boolean_29894 = o_consumeToAny_literalMutationChar30533__5;
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30533__6 = r.consume();
        java.lang.Character Character_29895 = ((char) (o_consumeToAny_literalMutationChar30533__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30533__7 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30533__7);
        java.lang.String String_32752 = o_consumeToAny_literalMutationChar30533__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_32752);
        java.lang.String String_29896 = o_consumeToAny_literalMutationChar30533__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_29896);
        java.lang.String String_32753 = String_29896;
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30533__8 = r.consume();
        java.lang.Character Character_29897 = ((char) (o_consumeToAny_literalMutationChar30533__8));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30533__9 = r.consumeToAny(' ', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationChar30533__9);
        java.lang.String String_32754 = o_consumeToAny_literalMutationChar30533__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_32754);
        java.lang.String String_29898 = o_consumeToAny_literalMutationChar30533__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_29898);
        java.lang.String String_32755 = String_29898;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_32755);
        java.lang.Boolean Boolean_29899 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_29900 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_29901 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_29902 = o_consumeToAny_literalMutationChar30533__4;
        java.lang.Character Character_29903 = ((char) (o_consumeToAny_literalMutationChar30533__6));
        java.lang.Boolean Boolean_29904 = o_consumeToAny_literalMutationChar30533__5;
        java.lang.String String_29905 = o_consumeToAny_literalMutationChar30533__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_29905);
        java.lang.String String_32756 = String_29905;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_32756);
        java.lang.Character Character_29906 = ((char) (o_consumeToAny_literalMutationChar30533__8));
        java.lang.String String_29907 = o_consumeToAny_literalMutationChar30533__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_29907);
        java.lang.String String_32757 = String_29907;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_32757);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30533_sd33411__43 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_2183);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationChar30533_sd33411__43);
        java.lang.String String_32758 = o_consumeToAny_literalMutationChar30533_sd33411__43;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_32758);
        java.lang.String String_32759 = o_consumeToAny_literalMutationChar30533__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_32759);
        java.lang.String String_32760 = String_29905;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_32760);
        java.lang.String String_32761 = o_consumeToAny_literalMutationChar30533__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_32761);
        java.lang.String String_32762 = o_consumeToAny_literalMutationChar30533__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_32762);
        java.lang.String String_32763 = String_29898;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_32763);
        java.lang.String String_32764 = String_29907;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_32764);
        java.lang.Boolean Boolean_32765 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_32766 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_32767 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_32768 = String_29896;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_32768);
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_32755);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_32761);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_32751);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_29907);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_32762);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_32753);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_29898);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_32759);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_32763);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_32760);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationChar30533__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_32752);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30533__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_29905);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_32764);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_32768);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_32754);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_32756);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30533__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationChar30533_sd33411__43);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_32757);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_32758);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_29896);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30533 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30533_literalMutationString33352 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationChar30533_literalMutationString33352_sd38118_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            char __DSPOT_c_2316 = 'I';
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            java.lang.Boolean Boolean_33673 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_33674 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_33675 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.Boolean Boolean_29555 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_29556 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_29557 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_consumeToAny_literalMutationChar30533__3 = r.consumeToAny('&', ';');
            java.lang.String String_33676 = o_consumeToAny_literalMutationChar30533__3;
            // AssertGenerator create local variable with return value of invocation
            boolean o_consumeToAny_literalMutationChar30533__4 = r.matches('&');
            java.lang.Boolean Boolean_29558 = o_consumeToAny_literalMutationChar30533__4;
            // AssertGenerator create local variable with return value of invocation
            boolean o_consumeToAny_literalMutationChar30533__5 = r.matches("&bar;");
            java.lang.Boolean Boolean_29559 = o_consumeToAny_literalMutationChar30533__5;
            // AssertGenerator create local variable with return value of invocation
            char o_consumeToAny_literalMutationChar30533__6 = r.consume();
            java.lang.Character Character_29560 = ((char) (o_consumeToAny_literalMutationChar30533__6));
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_consumeToAny_literalMutationChar30533__7 = r.consumeToAny('&', ';');
            java.lang.String String_33677 = o_consumeToAny_literalMutationChar30533__7;
            java.lang.String String_29561 = o_consumeToAny_literalMutationChar30533__7;
            java.lang.String String_33678 = String_29561;
            // AssertGenerator create local variable with return value of invocation
            char o_consumeToAny_literalMutationChar30533__8 = r.consume();
            java.lang.Character Character_29562 = ((char) (o_consumeToAny_literalMutationChar30533__8));
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_consumeToAny_literalMutationChar30533__9 = r.consumeToAny(' ', ';');
            java.lang.String String_33679 = o_consumeToAny_literalMutationChar30533__9;
            java.lang.String String_29563 = o_consumeToAny_literalMutationChar30533__9;
            java.lang.String String_33680 = String_29563;
            java.lang.Boolean Boolean_29564 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_29565 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_29566 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.Boolean Boolean_29567 = o_consumeToAny_literalMutationChar30533__4;
            java.lang.Character Character_29568 = ((char) (o_consumeToAny_literalMutationChar30533__6));
            java.lang.Boolean Boolean_29569 = o_consumeToAny_literalMutationChar30533__5;
            java.lang.String String_29570 = o_consumeToAny_literalMutationChar30533__7;
            java.lang.String String_33681 = String_29570;
            java.lang.Character Character_29571 = ((char) (o_consumeToAny_literalMutationChar30533__8));
            java.lang.String String_29572 = o_consumeToAny_literalMutationChar30533__3;
            java.lang.String String_33682 = String_29572;
            java.lang.String String_33683 = String_29570;
            java.lang.String String_33684 = String_29561;
            java.lang.Boolean Boolean_33685 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_33686 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_33687 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.String String_33688 = o_consumeToAny_literalMutationChar30533__3;
            java.lang.String String_33689 = String_29563;
            java.lang.String String_33690 = o_consumeToAny_literalMutationChar30533__9;
            java.lang.String String_33691 = o_consumeToAny_literalMutationChar30533__7;
            // StatementAdd: add invocation of a method
            r.consumeTo(__DSPOT_c_2316);
            org.junit.Assert.fail("consumeToAny_literalMutationChar30533_literalMutationString33352_sd38118 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationString30491 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationString30491_sd30851 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationString30491_sd30851_literalMutationChar45295() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_36029 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_36030 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_36031 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_31768 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_31769 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_31770 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30491__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30491__3);
        java.lang.String String_36032 = o_consumeToAny_literalMutationString30491__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36032);
        java.lang.String String_31771 = o_consumeToAny_literalMutationString30491__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_31771);
        java.lang.String String_36033 = String_31771;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36033);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationString30491__4 = r.matches('&');
        java.lang.Boolean Boolean_31772 = o_consumeToAny_literalMutationString30491__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationString30491__5 = r.matches("&bar;");
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationString30491__6 = r.consume();
        java.lang.Character Character_31773 = ((char) (o_consumeToAny_literalMutationString30491__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30491__7 = r.consumeToAny('%', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30491__7);
        java.lang.String String_36034 = o_consumeToAny_literalMutationString30491__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36034);
        java.lang.String String_31774 = o_consumeToAny_literalMutationString30491__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_31774);
        java.lang.String String_36035 = String_31774;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36035);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationString30491__8 = r.consume();
        java.lang.Character Character_31775 = ((char) (o_consumeToAny_literalMutationString30491__8));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30491__9 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30491__9);
        java.lang.String String_36036 = o_consumeToAny_literalMutationString30491__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36036);
        java.lang.String String_31776 = o_consumeToAny_literalMutationString30491__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_31776);
        java.lang.String String_36037 = String_31776;
        java.lang.String String_31777 = o_consumeToAny_literalMutationString30491__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_31777);
        java.lang.String String_36038 = String_31777;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36038);
        java.lang.Character Character_31778 = ((char) (o_consumeToAny_literalMutationString30491__8));
        java.lang.String String_31779 = o_consumeToAny_literalMutationString30491__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_31779);
        java.lang.String String_36039 = String_31779;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36039);
        java.lang.Boolean Boolean_31780 = o_consumeToAny_literalMutationString30491__4;
        java.lang.Boolean Boolean_31781 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_31782 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_31783 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_31784 = ((char) (o_consumeToAny_literalMutationString30491__6));
        java.lang.Boolean Boolean_31785 = o_consumeToAny_literalMutationString30491__5;
        // AssertGenerator create local variable with return value of invocation
        int o_consumeToAny_literalMutationString30491_sd30851__42 = // StatementAdd: add invocation of a method
        r.pos();
        java.lang.Integer Integer_36040 = ((int) (o_consumeToAny_literalMutationString30491_sd30851__42));
        java.lang.String String_36041 = String_31776;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36041);
        java.lang.String String_36042 = String_31777;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36042);
        java.lang.String String_36043 = o_consumeToAny_literalMutationString30491__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36043);
        java.lang.String String_36044 = o_consumeToAny_literalMutationString30491__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36044);
        java.lang.String String_36045 = o_consumeToAny_literalMutationString30491__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36045);
        java.lang.String String_36046 = String_31779;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36046);
        java.lang.String String_36047 = String_31774;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36047);
        java.lang.String String_36048 = String_31771;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36048);
        java.lang.Boolean Boolean_36049 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_36050 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_36051 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_31774);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36032);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_31776);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36036);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_31771);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36035);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36041);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30491__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36033);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30491__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36042);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36045);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36034);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36046);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_31779);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36038);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36044);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30491__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36043);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36048);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36039);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36037);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_31777);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_36047);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationString30514 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationString30514_literalMutationChar32204 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationString30514_literalMutationChar32204_literalMutationChar40070() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_33502 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_33503 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_33504 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_30174 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_30175 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_30176 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30514__3 = r.consumeToAny('\'', ' ');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One &bar; qux", o_consumeToAny_literalMutationString30514__3);
        java.lang.String String_30177 = o_consumeToAny_literalMutationString30514__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One &bar; qux", String_30177);
        java.lang.String String_33505 = String_30177;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One &bar; qux", String_33505);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationString30514__4 = r.matches('&');
        java.lang.Boolean Boolean_30178 = o_consumeToAny_literalMutationString30514__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationString30514__5 = r.matches("");
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationString30514__6 = r.consume();
        java.lang.Character Character_30179 = ((char) (o_consumeToAny_literalMutationString30514__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30514__7 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30514__7);
        java.lang.String String_33506 = o_consumeToAny_literalMutationString30514__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33506);
        java.lang.String String_30180 = o_consumeToAny_literalMutationString30514__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_30180);
        java.lang.String String_33507 = String_30180;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33507);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationString30514__8 = r.consume();
        java.lang.Character Character_30181 = ((char) (o_consumeToAny_literalMutationString30514__8));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30514__9 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30514__9);
        java.lang.String String_33508 = o_consumeToAny_literalMutationString30514__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33508);
        java.lang.String String_30182 = o_consumeToAny_literalMutationString30514__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_30182);
        java.lang.String String_33509 = String_30182;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33509);
        java.lang.Boolean Boolean_30183 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_30184 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_30185 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_30186 = ((char) (o_consumeToAny_literalMutationString30514__6));
        java.lang.String String_30187 = o_consumeToAny_literalMutationString30514__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_30187);
        java.lang.String String_33510 = String_30187;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33510);
        java.lang.Boolean Boolean_30188 = o_consumeToAny_literalMutationString30514__5;
        java.lang.Character Character_30189 = ((char) (o_consumeToAny_literalMutationString30514__8));
        java.lang.String String_30190 = o_consumeToAny_literalMutationString30514__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One &bar; qux", String_30190);
        java.lang.String String_33511 = String_30190;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One &bar; qux", String_33511);
        java.lang.Boolean Boolean_30191 = o_consumeToAny_literalMutationString30514__4;
        java.lang.String String_33512 = o_consumeToAny_literalMutationString30514__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33512);
        java.lang.String String_33513 = String_30190;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One &bar; qux", String_33513);
        java.lang.String String_33514 = String_30187;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33514);
        java.lang.String String_33515 = String_30180;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33515);
        java.lang.String String_33516 = o_consumeToAny_literalMutationString30514__3;
        java.lang.String String_33517 = String_30177;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One &bar; qux", String_33517);
        java.lang.Boolean Boolean_33518 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_33519 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_33520 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_33521 = String_30182;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33521);
        java.lang.String String_33522 = o_consumeToAny_literalMutationString30514__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33522);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33512);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33521);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30514__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One &bar; qux", String_33513);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(15, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_30187);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33509);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One &bar; qux", o_consumeToAny_literalMutationString30514__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33515);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One &bar; qux", String_33516);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One &bar; qux", String_33517);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_30180);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One &bar; qux", String_30190);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33508);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33507);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One &bar; qux", String_30177);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One &bar; qux", String_33511);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33510);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33514);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One &bar; qux", String_33505);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33506);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_30182);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30514__9);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30541 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30541_literalMutationString33864 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationChar30541_literalMutationString33864_literalMutationChar37430() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_33561 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_33562 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_33563 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_29354 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_29355 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_29356 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30541__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30541__3);
        java.lang.String String_33564 = o_consumeToAny_literalMutationChar30541__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33564);
        java.lang.String String_29357 = o_consumeToAny_literalMutationChar30541__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_29357);
        java.lang.String String_33565 = String_29357;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33565);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30541__4 = r.matches('&');
        java.lang.Boolean Boolean_29358 = o_consumeToAny_literalMutationChar30541__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30541__5 = r.matches("<span>Hello <div>there</div> <span>now</span></span>");
        java.lang.Boolean Boolean_29359 = o_consumeToAny_literalMutationChar30541__5;
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30541__6 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30541__7 = r.consumeToAny('&', ' ');
        java.lang.String String_33566 = o_consumeToAny_literalMutationChar30541__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar;", String_33566);
        java.lang.String String_29360 = o_consumeToAny_literalMutationChar30541__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar;", String_29360);
        java.lang.String String_33567 = String_29360;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar;", String_33567);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30541__8 = r.consume();
        java.lang.Character Character_29361 = ((char) (o_consumeToAny_literalMutationChar30541__8));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30541__9 = r.consumeToAny('&', '<');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("qux", o_consumeToAny_literalMutationChar30541__9);
        java.lang.String String_33568 = o_consumeToAny_literalMutationChar30541__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("qux", String_33568);
        java.lang.String String_29362 = o_consumeToAny_literalMutationChar30541__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("qux", String_29362);
        java.lang.String String_33569 = String_29362;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("qux", String_33569);
        java.lang.Character Character_29363 = ((char) (o_consumeToAny_literalMutationChar30541__8));
        java.lang.Character Character_29364 = ((char) (o_consumeToAny_literalMutationChar30541__6));
        java.lang.String String_29365 = o_consumeToAny_literalMutationChar30541__7;
        java.lang.Boolean Boolean_29366 = o_consumeToAny_literalMutationChar30541__5;
        java.lang.Boolean Boolean_29367 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_29368 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_29369 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_29370 = o_consumeToAny_literalMutationChar30541__4;
        java.lang.String String_29371 = o_consumeToAny_literalMutationChar30541__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_29371);
        java.lang.String String_33570 = String_29371;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33570);
        java.lang.String String_33571 = o_consumeToAny_literalMutationChar30541__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33571);
        java.lang.String String_33572 = String_29362;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("qux", String_33572);
        java.lang.String String_33573 = o_consumeToAny_literalMutationChar30541__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("qux", String_33573);
        java.lang.String String_33574 = o_consumeToAny_literalMutationChar30541__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar;", String_33574);
        java.lang.String String_33575 = String_29365;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar;", String_33575);
        java.lang.String String_33576 = String_29357;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33576);
        java.lang.Boolean Boolean_33577 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_33578 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_33579 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_33580 = String_29360;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar;", String_33580);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar;", String_33574);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("qux", String_33573);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar;", String_33566);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("qux", o_consumeToAny_literalMutationChar30541__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("qux", String_33568);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33576);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("qux", String_33572);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar;", String_33567);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("qux", String_29362);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("qux", String_33569);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_29371);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_29357);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33564);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar;", String_29360);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33570);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30541__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33571);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33565);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar;", String_33575);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar;", String_29365);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar;", o_consumeToAny_literalMutationChar30541__7);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationString30517 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationString30517_literalMutationString32380 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationString30517_literalMutationString32380_literalMutationChar39599() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("&KPBl6hE9&ef[");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('&', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_35802 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_35803 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_35804 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_30023 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_30024 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_30025 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30517__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30517__3);
        java.lang.String String_35805 = o_consumeToAny_literalMutationString30517__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35805);
        java.lang.String String_30026 = o_consumeToAny_literalMutationString30517__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_30026);
        java.lang.String String_35806 = String_30026;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35806);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationString30517__4 = r.matches('&');
        java.lang.Boolean Boolean_30027 = o_consumeToAny_literalMutationString30517__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationString30517__5 = r.matches("&ba;");
        java.lang.Boolean Boolean_30028 = o_consumeToAny_literalMutationString30517__5;
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationString30517__6 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30517__7 = r.consumeToAny('&', '\n');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", o_consumeToAny_literalMutationString30517__7);
        java.lang.String String_35807 = o_consumeToAny_literalMutationString30517__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", String_35807);
        java.lang.String String_30029 = o_consumeToAny_literalMutationString30517__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", String_30029);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationString30517__8 = r.consume();
        java.lang.Character Character_30030 = ((char) (o_consumeToAny_literalMutationString30517__8));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationString30517__9 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ef[", o_consumeToAny_literalMutationString30517__9);
        java.lang.String String_35808 = o_consumeToAny_literalMutationString30517__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ef[", String_35808);
        java.lang.String String_30031 = o_consumeToAny_literalMutationString30517__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ef[", String_30031);
        java.lang.String String_35809 = String_30031;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ef[", String_35809);
        java.lang.Boolean Boolean_30032 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_30033 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_30034 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_30035 = ((char) (o_consumeToAny_literalMutationString30517__6));
        java.lang.Boolean Boolean_30036 = o_consumeToAny_literalMutationString30517__5;
        java.lang.Boolean Boolean_30037 = o_consumeToAny_literalMutationString30517__4;
        java.lang.String String_30038 = o_consumeToAny_literalMutationString30517__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", String_30038);
        java.lang.String String_35810 = String_30038;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", String_35810);
        java.lang.Character Character_30039 = ((char) (o_consumeToAny_literalMutationString30517__8));
        java.lang.String String_30040 = o_consumeToAny_literalMutationString30517__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_30040);
        java.lang.String String_35811 = String_30040;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35811);
        java.lang.String String_35812 = String_30026;
        java.lang.String String_35813 = String_30029;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", String_35813);
        java.lang.String String_35814 = String_30038;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", String_35814);
        java.lang.String String_35815 = o_consumeToAny_literalMutationString30517__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35815);
        java.lang.Boolean Boolean_35816 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_35817 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_35818 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_35819 = o_consumeToAny_literalMutationString30517__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", String_35819);
        java.lang.String String_35820 = o_consumeToAny_literalMutationString30517__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ef[", String_35820);
        java.lang.String String_35821 = String_30031;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ef[", String_35821);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ef[", String_35820);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35811);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ef[", String_35809);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", String_35819);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35805);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35806);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", o_consumeToAny_literalMutationString30517__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", String_35813);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationString30517__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", String_30029);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35812);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ef[", String_35808);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", String_35810);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", String_35807);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35815);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ef[", o_consumeToAny_literalMutationString30517__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ef[", String_30031);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", String_35814);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("KPBl6hE9", String_30038);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_30040);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_30026);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30541 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30541_sd33896 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationChar30541_sd33896_literalMutationChar40639() {
        char __DSPOT_c_2198 = '(';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_33397 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_33398 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_33399 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_30339 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_30340 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_30341 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30541__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30541__3);
        java.lang.String String_30342 = o_consumeToAny_literalMutationChar30541__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_30342);
        java.lang.String String_33400 = String_30342;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33400);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30541__4 = r.matches('&');
        java.lang.Boolean Boolean_30343 = o_consumeToAny_literalMutationChar30541__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30541__5 = r.matches("&bar;");
        java.lang.Boolean Boolean_30344 = o_consumeToAny_literalMutationChar30541__5;
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30541__6 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30541__7 = r.consumeToAny('*', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30541__7);
        java.lang.String String_33401 = o_consumeToAny_literalMutationChar30541__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_33401);
        java.lang.String String_30345 = o_consumeToAny_literalMutationChar30541__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_30345);
        java.lang.String String_33402 = String_30345;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_33402);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30541__8 = r.consume();
        java.lang.Character Character_30346 = ((char) (o_consumeToAny_literalMutationChar30541__8));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30541__9 = r.consumeToAny('&', '<');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationChar30541__9);
        java.lang.String String_33403 = o_consumeToAny_literalMutationChar30541__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_33403);
        java.lang.String String_30347 = o_consumeToAny_literalMutationChar30541__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_30347);
        java.lang.String String_33404 = String_30347;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_33404);
        java.lang.Character Character_30348 = ((char) (o_consumeToAny_literalMutationChar30541__8));
        java.lang.Character Character_30349 = ((char) (o_consumeToAny_literalMutationChar30541__6));
        java.lang.String String_30350 = o_consumeToAny_literalMutationChar30541__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_30350);
        java.lang.String String_33405 = String_30350;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_33405);
        java.lang.Boolean Boolean_30351 = o_consumeToAny_literalMutationChar30541__5;
        java.lang.Boolean Boolean_30352 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_30353 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_30354 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_30355 = o_consumeToAny_literalMutationChar30541__4;
        java.lang.String String_30356 = o_consumeToAny_literalMutationChar30541__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_30356);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30541_sd33896__43 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_2198);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationChar30541_sd33896__43);
        java.lang.String String_33406 = o_consumeToAny_literalMutationChar30541_sd33896__43;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33406);
        java.lang.String String_33407 = String_30342;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33407);
        java.lang.String String_33408 = String_30347;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_33408);
        java.lang.String String_33409 = String_30356;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33409);
        java.lang.Boolean Boolean_33410 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_33411 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_33412 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_33413 = o_consumeToAny_literalMutationChar30541__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_33413);
        java.lang.String String_33414 = String_30350;
        java.lang.String String_33415 = o_consumeToAny_literalMutationChar30541__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_33415);
        java.lang.String String_33416 = o_consumeToAny_literalMutationChar30541__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33416);
        java.lang.String String_33417 = String_30345;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_33417);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_33404);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_33402);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationChar30541_sd33896__43);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_30342);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_33403);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_33408);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_30345);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33407);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationChar30541__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_33415);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_33414);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_33405);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30541__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_33406);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_33413);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33416);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_33401);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_30347);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33409);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_33400);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_30350);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_30356);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30541__3);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30536 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30536_literalMutationString33536 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationChar30536_literalMutationString33536_literalMutationString35970() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_35091 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_35092 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_35093 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_28930 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_28931 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_28932 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30536__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", o_consumeToAny_literalMutationChar30536__3);
        java.lang.String String_35094 = o_consumeToAny_literalMutationChar30536__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_35094);
        java.lang.String String_28933 = o_consumeToAny_literalMutationChar30536__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_28933);
        java.lang.String String_35095 = String_28933;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_35095);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30536__4 = r.matches('&');
        java.lang.Boolean Boolean_28934 = o_consumeToAny_literalMutationChar30536__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30536__5 = r.matches("&bar;");
        java.lang.Boolean Boolean_28935 = o_consumeToAny_literalMutationChar30536__5;
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30536__6 = r.consume();
        java.lang.Character Character_28936 = ((char) (o_consumeToAny_literalMutationChar30536__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30536__7 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationChar30536__7);
        java.lang.String String_35096 = o_consumeToAny_literalMutationChar30536__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35096);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30536__8 = r.consume();
        java.lang.Character Character_28937 = ((char) (o_consumeToAny_literalMutationChar30536__8));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30536__9 = r.consumeToAny('%', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationChar30536__9);
        java.lang.String String_35097 = o_consumeToAny_literalMutationChar30536__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35097);
        java.lang.String String_28938 = o_consumeToAny_literalMutationChar30536__9;
        java.lang.String String_35098 = String_28938;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35098);
        java.lang.Boolean Boolean_28939 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_28940 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_28941 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_28942 = o_consumeToAny_literalMutationChar30536__4;
        java.lang.String String_28943 = o_consumeToAny_literalMutationChar30536__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_28943);
        java.lang.String String_35099 = String_28943;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_35099);
        java.lang.Character Character_28944 = ((char) (o_consumeToAny_literalMutationChar30536__8));
        java.lang.Boolean Boolean_28945 = o_consumeToAny_literalMutationChar30536__5;
        java.lang.Character Character_28946 = ((char) (o_consumeToAny_literalMutationChar30536__6));
        java.lang.String String_28947 = o_consumeToAny_literalMutationChar30536__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_28947);
        java.lang.String String_35100 = String_28947;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35100);
        java.lang.Boolean Boolean_35101 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_35102 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_35103 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_35104 = o_consumeToAny_literalMutationChar30536__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_35104);
        java.lang.String String_35105 = o_consumeToAny_literalMutationChar30536__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35105);
        java.lang.String String_35106 = String_28933;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_35106);
        java.lang.String String_35107 = String_28938;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35107);
        java.lang.String String_35108 = String_28943;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_35108);
        java.lang.String String_35109 = o_consumeToAny_literalMutationChar30536__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35109);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35096);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_35094);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35098);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_28938);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_35108);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_35106);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35105);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35100);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_35095);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35097);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationChar30536__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_28943);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationChar30536__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_35099);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_35104);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", o_consumeToAny_literalMutationChar30536__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_28933);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(54, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_28947);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_35107);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30543 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30543_literalMutationChar34003 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationChar30543_literalMutationChar34003_sd42273() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_36112 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_36113 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_36114 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_30816 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_30817 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_30818 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30543__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30543__3);
        java.lang.String String_36115 = o_consumeToAny_literalMutationChar30543__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_36115);
        java.lang.String String_30819 = o_consumeToAny_literalMutationChar30543__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_30819);
        java.lang.String String_36116 = String_30819;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_36116);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30543__4 = r.matches('&');
        java.lang.Boolean Boolean_30820 = o_consumeToAny_literalMutationChar30543__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30543__5 = r.matches("&bar;");
        java.lang.Boolean Boolean_30821 = o_consumeToAny_literalMutationChar30543__5;
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30543__6 = r.consume();
        java.lang.Character Character_30822 = ((char) (o_consumeToAny_literalMutationChar30543__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30543__7 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30543__7);
        java.lang.String String_36117 = o_consumeToAny_literalMutationChar30543__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_36117);
        java.lang.String String_30823 = o_consumeToAny_literalMutationChar30543__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_30823);
        java.lang.String String_36118 = String_30823;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_36118);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30543__8 = r.consume();
        java.lang.Character Character_30824 = ((char) (o_consumeToAny_literalMutationChar30543__8));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30543__9 = r.consumeToAny(' ', '\n');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationChar30543__9);
        java.lang.String String_36119 = o_consumeToAny_literalMutationChar30543__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_36119);
        java.lang.String String_30825 = o_consumeToAny_literalMutationChar30543__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_30825);
        java.lang.String String_36120 = String_30825;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_36120);
        java.lang.Boolean Boolean_30826 = o_consumeToAny_literalMutationChar30543__4;
        java.lang.String String_30827 = o_consumeToAny_literalMutationChar30543__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_30827);
        java.lang.String String_36121 = String_30827;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_36121);
        java.lang.Character Character_30828 = ((char) (o_consumeToAny_literalMutationChar30543__8));
        java.lang.Boolean Boolean_30829 = o_consumeToAny_literalMutationChar30543__5;
        java.lang.Character Character_30830 = ((char) (o_consumeToAny_literalMutationChar30543__6));
        java.lang.String String_30831 = o_consumeToAny_literalMutationChar30543__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_30831);
        java.lang.String String_36122 = String_30831;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_36122);
        java.lang.Boolean Boolean_30832 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_30833 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_30834 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_36123 = o_consumeToAny_literalMutationChar30543__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_36123);
        java.lang.String String_36124 = o_consumeToAny_literalMutationChar30543__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_36124);
        java.lang.String String_36125 = o_consumeToAny_literalMutationChar30543__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_36125);
        java.lang.Boolean Boolean_36126 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_36127 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_36128 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_36129 = String_30819;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_36129);
        java.lang.String String_36130 = String_30825;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_36130);
        java.lang.String String_36131 = String_30823;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_36131);
        java.lang.String String_36132 = String_30831;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_36132);
        java.lang.String String_36133 = String_30827;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_36133);
        // StatementAdd: add invocation of a method
        r.isEmpty();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_36117);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30543__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_36115);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_30831);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_36119);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_30819);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_30823);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_36122);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_36129);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_36125);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_30825);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_36120);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30543__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_36133);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_30827);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_36121);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_36123);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_36132);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_36130);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_36116);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_36118);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationChar30543__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_36124);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_36131);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30524 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToAny_literalMutationChar30524_literalMutationChar32848 */
    @org.junit.Test(timeout = 10000)
    public void consumeToAny_literalMutationChar30524_literalMutationChar32848_sd41516() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One &bar; qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_35659 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_35660 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_35661 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_30596 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_30597 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_30598 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30524__3 = r.consumeToAny('&', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30524__3);
        java.lang.String String_35662 = o_consumeToAny_literalMutationChar30524__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_35662);
        java.lang.String String_30599 = o_consumeToAny_literalMutationChar30524__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_30599);
        java.lang.String String_35663 = String_30599;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_35663);
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30524__4 = r.matches('&');
        java.lang.Boolean Boolean_30600 = o_consumeToAny_literalMutationChar30524__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_consumeToAny_literalMutationChar30524__5 = r.matches("&bar;");
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30524__6 = r.consume();
        java.lang.Character Character_30601 = ((char) (o_consumeToAny_literalMutationChar30524__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30524__7 = r.consumeToAny('%', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30524__7);
        java.lang.String String_35664 = o_consumeToAny_literalMutationChar30524__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_35664);
        java.lang.String String_30602 = o_consumeToAny_literalMutationChar30524__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_30602);
        java.lang.String String_35665 = String_30602;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_35665);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToAny_literalMutationChar30524__8 = r.consume();
        java.lang.Character Character_30603 = ((char) (o_consumeToAny_literalMutationChar30524__8));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30524__9 = r.consumeToAny('%', ';');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationChar30524__9);
        java.lang.String String_35666 = o_consumeToAny_literalMutationChar30524__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_35666);
        java.lang.String String_30604 = o_consumeToAny_literalMutationChar30524__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_30604);
        java.lang.String String_35667 = String_30604;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_35667);
        java.lang.Boolean Boolean_30605 = o_consumeToAny_literalMutationChar30524__5;
        java.lang.String String_30606 = o_consumeToAny_literalMutationChar30524__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_30606);
        java.lang.String String_35668 = String_30606;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_35668);
        java.lang.Character Character_30607 = ((char) (o_consumeToAny_literalMutationChar30524__8));
        java.lang.String String_30608 = o_consumeToAny_literalMutationChar30524__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_30608);
        java.lang.String String_35669 = String_30608;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_35669);
        java.lang.Character Character_30609 = ((char) (o_consumeToAny_literalMutationChar30524__6));
        java.lang.Boolean Boolean_30610 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_30611 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_30612 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_30613 = o_consumeToAny_literalMutationChar30524__4;
        java.lang.String String_35670 = String_30608;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_35670);
        java.lang.String String_35671 = String_30606;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_35671);
        java.lang.String String_35672 = String_30604;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_35672);
        java.lang.Boolean Boolean_35673 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_35674 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_35675 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_35676 = o_consumeToAny_literalMutationChar30524__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_35676);
        java.lang.String String_35677 = String_30599;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_35677);
        java.lang.String String_35678 = o_consumeToAny_literalMutationChar30524__9;
        java.lang.String String_35679 = o_consumeToAny_literalMutationChar30524__3;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_35679);
        java.lang.String String_35680 = String_30602;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_35680);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToAny_literalMutationChar30524_literalMutationChar32848_sd41516__64 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToAny_literalMutationChar30524_literalMutationChar32848_sd41516__64);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_35680);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_35671);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToAny_literalMutationChar30524__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", o_consumeToAny_literalMutationChar30524__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_35668);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", o_consumeToAny_literalMutationChar30524__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_35669);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_35663);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_30606);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_35672);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_35679);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_35664);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_35676);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_35662);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_30602);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_35665);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_30604);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_35667);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_35666);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_30599);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(" qux", String_35678);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_30608);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", String_35677);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("bar", String_35670);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToChar */
    @org.junit.Test(timeout = 10000)
    public void consumeToChar_sd47964() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_sd47964__3 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToChar_sd47964__3);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_sd47964__4 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToChar_sd47964__4);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToChar_sd47964__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar_sd47964__5)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_sd47964__6 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToChar_sd47964__6);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToChar_sd47964__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar_sd47964__7)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_sd47964__8 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hree", o_consumeToChar_sd47964__8);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_sd47964__9 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToChar_sd47964__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToChar_sd47964__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hree", o_consumeToChar_sd47964__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToChar_sd47964__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar_sd47964__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar_sd47964__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToChar_sd47964__6);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToChar */
    @org.junit.Test(timeout = 10000)
    public void consumeToChar_literalMutationChar47958() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_literalMutationChar47958__3 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToChar_literalMutationChar47958__3);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_literalMutationChar47958__4 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToChar_literalMutationChar47958__4);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToChar_literalMutationChar47958__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar_literalMutationChar47958__5)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_literalMutationChar47958__6 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToChar_literalMutationChar47958__6);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToChar_literalMutationChar47958__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar_literalMutationChar47958__7)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_literalMutationChar47958__8 = r.consumeTo(' ');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hree", o_consumeToChar_literalMutationChar47958__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToChar_literalMutationChar47958__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToChar_literalMutationChar47958__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToChar_literalMutationChar47958__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar_literalMutationChar47958__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar_literalMutationChar47958__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToChar */
    @org.junit.Test(timeout = 10000)
    public void consumeToChar_literalMutationChar47945_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
            r.consumeTo('T');
            r.consumeTo(' ');
            r.consume();
            r.consumeTo('T');
            r.consume();
            r.consumeTo('T');
            org.junit.Assert.fail("consumeToChar_literalMutationChar47945 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToChar */
    @org.junit.Test(timeout = 10000)
    public void consumeToChar_sd47963() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_sd47963__3 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToChar_sd47963__3);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_sd47963__4 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToChar_sd47963__4);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToChar_sd47963__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar_sd47963__5)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_sd47963__6 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToChar_sd47963__6);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToChar_sd47963__7 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_sd47963__8 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hree", o_consumeToChar_sd47963__8);
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hree", o_consumeToChar_sd47963__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar_sd47963__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar_sd47963__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToChar_sd47963__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToChar_sd47963__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToChar_sd47963__3);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToChar */
    @org.junit.Test(timeout = 10000)
    public void consumeToChar_sd47969() {
        char[] __DSPOT_chars_2619 = new char[]{ 't' , 'm' , '%' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_sd47969__4 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToChar_sd47969__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_sd47969__5 = r.consumeTo('T');
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToChar_sd47969__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar_sd47969__6)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_sd47969__7 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToChar_sd47969__7);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToChar_sd47969__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar_sd47969__8)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_sd47969__9 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hree", o_consumeToChar_sd47969__9);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_sd47969__10 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_2619);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToChar_sd47969__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToChar_sd47969__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToChar_sd47969__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToChar_sd47969__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar_sd47969__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar_sd47969__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hree", o_consumeToChar_sd47969__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToChar */
    @org.junit.Test(timeout = 10000)
    public void consumeToChar_literalMutationChar47952() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_literalMutationChar47952__3 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToChar_literalMutationChar47952__3);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_literalMutationChar47952__4 = r.consumeTo('T');
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToChar_literalMutationChar47952__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar_literalMutationChar47952__5)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_literalMutationChar47952__6 = r.consumeTo(' ');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo", o_consumeToChar_literalMutationChar47952__6);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToChar_literalMutationChar47952__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (o_consumeToChar_literalMutationChar47952__7)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToChar_literalMutationChar47952__8 = r.consumeTo('T');
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToChar_literalMutationChar47952__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (o_consumeToChar_literalMutationChar47952__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo", o_consumeToChar_literalMutationChar47952__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToChar_literalMutationChar47952__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToChar_literalMutationChar47952__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToChar_literalMutationChar47952__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(8, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToChar */
    @org.junit.Test(timeout = 10000)
    public void consumeToChar_literalMutationChar47955_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
            r.consumeTo('T');
            r.consumeTo('T');
            r.consume();
            r.consumeTo('S');
            r.consume();
            r.consumeTo('T');
            org.junit.Assert.fail("consumeToChar_literalMutationChar47955 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToChar */
    @org.junit.Test(timeout = 10000)
    public void consumeToChar_literalMutationString47934_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
            r.consumeTo('T');
            r.consumeTo('T');
            r.consume();
            r.consumeTo('T');
            r.consume();
            r.consumeTo('T');
            org.junit.Assert.fail("consumeToChar_literalMutationString47934 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58266() {
        java.lang.String in = "one two three";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
        java.lang.String String_40701 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40701);
        java.lang.String String_40702 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40702);
        r.isEmpty();
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40702);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40701);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58267() {
        java.lang.String in = "one two three";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.String toEnd = r.consumeToEnd();
        java.lang.String String_40703 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40703);
        java.lang.String String_40704 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40704);
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToEnd_sd58267__9 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58267__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40704);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40703);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_literalMutationString58263() {
        java.lang.String in = "one two thre";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thre", in);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thre", toEnd);
        java.lang.String String_40695 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thre", String_40695);
        java.lang.String String_40696 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thre", String_40696);
        r.isEmpty();
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(12, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thre", String_40695);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thre", String_40696);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thre", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thre", toEnd);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_literalMutationString58262() {
        java.lang.String in = "one ]wo three";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one ]wo three", in);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one ]wo three", toEnd);
        java.lang.String String_40693 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one ]wo three", String_40693);
        java.lang.String String_40694 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one ]wo three", String_40694);
        r.isEmpty();
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one ]wo three", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one ]wo three", String_40693);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one ]wo three", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one ]wo three", String_40694);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58269() {
        char __DSPOT_c_3094 = '.';
        java.lang.String in = "one two three";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
        java.lang.String String_40707 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40707);
        java.lang.String String_40708 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40708);
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToEnd_sd58269__10 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_3094);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58269__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40708);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40707);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58272() {
        char[] __DSPOT_chars_3095 = new char[]{ 'u' };
        java.lang.String in = "one two three";
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
        java.lang.String String_40713 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40713);
        java.lang.String String_40714 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40714);
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToEnd_sd58272__10 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_3095);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58272__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40714);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40713);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58267 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58267_sd58409() {
        char __DSPOT_c_3110 = 'D';
        java.lang.String in = "one two three";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        java.lang.String String_42017 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42017);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_42018 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42019 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42020 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
        java.lang.String String_40703 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40703);
        java.lang.String String_42021 = String_40703;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42021);
        java.lang.String String_40704 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40704);
        java.lang.String String_42022 = String_40704;
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToEnd_sd58267__9 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58267__9);
        java.lang.String String_42023 = o_consumeToEnd_sd58267__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42023);
        java.lang.String String_42024 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42024);
        java.lang.String String_42025 = String_40704;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42025);
        java.lang.String String_42026 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42026);
        java.lang.String String_42027 = String_40703;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42027);
        java.lang.Boolean Boolean_42028 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42029 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42030 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToEnd_sd58267_sd58409__28 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_3110);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58267_sd58409__28);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42026);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42017);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42022);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42025);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42027);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40704);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58267__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40703);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42023);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42024);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42021);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58269 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58269_literalMutationString58432() {
        char __DSPOT_c_3094 = '.';
        java.lang.String in = "";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", in);
        java.lang.String String_42332 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42332);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_42333 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42334 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42335 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", toEnd);
        java.lang.String String_42336 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42336);
        java.lang.String String_40707 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_40707);
        java.lang.String String_42337 = String_40707;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42337);
        java.lang.String String_40708 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_40708);
        java.lang.String String_42338 = String_40708;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42338);
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToEnd_sd58269__10 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_3094);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58269__10);
        java.lang.String String_42339 = o_consumeToEnd_sd58269__10;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42339);
        java.lang.String String_42340 = String_40708;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42340);
        java.lang.String String_42341 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42341);
        java.lang.String String_42342 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42342);
        java.lang.String String_42343 = String_40707;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42343);
        java.lang.Boolean Boolean_42344 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42345 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42346 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42332);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42342);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42341);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42343);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42339);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_40707);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_40708);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42340);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42336);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42337);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58269__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42338);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58268 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58268_sd58425() {
        char[] __DSPOT_chars_3113 = new char[]{ 'D' };
        java.lang.String in = "one two three";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        java.lang.String String_42229 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42229);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_42230 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42231 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42232 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
        java.lang.String String_40705 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40705);
        java.lang.String String_42233 = String_40705;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42233);
        java.lang.String String_40706 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40706);
        java.lang.String String_42234 = String_40706;
        r.isEmpty();
        // StatementAdd: add invocation of a method
        r.isEmpty();
        java.lang.Boolean Boolean_42235 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42236 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42237 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_42238 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42238);
        java.lang.String String_42239 = String_40705;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42239);
        java.lang.String String_42240 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42240);
        java.lang.String String_42241 = String_40706;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42241);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToEnd_sd58268_sd58425__25 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_3113);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58268_sd58425__25);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42241);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42240);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42238);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42233);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42234);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42239);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42229);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40706);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40705);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_literalMutationString58265 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_literalMutationString58265_literalMutationString58377() {
        java.lang.String in = "B]N)9C)*^k_1I>";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", in);
        java.lang.String String_41569 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_41569);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('B', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_41570 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_41571 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_41572 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", toEnd);
        java.lang.String String_41573 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_41573);
        java.lang.String String_40699 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_40699);
        java.lang.String String_41574 = String_40699;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_41574);
        java.lang.String String_40700 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_40700);
        java.lang.String String_41575 = String_40700;
        r.isEmpty();
        java.lang.String String_41576 = String_40699;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_41576);
        java.lang.String String_41577 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_41577);
        java.lang.Boolean Boolean_41578 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_41579 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_41580 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_41581 = String_40700;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_41581);
        java.lang.String String_41582 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_41582);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_40700);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_41575);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_41574);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_41573);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_41576);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_41569);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_40699);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_41581);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", String_41577);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("B]N)9C)*^k_1I>", toEnd);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58267 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58267_sd58410() {
        java.lang.String in = "one two three";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        java.lang.String String_42031 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42031);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_42032 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42033 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42034 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
        java.lang.String String_40703 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40703);
        java.lang.String String_42035 = String_40703;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42035);
        java.lang.String String_40704 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40704);
        java.lang.String String_42036 = String_40704;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42036);
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToEnd_sd58267__9 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58267__9);
        java.lang.String String_42037 = o_consumeToEnd_sd58267__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42037);
        java.lang.String String_42038 = toEnd;
        java.lang.String String_42039 = String_40704;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42039);
        java.lang.String String_42040 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42040);
        java.lang.String String_42041 = String_40703;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42041);
        java.lang.Boolean Boolean_42042 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42043 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42044 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToEnd_sd58267_sd58410__27 = // StatementAdd: add invocation of a method
        r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_consumeToEnd_sd58267_sd58410__27)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42035);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40703);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40704);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42039);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42041);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42037);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42031);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58267__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42036);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42038);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42040);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58268 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58268_sd58419() {
        java.lang.String in = "one two three";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        java.lang.String String_42151 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42151);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_42152 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42153 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42154 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
        java.lang.String String_40705 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40705);
        java.lang.String String_42155 = String_40705;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42155);
        java.lang.String String_40706 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40706);
        java.lang.String String_42156 = String_40706;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42156);
        r.isEmpty();
        // StatementAdd: add invocation of a method
        r.isEmpty();
        java.lang.Boolean Boolean_42157 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42158 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42159 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_42160 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42160);
        java.lang.String String_42161 = String_40705;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42161);
        java.lang.String String_42162 = in;
        java.lang.String String_42163 = String_40706;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42163);
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42160);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42156);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42155);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42163);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42151);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42162);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_42161);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40706);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40705);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58269 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58269_literalMutationString58435() {
        char __DSPOT_c_3094 = '.';
        java.lang.String in = "one two thee";
        java.lang.String String_42377 = in;
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_42378 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42379 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42380 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", toEnd);
        java.lang.String String_42381 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_42381);
        java.lang.String String_40707 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_40707);
        java.lang.String String_42382 = String_40707;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_42382);
        java.lang.String String_40708 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_40708);
        java.lang.String String_42383 = String_40708;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_42383);
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToEnd_sd58269__10 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_3094);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58269__10);
        java.lang.String String_42384 = o_consumeToEnd_sd58269__10;
        java.lang.String String_42385 = String_40708;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_42385);
        java.lang.String String_42386 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_42386);
        java.lang.String String_42387 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_42387);
        java.lang.String String_42388 = String_40707;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_42388);
        java.lang.Boolean Boolean_42389 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42390 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42391 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_42388);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_42381);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_42383);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58269__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42384);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_42377);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_42385);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_42386);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_40708);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_42382);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_40707);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(12, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thee", String_42387);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58266 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58266_sd58399() {
        char[] __DSPOT_chars_3109 = new char[]{ '`' , 'B' , '[' , '<' };
        java.lang.String in = "one two three";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        java.lang.String String_41877 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_41877);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_41878 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_41879 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_41880 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
        java.lang.String String_41881 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_41881);
        java.lang.String String_40701 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40701);
        java.lang.String String_41882 = String_40701;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_41882);
        java.lang.String String_40702 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40702);
        java.lang.String String_41883 = String_40702;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_41883);
        r.isEmpty();
        // StatementAdd: add invocation of a method
        r.advance();
        java.lang.String String_41884 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_41884);
        java.lang.String String_41885 = String_40702;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_41885);
        java.lang.String String_41886 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_41886);
        java.lang.Boolean Boolean_41887 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_41888 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_41889 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_41890 = String_40701;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_41890);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToEnd_sd58266_sd58399__26 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_3109);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58266_sd58399__26);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40702);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_41884);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_41877);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_41881);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_41890);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_41885);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_40701);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_41886);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_41883);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two three", String_41882);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58268 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58268_literalMutationString58414() {
        java.lang.String in = "";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", in);
        java.lang.String String_42086 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42086);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_42087 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42088 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42089 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", toEnd);
        java.lang.String String_40705 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_40705);
        java.lang.String String_42090 = String_40705;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42090);
        java.lang.String String_40706 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_40706);
        java.lang.String String_42091 = String_40706;
        r.isEmpty();
        // StatementAdd: add invocation of a method
        r.isEmpty();
        java.lang.Boolean Boolean_42092 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42093 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42094 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_42095 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42095);
        java.lang.String String_42096 = String_40705;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42096);
        java.lang.String String_42097 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42097);
        java.lang.String String_42098 = String_40706;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42098);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42091);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42096);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_40706);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42095);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42090);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42086);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42097);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_40705);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58269 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58269_sd58438 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58269_sd58438_sd60860_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            char __DSPOT_c_3370 = 'u';
            char __DSPOT_c_3094 = '.';
            java.lang.String in = "one two three";
            java.lang.String String_44225 = in;
            java.lang.String String_42422 = in;
            java.lang.String String_44226 = String_42422;
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
            java.lang.Boolean Boolean_44227 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_44228 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_44229 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.Boolean Boolean_42423 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_42424 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_42425 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.String toEnd = r.consumeToEnd();
            java.lang.String String_44230 = toEnd;
            java.lang.String String_42426 = toEnd;
            java.lang.String String_44231 = String_42426;
            java.lang.String String_40707 = in;
            java.lang.String String_44232 = String_40707;
            java.lang.String String_42427 = String_40707;
            java.lang.String String_44233 = String_42427;
            java.lang.String String_40708 = toEnd;
            java.lang.String String_44234 = String_40708;
            java.lang.String String_42428 = String_40708;
            java.lang.String String_44235 = String_42428;
            r.isEmpty();
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_consumeToEnd_sd58269__10 = // StatementAdd: add invocation of a method
            r.consumeTo(__DSPOT_c_3094);
            java.lang.String String_44236 = o_consumeToEnd_sd58269__10;
            java.lang.String String_42429 = o_consumeToEnd_sd58269__10;
            java.lang.String String_44237 = String_42429;
            java.lang.String String_42430 = String_40708;
            java.lang.String String_44238 = String_42430;
            java.lang.String String_42431 = toEnd;
            java.lang.String String_42432 = in;
            java.lang.String String_44239 = String_42432;
            java.lang.String String_42433 = String_40707;
            java.lang.String String_44240 = String_42433;
            java.lang.Boolean Boolean_42434 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_42435 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_42436 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            // StatementAdd: add invocation of a method
            r.advance();
            java.lang.String String_44241 = String_42427;
            java.lang.String String_44242 = String_42431;
            java.lang.String String_44243 = String_42430;
            java.lang.String String_44244 = o_consumeToEnd_sd58269__10;
            java.lang.Boolean Boolean_44245 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_44246 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_44247 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.String String_44248 = String_42428;
            java.lang.String String_44249 = String_42433;
            java.lang.String String_44250 = String_42426;
            java.lang.String String_44251 = in;
            java.lang.String String_44252 = String_42432;
            java.lang.String String_44253 = String_42429;
            java.lang.String String_44254 = String_40707;
            java.lang.String String_44255 = String_42422;
            java.lang.String String_44256 = toEnd;
            java.lang.String String_44257 = String_40708;
            // StatementAdd: add invocation of a method
            r.consumeTo(__DSPOT_c_3370);
            org.junit.Assert.fail("consumeToEnd_sd58269_sd58438_sd60860 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58269 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58269_literalMutationString58433 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58269_literalMutationString58433_literalMutationString60756() {
        char __DSPOT_c_3094 = '.';
        java.lang.String in = "";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", in);
        java.lang.String String_45509 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45509);
        java.lang.String String_42347 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42347);
        java.lang.String String_45510 = String_42347;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45510);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_45511 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_45512 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_45513 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_42348 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42349 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42350 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", toEnd);
        java.lang.String String_45514 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45514);
        java.lang.String String_42351 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42351);
        java.lang.String String_45515 = String_42351;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45515);
        java.lang.String String_40707 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_40707);
        java.lang.String String_45516 = String_40707;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45516);
        java.lang.String String_42352 = String_40707;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42352);
        java.lang.String String_45517 = String_42352;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45517);
        java.lang.String String_40708 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_40708);
        java.lang.String String_45518 = String_40708;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45518);
        java.lang.String String_42353 = String_40708;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42353);
        java.lang.String String_45519 = String_42353;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45519);
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToEnd_sd58269__10 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_3094);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58269__10);
        java.lang.String String_45520 = o_consumeToEnd_sd58269__10;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45520);
        java.lang.String String_42354 = o_consumeToEnd_sd58269__10;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42354);
        java.lang.String String_45521 = String_42354;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45521);
        java.lang.String String_42355 = String_40708;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42355);
        java.lang.String String_45522 = String_42355;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45522);
        java.lang.String String_42356 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42356);
        java.lang.String String_42357 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42357);
        java.lang.String String_45523 = String_42357;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45523);
        java.lang.String String_42358 = String_40707;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42358);
        java.lang.String String_45524 = String_42358;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45524);
        java.lang.Boolean Boolean_42359 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42360 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42361 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_45525 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45525);
        java.lang.Boolean Boolean_45526 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_45527 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_45528 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_45529 = String_42357;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45529);
        java.lang.String String_45530 = String_42358;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45530);
        java.lang.String String_45531 = String_42351;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45531);
        java.lang.String String_45532 = String_42347;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45532);
        java.lang.String String_45533 = String_42353;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45533);
        java.lang.String String_45534 = String_40708;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45534);
        java.lang.String String_45535 = String_42355;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45535);
        java.lang.String String_45536 = in;
        java.lang.String String_45537 = String_40707;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45537);
        java.lang.String String_45538 = o_consumeToEnd_sd58269__10;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45538);
        java.lang.String String_45539 = String_42352;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45539);
        java.lang.String String_45540 = String_42354;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45540);
        java.lang.String String_45541 = String_42356;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45541);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45515);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45535);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45522);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45534);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42355);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45533);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42356);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42347);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45514);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45523);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45516);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45509);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45520);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45538);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42351);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45539);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45531);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42358);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45532);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42357);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45524);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45529);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45519);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58269__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42353);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45518);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45517);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45530);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42352);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_40708);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45537);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45521);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42354);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_40707);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45540);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45536);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45510);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_45525);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58269 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58269_literalMutationString58432 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58269_literalMutationString58432_literalMutationString60741() {
        char __DSPOT_c_3094 = '.';
        java.lang.String in = "<span>Hello <div>there</div> <span>now</span></span>";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", in);
        java.lang.String String_48704 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48704);
        java.lang.String String_42332 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_42332);
        java.lang.String String_48705 = String_42332;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48705);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_48706 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_48707 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_48708 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_42333 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42334 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42335 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", toEnd);
        java.lang.String String_48709 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48709);
        java.lang.String String_42336 = toEnd;
        java.lang.String String_48710 = String_42336;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48710);
        java.lang.String String_40707 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_40707);
        java.lang.String String_48711 = String_40707;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48711);
        java.lang.String String_42337 = String_40707;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_42337);
        java.lang.String String_48712 = String_42337;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48712);
        java.lang.String String_40708 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_40708);
        java.lang.String String_48713 = String_40708;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48713);
        java.lang.String String_42338 = String_40708;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_42338);
        java.lang.String String_48714 = String_42338;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48714);
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToEnd_sd58269__10 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_3094);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58269__10);
        java.lang.String String_48715 = o_consumeToEnd_sd58269__10;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_48715);
        java.lang.String String_42339 = o_consumeToEnd_sd58269__10;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42339);
        java.lang.String String_48716 = String_42339;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_48716);
        java.lang.String String_42340 = String_40708;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_42340);
        java.lang.String String_48717 = String_42340;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48717);
        java.lang.String String_42341 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_42341);
        java.lang.String String_48718 = String_42341;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48718);
        java.lang.String String_42342 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_42342);
        java.lang.String String_48719 = String_42342;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48719);
        java.lang.String String_42343 = String_40707;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_42343);
        java.lang.String String_48720 = String_42343;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48720);
        java.lang.Boolean Boolean_42344 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42345 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42346 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_48721 = String_42332;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48721);
        java.lang.String String_48722 = String_42342;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48722);
        java.lang.Boolean Boolean_48723 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_48724 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_48725 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_48726 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48726);
        java.lang.String String_48727 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48727);
        java.lang.String String_48728 = String_42341;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48728);
        java.lang.String String_48729 = String_42343;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48729);
        java.lang.String String_48730 = String_42339;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_48730);
        java.lang.String String_48731 = String_40707;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48731);
        java.lang.String String_48732 = String_40708;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48732);
        java.lang.String String_48733 = String_42340;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48733);
        java.lang.String String_48734 = String_42336;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48734);
        java.lang.String String_48735 = String_42337;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48735);
        java.lang.String String_48736 = o_consumeToEnd_sd58269__10;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_48736);
        java.lang.String String_48737 = String_42338;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48737);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48727);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_48716);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_42339);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_48715);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_42336);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48729);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_42340);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48728);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48709);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48718);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48733);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48722);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48717);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48719);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48734);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48714);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_42341);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_42338);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48726);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_48736);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48713);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48735);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48705);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_42343);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_42332);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_40708);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48720);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48721);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48732);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_42342);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58269__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48711);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48704);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48731);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_40707);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48712);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_42337);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_48730);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_48710);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58271 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58271_literalMutationString58463 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58271_literalMutationString58463_sd61254() {
        char[] __DSPOT_chars_3421 = new char[0];
        java.lang.String in = "oe two three";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", in);
        java.lang.String String_47599 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47599);
        java.lang.String String_42779 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_42779);
        java.lang.String String_47600 = String_42779;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47600);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_47601 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_47602 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_47603 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_42780 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42781 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42782 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", toEnd);
        java.lang.String String_47604 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47604);
        java.lang.String String_42783 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_42783);
        java.lang.String String_47605 = String_42783;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47605);
        java.lang.String String_40711 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_40711);
        java.lang.String String_47606 = String_40711;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47606);
        java.lang.String String_42784 = String_40711;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_42784);
        java.lang.String String_47607 = String_42784;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47607);
        java.lang.String String_40712 = toEnd;
        java.lang.String String_47608 = String_40712;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47608);
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        int o_consumeToEnd_sd58271__9 = // StatementAdd: add invocation of a method
        r.pos();
        java.lang.Integer Integer_42785 = ((int) (o_consumeToEnd_sd58271__9));
        java.lang.String String_42786 = String_40712;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_42786);
        java.lang.String String_47609 = String_42786;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47609);
        java.lang.String String_42787 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_42787);
        java.lang.String String_47610 = String_42787;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47610);
        java.lang.String String_42788 = String_40711;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_42788);
        java.lang.String String_47611 = String_42788;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47611);
        java.lang.String String_42789 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_42789);
        java.lang.String String_47612 = String_42789;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47612);
        java.lang.Boolean Boolean_42790 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42791 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42792 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_47613 = String_40712;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47613);
        java.lang.String String_47614 = String_42788;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47614);
        java.lang.String String_47615 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47615);
        java.lang.String String_47616 = String_42787;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47616);
        java.lang.String String_47617 = String_42784;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47617);
        java.lang.String String_47618 = String_42779;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47618);
        java.lang.String String_47619 = String_42789;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47619);
        java.lang.String String_47620 = String_42783;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47620);
        java.lang.String String_47621 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47621);
        java.lang.Boolean Boolean_47622 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_47623 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_47624 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_47625 = String_42786;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47625);
        java.lang.String String_47626 = String_40711;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47626);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToEnd_sd58271_literalMutationString58463_sd61254__56 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_3421);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58271_literalMutationString58463_sd61254__56);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_42788);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47625);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47604);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_42783);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_42789);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_42787);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(12, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47600);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47605);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47626);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47611);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47609);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47620);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_42786);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47606);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47612);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47613);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47615);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47616);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47608);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47619);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47618);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47614);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_42784);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47599);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47607);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_42779);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47621);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_40711);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_40712);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47617);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oe two three", String_47610);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58270 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58270_literalMutationString58446 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58270_literalMutationString58446_literalMutationString61015() {
        java.lang.String in = "<span>[ello <div>there</div> <span>now</span></span>";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", in);
        java.lang.String String_44199 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44199);
        java.lang.String String_42541 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_42541);
        java.lang.String String_44200 = String_42541;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44200);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_44201 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_44202 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_44203 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_42542 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42543 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42544 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", toEnd);
        java.lang.String String_44204 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44204);
        java.lang.String String_42545 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_42545);
        java.lang.String String_44205 = String_42545;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44205);
        java.lang.String String_40709 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_40709);
        java.lang.String String_44206 = String_40709;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44206);
        java.lang.String String_40710 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_40710);
        java.lang.String String_44207 = String_40710;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44207);
        java.lang.String String_42546 = String_40710;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_42546);
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToEnd_sd58270__9 = // StatementAdd: add invocation of a method
        r.current();
        java.lang.Character Character_42547 = ((char) (o_consumeToEnd_sd58270__9));
        java.lang.String String_42548 = String_40710;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_42548);
        java.lang.String String_44208 = String_42548;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44208);
        java.lang.Boolean Boolean_42549 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42550 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42551 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_42552 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_42552);
        java.lang.String String_44209 = String_42552;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44209);
        java.lang.String String_42553 = String_40709;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_42553);
        java.lang.String String_44210 = String_42553;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44210);
        java.lang.String String_42554 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_42554);
        java.lang.String String_44211 = String_42554;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44211);
        java.lang.String String_44212 = String_42546;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44212);
        java.lang.String String_44213 = String_42553;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44213);
        java.lang.String String_44214 = String_40710;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44214);
        java.lang.String String_44215 = String_42541;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44215);
        java.lang.String String_44216 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44216);
        java.lang.String String_44217 = String_42545;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44217);
        java.lang.String String_44218 = String_40709;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44218);
        java.lang.String String_44219 = String_42548;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44219);
        java.lang.Boolean Boolean_44220 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_44221 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_44222 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_44223 = String_42552;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44223);
        java.lang.String String_44224 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44224);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44219);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_42548);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44208);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44218);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44215);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44216);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44205);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44217);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_42552);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_42546);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_40709);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44206);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44211);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_40710);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44200);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_42541);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44199);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44207);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_42554);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44214);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44209);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44204);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_42545);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_42553);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44213);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44223);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44212);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>[ello <div>there</div> <span>now</span></span>", String_44210);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_literalMutationString58265 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_literalMutationString58265_sd58382 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_literalMutationString58265_sd58382_literalMutationString59987() {
        java.lang.String in = "";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", in);
        java.lang.String String_46828 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46828);
        java.lang.String String_41639 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_41639);
        java.lang.String String_46829 = String_41639;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46829);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_46830 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_46831 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_46832 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_41640 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_41641 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_41642 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", toEnd);
        java.lang.String String_46833 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46833);
        java.lang.String String_41643 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_41643);
        java.lang.String String_46834 = String_41643;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46834);
        java.lang.String String_40699 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_40699);
        java.lang.String String_46835 = String_40699;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46835);
        java.lang.String String_41644 = String_40699;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_41644);
        java.lang.String String_46836 = String_41644;
        java.lang.String String_40700 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_40700);
        java.lang.String String_46837 = String_40700;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46837);
        java.lang.String String_41645 = String_40700;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_41645);
        java.lang.String String_46838 = String_41645;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46838);
        r.isEmpty();
        java.lang.String String_41646 = String_40699;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_41646);
        java.lang.String String_46839 = String_41646;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46839);
        java.lang.String String_41647 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_41647);
        java.lang.Boolean Boolean_41648 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_41649 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_41650 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_41651 = String_40700;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_41651);
        java.lang.String String_46840 = String_41651;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46840);
        java.lang.String String_41652 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_41652);
        java.lang.String String_46841 = String_41652;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46841);
        // StatementAdd: add invocation of a method
        r.isEmpty();
        java.lang.Boolean Boolean_46842 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_46843 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_46844 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_46845 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46845);
        java.lang.String String_46846 = String_41647;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46846);
        java.lang.String String_46847 = String_41651;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46847);
        java.lang.String String_46848 = String_41652;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46848);
        java.lang.String String_46849 = String_40699;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46849);
        java.lang.String String_46850 = String_40700;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46850);
        java.lang.String String_46851 = String_41643;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46851);
        java.lang.String String_46852 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46852);
        java.lang.String String_46853 = String_41639;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46853);
        java.lang.String String_46854 = String_41646;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46854);
        java.lang.String String_46855 = String_41645;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46855);
        java.lang.String String_46856 = String_41644;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46856);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46852);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46850);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46853);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46849);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46839);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_41652);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_41639);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_41643);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46828);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_41646);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46829);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46838);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46841);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46854);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46833);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46855);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46851);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46836);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46845);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_41645);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46837);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_41644);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46847);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46848);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46834);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_40699);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46840);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46846);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_41647);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46835);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_40700);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_41651);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58266 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58266_literalMutationString58392 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58266_literalMutationString58392_literalMutationString60148() {
        java.lang.String in = "CuJ<qpVJR(t QQ";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", in);
        java.lang.String String_44438 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44438);
        java.lang.String String_41779 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_41779);
        java.lang.String String_44439 = String_41779;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44439);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_44440 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_44441 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_44442 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_41780 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_41781 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_41782 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", toEnd);
        java.lang.String String_44443 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44443);
        java.lang.String String_41783 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_41783);
        java.lang.String String_44444 = String_41783;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44444);
        java.lang.String String_40701 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_40701);
        java.lang.String String_44445 = String_40701;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44445);
        java.lang.String String_41784 = String_40701;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_41784);
        java.lang.String String_44446 = String_41784;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44446);
        java.lang.String String_40702 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_40702);
        java.lang.String String_44447 = String_40702;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44447);
        java.lang.String String_41785 = String_40702;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_41785);
        java.lang.String String_44448 = String_41785;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44448);
        r.isEmpty();
        // StatementAdd: add invocation of a method
        r.advance();
        java.lang.String String_41786 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_41786);
        java.lang.String String_44449 = String_41786;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44449);
        java.lang.String String_41787 = String_40702;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_41787);
        java.lang.String String_44450 = String_41787;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44450);
        java.lang.String String_41788 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_41788);
        java.lang.String String_44451 = String_41788;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44451);
        java.lang.Boolean Boolean_41789 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_41790 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_41791 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_41792 = String_40701;
        java.lang.String String_44452 = String_41792;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44452);
        java.lang.String String_44453 = String_41783;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44453);
        java.lang.String String_44454 = String_41786;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44454);
        java.lang.String String_44455 = String_41785;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44455);
        java.lang.String String_44456 = String_41784;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44456);
        java.lang.String String_44457 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44457);
        java.lang.Boolean Boolean_44458 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_44459 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_44460 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_44461 = String_40701;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44461);
        java.lang.String String_44462 = String_41788;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44462);
        java.lang.String String_44463 = String_40702;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44463);
        java.lang.String String_44464 = String_41779;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44464);
        java.lang.String String_44465 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44465);
        java.lang.String String_44466 = String_41787;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44466);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44456);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_41785);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44448);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_41779);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44438);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44454);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_40702);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44457);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44446);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44453);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44461);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44452);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_41784);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_41786);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_41792);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44449);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44462);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_41787);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44439);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(15, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44455);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_41783);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44465);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_41788);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44451);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44463);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44444);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44443);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44450);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44464);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_40701);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44445);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("CuJ<qpVJR(t QQ", String_44447);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58270 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58270_sd58452 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58270_sd58452_literalMutationString61094() {
        java.lang.String in = "oune two three";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", in);
        java.lang.String String_47656 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47656);
        java.lang.String String_42625 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_42625);
        java.lang.String String_47657 = String_42625;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47657);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_47658 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_47659 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_47660 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_42626 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42627 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42628 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", toEnd);
        java.lang.String String_42629 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_42629);
        java.lang.String String_47661 = String_42629;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47661);
        java.lang.String String_40709 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_40709);
        java.lang.String String_40710 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_40710);
        java.lang.String String_47662 = String_40710;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47662);
        java.lang.String String_42630 = String_40710;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_42630);
        java.lang.String String_47663 = String_42630;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47663);
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToEnd_sd58270__9 = // StatementAdd: add invocation of a method
        r.current();
        java.lang.Character Character_42631 = ((char) (o_consumeToEnd_sd58270__9));
        java.lang.String String_42632 = String_40710;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_42632);
        java.lang.String String_47664 = String_42632;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47664);
        java.lang.Boolean Boolean_42633 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42634 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42635 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_42636 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_42636);
        java.lang.String String_47665 = String_42636;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47665);
        java.lang.String String_42637 = String_40709;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_42637);
        java.lang.String String_47666 = String_42637;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47666);
        java.lang.String String_42638 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_42638);
        java.lang.String String_47667 = String_42638;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47667);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToEnd_sd58270_sd58452__27 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58270_sd58452__27);
        java.lang.String String_47668 = o_consumeToEnd_sd58270_sd58452__27;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_47668);
        java.lang.String String_47669 = String_42630;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47669);
        java.lang.String String_47670 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47670);
        java.lang.String String_47671 = String_42625;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47671);
        java.lang.String String_47672 = String_42638;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47672);
        java.lang.String String_47673 = String_40709;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47673);
        java.lang.String String_47674 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47674);
        java.lang.Boolean Boolean_47675 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_47676 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_47677 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_47678 = String_42636;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47678);
        java.lang.String String_47679 = String_42632;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47679);
        java.lang.String String_47680 = String_42637;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47680);
        java.lang.String String_47681 = String_40710;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47681);
        java.lang.String String_47682 = String_42629;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47682);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47679);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_42637);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47666);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47678);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_42638);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47661);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_40710);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47680);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_42629);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47667);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_42636);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47665);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47681);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47662);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47673);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47657);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47672);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47670);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47669);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47671);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_42625);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47674);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47656);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47663);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_47668);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_47664);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58270_sd58452__27);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_42630);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_42632);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("oune two three", String_40709);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_literalMutationString58263 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_literalMutationString58263_sd58354 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_literalMutationString58263_sd58354_literalMutationString59590() {
        java.lang.String in = "one to thre";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", in);
        java.lang.String String_44643 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44643);
        java.lang.String String_41247 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_41247);
        java.lang.String String_44644 = String_41247;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44644);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_44645 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_44646 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_44647 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_41248 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_41249 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_41250 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", toEnd);
        java.lang.String String_44648 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44648);
        java.lang.String String_41251 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_41251);
        java.lang.String String_44649 = String_41251;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44649);
        java.lang.String String_40695 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_40695);
        java.lang.String String_44650 = String_40695;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44650);
        java.lang.String String_41252 = String_40695;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_41252);
        java.lang.String String_44651 = String_41252;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44651);
        java.lang.String String_40696 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_40696);
        java.lang.String String_44652 = String_40696;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44652);
        java.lang.String String_41253 = String_40696;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_41253);
        java.lang.String String_44653 = String_41253;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44653);
        r.isEmpty();
        java.lang.Boolean Boolean_41254 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_41255 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_41256 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_41257 = String_40695;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_41257);
        java.lang.String String_44654 = String_41257;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44654);
        java.lang.String String_41258 = String_40696;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_41258);
        java.lang.String String_44655 = String_41258;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44655);
        java.lang.String String_41259 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_41259);
        java.lang.String String_44656 = String_41259;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44656);
        java.lang.String String_41260 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_41260);
        java.lang.String String_44657 = String_41260;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44657);
        // StatementAdd: add invocation of a method
        r.advance();
        java.lang.String String_44658 = String_40696;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44658);
        java.lang.String String_44659 = String_41252;
        java.lang.String String_44660 = String_41253;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44660);
        java.lang.Boolean Boolean_44661 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_44662 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_44663 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_44664 = String_41259;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44664);
        java.lang.String String_44665 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44665);
        java.lang.String String_44666 = String_40695;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44666);
        java.lang.String String_44667 = String_41251;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44667);
        java.lang.String String_44668 = String_41257;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44668);
        java.lang.String String_44669 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44669);
        java.lang.String String_44670 = String_41247;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44670);
        java.lang.String String_44671 = String_41258;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44671);
        java.lang.String String_44672 = String_41260;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44672);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44660);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44652);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_41253);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_40696);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44651);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44658);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44653);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44666);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_41247);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_41252);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44657);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44643);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44671);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44667);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_41251);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44659);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_41257);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44669);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44670);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44648);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44668);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44656);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44655);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44654);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44649);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_40695);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_41258);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_41260);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44665);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44644);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44650);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_44664);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(12, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to thre", String_41259);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58266 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58266_literalMutationString58391 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58266_literalMutationString58391_sd60143() {
        char[] __DSPOT_chars_3281 = new char[]{ '<' , '_' };
        java.lang.String in = "one two thr]ee";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", in);
        java.lang.String String_41765 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_41765);
        java.lang.String String_46121 = String_41765;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46121);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_46122 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_46123 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_46124 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_41766 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_41767 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_41768 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", toEnd);
        java.lang.String String_46125 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46125);
        java.lang.String String_41769 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_41769);
        java.lang.String String_46126 = String_41769;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46126);
        java.lang.String String_40701 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_40701);
        java.lang.String String_46127 = String_40701;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46127);
        java.lang.String String_41770 = String_40701;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_41770);
        java.lang.String String_46128 = String_41770;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46128);
        java.lang.String String_40702 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_40702);
        java.lang.String String_46129 = String_40702;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46129);
        java.lang.String String_41771 = String_40702;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_41771);
        java.lang.String String_46130 = String_41771;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46130);
        r.isEmpty();
        // StatementAdd: add invocation of a method
        r.advance();
        java.lang.String String_41772 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_41772);
        java.lang.String String_46131 = String_41772;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46131);
        java.lang.String String_41773 = String_40702;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_41773);
        java.lang.String String_46132 = String_41773;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46132);
        java.lang.String String_41774 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_41774);
        java.lang.String String_46133 = String_41774;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46133);
        java.lang.Boolean Boolean_41775 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_41776 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_41777 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_41778 = String_40701;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_41778);
        java.lang.String String_46134 = String_41778;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46134);
        java.lang.String String_46135 = String_41771;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46135);
        java.lang.String String_46136 = String_41772;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46136);
        java.lang.String String_46137 = String_40702;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46137);
        java.lang.String String_46138 = String_41773;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46138);
        java.lang.Boolean Boolean_46139 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_46140 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_46141 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_46142 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46142);
        java.lang.String String_46143 = String_41765;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46143);
        java.lang.String String_46144 = String_41774;
        java.lang.String String_46145 = String_41769;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46145);
        java.lang.String String_46146 = String_40701;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46146);
        java.lang.String String_46147 = String_41770;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46147);
        java.lang.String String_46148 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46148);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToEnd_sd58266_literalMutationString58391_sd60143__54 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_3281);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58266_literalMutationString58391_sd60143__54);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46127);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_40701);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46126);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_41778);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46147);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46128);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46135);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_41774);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46136);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46132);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46121);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46125);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46131);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46138);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_41769);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_41770);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46148);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_41773);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46137);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_41765);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46134);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_41772);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46142);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46130);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46144);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46143);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(15, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46146);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_40702);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46129);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46145);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_46133);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one two thr]ee", String_41771);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58270 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToEnd_sd58270_sd58452 */
    @org.junit.Test(timeout = 10000)
    public void consumeToEnd_sd58270_sd58452_literalMutationString61095() {
        java.lang.String in = "one to three";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", in);
        java.lang.String String_46356 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46356);
        java.lang.String String_42625 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_42625);
        java.lang.String String_46357 = String_42625;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46357);
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader(in);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_46358 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_46359 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_46360 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_42626 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42627 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42628 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String toEnd = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", toEnd);
        java.lang.String String_42629 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_42629);
        java.lang.String String_46361 = String_42629;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46361);
        java.lang.String String_40709 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_40709);
        java.lang.String String_40710 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_40710);
        java.lang.String String_46362 = String_40710;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46362);
        java.lang.String String_42630 = String_40710;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_42630);
        java.lang.String String_46363 = String_42630;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46363);
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToEnd_sd58270__9 = // StatementAdd: add invocation of a method
        r.current();
        java.lang.Character Character_42631 = ((char) (o_consumeToEnd_sd58270__9));
        java.lang.String String_42632 = String_40710;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_42632);
        java.lang.String String_46364 = String_42632;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46364);
        java.lang.Boolean Boolean_42633 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_42634 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_42635 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_42636 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_42636);
        java.lang.String String_46365 = String_42636;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46365);
        java.lang.String String_42637 = String_40709;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_42637);
        java.lang.String String_46366 = String_42637;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46366);
        java.lang.String String_42638 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_42638);
        java.lang.String String_46367 = String_42638;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46367);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToEnd_sd58270_sd58452__27 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58270_sd58452__27);
        java.lang.String String_46368 = o_consumeToEnd_sd58270_sd58452__27;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46368);
        java.lang.String String_46369 = String_42630;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46369);
        java.lang.String String_46370 = in;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46370);
        java.lang.String String_46371 = String_42625;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46371);
        java.lang.String String_46372 = String_42638;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46372);
        java.lang.String String_46373 = String_40709;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46373);
        java.lang.String String_46374 = toEnd;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46374);
        java.lang.Boolean Boolean_46375 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_46376 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_46377 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_46378 = String_42636;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46378);
        java.lang.String String_46379 = String_42632;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46379);
        java.lang.String String_46380 = String_42637;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46380);
        java.lang.String String_46381 = String_40710;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46381);
        java.lang.String String_46382 = String_42629;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46382);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", toEnd);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_42636);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_42629);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46361);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46378);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46374);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46365);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", in);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46370);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_40709);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46379);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46380);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_40710);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46381);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_42632);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46369);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46356);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46357);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_46368);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46364);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_42630);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_42625);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46363);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToEnd_sd58270_sd58452__27);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46362);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46367);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(12, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46371);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_42637);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_42638);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46373);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46372);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("one to three", String_46366);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToString */
    @org.junit.Test(timeout = 10000)
    public void consumeToString_literalMutationString62365_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Two Four");
            r.consumeTo("");
            r.consume();
            r.consumeTo("Two");
            r.consume();
            r.consumeTo("Qux");
            org.junit.Assert.fail("consumeToString_literalMutationString62365 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToString */
    @org.junit.Test(timeout = 10000)
    public void consumeToString_sd62389() {
        char[] __DSPOT_chars_3477 = new char[]{ '`' , 'o' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Two Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_sd62389__4 = r.consumeTo("Two");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToString_sd62389__4);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToString_sd62389__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_sd62389__5)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_sd62389__6 = r.consumeTo("Two");
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToString_sd62389__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_sd62389__7)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_sd62389__8 = r.consumeTo("Qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo Four", o_consumeToString_sd62389__8);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_sd62389__9 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_3477);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToString_sd62389__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(16, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_sd62389__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToString_sd62389__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_sd62389__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToString_sd62389__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo Four", o_consumeToString_sd62389__8);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToString */
    @org.junit.Test(timeout = 10000)
    public void consumeToString_literalMutationString62359_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            r.consumeTo("Two");
            r.consume();
            r.consumeTo("Two");
            r.consume();
            r.consumeTo("Qux");
            org.junit.Assert.fail("consumeToString_literalMutationString62359 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToString */
    @org.junit.Test(timeout = 10000)
    public void consumeToString_literalMutationString62378() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Two Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_literalMutationString62378__3 = r.consumeTo("Two");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToString_literalMutationString62378__3);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToString_literalMutationString62378__4 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_literalMutationString62378__4)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_literalMutationString62378__5 = r.consumeTo("Two");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToString_literalMutationString62378__5);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToString_literalMutationString62378__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_literalMutationString62378__6)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_literalMutationString62378__7 = r.consumeTo("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo Four", o_consumeToString_literalMutationString62378__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToString_literalMutationString62378__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(16, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_literalMutationString62378__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_literalMutationString62378__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToString_literalMutationString62378__3);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToString */
    @org.junit.Test(timeout = 10000)
    public void consumeToString_literalMutationString62375_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Two Four");
            r.consumeTo("Two");
            r.consume();
            r.consumeTo("To");
            r.consume();
            r.consumeTo("Qux");
            org.junit.Assert.fail("consumeToString_literalMutationString62375 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToString */
    @org.junit.Test(timeout = 10000)
    public void consumeToString_sd62383() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Two Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_sd62383__3 = r.consumeTo("Two");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToString_sd62383__3);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToString_sd62383__4 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_sd62383__4)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_sd62383__5 = r.consumeTo("Two");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToString_sd62383__5);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToString_sd62383__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_sd62383__6)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_sd62383__7 = r.consumeTo("Qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo Four", o_consumeToString_sd62383__7);
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_sd62383__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo Four", o_consumeToString_sd62383__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(17, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_sd62383__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToString_sd62383__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToString_sd62383__5);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToString */
    @org.junit.Test(timeout = 10000)
    public void consumeToString_sd62384() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Two Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_sd62384__3 = r.consumeTo("Two");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToString_sd62384__3);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToString_sd62384__4 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_sd62384__4)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_sd62384__5 = r.consumeTo("Two");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToString_sd62384__5);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToString_sd62384__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_sd62384__6)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_sd62384__7 = r.consumeTo("Qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo Four", o_consumeToString_sd62384__7);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_sd62384__8 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToString_sd62384__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToString_sd62384__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo Four", o_consumeToString_sd62384__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_sd62384__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_sd62384__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(16, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToString_sd62384__3);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToString */
    @org.junit.Test(timeout = 10000)
    public void consumeToString_literalMutationString62362_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("kNi,yY6C!jRSf82p");
            r.consumeTo("Two");
            r.consume();
            r.consumeTo("Two");
            r.consume();
            r.consumeTo("Qux");
            org.junit.Assert.fail("consumeToString_literalMutationString62362 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#consumeToString */
    @org.junit.Test(timeout = 10000)
    public void consumeToString_sd62386() {
        char __DSPOT_c_3476 = '2';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Two Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_sd62386__4 = r.consumeTo("Two");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToString_sd62386__4);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToString_sd62386__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_sd62386__5)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_sd62386__6 = r.consumeTo("Two");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToString_sd62386__6);
        // AssertGenerator create local variable with return value of invocation
        char o_consumeToString_sd62386__7 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_sd62386__8 = r.consumeTo("Qux");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo Four", o_consumeToString_sd62386__8);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_consumeToString_sd62386__9 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_3476);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_consumeToString_sd62386__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo ", o_consumeToString_sd62386__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo Four", o_consumeToString_sd62386__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_sd62386__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (o_consumeToString_sd62386__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(16, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One ", o_consumeToString_sd62386__4);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#containsIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void containsIgnoreCase_literalMutationString70754_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One TWO three");
            r.containsIgnoreCase("two");
            r.containsIgnoreCase("three");
            r.containsIgnoreCase("");
            org.junit.Assert.fail("containsIgnoreCase_literalMutationString70754 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#containsIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void containsIgnoreCase_literalMutationString70742_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One TWO three");
            r.containsIgnoreCase("");
            r.containsIgnoreCase("three");
            r.containsIgnoreCase("one");
            org.junit.Assert.fail("containsIgnoreCase_literalMutationString70742 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#containsIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void containsIgnoreCase_sd70766() {
        char[] __DSPOT_chars_3941 = new char[]{ 'W' , 'r' , '(' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One TWO three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_sd70766__4 = r.containsIgnoreCase("two");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_sd70766__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_sd70766__5 = r.containsIgnoreCase("three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_sd70766__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_sd70766__6 = r.containsIgnoreCase("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_sd70766__6);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_containsIgnoreCase_sd70766__7 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_3941);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One T", o_containsIgnoreCase_sd70766__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_sd70766__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('W', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(5, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_sd70766__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_sd70766__6);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#containsIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void containsIgnoreCase_literalMutationString70755() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One TWO three");
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_literalMutationString70755__3 = r.containsIgnoreCase("two");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_literalMutationString70755__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_literalMutationString70755__4 = r.containsIgnoreCase("three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_literalMutationString70755__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_literalMutationString70755__5 = r.containsIgnoreCase("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_literalMutationString70755__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_literalMutationString70755__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_literalMutationString70755__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#containsIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void containsIgnoreCase_sd70763() {
        char __DSPOT_c_3940 = '!';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One TWO three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_sd70763__4 = r.containsIgnoreCase("two");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_sd70763__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_sd70763__5 = r.containsIgnoreCase("three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_sd70763__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_sd70763__6 = r.containsIgnoreCase("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_sd70763__6);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_containsIgnoreCase_sd70763__7 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_3940);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One TWO three", o_containsIgnoreCase_sd70763__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_sd70763__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_sd70763__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_sd70763__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#containsIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void containsIgnoreCase_literalMutationString70736() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_literalMutationString70736__3 = r.containsIgnoreCase("two");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_literalMutationString70736__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_literalMutationString70736__4 = r.containsIgnoreCase("three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_literalMutationString70736__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_literalMutationString70736__5 = r.containsIgnoreCase("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_literalMutationString70736__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_literalMutationString70736__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_literalMutationString70736__3);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#containsIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void containsIgnoreCase_literalMutationString70757() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One TWO three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_literalMutationString70757__3 = r.containsIgnoreCase("two");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_literalMutationString70757__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_literalMutationString70757__4 = r.containsIgnoreCase("three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_literalMutationString70757__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_literalMutationString70757__5 = r.containsIgnoreCase("oe");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_literalMutationString70757__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_literalMutationString70757__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_literalMutationString70757__3);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#containsIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void containsIgnoreCase_literalMutationString70752() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One TWO three");
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_literalMutationString70752__3 = r.containsIgnoreCase("two");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_literalMutationString70752__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_literalMutationString70752__4 = r.containsIgnoreCase("thMree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_literalMutationString70752__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_literalMutationString70752__5 = r.containsIgnoreCase("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_literalMutationString70752__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_literalMutationString70752__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_literalMutationString70752__3);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#containsIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void containsIgnoreCase_sd70761() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One TWO three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_sd70761__3 = r.containsIgnoreCase("two");
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_sd70761__4 = r.containsIgnoreCase("three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_sd70761__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_sd70761__5 = r.containsIgnoreCase("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_sd70761__5);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_containsIgnoreCase_sd70761__6 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One TWO three", o_containsIgnoreCase_sd70761__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_sd70761__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_sd70761__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_sd70761__4);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#containsIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void containsIgnoreCase_literalMutationString70740() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("3$n3u q`A33@>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('3', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_literalMutationString70740__3 = r.containsIgnoreCase("two");
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_literalMutationString70740__4 = r.containsIgnoreCase("three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_literalMutationString70740__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_literalMutationString70740__5 = r.containsIgnoreCase("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_literalMutationString70740__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_literalMutationString70740__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_literalMutationString70740__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('3', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#containsIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void containsIgnoreCase_sd70760() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One TWO three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_sd70760__3 = r.containsIgnoreCase("two");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_sd70760__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_sd70760__4 = r.containsIgnoreCase("three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_sd70760__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_containsIgnoreCase_sd70760__5 = r.containsIgnoreCase("one");
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_containsIgnoreCase_sd70760__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_sd70760__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_containsIgnoreCase_sd70760__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79431() {
        char[] __DSPOT_chars_4405 = new char[]{ '1' , 'c' , '[' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__4 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_mark_sd79431__4)));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__6 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_mark_sd79431__7)));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__10 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_mark_sd79431__10)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_sd79431__11 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_4405);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("e", o_mark_sd79431__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_mark_sd79431__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_mark_sd79431__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_mark_sd79431__10)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_mark_sd79431__4)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79426() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79426__3 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_mark_sd79426__3)));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79426__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_mark_sd79426__5)));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79426__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_mark_sd79426__6)));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79426__9 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_sd79426__10 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("e", o_mark_sd79426__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_mark_sd79426__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_mark_sd79426__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_mark_sd79426__9)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_mark_sd79426__3)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    @org.junit.Test(timeout = 10000)
    public void mark_literalMutationString79422() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("oe");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79422__3 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_mark_literalMutationString79422__3)));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79422__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_mark_literalMutationString79422__5)));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79422__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_mark_literalMutationString79422__6)));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79422__9 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_mark_literalMutationString79422__9)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_mark_literalMutationString79422__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_mark_literalMutationString79422__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_mark_literalMutationString79422__3)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79428() {
        char __DSPOT_c_4404 = '[';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__4 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_mark_sd79428__4)));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_mark_sd79428__6)));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_mark_sd79428__7)));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__10 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_mark_sd79428__10)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_sd79428__11 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_4404);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("e", o_mark_sd79428__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_mark_sd79428__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_mark_sd79428__10)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_mark_sd79428__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_mark_sd79428__4)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    @org.junit.Test(timeout = 10000)
    public void mark_literalMutationString79421() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79421__3 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (o_mark_literalMutationString79421__3)));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79421__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('s', ((char) (o_mark_literalMutationString79421__5)));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79421__6 = r.consume();
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79421__9 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('s', ((char) (o_mark_literalMutationString79421__9)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (o_mark_literalMutationString79421__3)));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('p', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('s', ((char) (o_mark_literalMutationString79421__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('p', ((char) (o_mark_literalMutationString79421__6)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79425() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79425__3 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_mark_sd79425__3)));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79425__5 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_mark_sd79425__5)));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79425__6 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_mark_sd79425__6)));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79425__9 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_mark_sd79425__9)));
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_mark_sd79425__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_mark_sd79425__3)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_mark_sd79425__9)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_mark_sd79425__5)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79429 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79429_sd79608() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_56527 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56528 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56529 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__3 = r.consume();
        java.lang.Character Character_56530 = ((char) (o_mark_sd79429__3));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__5 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__6 = r.consume();
        java.lang.Character Character_56531 = ((char) (o_mark_sd79429__6));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__9 = r.consume();
        java.lang.Character Character_56532 = ((char) (o_mark_sd79429__9));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__10 = // StatementAdd: add invocation of a method
        r.current();
        java.lang.Character Character_56533 = ((char) (o_mark_sd79429__10));
        java.lang.Boolean Boolean_56534 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56535 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56536 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_56537 = ((char) (o_mark_sd79429__9));
        java.lang.Character Character_56538 = ((char) (o_mark_sd79429__3));
        java.lang.Character Character_56539 = ((char) (o_mark_sd79429__5));
        java.lang.Character Character_56540 = ((char) (o_mark_sd79429__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_sd79429_sd79608__36 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("e", o_mark_sd79429_sd79608__36);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79431 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79431_literalMutationString79647() {
        char[] __DSPOT_chars_4405 = new char[]{ '1' , 'c' , '[' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("oe");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_57060 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57061 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57062 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__4 = r.consume();
        java.lang.Character Character_57063 = ((char) (o_mark_sd79431__4));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__6 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__7 = r.consume();
        java.lang.Character Character_57064 = ((char) (o_mark_sd79431__7));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__10 = r.consume();
        java.lang.Character Character_57065 = ((char) (o_mark_sd79431__10));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_sd79431__11 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_4405);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_mark_sd79431__11);
        java.lang.String String_57066 = o_mark_sd79431__11;
        java.lang.Character Character_57067 = ((char) (o_mark_sd79431__6));
        java.lang.Character Character_57068 = ((char) (o_mark_sd79431__7));
        java.lang.Character Character_57069 = ((char) (o_mark_sd79431__10));
        java.lang.Boolean Boolean_57070 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57071 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57072 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_57073 = ((char) (o_mark_sd79431__4));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_57066);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_mark_sd79431__11);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_literalMutationString79424 */
    @org.junit.Test(timeout = 10000)
    public void mark_literalMutationString79424_sd79540() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Xne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('X', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_55562 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_55563 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_55564 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79424__3 = r.consume();
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79424__5 = r.consume();
        java.lang.Character Character_55565 = ((char) (o_mark_literalMutationString79424__5));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79424__6 = r.consume();
        java.lang.Character Character_55566 = ((char) (o_mark_literalMutationString79424__6));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79424__9 = r.consume();
        java.lang.Character Character_55567 = ((char) (o_mark_literalMutationString79424__9));
        java.lang.Boolean Boolean_55568 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_55569 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_55570 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_55571 = ((char) (o_mark_literalMutationString79424__6));
        java.lang.Character Character_55572 = ((char) (o_mark_literalMutationString79424__3));
        java.lang.Character Character_55573 = ((char) (o_mark_literalMutationString79424__5));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79424_sd79540__30 = // StatementAdd: add invocation of a method
        r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_mark_literalMutationString79424_sd79540__30)));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_literalMutationString79423 */
    @org.junit.Test(timeout = 10000)
    public void mark_literalMutationString79423_sd79523() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("p#n");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('p', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_55351 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_55352 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_55353 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79423__3 = r.consume();
        java.lang.Character Character_55354 = ((char) (o_mark_literalMutationString79423__3));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79423__5 = r.consume();
        java.lang.Character Character_55355 = ((char) (o_mark_literalMutationString79423__5));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79423__6 = r.consume();
        java.lang.Character Character_55356 = ((char) (o_mark_literalMutationString79423__6));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79423__9 = r.consume();
        java.lang.Character Character_55357 = ((char) (o_mark_literalMutationString79423__9));
        java.lang.Boolean Boolean_55358 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_55359 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_55360 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_55361 = ((char) (o_mark_literalMutationString79423__3));
        java.lang.Character Character_55362 = ((char) (o_mark_literalMutationString79423__5));
        java.lang.Character Character_55363 = ((char) (o_mark_literalMutationString79423__6));
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79428 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79428_literalMutationString79588_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            char __DSPOT_c_4404 = '[';
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            java.lang.Boolean Boolean_56234 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_56235 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_56236 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            // AssertGenerator create local variable with return value of invocation
            char o_mark_sd79428__4 = r.consume();
            java.lang.Character Character_56237 = ((char) (o_mark_sd79428__4));
            r.mark();
            // AssertGenerator create local variable with return value of invocation
            char o_mark_sd79428__6 = r.consume();
            java.lang.Character Character_56238 = ((char) (o_mark_sd79428__6));
            // AssertGenerator create local variable with return value of invocation
            char o_mark_sd79428__7 = r.consume();
            java.lang.Character Character_56239 = ((char) (o_mark_sd79428__7));
            r.isEmpty();
            r.rewindToMark();
            // AssertGenerator create local variable with return value of invocation
            char o_mark_sd79428__10 = r.consume();
            java.lang.Character Character_56240 = ((char) (o_mark_sd79428__10));
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_mark_sd79428__11 = // StatementAdd: add invocation of a method
            r.consumeTo(__DSPOT_c_4404);
            java.lang.String String_56241 = o_mark_sd79428__11;
            java.lang.Character Character_56242 = ((char) (o_mark_sd79428__6));
            java.lang.Character Character_56243 = ((char) (o_mark_sd79428__10));
            java.lang.Character Character_56244 = ((char) (o_mark_sd79428__7));
            java.lang.Boolean Boolean_56245 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_56246 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_56247 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.Character Character_56248 = ((char) (o_mark_sd79428__4));
            org.junit.Assert.fail("mark_sd79428_literalMutationString79588 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79429 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79429_literalMutationString79605() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("oe");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_56485 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56486 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56487 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__3 = r.consume();
        java.lang.Character Character_56488 = ((char) (o_mark_sd79429__3));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__5 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__6 = r.consume();
        java.lang.Character Character_56489 = ((char) (o_mark_sd79429__6));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__9 = r.consume();
        java.lang.Character Character_56490 = ((char) (o_mark_sd79429__9));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__10 = // StatementAdd: add invocation of a method
        r.current();
        java.lang.Character Character_56491 = ((char) (o_mark_sd79429__10));
        java.lang.Boolean Boolean_56492 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56493 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56494 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_56495 = ((char) (o_mark_sd79429__9));
        java.lang.Character Character_56496 = ((char) (o_mark_sd79429__3));
        java.lang.Character Character_56497 = ((char) (o_mark_sd79429__5));
        java.lang.Character Character_56498 = ((char) (o_mark_sd79429__6));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79431 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79431_literalMutationString79649() {
        char[] __DSPOT_chars_4405 = new char[]{ '1' , 'c' , '[' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("oGne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_57088 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57089 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57090 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__4 = r.consume();
        java.lang.Character Character_57091 = ((char) (o_mark_sd79431__4));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__6 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__7 = r.consume();
        java.lang.Character Character_57092 = ((char) (o_mark_sd79431__7));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__10 = r.consume();
        java.lang.Character Character_57093 = ((char) (o_mark_sd79431__10));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_sd79431__11 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_4405);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne", o_mark_sd79431__11);
        java.lang.String String_57094 = o_mark_sd79431__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne", String_57094);
        java.lang.Character Character_57095 = ((char) (o_mark_sd79431__6));
        java.lang.Character Character_57096 = ((char) (o_mark_sd79431__7));
        java.lang.Character Character_57097 = ((char) (o_mark_sd79431__10));
        java.lang.Boolean Boolean_57098 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57099 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57100 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_57101 = ((char) (o_mark_sd79431__4));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(4, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne", o_mark_sd79431__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne", String_57094);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_literalMutationString79419 */
    @org.junit.Test(timeout = 10000)
    public void mark_literalMutationString79419_sd79483() {
        char[] __DSPOT_chars_4407 = new char[0];
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("oKne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_54855 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_54856 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_54857 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79419__3 = r.consume();
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79419__5 = r.consume();
        java.lang.Character Character_54858 = ((char) (o_mark_literalMutationString79419__5));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79419__6 = r.consume();
        java.lang.Character Character_54859 = ((char) (o_mark_literalMutationString79419__6));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79419__9 = r.consume();
        java.lang.Character Character_54860 = ((char) (o_mark_literalMutationString79419__9));
        java.lang.Character Character_54861 = ((char) (o_mark_literalMutationString79419__6));
        java.lang.Character Character_54862 = ((char) (o_mark_literalMutationString79419__3));
        java.lang.Character Character_54863 = ((char) (o_mark_literalMutationString79419__5));
        java.lang.Boolean Boolean_54864 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_54865 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_54866 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_literalMutationString79419_sd79483__31 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_4407);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne", o_mark_literalMutationString79419_sd79483__31);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(4, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79431 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79431_literalMutationString79645() {
        char[] __DSPOT_chars_4405 = new char[]{ '1' , 'c' , '[' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_57032 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57033 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57034 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__4 = r.consume();
        java.lang.Character Character_57035 = ((char) (o_mark_sd79431__4));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__6 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__7 = r.consume();
        java.lang.Character Character_57036 = ((char) (o_mark_sd79431__7));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__10 = r.consume();
        java.lang.Character Character_57037 = ((char) (o_mark_sd79431__10));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_sd79431__11 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_4405);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_mark_sd79431__11);
        java.lang.String String_57038 = o_mark_sd79431__11;
        java.lang.Character Character_57039 = ((char) (o_mark_sd79431__6));
        java.lang.Character Character_57040 = ((char) (o_mark_sd79431__7));
        java.lang.Character Character_57041 = ((char) (o_mark_sd79431__10));
        java.lang.Boolean Boolean_57042 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57043 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57044 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_57045 = ((char) (o_mark_sd79431__4));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_57038);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_mark_sd79431__11);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79428 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79428_literalMutationChar79582() {
        char __DSPOT_c_4404 = ' ';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_56144 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56145 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56146 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__4 = r.consume();
        java.lang.Character Character_56147 = ((char) (o_mark_sd79428__4));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__6 = r.consume();
        java.lang.Character Character_56148 = ((char) (o_mark_sd79428__6));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__7 = r.consume();
        java.lang.Character Character_56149 = ((char) (o_mark_sd79428__7));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__10 = r.consume();
        java.lang.Character Character_56150 = ((char) (o_mark_sd79428__10));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_sd79428__11 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_4404);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("e", o_mark_sd79428__11);
        java.lang.String String_56151 = o_mark_sd79428__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("e", String_56151);
        java.lang.Character Character_56152 = ((char) (o_mark_sd79428__6));
        java.lang.Character Character_56153 = ((char) (o_mark_sd79428__10));
        java.lang.Character Character_56154 = ((char) (o_mark_sd79428__7));
        java.lang.Boolean Boolean_56155 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56156 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56157 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_56158 = ((char) (o_mark_sd79428__4));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("e", o_mark_sd79428__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("e", String_56151);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79428 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79428_literalMutationString79589() {
        char __DSPOT_c_4404 = '[';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_56249 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56250 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56251 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__4 = r.consume();
        java.lang.Character Character_56252 = ((char) (o_mark_sd79428__4));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__6 = r.consume();
        java.lang.Character Character_56253 = ((char) (o_mark_sd79428__6));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__7 = r.consume();
        java.lang.Character Character_56254 = ((char) (o_mark_sd79428__7));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__10 = r.consume();
        java.lang.Character Character_56255 = ((char) (o_mark_sd79428__10));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_sd79428__11 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_4404);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <span>now</span></span>", o_mark_sd79428__11);
        java.lang.String String_56256 = o_mark_sd79428__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <span>now</span></span>", String_56256);
        java.lang.Character Character_56257 = ((char) (o_mark_sd79428__6));
        java.lang.Character Character_56258 = ((char) (o_mark_sd79428__10));
        java.lang.Character Character_56259 = ((char) (o_mark_sd79428__7));
        java.lang.Boolean Boolean_56260 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56261 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56262 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_56263 = ((char) (o_mark_sd79428__4));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <span>now</span></span>", String_56256);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <span>now</span></span>", o_mark_sd79428__11);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79429 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79429_sd79613() {
        char[] __DSPOT_chars_4427 = new char[]{ '-' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_56597 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56598 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56599 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__3 = r.consume();
        java.lang.Character Character_56600 = ((char) (o_mark_sd79429__3));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__5 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__6 = r.consume();
        java.lang.Character Character_56601 = ((char) (o_mark_sd79429__6));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__9 = r.consume();
        java.lang.Character Character_56602 = ((char) (o_mark_sd79429__9));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__10 = // StatementAdd: add invocation of a method
        r.current();
        java.lang.Character Character_56603 = ((char) (o_mark_sd79429__10));
        java.lang.Boolean Boolean_56604 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56605 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56606 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_56607 = ((char) (o_mark_sd79429__9));
        java.lang.Character Character_56608 = ((char) (o_mark_sd79429__3));
        java.lang.Character Character_56609 = ((char) (o_mark_sd79429__5));
        java.lang.Character Character_56610 = ((char) (o_mark_sd79429__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_sd79429_sd79613__37 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_4427);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("e", o_mark_sd79429_sd79613__37);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_literalMutationString79424 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_literalMutationString79424_sd79539 */
    @org.junit.Test(timeout = 10000)
    public void mark_literalMutationString79424_sd79539_literalMutationString81097() {
        char __DSPOT_c_4416 = '$';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_57463 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57464 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57465 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_55550 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_55551 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_55552 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79424__3 = r.consume();
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79424__5 = r.consume();
        java.lang.Character Character_55553 = ((char) (o_mark_literalMutationString79424__5));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79424__6 = r.consume();
        java.lang.Character Character_55554 = ((char) (o_mark_literalMutationString79424__6));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79424__9 = r.consume();
        java.lang.Character Character_55555 = ((char) (o_mark_literalMutationString79424__9));
        java.lang.Boolean Boolean_55556 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_55557 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_55558 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_55559 = ((char) (o_mark_literalMutationString79424__6));
        java.lang.Character Character_55560 = ((char) (o_mark_literalMutationString79424__3));
        java.lang.Character Character_55561 = ((char) (o_mark_literalMutationString79424__5));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_literalMutationString79424_sd79539__31 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_4416);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <span>now</span></span>", o_mark_literalMutationString79424_sd79539__31);
        java.lang.String String_57466 = o_mark_literalMutationString79424_sd79539__31;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <span>now</span></span>", String_57466);
        java.lang.Boolean Boolean_57467 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57468 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57469 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <span>now</span></span>", String_57466);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <span>now</span></span>", o_mark_literalMutationString79424_sd79539__31);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_literalMutationString79419 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_literalMutationString79419_literalMutationString79473 */
    @org.junit.Test(timeout = 10000)
    public void mark_literalMutationString79419_literalMutationString79473_sd80250() {
        char[] __DSPOT_chars_4437 = new char[]{ 's' , '(' , 'I' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_58442 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_58443 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_58444 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_54735 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_54736 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_54737 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79419__3 = r.consume();
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79419__5 = r.consume();
        java.lang.Character Character_54738 = ((char) (o_mark_literalMutationString79419__5));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79419__6 = r.consume();
        java.lang.Character Character_54739 = ((char) (o_mark_literalMutationString79419__6));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_literalMutationString79419__9 = r.consume();
        java.lang.Character Character_54740 = ((char) (o_mark_literalMutationString79419__9));
        java.lang.Character Character_54741 = ((char) (o_mark_literalMutationString79419__6));
        java.lang.Character Character_54742 = ((char) (o_mark_literalMutationString79419__3));
        java.lang.Character Character_54743 = ((char) (o_mark_literalMutationString79419__5));
        java.lang.Boolean Boolean_54744 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_54745 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_54746 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_58445 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_58446 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_58447 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_literalMutationString79419_literalMutationString79473_sd80250__37 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_4437);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <", o_mark_literalMutationString79419_literalMutationString79473_sd80250__37);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('s', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(30, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79430 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79430_sd79625 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79430_sd79625_sd82377() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_57975 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57976 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57977 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_56754 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56755 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56756 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79430__3 = r.consume();
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79430__5 = r.consume();
        java.lang.Character Character_56757 = ((char) (o_mark_sd79430__5));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79430__6 = r.consume();
        java.lang.Character Character_56758 = ((char) (o_mark_sd79430__6));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79430__9 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        int o_mark_sd79430__10 = // StatementAdd: add invocation of a method
        r.pos();
        java.lang.Integer Integer_56759 = ((int) (o_mark_sd79430__10));
        java.lang.Character Character_56760 = ((char) (o_mark_sd79430__5));
        java.lang.Character Character_56761 = ((char) (o_mark_sd79430__9));
        java.lang.Character Character_56762 = ((char) (o_mark_sd79430__3));
        java.lang.Boolean Boolean_56763 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56764 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56765 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_56766 = ((char) (o_mark_sd79430__6));
        // AssertGenerator create local variable with return value of invocation
        int o_mark_sd79430_sd79625__35 = // StatementAdd: add invocation of a method
        r.pos();
        java.lang.Integer Integer_57978 = ((int) (o_mark_sd79430_sd79625__35));
        java.lang.Boolean Boolean_57979 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57980 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57981 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79430 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79430_sd79626 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79430_sd79626_sd82396() {
        char[] __DSPOT_chars_4429 = new char[]{ 'n' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_57833 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57834 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57835 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_56767 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56768 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56769 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79430__3 = r.consume();
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79430__5 = r.consume();
        java.lang.Character Character_56770 = ((char) (o_mark_sd79430__5));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79430__6 = r.consume();
        java.lang.Character Character_56771 = ((char) (o_mark_sd79430__6));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79430__9 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        int o_mark_sd79430__10 = // StatementAdd: add invocation of a method
        r.pos();
        java.lang.Integer Integer_56772 = ((int) (o_mark_sd79430__10));
        java.lang.Character Character_56773 = ((char) (o_mark_sd79430__5));
        java.lang.Character Character_56774 = ((char) (o_mark_sd79430__9));
        java.lang.Character Character_56775 = ((char) (o_mark_sd79430__3));
        java.lang.Boolean Boolean_56776 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56777 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56778 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_56779 = ((char) (o_mark_sd79430__6));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_sd79430_sd79626__36 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_4429);
        java.lang.String String_57836 = o_mark_sd79430_sd79626__36;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("e", String_57836);
        java.lang.Boolean Boolean_57837 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57838 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57839 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("e", String_57836);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("e", o_mark_sd79430_sd79626__36);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(4, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79428 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79428_literalMutationString79592 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79428_literalMutationString79592_literalMutationString81883() {
        char __DSPOT_c_4404 = '[';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("IY]J");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('I', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_57989 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57990 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57991 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_56294 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56295 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56296 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__4 = r.consume();
        java.lang.Character Character_56297 = ((char) (o_mark_sd79428__4));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__6 = r.consume();
        java.lang.Character Character_56298 = ((char) (o_mark_sd79428__6));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__7 = r.consume();
        java.lang.Character Character_56299 = ((char) (o_mark_sd79428__7));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__10 = r.consume();
        java.lang.Character Character_56300 = ((char) (o_mark_sd79428__10));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_sd79428__11 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_4404);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("]J", o_mark_sd79428__11);
        java.lang.String String_57992 = o_mark_sd79428__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("]J", String_57992);
        java.lang.String String_56301 = o_mark_sd79428__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("]J", String_56301);
        java.lang.String String_57993 = String_56301;
        java.lang.Character Character_56302 = ((char) (o_mark_sd79428__6));
        java.lang.Character Character_56303 = ((char) (o_mark_sd79428__10));
        java.lang.Character Character_56304 = ((char) (o_mark_sd79428__7));
        java.lang.Boolean Boolean_56305 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56306 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56307 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_56308 = ((char) (o_mark_sd79428__4));
        java.lang.Boolean Boolean_57994 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57995 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57996 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_57997 = String_56301;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("]J", String_57997);
        java.lang.String String_57998 = o_mark_sd79428__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("]J", String_57998);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("]J", String_56301);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(4, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("]J", String_57997);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("]J", String_57992);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("]J", String_57993);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("]J", o_mark_sd79428__11);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79431 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79431_literalMutationChar79641 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79431_literalMutationChar79641_literalMutationString82858() {
        char[] __DSPOT_chars_4405 = new char[]{ '1' , 'c' , '3' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("oe");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_58505 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_58506 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_58507 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_56976 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56977 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56978 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__4 = r.consume();
        java.lang.Character Character_56979 = ((char) (o_mark_sd79431__4));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__6 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__7 = r.consume();
        java.lang.Character Character_56980 = ((char) (o_mark_sd79431__7));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__10 = r.consume();
        java.lang.Character Character_56981 = ((char) (o_mark_sd79431__10));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_sd79431__11 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_4405);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_mark_sd79431__11);
        java.lang.String String_58508 = o_mark_sd79431__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_58508);
        java.lang.String String_56982 = o_mark_sd79431__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_56982);
        java.lang.Character Character_56983 = ((char) (o_mark_sd79431__6));
        java.lang.Character Character_56984 = ((char) (o_mark_sd79431__7));
        java.lang.Character Character_56985 = ((char) (o_mark_sd79431__10));
        java.lang.Boolean Boolean_56986 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56987 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56988 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_56989 = ((char) (o_mark_sd79431__4));
        java.lang.Boolean Boolean_58509 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_58510 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_58511 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_58512 = o_mark_sd79431__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_58512);
        java.lang.String String_58513 = String_56982;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_58513);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_mark_sd79431__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_58512);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_56982);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_58508);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79431 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79431_literalMutationString79649 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79431_literalMutationString79649_literalMutationString83097() {
        char[] __DSPOT_chars_4405 = new char[]{ '1' , 'c' , '[' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_58702 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_58703 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_58704 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_57088 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57089 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57090 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__4 = r.consume();
        java.lang.Character Character_57091 = ((char) (o_mark_sd79431__4));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__6 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__7 = r.consume();
        java.lang.Character Character_57092 = ((char) (o_mark_sd79431__7));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__10 = r.consume();
        java.lang.Character Character_57093 = ((char) (o_mark_sd79431__10));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_sd79431__11 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_4405);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_mark_sd79431__11);
        java.lang.String String_58705 = o_mark_sd79431__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_58705);
        java.lang.String String_57094 = o_mark_sd79431__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_57094);
        java.lang.String String_58706 = String_57094;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_58706);
        java.lang.Character Character_57095 = ((char) (o_mark_sd79431__6));
        java.lang.Character Character_57096 = ((char) (o_mark_sd79431__7));
        java.lang.Character Character_57097 = ((char) (o_mark_sd79431__10));
        java.lang.Boolean Boolean_57098 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57099 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57100 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_57101 = ((char) (o_mark_sd79431__4));
        java.lang.Boolean Boolean_58707 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_58708 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_58709 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_58710 = o_mark_sd79431__11;
        java.lang.String String_58711 = String_57094;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_58711);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_mark_sd79431__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_58705);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_58710);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_57094);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_58706);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79431 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79431_literalMutationString79646 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79431_literalMutationString79646_literalMutationChar83002() {
        char[] __DSPOT_chars_4405 = new char[]{ '1' , 'c' , ' ' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_58470 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_58471 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_58472 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_57046 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57047 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57048 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__4 = r.consume();
        java.lang.Character Character_57049 = ((char) (o_mark_sd79431__4));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__6 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__7 = r.consume();
        java.lang.Character Character_57050 = ((char) (o_mark_sd79431__7));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79431__10 = r.consume();
        java.lang.Character Character_57051 = ((char) (o_mark_sd79431__10));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_sd79431__11 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_4405);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello", o_mark_sd79431__11);
        java.lang.String String_58473 = o_mark_sd79431__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello", String_58473);
        java.lang.String String_57052 = o_mark_sd79431__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello", String_57052);
        java.lang.String String_58474 = String_57052;
        java.lang.Character Character_57053 = ((char) (o_mark_sd79431__6));
        java.lang.Character Character_57054 = ((char) (o_mark_sd79431__7));
        java.lang.Character Character_57055 = ((char) (o_mark_sd79431__10));
        java.lang.Boolean Boolean_57056 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_57057 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_57058 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_57059 = ((char) (o_mark_sd79431__4));
        java.lang.String String_58475 = o_mark_sd79431__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello", String_58475);
        java.lang.Boolean Boolean_58476 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_58477 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_58478 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_58479 = String_57052;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello", String_58479);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello", o_mark_sd79431__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello", String_58473);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello", String_58475);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(11, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello", String_57052);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello", String_58474);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79428 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79428_literalMutationChar79583 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79428_literalMutationChar79583_literalMutationString81729_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            char __DSPOT_c_4404 = ' ';
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            java.lang.Boolean Boolean_57394 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_57395 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_57396 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.Boolean Boolean_56159 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_56160 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_56161 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            // AssertGenerator create local variable with return value of invocation
            char o_mark_sd79428__4 = r.consume();
            java.lang.Character Character_56162 = ((char) (o_mark_sd79428__4));
            r.mark();
            // AssertGenerator create local variable with return value of invocation
            char o_mark_sd79428__6 = r.consume();
            java.lang.Character Character_56163 = ((char) (o_mark_sd79428__6));
            // AssertGenerator create local variable with return value of invocation
            char o_mark_sd79428__7 = r.consume();
            java.lang.Character Character_56164 = ((char) (o_mark_sd79428__7));
            r.isEmpty();
            r.rewindToMark();
            // AssertGenerator create local variable with return value of invocation
            char o_mark_sd79428__10 = r.consume();
            java.lang.Character Character_56165 = ((char) (o_mark_sd79428__10));
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_mark_sd79428__11 = // StatementAdd: add invocation of a method
            r.consumeTo(__DSPOT_c_4404);
            java.lang.String String_57397 = o_mark_sd79428__11;
            java.lang.String String_56166 = o_mark_sd79428__11;
            java.lang.Character Character_56167 = ((char) (o_mark_sd79428__6));
            java.lang.Character Character_56168 = ((char) (o_mark_sd79428__10));
            java.lang.Character Character_56169 = ((char) (o_mark_sd79428__7));
            java.lang.Boolean Boolean_56170 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_56171 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_56172 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.Character Character_56173 = ((char) (o_mark_sd79428__4));
            java.lang.String String_57398 = String_56166;
            java.lang.String String_57399 = o_mark_sd79428__11;
            java.lang.Boolean Boolean_57400 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_57401 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_57402 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            org.junit.Assert.fail("mark_sd79428_literalMutationChar79583_literalMutationString81729 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79428 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79428_literalMutationString79590 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79428_literalMutationString79590_literalMutationString81846() {
        char __DSPOT_c_4404 = '[';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("*+ne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('*', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_58568 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_58569 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_58570 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_56264 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56265 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56266 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__4 = r.consume();
        java.lang.Character Character_56267 = ((char) (o_mark_sd79428__4));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__6 = r.consume();
        java.lang.Character Character_56268 = ((char) (o_mark_sd79428__6));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__7 = r.consume();
        java.lang.Character Character_56269 = ((char) (o_mark_sd79428__7));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79428__10 = r.consume();
        java.lang.Character Character_56270 = ((char) (o_mark_sd79428__10));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_sd79428__11 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_4404);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne", o_mark_sd79428__11);
        java.lang.String String_56271 = o_mark_sd79428__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne", String_56271);
        java.lang.String String_58571 = String_56271;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne", String_58571);
        java.lang.Character Character_56272 = ((char) (o_mark_sd79428__6));
        java.lang.Character Character_56273 = ((char) (o_mark_sd79428__10));
        java.lang.Character Character_56274 = ((char) (o_mark_sd79428__7));
        java.lang.Boolean Boolean_56275 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56276 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56277 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_56278 = ((char) (o_mark_sd79428__4));
        java.lang.String String_58572 = o_mark_sd79428__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne", String_58572);
        java.lang.Boolean Boolean_58573 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_58574 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_58575 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_58576 = String_56271;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne", String_58576);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(4, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne", o_mark_sd79428__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne", String_56271);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne", String_58571);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne", String_58572);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79426 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79426_literalMutationString79561 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79426_literalMutationString79561_literalMutationString81390() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_58095 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_58096 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_58097 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_55850 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_55851 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_55852 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79426__3 = r.consume();
        java.lang.Character Character_55853 = ((char) (o_mark_sd79426__3));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79426__5 = r.consume();
        java.lang.Character Character_55854 = ((char) (o_mark_sd79426__5));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79426__6 = r.consume();
        java.lang.Character Character_55855 = ((char) (o_mark_sd79426__6));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79426__9 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_mark_sd79426__10 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <span>now</span></span>", o_mark_sd79426__10);
        java.lang.String String_58098 = o_mark_sd79426__10;
        java.lang.String String_55856 = o_mark_sd79426__10;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <span>now</span></span>", String_55856);
        java.lang.Character Character_55857 = ((char) (o_mark_sd79426__6));
        java.lang.Character Character_55858 = ((char) (o_mark_sd79426__5));
        java.lang.Boolean Boolean_55859 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_55860 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_55861 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_55862 = ((char) (o_mark_sd79426__9));
        java.lang.Character Character_55863 = ((char) (o_mark_sd79426__3));
        java.lang.String String_58099 = String_55856;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <span>now</span></span>", String_58099);
        java.lang.String String_58100 = o_mark_sd79426__10;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <span>now</span></span>", String_58100);
        java.lang.Boolean Boolean_58101 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_58102 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_58103 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('p', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <span>now</span></span>", String_58100);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <span>now</span></span>", String_58099);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <span>now</span></span>", o_mark_sd79426__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <span>now</span></span>", String_55856);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("pan>Hello <div>there</div> <span>now</span></span>", String_58098);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#mark */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79429 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#mark_sd79429_literalMutationString79605 */
    @org.junit.Test(timeout = 10000)
    public void mark_sd79429_literalMutationString79605_sd82110() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("oe");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_58177 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_58178 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_58179 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_56485 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56486 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56487 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__3 = r.consume();
        java.lang.Character Character_56488 = ((char) (o_mark_sd79429__3));
        r.mark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__5 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__6 = r.consume();
        java.lang.Character Character_56489 = ((char) (o_mark_sd79429__6));
        r.isEmpty();
        r.rewindToMark();
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__9 = r.consume();
        java.lang.Character Character_56490 = ((char) (o_mark_sd79429__9));
        // AssertGenerator create local variable with return value of invocation
        char o_mark_sd79429__10 = // StatementAdd: add invocation of a method
        r.current();
        java.lang.Character Character_56491 = ((char) (o_mark_sd79429__10));
        java.lang.Boolean Boolean_56492 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_56493 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_56494 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_56495 = ((char) (o_mark_sd79429__9));
        java.lang.Character Character_56496 = ((char) (o_mark_sd79429__3));
        java.lang.Character Character_56497 = ((char) (o_mark_sd79429__5));
        java.lang.Character Character_56498 = ((char) (o_mark_sd79429__6));
        java.lang.Boolean Boolean_58180 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_58181 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_58182 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        int o_mark_sd79429_literalMutationString79605_sd82110__42 = // StatementAdd: add invocation of a method
        r.pos();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (o_mark_sd79429_literalMutationString79605_sd82110__42)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    @org.junit.Test(timeout = 10000)
    public void matches_sd84085() {
        char __DSPOT_c_4806 = '8';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84085__4 = r.matches('O');
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84085__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84085__5 = r.matches("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84085__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84085__6 = r.matches("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84085__6);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84085__7 = r.matches("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84085__7);
        // AssertGenerator create local variable with return value of invocation
        char o_matches_sd84085__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matches_sd84085__8)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84085__9 = r.matches("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84085__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84085__10 = r.matches("ne Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84085__10);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84085__11 = r.matches("ne Two Three Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84085__11);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_sd84085__12 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_sd84085__12);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84085__13 = r.matches("ne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84085__13);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_sd84085__14 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_4806);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matches_sd84085__14);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84085__13);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84085__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84085__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84085__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matches_sd84085__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84085__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84085__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84085__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84085__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_sd84085__12);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    @org.junit.Test(timeout = 10000)
    public void matches_sd84082() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84082__3 = r.matches('O');
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84082__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84082__4 = r.matches("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84082__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84082__5 = r.matches("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84082__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84082__6 = r.matches("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84082__6);
        // AssertGenerator create local variable with return value of invocation
        char o_matches_sd84082__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matches_sd84082__7)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84082__8 = r.matches("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84082__8);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84082__9 = r.matches("ne Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84082__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84082__10 = r.matches("ne Two Three Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84082__10);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_sd84082__11 = r.consumeToEnd();
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84082__12 = r.matches("ne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84082__12);
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84082__12);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84082__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84082__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84082__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84082__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84082__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84082__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matches_sd84082__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84082__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_sd84082__11);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    @org.junit.Test(timeout = 10000)
    public void matches_sd84083() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__3 = r.matches('O');
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84083__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__4 = r.matches("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84083__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__5 = r.matches("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84083__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__6 = r.matches("one");
        // AssertGenerator create local variable with return value of invocation
        char o_matches_sd84083__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matches_sd84083__7)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__8 = r.matches("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84083__8);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__9 = r.matches("ne Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84083__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__10 = r.matches("ne Two Three Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84083__10);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_sd84083__11 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_sd84083__11);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__12 = r.matches("ne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84083__12);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_sd84083__13 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matches_sd84083__13);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84083__12);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84083__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84083__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_sd84083__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84083__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84083__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84083__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matches_sd84083__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84083__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84083__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    @org.junit.Test(timeout = 10000)
    public void matches_literalMutationString84047() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84047__3 = r.matches('O');
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84047__4 = r.matches("On7 Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84047__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84047__5 = r.matches("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_literalMutationString84047__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84047__6 = r.matches("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84047__6);
        // AssertGenerator create local variable with return value of invocation
        char o_matches_literalMutationString84047__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matches_literalMutationString84047__7)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84047__8 = r.matches("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84047__8);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84047__9 = r.matches("ne Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_literalMutationString84047__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84047__10 = r.matches("ne Two Three Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84047__10);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_literalMutationString84047__11 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_literalMutationString84047__11);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84047__12 = r.matches("ne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84047__12);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84047__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84047__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_literalMutationString84047__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matches_literalMutationString84047__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_literalMutationString84047__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84047__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_literalMutationString84047__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84047__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_literalMutationString84047__3);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    @org.junit.Test(timeout = 10000)
    public void matches_literalMutationString84032() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84032__3 = r.matches('O');
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84032__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84032__4 = r.matches("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84032__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84032__5 = r.matches("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84032__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84032__6 = r.matches("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84032__6);
        // AssertGenerator create local variable with return value of invocation
        char o_matches_literalMutationString84032__7 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84032__8 = r.matches("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84032__8);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84032__9 = r.matches("ne Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84032__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84032__10 = r.matches("ne Two Three Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84032__10);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_literalMutationString84032__11 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", o_matches_literalMutationString84032__11);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84032__12 = r.matches("ne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84032__12);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84032__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (o_matches_literalMutationString84032__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", o_matches_literalMutationString84032__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84032__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84032__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84032__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84032__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84032__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_literalMutationString84032__10);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    @org.junit.Test(timeout = 10000)
    public void matches_literalMutationString84031_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            r.matches('O');
            r.matches("One Two Three");
            r.matches("One");
            r.matches("one");
            r.consume();
            r.matches("One");
            r.matches("ne Two Three");
            r.matches("ne Two Three Four");
            r.consumeToEnd();
            r.matches("ne");
            org.junit.Assert.fail("matches_literalMutationString84031 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    @org.junit.Test(timeout = 10000)
    public void matches_sd84088() {
        char[] __DSPOT_chars_4807 = new char[]{ 'w' , '6' , 'l' , 'Z' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84088__4 = r.matches('O');
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84088__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84088__5 = r.matches("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84088__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84088__6 = r.matches("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84088__6);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84088__7 = r.matches("one");
        // AssertGenerator create local variable with return value of invocation
        char o_matches_sd84088__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matches_sd84088__8)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84088__9 = r.matches("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84088__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84088__10 = r.matches("ne Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84088__10);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84088__11 = r.matches("ne Two Three Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84088__11);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_sd84088__12 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_sd84088__12);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84088__13 = r.matches("ne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84088__13);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_sd84088__14 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_4807);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matches_sd84088__14);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84088__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84088__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84088__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84088__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_sd84088__12);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84088__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84088__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matches_sd84088__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matches_sd84088__13);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matches_sd84088__8)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_literalMutationString84058 */
    @org.junit.Test(timeout = 10000)
    public void matches_literalMutationString84058_literalMutationString85756() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_60674 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_60675 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_60676 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__3 = r.matches('O');
        java.lang.Boolean Boolean_60677 = o_matches_literalMutationString84058__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__4 = r.matches("One Two Three");
        java.lang.Boolean Boolean_60678 = o_matches_literalMutationString84058__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__5 = r.matches("One");
        java.lang.Boolean Boolean_60679 = o_matches_literalMutationString84058__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__6 = r.matches("+ ?");
        java.lang.Boolean Boolean_60680 = o_matches_literalMutationString84058__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matches_literalMutationString84058__7 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__8 = r.matches("One");
        java.lang.Boolean Boolean_60681 = o_matches_literalMutationString84058__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__9 = r.matches("ne Two Three");
        java.lang.Boolean Boolean_60682 = o_matches_literalMutationString84058__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__10 = r.matches("ne Two Three Four");
        java.lang.Boolean Boolean_60683 = o_matches_literalMutationString84058__10;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_literalMutationString84058__11 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", o_matches_literalMutationString84058__11);
        java.lang.String String_60684 = o_matches_literalMutationString84058__11;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__12 = r.matches("ne");
        java.lang.Boolean Boolean_60685 = o_matches_literalMutationString84058__12;
        java.lang.Character Character_60686 = ((char) (o_matches_literalMutationString84058__7));
        java.lang.Boolean Boolean_60687 = o_matches_literalMutationString84058__10;
        java.lang.Boolean Boolean_60688 = o_matches_literalMutationString84058__9;
        java.lang.Boolean Boolean_60689 = o_matches_literalMutationString84058__4;
        java.lang.Boolean Boolean_60690 = o_matches_literalMutationString84058__8;
        java.lang.Boolean Boolean_60691 = o_matches_literalMutationString84058__3;
        java.lang.Boolean Boolean_60692 = o_matches_literalMutationString84058__6;
        java.lang.Boolean Boolean_60693 = o_matches_literalMutationString84058__5;
        java.lang.String String_60694 = o_matches_literalMutationString84058__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_60694);
        java.lang.Boolean Boolean_60695 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_60696 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_60697 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_60694);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", o_matches_literalMutationString84058__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_60684);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_literalMutationString84057 */
    @org.junit.Test(timeout = 10000)
    public void matches_literalMutationString84057_literalMutationString85700_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            java.lang.Boolean Boolean_60405 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_60406 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_60407 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84057__3 = r.matches('O');
            java.lang.Boolean Boolean_60408 = o_matches_literalMutationString84057__3;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84057__4 = r.matches("One Two Three");
            java.lang.Boolean Boolean_60409 = o_matches_literalMutationString84057__4;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84057__5 = r.matches("One");
            java.lang.Boolean Boolean_60410 = o_matches_literalMutationString84057__5;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84057__6 = r.matches("oe");
            java.lang.Boolean Boolean_60411 = o_matches_literalMutationString84057__6;
            // AssertGenerator create local variable with return value of invocation
            char o_matches_literalMutationString84057__7 = r.consume();
            java.lang.Character Character_60412 = ((char) (o_matches_literalMutationString84057__7));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84057__8 = r.matches("One");
            java.lang.Boolean Boolean_60413 = o_matches_literalMutationString84057__8;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84057__9 = r.matches("ne Two Three");
            java.lang.Boolean Boolean_60414 = o_matches_literalMutationString84057__9;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84057__10 = r.matches("ne Two Three Four");
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_matches_literalMutationString84057__11 = r.consumeToEnd();
            java.lang.String String_60415 = o_matches_literalMutationString84057__11;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84057__12 = r.matches("ne");
            java.lang.Boolean Boolean_60416 = o_matches_literalMutationString84057__12;
            java.lang.Boolean Boolean_60417 = o_matches_literalMutationString84057__4;
            java.lang.Boolean Boolean_60418 = o_matches_literalMutationString84057__5;
            java.lang.Boolean Boolean_60419 = o_matches_literalMutationString84057__3;
            java.lang.Character Character_60420 = ((char) (o_matches_literalMutationString84057__7));
            java.lang.Boolean Boolean_60421 = o_matches_literalMutationString84057__6;
            java.lang.Boolean Boolean_60422 = o_matches_literalMutationString84057__9;
            java.lang.Boolean Boolean_60423 = o_matches_literalMutationString84057__8;
            java.lang.String String_60424 = o_matches_literalMutationString84057__11;
            java.lang.Boolean Boolean_60425 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_60426 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_60427 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.Boolean Boolean_60428 = o_matches_literalMutationString84057__10;
            org.junit.Assert.fail("matches_literalMutationString84057_literalMutationString85700 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_sd84087 */
    @org.junit.Test(timeout = 10000)
    public void matches_sd84087_literalMutationString87446() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_59397 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_59398 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_59399 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84087__3 = r.matches('O');
        java.lang.Boolean Boolean_59400 = o_matches_sd84087__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84087__4 = r.matches("");
        java.lang.Boolean Boolean_59401 = o_matches_sd84087__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84087__5 = r.matches("One");
        java.lang.Boolean Boolean_59402 = o_matches_sd84087__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84087__6 = r.matches("one");
        java.lang.Boolean Boolean_59403 = o_matches_sd84087__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matches_sd84087__7 = r.consume();
        java.lang.Character Character_59404 = ((char) (o_matches_sd84087__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84087__8 = r.matches("One");
        java.lang.Boolean Boolean_59405 = o_matches_sd84087__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84087__9 = r.matches("ne Two Three");
        java.lang.Boolean Boolean_59406 = o_matches_sd84087__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84087__10 = r.matches("ne Two Three Four");
        java.lang.Boolean Boolean_59407 = o_matches_sd84087__10;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_sd84087__11 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_sd84087__11);
        java.lang.String String_59408 = o_matches_sd84087__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_59408);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84087__12 = r.matches("ne");
        java.lang.Boolean Boolean_59409 = o_matches_sd84087__12;
        // AssertGenerator create local variable with return value of invocation
        int o_matches_sd84087__13 = // StatementAdd: add invocation of a method
        r.pos();
        java.lang.Integer Integer_59410 = ((int) (o_matches_sd84087__13));
        java.lang.Character Character_59411 = ((char) (o_matches_sd84087__7));
        java.lang.Boolean Boolean_59412 = o_matches_sd84087__3;
        java.lang.String String_59413 = o_matches_sd84087__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_59413);
        java.lang.Boolean Boolean_59414 = o_matches_sd84087__10;
        java.lang.Boolean Boolean_59415 = o_matches_sd84087__12;
        java.lang.Boolean Boolean_59416 = o_matches_sd84087__5;
        java.lang.Boolean Boolean_59417 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_59418 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_59419 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_59420 = o_matches_sd84087__4;
        java.lang.Boolean Boolean_59421 = o_matches_sd84087__9;
        java.lang.Boolean Boolean_59422 = o_matches_sd84087__6;
        java.lang.Boolean Boolean_59423 = o_matches_sd84087__8;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_59408);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_sd84087__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_59413);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_sd84088 */
    @org.junit.Test(timeout = 10000)
    public void matches_sd84088_literalMutationChar87502() {
        char[] __DSPOT_chars_4807 = new char[]{ 'w' , '5' , 'l' , 'Z' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_62532 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_62533 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_62534 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84088__4 = r.matches('O');
        java.lang.Boolean Boolean_62535 = o_matches_sd84088__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84088__5 = r.matches("One Two Three");
        java.lang.Boolean Boolean_62536 = o_matches_sd84088__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84088__6 = r.matches("One");
        java.lang.Boolean Boolean_62537 = o_matches_sd84088__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84088__7 = r.matches("one");
        // AssertGenerator create local variable with return value of invocation
        char o_matches_sd84088__8 = r.consume();
        java.lang.Character Character_62538 = ((char) (o_matches_sd84088__8));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84088__9 = r.matches("One");
        java.lang.Boolean Boolean_62539 = o_matches_sd84088__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84088__10 = r.matches("ne Two Three");
        java.lang.Boolean Boolean_62540 = o_matches_sd84088__10;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84088__11 = r.matches("ne Two Three Four");
        java.lang.Boolean Boolean_62541 = o_matches_sd84088__11;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_sd84088__12 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_sd84088__12);
        java.lang.String String_62542 = o_matches_sd84088__12;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84088__13 = r.matches("ne");
        java.lang.Boolean Boolean_62543 = o_matches_sd84088__13;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_sd84088__14 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_4807);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matches_sd84088__14);
        java.lang.String String_62544 = o_matches_sd84088__14;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_62544);
        java.lang.Boolean Boolean_62545 = o_matches_sd84088__10;
        java.lang.Boolean Boolean_62546 = o_matches_sd84088__9;
        java.lang.Boolean Boolean_62547 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_62548 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_62549 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_62550 = o_matches_sd84088__11;
        java.lang.Boolean Boolean_62551 = o_matches_sd84088__6;
        java.lang.String String_62552 = o_matches_sd84088__12;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_62552);
        java.lang.Boolean Boolean_62553 = o_matches_sd84088__4;
        java.lang.Boolean Boolean_62554 = o_matches_sd84088__7;
        java.lang.Boolean Boolean_62555 = o_matches_sd84088__5;
        java.lang.Boolean Boolean_62556 = o_matches_sd84088__13;
        java.lang.Character Character_62557 = ((char) (o_matches_sd84088__8));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matches_sd84088__14);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_62552);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_62544);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_62542);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_sd84088__12);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_sd84083 */
    @org.junit.Test(timeout = 10000)
    public void matches_sd84083_literalMutationString87198() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_63090 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_63091 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_63092 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__3 = r.matches('O');
        java.lang.Boolean Boolean_63093 = o_matches_sd84083__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__4 = r.matches("One Two Three");
        java.lang.Boolean Boolean_63094 = o_matches_sd84083__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__5 = r.matches("One");
        java.lang.Boolean Boolean_63095 = o_matches_sd84083__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__6 = r.matches("one");
        // AssertGenerator create local variable with return value of invocation
        char o_matches_sd84083__7 = r.consume();
        java.lang.Character Character_63096 = ((char) (o_matches_sd84083__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__8 = r.matches("One");
        java.lang.Boolean Boolean_63097 = o_matches_sd84083__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__9 = r.matches("ne Two Three");
        java.lang.Boolean Boolean_63098 = o_matches_sd84083__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__10 = r.matches("ne Two Three Four");
        java.lang.Boolean Boolean_63099 = o_matches_sd84083__10;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_sd84083__11 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", o_matches_sd84083__11);
        java.lang.String String_63100 = o_matches_sd84083__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_63100);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__12 = r.matches("ne");
        java.lang.Boolean Boolean_63101 = o_matches_sd84083__12;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_sd84083__13 = // StatementAdd: add invocation of a method
        r.toString();
        java.lang.String String_63102 = o_matches_sd84083__13;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_63102);
        java.lang.Boolean Boolean_63103 = o_matches_sd84083__12;
        java.lang.Boolean Boolean_63104 = o_matches_sd84083__5;
        java.lang.Boolean Boolean_63105 = o_matches_sd84083__6;
        java.lang.String String_63106 = o_matches_sd84083__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_63106);
        java.lang.Boolean Boolean_63107 = o_matches_sd84083__3;
        java.lang.Boolean Boolean_63108 = o_matches_sd84083__8;
        java.lang.Boolean Boolean_63109 = o_matches_sd84083__10;
        java.lang.Character Character_63110 = ((char) (o_matches_sd84083__7));
        java.lang.Boolean Boolean_63111 = o_matches_sd84083__9;
        java.lang.Boolean Boolean_63112 = o_matches_sd84083__4;
        java.lang.Boolean Boolean_63113 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_63114 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_63115 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_63100);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matches_sd84083__13);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_63106);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", o_matches_sd84083__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_63102);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_literalMutationString84064 */
    @org.junit.Test(timeout = 10000)
    public void matches_literalMutationString84064_literalMutationString86147() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_59696 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_59697 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_59698 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84064__3 = r.matches('O');
        java.lang.Boolean Boolean_59699 = o_matches_literalMutationString84064__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84064__4 = r.matches("One Two Three");
        java.lang.Boolean Boolean_59700 = o_matches_literalMutationString84064__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84064__5 = r.matches("One");
        java.lang.Boolean Boolean_59701 = o_matches_literalMutationString84064__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84064__6 = r.matches("one");
        java.lang.Boolean Boolean_59702 = o_matches_literalMutationString84064__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matches_literalMutationString84064__7 = r.consume();
        java.lang.Character Character_59703 = ((char) (o_matches_literalMutationString84064__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84064__8 = r.matches("q>A");
        java.lang.Boolean Boolean_59704 = o_matches_literalMutationString84064__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84064__9 = r.matches("ne Two Three");
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84064__10 = r.matches("n$e Two Three Four");
        java.lang.Boolean Boolean_59705 = o_matches_literalMutationString84064__10;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_literalMutationString84064__11 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_literalMutationString84064__11);
        java.lang.String String_59706 = o_matches_literalMutationString84064__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_59706);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84064__12 = r.matches("ne");
        java.lang.Boolean Boolean_59707 = o_matches_literalMutationString84064__12;
        java.lang.Boolean Boolean_59708 = o_matches_literalMutationString84064__8;
        java.lang.String String_59709 = o_matches_literalMutationString84064__11;
        java.lang.Boolean Boolean_59710 = o_matches_literalMutationString84064__4;
        java.lang.Boolean Boolean_59711 = o_matches_literalMutationString84064__3;
        java.lang.Character Character_59712 = ((char) (o_matches_literalMutationString84064__7));
        java.lang.Boolean Boolean_59713 = o_matches_literalMutationString84064__5;
        java.lang.Boolean Boolean_59714 = o_matches_literalMutationString84064__9;
        java.lang.Boolean Boolean_59715 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_59716 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_59717 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_59718 = o_matches_literalMutationString84064__6;
        java.lang.Boolean Boolean_59719 = o_matches_literalMutationString84064__10;
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_59706);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_literalMutationString84064__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_59709);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_literalMutationString84031 */
    @org.junit.Test(timeout = 10000)
    public void matches_literalMutationString84031_failAssert0_literalMutationString87600() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84031_failAssert0_literalMutationString87600__5 = r.matches('O');
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matches_literalMutationString84031_failAssert0_literalMutationString87600__5);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84031_failAssert0_literalMutationString87600__6 = r.matches("One Two Three");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matches_literalMutationString84031_failAssert0_literalMutationString87600__6);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84031_failAssert0_literalMutationString87600__7 = r.matches("One");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matches_literalMutationString84031_failAssert0_literalMutationString87600__7);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84031_failAssert0_literalMutationString87600__8 = r.matches("gne");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matches_literalMutationString84031_failAssert0_literalMutationString87600__8);
            // AssertGenerator create local variable with return value of invocation
            char o_matches_literalMutationString84031_failAssert0_literalMutationString87600__9 = r.consume();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals('\uffff', ((char) (o_matches_literalMutationString84031_failAssert0_literalMutationString87600__9)));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84031_failAssert0_literalMutationString87600__10 = r.matches("One");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matches_literalMutationString84031_failAssert0_literalMutationString87600__10);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84031_failAssert0_literalMutationString87600__11 = r.matches("ne Two Three");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matches_literalMutationString84031_failAssert0_literalMutationString87600__11);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84031_failAssert0_literalMutationString87600__12 = r.matches("ne Two Three Four");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matches_literalMutationString84031_failAssert0_literalMutationString87600__12);
            r.consumeToEnd();
            r.matches("ne");
            org.junit.Assert.fail("matches_literalMutationString84031 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_literalMutationString84058 */
    @org.junit.Test(timeout = 10000)
    public void matches_literalMutationString84058_sd85806() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_62874 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_62875 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_62876 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__3 = r.matches('O');
        java.lang.Boolean Boolean_62877 = o_matches_literalMutationString84058__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__4 = r.matches("One Two Three");
        java.lang.Boolean Boolean_62878 = o_matches_literalMutationString84058__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__5 = r.matches("One");
        java.lang.Boolean Boolean_62879 = o_matches_literalMutationString84058__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__6 = r.matches("+ ?");
        java.lang.Boolean Boolean_62880 = o_matches_literalMutationString84058__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matches_literalMutationString84058__7 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__8 = r.matches("One");
        java.lang.Boolean Boolean_62881 = o_matches_literalMutationString84058__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__9 = r.matches("ne Two Three");
        java.lang.Boolean Boolean_62882 = o_matches_literalMutationString84058__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__10 = r.matches("ne Two Three Four");
        java.lang.Boolean Boolean_62883 = o_matches_literalMutationString84058__10;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_literalMutationString84058__11 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_literalMutationString84058__11);
        java.lang.String String_62884 = o_matches_literalMutationString84058__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_62884);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__12 = r.matches("ne");
        java.lang.Boolean Boolean_62885 = o_matches_literalMutationString84058__12;
        java.lang.Character Character_62886 = ((char) (o_matches_literalMutationString84058__7));
        java.lang.Boolean Boolean_62887 = o_matches_literalMutationString84058__10;
        java.lang.Boolean Boolean_62888 = o_matches_literalMutationString84058__9;
        java.lang.Boolean Boolean_62889 = o_matches_literalMutationString84058__4;
        java.lang.Boolean Boolean_62890 = o_matches_literalMutationString84058__8;
        java.lang.Boolean Boolean_62891 = o_matches_literalMutationString84058__3;
        java.lang.Boolean Boolean_62892 = o_matches_literalMutationString84058__6;
        java.lang.Boolean Boolean_62893 = o_matches_literalMutationString84058__5;
        java.lang.String String_62894 = o_matches_literalMutationString84058__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_62894);
        java.lang.Boolean Boolean_62895 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_62896 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_62897 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_literalMutationString84058__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_62894);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_62884);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_sd84085 */
    @org.junit.Test(timeout = 10000)
    public void matches_sd84085_literalMutationChar87312() {
        char __DSPOT_c_4806 = ' ';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_59597 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_59598 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_59599 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84085__4 = r.matches('O');
        java.lang.Boolean Boolean_59600 = o_matches_sd84085__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84085__5 = r.matches("One Two Three");
        java.lang.Boolean Boolean_59601 = o_matches_sd84085__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84085__6 = r.matches("One");
        java.lang.Boolean Boolean_59602 = o_matches_sd84085__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84085__7 = r.matches("one");
        java.lang.Boolean Boolean_59603 = o_matches_sd84085__7;
        // AssertGenerator create local variable with return value of invocation
        char o_matches_sd84085__8 = r.consume();
        java.lang.Character Character_59604 = ((char) (o_matches_sd84085__8));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84085__9 = r.matches("One");
        java.lang.Boolean Boolean_59605 = o_matches_sd84085__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84085__10 = r.matches("ne Two Three");
        java.lang.Boolean Boolean_59606 = o_matches_sd84085__10;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84085__11 = r.matches("ne Two Three Four");
        java.lang.Boolean Boolean_59607 = o_matches_sd84085__11;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_sd84085__12 = r.consumeToEnd();
        java.lang.String String_59608 = o_matches_sd84085__12;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_59608);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84085__13 = r.matches("ne");
        java.lang.Boolean Boolean_59609 = o_matches_sd84085__13;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_sd84085__14 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_4806);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matches_sd84085__14);
        java.lang.String String_59610 = o_matches_sd84085__14;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_59610);
        java.lang.Boolean Boolean_59611 = o_matches_sd84085__13;
        java.lang.Boolean Boolean_59612 = o_matches_sd84085__7;
        java.lang.Boolean Boolean_59613 = o_matches_sd84085__10;
        java.lang.Boolean Boolean_59614 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_59615 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_59616 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_59617 = o_matches_sd84085__11;
        java.lang.Character Character_59618 = ((char) (o_matches_sd84085__8));
        java.lang.Boolean Boolean_59619 = o_matches_sd84085__5;
        java.lang.Boolean Boolean_59620 = o_matches_sd84085__6;
        java.lang.Boolean Boolean_59621 = o_matches_sd84085__4;
        java.lang.Boolean Boolean_59622 = o_matches_sd84085__9;
        java.lang.String String_59623 = o_matches_sd84085__12;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_59623);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_sd84085__12);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_59610);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matches_sd84085__14);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_59608);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_sd84083 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_sd84083_literalMutationString87198 */
    @org.junit.Test(timeout = 10000)
    public void matches_sd84083_literalMutationString87198_literalMutationString98380() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_65657 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_65658 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_65659 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_63090 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_63091 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_63092 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__3 = r.matches('O');
        java.lang.Boolean Boolean_63093 = o_matches_sd84083__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__4 = r.matches("One Two Three");
        java.lang.Boolean Boolean_63094 = o_matches_sd84083__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__5 = r.matches("One");
        java.lang.Boolean Boolean_63095 = o_matches_sd84083__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__6 = r.matches("hne");
        // AssertGenerator create local variable with return value of invocation
        char o_matches_sd84083__7 = r.consume();
        java.lang.Character Character_63096 = ((char) (o_matches_sd84083__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__8 = r.matches("One");
        java.lang.Boolean Boolean_63097 = o_matches_sd84083__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__9 = r.matches("ne Two Three");
        java.lang.Boolean Boolean_63098 = o_matches_sd84083__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__10 = r.matches("ne Two Three Four");
        java.lang.Boolean Boolean_63099 = o_matches_sd84083__10;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_sd84083__11 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", o_matches_sd84083__11);
        java.lang.String String_65660 = o_matches_sd84083__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_65660);
        java.lang.String String_63100 = o_matches_sd84083__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_63100);
        java.lang.String String_65661 = String_63100;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_65661);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84083__12 = r.matches("ne");
        java.lang.Boolean Boolean_63101 = o_matches_sd84083__12;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_sd84083__13 = // StatementAdd: add invocation of a method
        r.toString();
        java.lang.String String_63102 = o_matches_sd84083__13;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_63102);
        java.lang.String String_65662 = String_63102;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_65662);
        java.lang.Boolean Boolean_63103 = o_matches_sd84083__12;
        java.lang.Boolean Boolean_63104 = o_matches_sd84083__5;
        java.lang.Boolean Boolean_63105 = o_matches_sd84083__6;
        java.lang.String String_63106 = o_matches_sd84083__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_63106);
        java.lang.String String_65663 = String_63106;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_65663);
        java.lang.Boolean Boolean_63107 = o_matches_sd84083__3;
        java.lang.Boolean Boolean_63108 = o_matches_sd84083__8;
        java.lang.Boolean Boolean_63109 = o_matches_sd84083__10;
        java.lang.Character Character_63110 = ((char) (o_matches_sd84083__7));
        java.lang.Boolean Boolean_63111 = o_matches_sd84083__9;
        java.lang.Boolean Boolean_63112 = o_matches_sd84083__4;
        java.lang.Boolean Boolean_63113 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_63114 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_63115 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_65664 = String_63100;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_65664);
        java.lang.String String_65665 = o_matches_sd84083__13;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_65665);
        java.lang.String String_65666 = String_63106;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_65666);
        java.lang.String String_65667 = o_matches_sd84083__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_65667);
        java.lang.String String_65668 = String_63102;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_65668);
        java.lang.Boolean Boolean_65669 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_65670 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_65671 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_65661);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", o_matches_sd84083__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_63102);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_63106);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_65667);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_65666);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_65665);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_65660);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matches_sd84083__13);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_65664);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_65663);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_63100);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_65668);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_65662);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_literalMutationString84055 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_literalMutationString84055_literalMutationString85615 */
    @org.junit.Test(timeout = 10000)
    public void matches_literalMutationString84055_literalMutationString85615_sd91097() {
        char __DSPOT_c_5020 = '&';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_64729 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_64730 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_64731 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_59939 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_59940 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_59941 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84055__3 = r.matches('O');
        java.lang.Boolean Boolean_59942 = o_matches_literalMutationString84055__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84055__4 = r.matches("One Two Three");
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84055__5 = r.matches("One");
        java.lang.Boolean Boolean_59943 = o_matches_literalMutationString84055__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84055__6 = r.matches("");
        java.lang.Boolean Boolean_59944 = o_matches_literalMutationString84055__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matches_literalMutationString84055__7 = r.consume();
        java.lang.Character Character_59945 = ((char) (o_matches_literalMutationString84055__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84055__8 = r.matches("<span>Hello <div>there</div> <span>now</span></span>");
        java.lang.Boolean Boolean_59946 = o_matches_literalMutationString84055__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84055__9 = r.matches("ne Two Three");
        java.lang.Boolean Boolean_59947 = o_matches_literalMutationString84055__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84055__10 = r.matches("ne Two Three Four");
        java.lang.Boolean Boolean_59948 = o_matches_literalMutationString84055__10;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_literalMutationString84055__11 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_literalMutationString84055__11);
        java.lang.String String_59949 = o_matches_literalMutationString84055__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_59949);
        java.lang.String String_64732 = String_59949;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_64732);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84055__12 = r.matches("ne");
        java.lang.Boolean Boolean_59950 = o_matches_literalMutationString84055__12;
        java.lang.Boolean Boolean_59951 = o_matches_literalMutationString84055__3;
        java.lang.Boolean Boolean_59952 = o_matches_literalMutationString84055__8;
        java.lang.String String_59953 = o_matches_literalMutationString84055__11;
        java.lang.String String_64733 = String_59953;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_64733);
        java.lang.Boolean Boolean_59954 = o_matches_literalMutationString84055__5;
        java.lang.Boolean Boolean_59955 = o_matches_literalMutationString84055__9;
        java.lang.Boolean Boolean_59956 = o_matches_literalMutationString84055__4;
        java.lang.Boolean Boolean_59957 = o_matches_literalMutationString84055__10;
        java.lang.Boolean Boolean_59958 = o_matches_literalMutationString84055__6;
        java.lang.Character Character_59959 = ((char) (o_matches_literalMutationString84055__7));
        java.lang.Boolean Boolean_59960 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_59961 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_59962 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_64734 = o_matches_literalMutationString84055__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_64734);
        java.lang.String String_64735 = String_59949;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_64735);
        java.lang.Boolean Boolean_64736 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_64737 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_64738 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_64739 = String_59953;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_64739);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_literalMutationString84055_literalMutationString85615_sd91097__69 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_5020);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matches_literalMutationString84055_literalMutationString85615_sd91097__69);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_64732);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_64735);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_64739);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_64734);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_59949);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_64733);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_59953);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_literalMutationString84055__11);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_literalMutationString84079 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_literalMutationString84079_sd87018 */
    @org.junit.Test(timeout = 10000)
    public void matches_literalMutationString84079_sd87018_literalMutationString91882() {
        char[] __DSPOT_chars_4903 = new char[]{ ',' , 'N' , '?' , 'J' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("On}e Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_64426 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_64427 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_64428 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_60282 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_60283 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_60284 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84079__3 = r.matches('O');
        java.lang.Boolean Boolean_60285 = o_matches_literalMutationString84079__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84079__4 = r.matches("One Two Three");
        java.lang.Boolean Boolean_60286 = o_matches_literalMutationString84079__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84079__5 = r.matches("One");
        java.lang.Boolean Boolean_60287 = o_matches_literalMutationString84079__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84079__6 = r.matches("one");
        java.lang.Boolean Boolean_60288 = o_matches_literalMutationString84079__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matches_literalMutationString84079__7 = r.consume();
        java.lang.Character Character_60289 = ((char) (o_matches_literalMutationString84079__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84079__8 = r.matches("One");
        java.lang.Boolean Boolean_60290 = o_matches_literalMutationString84079__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84079__9 = r.matches("ne Two Three");
        java.lang.Boolean Boolean_60291 = o_matches_literalMutationString84079__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84079__10 = r.matches("ne Two Three Four");
        java.lang.Boolean Boolean_60292 = o_matches_literalMutationString84079__10;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_literalMutationString84079__11 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("n}e Two Three", o_matches_literalMutationString84079__11);
        java.lang.String String_60293 = o_matches_literalMutationString84079__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("n}e Two Three", String_60293);
        java.lang.String String_64429 = String_60293;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("n}e Two Three", String_64429);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84079__12 = r.matches("");
        java.lang.Boolean Boolean_60294 = o_matches_literalMutationString84079__12;
        java.lang.Boolean Boolean_60295 = o_matches_literalMutationString84079__3;
        java.lang.Character Character_60296 = ((char) (o_matches_literalMutationString84079__7));
        java.lang.Boolean Boolean_60297 = o_matches_literalMutationString84079__8;
        java.lang.Boolean Boolean_60298 = o_matches_literalMutationString84079__6;
        java.lang.Boolean Boolean_60299 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_60300 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_60301 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_60302 = o_matches_literalMutationString84079__9;
        java.lang.Boolean Boolean_60303 = o_matches_literalMutationString84079__4;
        java.lang.Boolean Boolean_60304 = o_matches_literalMutationString84079__5;
        java.lang.String String_60305 = o_matches_literalMutationString84079__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("n}e Two Three", String_60305);
        java.lang.String String_64430 = String_60305;
        java.lang.Boolean Boolean_60306 = o_matches_literalMutationString84079__10;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_literalMutationString84079_sd87018__59 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_4903);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matches_literalMutationString84079_sd87018__59);
        java.lang.String String_64431 = o_matches_literalMutationString84079_sd87018__59;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_64431);
        java.lang.String String_64432 = String_60293;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("n}e Two Three", String_64432);
        java.lang.String String_64433 = o_matches_literalMutationString84079__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("n}e Two Three", String_64433);
        java.lang.String String_64434 = String_60305;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("n}e Two Three", String_64434);
        java.lang.Boolean Boolean_64435 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_64436 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_64437 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("n}e Two Three", String_64433);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("n}e Two Three", String_64429);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("n}e Two Three", o_matches_literalMutationString84079__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matches_literalMutationString84079_sd87018__59);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("n}e Two Three", String_64430);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_64431);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("n}e Two Three", String_60293);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("n}e Two Three", String_64434);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("n}e Two Three", String_64432);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("n}e Two Three", String_60305);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_sd84082 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_sd84082_literalMutationString87156 */
    @org.junit.Test(timeout = 10000)
    public void matches_sd84082_literalMutationString87156_literalMutationString95804() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_64637 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_64638 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_64639 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_61993 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_61994 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_61995 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84082__3 = r.matches('O');
        java.lang.Boolean Boolean_61996 = o_matches_sd84082__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84082__4 = r.matches("One Two Three");
        java.lang.Boolean Boolean_61997 = o_matches_sd84082__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84082__5 = r.matches("");
        java.lang.Boolean Boolean_61998 = o_matches_sd84082__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84082__6 = r.matches("one");
        java.lang.Boolean Boolean_61999 = o_matches_sd84082__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matches_sd84082__7 = r.consume();
        java.lang.Character Character_62000 = ((char) (o_matches_sd84082__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84082__8 = r.matches("One");
        java.lang.Boolean Boolean_62001 = o_matches_sd84082__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84082__9 = r.matches("ne Two Three");
        java.lang.Boolean Boolean_62002 = o_matches_sd84082__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84082__10 = r.matches("");
        java.lang.Boolean Boolean_62003 = o_matches_sd84082__10;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_sd84082__11 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_sd84082__11);
        java.lang.String String_64640 = o_matches_sd84082__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_64640);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_sd84082__12 = r.matches("ne");
        java.lang.Boolean Boolean_62004 = o_matches_sd84082__12;
        // StatementAdd: add invocation of a method
        r.advance();
        java.lang.Boolean Boolean_62005 = o_matches_sd84082__12;
        java.lang.Boolean Boolean_62006 = o_matches_sd84082__10;
        java.lang.Boolean Boolean_62007 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_62008 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_62009 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_62010 = o_matches_sd84082__8;
        java.lang.Boolean Boolean_62011 = o_matches_sd84082__3;
        java.lang.Boolean Boolean_62012 = o_matches_sd84082__9;
        java.lang.Boolean Boolean_62013 = o_matches_sd84082__4;
        java.lang.Boolean Boolean_62014 = o_matches_sd84082__6;
        java.lang.Character Character_62015 = ((char) (o_matches_sd84082__7));
        java.lang.Boolean Boolean_62016 = o_matches_sd84082__5;
        java.lang.String String_62017 = o_matches_sd84082__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_62017);
        java.lang.String String_64641 = String_62017;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_64641);
        java.lang.String String_64642 = o_matches_sd84082__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_64642);
        java.lang.Boolean Boolean_64643 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_64644 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_64645 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_62017);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_64642);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_64640);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matches_sd84082__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_64641);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_literalMutationString84057 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_literalMutationString84057_literalMutationString85700 */
    @org.junit.Test(timeout = 10000)
    public void matches_literalMutationString84057_literalMutationString85700_failAssert0_literalMutationString99637() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
            java.lang.Boolean Boolean_60405 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_60406 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_60407 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84057__3 = r.matches('O');
            java.lang.Boolean Boolean_60408 = o_matches_literalMutationString84057__3;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84057__4 = r.matches("One Two Three");
            java.lang.Boolean Boolean_60409 = o_matches_literalMutationString84057__4;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84057__5 = r.matches("One");
            java.lang.Boolean Boolean_60410 = o_matches_literalMutationString84057__5;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84057__6 = r.matches("oe");
            java.lang.Boolean Boolean_60411 = o_matches_literalMutationString84057__6;
            // AssertGenerator create local variable with return value of invocation
            char o_matches_literalMutationString84057__7 = r.consume();
            java.lang.Character Character_60412 = ((char) (o_matches_literalMutationString84057__7));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84057__8 = r.matches("One");
            java.lang.Boolean Boolean_60413 = o_matches_literalMutationString84057__8;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84057__9 = r.matches("<span>Hello <div>there</div> <span>now</span></span>");
            java.lang.Boolean Boolean_60414 = o_matches_literalMutationString84057__9;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84057__10 = r.matches("ne Two Three Four");
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_matches_literalMutationString84057__11 = r.consumeToEnd();
            java.lang.String String_60415 = o_matches_literalMutationString84057__11;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matches_literalMutationString84057__12 = r.matches("ne");
            java.lang.Boolean Boolean_60416 = o_matches_literalMutationString84057__12;
            java.lang.Boolean Boolean_60417 = o_matches_literalMutationString84057__4;
            java.lang.Boolean Boolean_60418 = o_matches_literalMutationString84057__5;
            java.lang.Boolean Boolean_60419 = o_matches_literalMutationString84057__3;
            java.lang.Character Character_60420 = ((char) (o_matches_literalMutationString84057__7));
            java.lang.Boolean Boolean_60421 = o_matches_literalMutationString84057__6;
            java.lang.Boolean Boolean_60422 = o_matches_literalMutationString84057__9;
            java.lang.Boolean Boolean_60423 = o_matches_literalMutationString84057__8;
            java.lang.String String_60424 = o_matches_literalMutationString84057__11;
            java.lang.Boolean Boolean_60425 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_60426 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_60427 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.Boolean Boolean_60428 = o_matches_literalMutationString84057__10;
            org.junit.Assert.fail("matches_literalMutationString84057_literalMutationString85700 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matches */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_literalMutationString84058 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matches_literalMutationString84058_literalMutationString85756 */
    @org.junit.Test(timeout = 10000)
    public void matches_literalMutationString84058_literalMutationString85756_literalMutationString92766() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></s%pan>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_63781 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_63782 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_63783 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_60674 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_60675 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_60676 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__3 = r.matches('O');
        java.lang.Boolean Boolean_60677 = o_matches_literalMutationString84058__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__4 = r.matches("One Two Three");
        java.lang.Boolean Boolean_60678 = o_matches_literalMutationString84058__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__5 = r.matches("One");
        java.lang.Boolean Boolean_60679 = o_matches_literalMutationString84058__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__6 = r.matches("+ ?");
        java.lang.Boolean Boolean_60680 = o_matches_literalMutationString84058__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matches_literalMutationString84058__7 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__8 = r.matches("One");
        java.lang.Boolean Boolean_60681 = o_matches_literalMutationString84058__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__9 = r.matches("ne Two Three");
        java.lang.Boolean Boolean_60682 = o_matches_literalMutationString84058__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__10 = r.matches("ne Two Three Four");
        java.lang.Boolean Boolean_60683 = o_matches_literalMutationString84058__10;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matches_literalMutationString84058__11 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></s%pan>", o_matches_literalMutationString84058__11);
        java.lang.String String_63784 = o_matches_literalMutationString84058__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></s%pan>", String_63784);
        java.lang.String String_60684 = o_matches_literalMutationString84058__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></s%pan>", String_60684);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matches_literalMutationString84058__12 = r.matches("ne");
        java.lang.Boolean Boolean_60685 = o_matches_literalMutationString84058__12;
        java.lang.Character Character_60686 = ((char) (o_matches_literalMutationString84058__7));
        java.lang.Boolean Boolean_60687 = o_matches_literalMutationString84058__10;
        java.lang.Boolean Boolean_60688 = o_matches_literalMutationString84058__9;
        java.lang.Boolean Boolean_60689 = o_matches_literalMutationString84058__4;
        java.lang.Boolean Boolean_60690 = o_matches_literalMutationString84058__8;
        java.lang.Boolean Boolean_60691 = o_matches_literalMutationString84058__3;
        java.lang.Boolean Boolean_60692 = o_matches_literalMutationString84058__6;
        java.lang.Boolean Boolean_60693 = o_matches_literalMutationString84058__5;
        java.lang.String String_60694 = o_matches_literalMutationString84058__11;
        java.lang.String String_63785 = String_60694;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></s%pan>", String_63785);
        java.lang.Boolean Boolean_60695 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_60696 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_60697 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_63786 = String_60694;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></s%pan>", String_63786);
        java.lang.Boolean Boolean_63787 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_63788 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_63789 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_63790 = o_matches_literalMutationString84058__11;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></s%pan>", String_63790);
        java.lang.String String_63791 = String_60684;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></s%pan>", String_63791);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></s%pan>", String_63784);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></s%pan>", String_60694);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></s%pan>", String_60684);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></s%pan>", String_63785);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></s%pan>", o_matches_literalMutationString84058__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></s%pan>", String_63786);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></s%pan>", String_63790);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(53, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_sd100445() {
        char[] scan = new char[]{ ' ' , '\n' , '\t' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100445__4 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_sd100445__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_sd100445__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_sd100445__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100445__6 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesAny_sd100445__6);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_sd100445__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\n', ((char) (o_matchesAny_sd100445__7)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100445__8 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_sd100445__8);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_sd100445__9 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two\tThree", o_matchesAny_sd100445__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_sd100445__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\n', ((char) (o_matchesAny_sd100445__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesAny_sd100445__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_sd100445__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_sd100445__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(4, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_sd100447() {
        char __DSPOT_c_5324 = ',';
        char[] scan = new char[]{ ' ' , '\n' , '\t' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100447__5 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_sd100447__5);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_sd100447__6 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_sd100447__6);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100447__7 = r.matchesAny(scan);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_sd100447__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\n', ((char) (o_matchesAny_sd100447__8)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100447__9 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_sd100447__9);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_sd100447__10 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_5324);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two\tThree", o_matchesAny_sd100447__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_sd100447__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_sd100447__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_sd100447__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\n', ((char) (o_matchesAny_sd100447__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesAny_sd100447__7);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_sd100444() {
        char[] scan = new char[]{ ' ' , '\n' , '\t' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100444__4 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_sd100444__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_sd100444__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_sd100444__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100444__6 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesAny_sd100444__6);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_sd100444__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\n', ((char) (o_matchesAny_sd100444__7)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100444__8 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_sd100444__8);
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('w', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(5, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_sd100444__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_sd100444__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesAny_sd100444__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\n', ((char) (o_matchesAny_sd100444__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_sd100444__8);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationString100439() {
        char[] scan = new char[]{ ' ' , '\n' , '\t' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100439__4 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_literalMutationString100439__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationString100439__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello", o_matchesAny_literalMutationString100439__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100439__6 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesAny_literalMutationString100439__6);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationString100439__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (o_matchesAny_literalMutationString100439__7)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100439__8 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_literalMutationString100439__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello", o_matchesAny_literalMutationString100439__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesAny_literalMutationString100439__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_literalMutationString100439__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(12, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(' ', ((char) (o_matchesAny_literalMutationString100439__7)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationString100438() {
        char[] scan = new char[]{ ' ' , '\n' , '\t' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100438__4 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_literalMutationString100438__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationString100438__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesAny_literalMutationString100438__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100438__6 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_literalMutationString100438__6);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationString100438__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_matchesAny_literalMutationString100438__7)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100438__8 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_literalMutationString100438__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_matchesAny_literalMutationString100438__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_literalMutationString100438__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_literalMutationString100438__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesAny_literalMutationString100438__5);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_sd100450() {
        char[] __DSPOT_chars_5325 = new char[]{ '5' };
        char[] scan = new char[]{ ' ' , '\n' , '\t' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100450__5 = r.matchesAny(scan);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_sd100450__6 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_sd100450__6);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100450__7 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesAny_sd100450__7);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_sd100450__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\n', ((char) (o_matchesAny_sd100450__8)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100450__9 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_sd100450__9);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_sd100450__10 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_5325);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two\tThree", o_matchesAny_sd100450__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_sd100450__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_sd100450__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_sd100450__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesAny_sd100450__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\n', ((char) (o_matchesAny_sd100450__8)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationChar100433() {
        char[] scan = new char[]{ ' ' , '\n' , ' ' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100433__4 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_literalMutationChar100433__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationChar100433__5 = r.consumeToAny(scan);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100433__6 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesAny_literalMutationChar100433__6);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationChar100433__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\n', ((char) (o_matchesAny_literalMutationChar100433__7)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100433__8 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_literalMutationChar100433__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_literalMutationChar100433__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesAny_literalMutationChar100433__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_literalMutationChar100433__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(4, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\n', ((char) (o_matchesAny_literalMutationChar100433__7)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationString100443() {
        char[] scan = new char[]{ ' ' , '\n' , '\t' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("sXItvvs!/+O6S");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('s', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100443__4 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_literalMutationString100443__4);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationString100443__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("sXItvvs!/+O6S", o_matchesAny_literalMutationString100443__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100443__6 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_literalMutationString100443__6);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationString100443__7 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100443__8 = r.matchesAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_literalMutationString100443__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_matchesAny_literalMutationString100443__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_literalMutationString100443__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("sXItvvs!/+O6S", o_matchesAny_literalMutationString100443__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesAny_literalMutationString100443__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationChar100434 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationChar100434_sd100968() {
        char __DSPOT_c_5352 = 'e';
        char[] scan = new char[]{ ' ' , '\n' , 'T' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_68552 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68553 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68554 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100434__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68555 = o_matchesAny_literalMutationChar100434__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationChar100434__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_literalMutationChar100434__5);
        java.lang.String String_68556 = o_matchesAny_literalMutationChar100434__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_68556);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100434__6 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68557 = o_matchesAny_literalMutationChar100434__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationChar100434__7 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100434__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68558 = o_matchesAny_literalMutationChar100434__8;
        java.lang.Character Character_68559 = ((char) (o_matchesAny_literalMutationChar100434__7));
        java.lang.Boolean Boolean_68560 = o_matchesAny_literalMutationChar100434__6;
        java.lang.String String_68561 = o_matchesAny_literalMutationChar100434__5;
        java.lang.Boolean Boolean_68562 = o_matchesAny_literalMutationChar100434__4;
        java.lang.Boolean Boolean_68563 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68564 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68565 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationChar100434_sd100968__34 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_5352);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two\tThr", o_matchesAny_literalMutationChar100434_sd100968__34);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_68556);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_68561);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_literalMutationChar100434__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(11, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationChar100435 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationChar100435_sd100997() {
        char[] scan = new char[]{ ' ' , '\n' , '\n' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_67182 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_67183 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_67184 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100435__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_67185 = o_matchesAny_literalMutationChar100435__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationChar100435__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_literalMutationChar100435__5);
        java.lang.String String_67186 = o_matchesAny_literalMutationChar100435__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_67186);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100435__6 = r.matchesAny(scan);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationChar100435__7 = r.consume();
        java.lang.Character Character_67187 = ((char) (o_matchesAny_literalMutationChar100435__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100435__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_67188 = o_matchesAny_literalMutationChar100435__8;
        java.lang.Boolean Boolean_67189 = o_matchesAny_literalMutationChar100435__6;
        java.lang.Boolean Boolean_67190 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_67191 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_67192 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_67193 = ((char) (o_matchesAny_literalMutationChar100435__7));
        java.lang.Boolean Boolean_67194 = o_matchesAny_literalMutationChar100435__4;
        java.lang.String String_67195 = o_matchesAny_literalMutationChar100435__5;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationChar100435_sd100997__33 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two\tThree", o_matchesAny_literalMutationChar100435_sd100997__33);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_67186);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_67195);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(4, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_literalMutationChar100435__5);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationChar100434 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationChar100434_literalMutationChar100957() {
        char[] scan = new char[]{ ' ' , '\n' , 'S' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_68822 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68823 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68824 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100434__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68825 = o_matchesAny_literalMutationChar100434__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationChar100434__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_literalMutationChar100434__5);
        java.lang.String String_68826 = o_matchesAny_literalMutationChar100434__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_68826);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100434__6 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68827 = o_matchesAny_literalMutationChar100434__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationChar100434__7 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100434__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68828 = o_matchesAny_literalMutationChar100434__8;
        java.lang.Character Character_68829 = ((char) (o_matchesAny_literalMutationChar100434__7));
        java.lang.Boolean Boolean_68830 = o_matchesAny_literalMutationChar100434__6;
        java.lang.String String_68831 = o_matchesAny_literalMutationChar100434__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_68831);
        java.lang.Boolean Boolean_68832 = o_matchesAny_literalMutationChar100434__4;
        java.lang.Boolean Boolean_68833 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68834 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68835 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_literalMutationChar100434__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_68831);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(4, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_68826);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationString100438 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationString100438_sd101055() {
        char[] scan = new char[]{ ' ' , '\n' , '\t' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_68581 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68582 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68583 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100438__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68584 = o_matchesAny_literalMutationString100438__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationString100438__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesAny_literalMutationString100438__5);
        java.lang.String String_68585 = o_matchesAny_literalMutationString100438__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_68585);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100438__6 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68586 = o_matchesAny_literalMutationString100438__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationString100438__7 = r.consume();
        java.lang.Character Character_68587 = ((char) (o_matchesAny_literalMutationString100438__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100438__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68588 = o_matchesAny_literalMutationString100438__8;
        java.lang.Character Character_68589 = ((char) (o_matchesAny_literalMutationString100438__7));
        java.lang.Boolean Boolean_68590 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68591 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68592 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_68593 = o_matchesAny_literalMutationString100438__6;
        java.lang.Boolean Boolean_68594 = o_matchesAny_literalMutationString100438__4;
        java.lang.String String_68595 = o_matchesAny_literalMutationString100438__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_68595);
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_68595);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesAny_literalMutationString100438__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_68585);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_sd100447 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_sd100447_literalMutationString101337() {
        char __DSPOT_c_5324 = ',';
        char[] scan = new char[]{ ' ' , '\n' , '\t' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tT3ree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_67451 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_67452 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_67453 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100447__5 = r.matchesAny(scan);
        java.lang.Boolean Boolean_67454 = o_matchesAny_sd100447__5;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_sd100447__6 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_sd100447__6);
        java.lang.String String_67455 = o_matchesAny_sd100447__6;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_67455);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100447__7 = r.matchesAny(scan);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_sd100447__8 = r.consume();
        java.lang.Character Character_67456 = ((char) (o_matchesAny_sd100447__8));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100447__9 = r.matchesAny(scan);
        java.lang.Boolean Boolean_67457 = o_matchesAny_sd100447__9;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_sd100447__10 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_5324);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two\tT3ree", o_matchesAny_sd100447__10);
        java.lang.String String_67458 = o_matchesAny_sd100447__10;
        java.lang.String String_67459 = o_matchesAny_sd100447__6;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_67459);
        java.lang.Boolean Boolean_67460 = o_matchesAny_sd100447__9;
        java.lang.Boolean Boolean_67461 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_67462 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_67463 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_67464 = o_matchesAny_sd100447__5;
        java.lang.Character Character_67465 = ((char) (o_matchesAny_sd100447__8));
        java.lang.Boolean Boolean_67466 = o_matchesAny_sd100447__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_67455);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_sd100447__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two\tT3ree", o_matchesAny_sd100447__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_67459);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two\tT3ree", String_67458);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationChar100434 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationChar100434_sd100971() {
        char[] __DSPOT_chars_5353 = new char[]{ 'j' };
        char[] scan = new char[]{ ' ' , '\n' , 'T' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_68377 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68378 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68379 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100434__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68380 = o_matchesAny_literalMutationChar100434__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationChar100434__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_literalMutationChar100434__5);
        java.lang.String String_68381 = o_matchesAny_literalMutationChar100434__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_68381);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100434__6 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68382 = o_matchesAny_literalMutationChar100434__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationChar100434__7 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100434__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68383 = o_matchesAny_literalMutationChar100434__8;
        java.lang.Character Character_68384 = ((char) (o_matchesAny_literalMutationChar100434__7));
        java.lang.Boolean Boolean_68385 = o_matchesAny_literalMutationChar100434__6;
        java.lang.String String_68386 = o_matchesAny_literalMutationChar100434__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_68386);
        java.lang.Boolean Boolean_68387 = o_matchesAny_literalMutationChar100434__4;
        java.lang.Boolean Boolean_68388 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68389 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68390 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationChar100434_sd100971__34 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_5353);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two\tThree", o_matchesAny_literalMutationChar100434_sd100971__34);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_68386);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_68381);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_literalMutationChar100434__5);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationString100438 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationString100438_sd101058_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            char __DSPOT_c_5358 = 'Y';
            char[] scan = new char[]{ ' ' , '\n' , '\t' };
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            java.lang.Boolean Boolean_68449 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_68450 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_68451 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesAny_literalMutationString100438__4 = r.matchesAny(scan);
            java.lang.Boolean Boolean_68452 = o_matchesAny_literalMutationString100438__4;
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_matchesAny_literalMutationString100438__5 = r.consumeToAny(scan);
            java.lang.String String_68453 = o_matchesAny_literalMutationString100438__5;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesAny_literalMutationString100438__6 = r.matchesAny(scan);
            java.lang.Boolean Boolean_68454 = o_matchesAny_literalMutationString100438__6;
            // AssertGenerator create local variable with return value of invocation
            char o_matchesAny_literalMutationString100438__7 = r.consume();
            java.lang.Character Character_68455 = ((char) (o_matchesAny_literalMutationString100438__7));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesAny_literalMutationString100438__8 = r.matchesAny(scan);
            java.lang.Boolean Boolean_68456 = o_matchesAny_literalMutationString100438__8;
            java.lang.Character Character_68457 = ((char) (o_matchesAny_literalMutationString100438__7));
            java.lang.Boolean Boolean_68458 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_68459 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_68460 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.Boolean Boolean_68461 = o_matchesAny_literalMutationString100438__6;
            java.lang.Boolean Boolean_68462 = o_matchesAny_literalMutationString100438__4;
            java.lang.String String_68463 = o_matchesAny_literalMutationString100438__5;
            // StatementAdd: add invocation of a method
            r.consumeTo(__DSPOT_c_5358);
            org.junit.Assert.fail("matchesAny_literalMutationString100438_sd101058 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationString100439 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationString100439_literalMutationString101083() {
        char[] scan = new char[]{ ' ' , '\n' , '\t' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <pan>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_68777 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68778 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68779 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100439__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68780 = o_matchesAny_literalMutationString100439__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationString100439__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello", o_matchesAny_literalMutationString100439__5);
        java.lang.String String_68781 = o_matchesAny_literalMutationString100439__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello", String_68781);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100439__6 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68782 = o_matchesAny_literalMutationString100439__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationString100439__7 = r.consume();
        java.lang.Character Character_68783 = ((char) (o_matchesAny_literalMutationString100439__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100439__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68784 = o_matchesAny_literalMutationString100439__8;
        java.lang.String String_68785 = o_matchesAny_literalMutationString100439__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello", String_68785);
        java.lang.Boolean Boolean_68786 = o_matchesAny_literalMutationString100439__6;
        java.lang.Boolean Boolean_68787 = o_matchesAny_literalMutationString100439__4;
        java.lang.Boolean Boolean_68788 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68789 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68790 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_68791 = ((char) (o_matchesAny_literalMutationString100439__7));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello", o_matchesAny_literalMutationString100439__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(12, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello", String_68781);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello", String_68785);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationString100438 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationString100438_literalMutationChar101047() {
        char[] scan = new char[]{ ' ' , '\n' , ' ' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_66507 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_66508 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_66509 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100438__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_66510 = o_matchesAny_literalMutationString100438__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationString100438__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesAny_literalMutationString100438__5);
        java.lang.String String_66511 = o_matchesAny_literalMutationString100438__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_66511);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100438__6 = r.matchesAny(scan);
        java.lang.Boolean Boolean_66512 = o_matchesAny_literalMutationString100438__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationString100438__7 = r.consume();
        java.lang.Character Character_66513 = ((char) (o_matchesAny_literalMutationString100438__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100438__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_66514 = o_matchesAny_literalMutationString100438__8;
        java.lang.Character Character_66515 = ((char) (o_matchesAny_literalMutationString100438__7));
        java.lang.Boolean Boolean_66516 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_66517 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_66518 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_66519 = o_matchesAny_literalMutationString100438__6;
        java.lang.Boolean Boolean_66520 = o_matchesAny_literalMutationString100438__4;
        java.lang.String String_66521 = o_matchesAny_literalMutationString100438__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_66521);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesAny_literalMutationString100438__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_66511);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationString100439 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationString100439_literalMutationChar101062() {
        char[] scan = new char[]{ ' ' , '\n' , '\t' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_67421 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_67422 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_67423 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100439__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_67424 = o_matchesAny_literalMutationString100439__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationString100439__5 = r.consumeToAny(scan);
        java.lang.String String_67425 = o_matchesAny_literalMutationString100439__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_67425);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100439__6 = r.matchesAny(scan);
        java.lang.Boolean Boolean_67426 = o_matchesAny_literalMutationString100439__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationString100439__7 = r.consume();
        java.lang.Character Character_67427 = ((char) (o_matchesAny_literalMutationString100439__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100439__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_67428 = o_matchesAny_literalMutationString100439__8;
        java.lang.String String_67429 = o_matchesAny_literalMutationString100439__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_67429);
        java.lang.Boolean Boolean_67430 = o_matchesAny_literalMutationString100439__6;
        java.lang.Boolean Boolean_67431 = o_matchesAny_literalMutationString100439__4;
        java.lang.Boolean Boolean_67432 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_67433 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_67434 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_67435 = ((char) (o_matchesAny_literalMutationString100439__7));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_67425);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(53, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", o_matchesAny_literalMutationString100439__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_67429);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_sd100449 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_sd100449_sd101407 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_sd100449_sd101407_literalMutationChar104183() {
        char[] scan = new char[]{ ' ' , '\n' , '\b' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_70587 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_70588 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_70589 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_66820 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_66821 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_66822 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100449__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_66823 = o_matchesAny_sd100449__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_sd100449__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_sd100449__5);
        java.lang.String String_70590 = o_matchesAny_sd100449__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_70590);
        java.lang.String String_66824 = o_matchesAny_sd100449__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_66824);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100449__6 = r.matchesAny(scan);
        java.lang.Boolean Boolean_66825 = o_matchesAny_sd100449__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_sd100449__7 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100449__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_66826 = o_matchesAny_sd100449__8;
        // AssertGenerator create local variable with return value of invocation
        int o_matchesAny_sd100449__9 = // StatementAdd: add invocation of a method
        r.pos();
        java.lang.Integer Integer_66827 = ((int) (o_matchesAny_sd100449__9));
        java.lang.Character Character_66828 = ((char) (o_matchesAny_sd100449__7));
        java.lang.Boolean Boolean_66829 = o_matchesAny_sd100449__6;
        java.lang.Boolean Boolean_66830 = o_matchesAny_sd100449__8;
        java.lang.String String_66831 = o_matchesAny_sd100449__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_66831);
        java.lang.String String_70591 = String_66831;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_70591);
        java.lang.Boolean Boolean_66832 = o_matchesAny_sd100449__4;
        java.lang.Boolean Boolean_66833 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_66834 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_66835 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        int o_matchesAny_sd100449_sd101407__39 = // StatementAdd: add invocation of a method
        r.pos();
        java.lang.Integer Integer_70592 = ((int) (o_matchesAny_sd100449_sd101407__39));
        java.lang.String String_70593 = String_66831;
        java.lang.String String_70594 = o_matchesAny_sd100449__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_70594);
        java.lang.Boolean Boolean_70595 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_70596 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_70597 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_70598 = String_66824;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_70598);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_70590);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(4, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_70594);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_70593);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_66831);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_sd100449__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_70591);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_66824);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationString100440 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationString100440_sd101123 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationString100440_sd101123_sd107985() {
        char __DSPOT_c_5746 = 'f';
        char[] __DSPOT_chars_5363 = new char[0];
        char[] scan = new char[]{ ' ' , '\n' , '\t' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("On\nTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_69377 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_69378 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_69379 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_68566 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68567 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68568 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100440__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68569 = o_matchesAny_literalMutationString100440__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationString100440__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("On", o_matchesAny_literalMutationString100440__5);
        java.lang.String String_69380 = o_matchesAny_literalMutationString100440__5;
        java.lang.String String_68570 = o_matchesAny_literalMutationString100440__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("On", String_68570);
        java.lang.String String_69381 = String_68570;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("On", String_69381);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100440__6 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68571 = o_matchesAny_literalMutationString100440__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationString100440__7 = r.consume();
        java.lang.Character Character_68572 = ((char) (o_matchesAny_literalMutationString100440__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100440__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68573 = o_matchesAny_literalMutationString100440__8;
        java.lang.Boolean Boolean_68574 = o_matchesAny_literalMutationString100440__4;
        java.lang.String String_68575 = o_matchesAny_literalMutationString100440__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("On", String_68575);
        java.lang.Character Character_68576 = ((char) (o_matchesAny_literalMutationString100440__7));
        java.lang.Boolean Boolean_68577 = o_matchesAny_literalMutationString100440__6;
        java.lang.Boolean Boolean_68578 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68579 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68580 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationString100440_sd101123__35 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_5363);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two\tThree", o_matchesAny_literalMutationString100440_sd101123__35);
        java.lang.String String_69382 = o_matchesAny_literalMutationString100440_sd101123__35;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two\tThree", String_69382);
        java.lang.String String_69383 = String_68575;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("On", String_69383);
        java.lang.Boolean Boolean_69384 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_69385 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_69386 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_69387 = String_68570;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("On", String_69387);
        java.lang.String String_69388 = o_matchesAny_literalMutationString100440__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("On", String_69388);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationString100440_sd101123_sd107985__52 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_5746);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesAny_literalMutationString100440_sd101123_sd107985__52);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("On", String_69380);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("On", String_69388);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two\tThree", o_matchesAny_literalMutationString100440_sd101123__35);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(12, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two\tThree", String_69382);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("On", String_69381);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("On", String_69387);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("On", String_69383);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("On", String_68570);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("On", o_matchesAny_literalMutationString100440__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("On", String_68575);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationChar100422 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationChar100422_sd100630 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationChar100422_sd100630_literalMutationString103802() {
        char[] __DSPOT_chars_5331 = new char[]{ '[' , 'C' };
        char[] scan = new char[]{ 'G' , '\n' , '\t' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_70453 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_70454 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_70455 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_66642 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_66643 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_66644 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100422__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_66645 = o_matchesAny_literalMutationChar100422__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationChar100422__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", o_matchesAny_literalMutationChar100422__5);
        java.lang.String String_70456 = o_matchesAny_literalMutationChar100422__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_70456);
        java.lang.String String_66646 = o_matchesAny_literalMutationChar100422__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_66646);
        java.lang.String String_70457 = String_66646;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_70457);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100422__6 = r.matchesAny(scan);
        java.lang.Boolean Boolean_66647 = o_matchesAny_literalMutationChar100422__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationChar100422__7 = r.consume();
        java.lang.Character Character_66648 = ((char) (o_matchesAny_literalMutationChar100422__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100422__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_66649 = o_matchesAny_literalMutationChar100422__8;
        java.lang.Character Character_66650 = ((char) (o_matchesAny_literalMutationChar100422__7));
        java.lang.Boolean Boolean_66651 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_66652 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_66653 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_66654 = o_matchesAny_literalMutationChar100422__6;
        java.lang.String String_66655 = o_matchesAny_literalMutationChar100422__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_66655);
        java.lang.String String_70458 = String_66655;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_70458);
        java.lang.Boolean Boolean_66656 = o_matchesAny_literalMutationChar100422__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationChar100422_sd100630__35 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_5331);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesAny_literalMutationChar100422_sd100630__35);
        java.lang.String String_70459 = o_matchesAny_literalMutationChar100422_sd100630__35;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_70459);
        java.lang.Boolean Boolean_70460 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_70461 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_70462 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_70463 = String_66646;
        java.lang.String String_70464 = String_66655;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_70464);
        java.lang.String String_70465 = o_matchesAny_literalMutationChar100422__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_70465);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_70463);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_70458);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", o_matchesAny_literalMutationChar100422__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_70459);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_70457);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_70464);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_66646);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_66655);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesAny_literalMutationChar100422_sd100630__35);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<span>Hello <div>there</div> <span>now</span></span>", String_70456);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(53, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationString100441 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationString100441_sd101151 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationString100441_sd101151_literalMutationChar105791() {
        char __DSPOT_c_5364 = '1';
        char[] scan = new char[]{ ' ' , '\n' , '{' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nwTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_70909 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_70910 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_70911 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_67557 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_67558 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_67559 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100441__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_67560 = o_matchesAny_literalMutationString100441__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationString100441__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_literalMutationString100441__5);
        java.lang.String String_67561 = o_matchesAny_literalMutationString100441__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_67561);
        java.lang.String String_70912 = String_67561;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_70912);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100441__6 = r.matchesAny(scan);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationString100441__7 = r.consume();
        java.lang.Character Character_67562 = ((char) (o_matchesAny_literalMutationString100441__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100441__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_67563 = o_matchesAny_literalMutationString100441__8;
        java.lang.Boolean Boolean_67564 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_67565 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_67566 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_67567 = o_matchesAny_literalMutationString100441__5;
        java.lang.String String_70913 = String_67567;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_70913);
        java.lang.Boolean Boolean_67568 = o_matchesAny_literalMutationString100441__4;
        java.lang.Boolean Boolean_67569 = o_matchesAny_literalMutationString100441__6;
        java.lang.Character Character_67570 = ((char) (o_matchesAny_literalMutationString100441__7));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationString100441_sd101151__34 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_5364);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wTwo\tThree", o_matchesAny_literalMutationString100441_sd101151__34);
        java.lang.String String_70914 = o_matchesAny_literalMutationString100441_sd101151__34;
        java.lang.String String_70915 = String_67561;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_70915);
        java.lang.Boolean Boolean_70916 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_70917 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_70918 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_70919 = o_matchesAny_literalMutationString100441__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_70919);
        java.lang.String String_70920 = String_67567;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_70920);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_70912);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_67561);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_literalMutationString100441__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_70913);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_67567);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wTwo\tThree", String_70914);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wTwo\tThree", o_matchesAny_literalMutationString100441_sd101151__34);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_70919);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_70915);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationChar100428 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationChar100428_literalMutationString100804 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationChar100428_literalMutationString100804_sd106689() {
        char[] scan = new char[]{ ' ' , ']' , '\t' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_69680 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_69681 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_69682 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_67961 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_67962 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_67963 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100428__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_67964 = o_matchesAny_literalMutationChar100428__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationChar100428__5 = r.consumeToAny(scan);
        java.lang.String String_69683 = o_matchesAny_literalMutationChar100428__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_69683);
        java.lang.String String_67965 = o_matchesAny_literalMutationChar100428__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_67965);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100428__6 = r.matchesAny(scan);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationChar100428__7 = r.consume();
        java.lang.Character Character_67966 = ((char) (o_matchesAny_literalMutationChar100428__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100428__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_67967 = o_matchesAny_literalMutationChar100428__8;
        java.lang.Boolean Boolean_67968 = o_matchesAny_literalMutationChar100428__4;
        java.lang.String String_67969 = o_matchesAny_literalMutationChar100428__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_67969);
        java.lang.String String_69684 = String_67969;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_69684);
        java.lang.Boolean Boolean_67970 = o_matchesAny_literalMutationChar100428__6;
        java.lang.Character Character_67971 = ((char) (o_matchesAny_literalMutationChar100428__7));
        java.lang.Boolean Boolean_67972 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_67973 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_67974 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_69685 = String_67969;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_69685);
        java.lang.String String_69686 = o_matchesAny_literalMutationChar100428__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_69686);
        java.lang.String String_69687 = String_67965;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_69687);
        java.lang.Boolean Boolean_69688 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_69689 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_69690 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_69685);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(2, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesAny_literalMutationChar100428__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_69684);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_69683);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_69687);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_67965);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_67969);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_69686);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationString100438 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationString100438_literalMutationChar101050 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationString100438_literalMutationChar101050_literalMutationChar102527() {
        char[] scan = new char[]{ ' ' , '\n' , ' ' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_70937 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_70938 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_70939 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_66066 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_66067 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_66068 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100438__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_66069 = o_matchesAny_literalMutationString100438__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationString100438__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesAny_literalMutationString100438__5);
        java.lang.String String_70940 = o_matchesAny_literalMutationString100438__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_70940);
        java.lang.String String_66070 = o_matchesAny_literalMutationString100438__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_66070);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100438__6 = r.matchesAny(scan);
        java.lang.Boolean Boolean_66071 = o_matchesAny_literalMutationString100438__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationString100438__7 = r.consume();
        java.lang.Character Character_66072 = ((char) (o_matchesAny_literalMutationString100438__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationString100438__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_66073 = o_matchesAny_literalMutationString100438__8;
        java.lang.Character Character_66074 = ((char) (o_matchesAny_literalMutationString100438__7));
        java.lang.Boolean Boolean_66075 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_66076 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_66077 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_66078 = o_matchesAny_literalMutationString100438__6;
        java.lang.Boolean Boolean_66079 = o_matchesAny_literalMutationString100438__4;
        java.lang.String String_66080 = o_matchesAny_literalMutationString100438__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_66080);
        java.lang.String String_70941 = String_66080;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_70941);
        java.lang.String String_70942 = o_matchesAny_literalMutationString100438__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_70942);
        java.lang.String String_70943 = String_66070;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_70943);
        java.lang.Boolean Boolean_70944 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_70945 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_70946 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_70942);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_70941);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_66070);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_70943);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_70940);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesAny_literalMutationString100438__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_66080);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_sd100445 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_sd100445_literalMutationChar101254 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_sd100445_literalMutationChar101254_sd108275() {
        char[] scan = new char[]{ ' ' , ' ' , '\t' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_70783 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_70784 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_70785 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_68700 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68701 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68702 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100445__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68703 = o_matchesAny_sd100445__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_sd100445__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", o_matchesAny_sd100445__5);
        java.lang.String String_70786 = o_matchesAny_sd100445__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_70786);
        java.lang.String String_68704 = o_matchesAny_sd100445__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_68704);
        java.lang.String String_70787 = String_68704;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_70787);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100445__6 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68705 = o_matchesAny_sd100445__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_sd100445__7 = r.consume();
        java.lang.Character Character_68706 = ((char) (o_matchesAny_sd100445__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100445__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68707 = o_matchesAny_sd100445__8;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_sd100445__9 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Three", o_matchesAny_sd100445__9);
        java.lang.String String_68708 = o_matchesAny_sd100445__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Three", String_68708);
        java.lang.String String_70788 = String_68708;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Three", String_70788);
        java.lang.Boolean Boolean_68709 = o_matchesAny_sd100445__4;
        java.lang.Character Character_68710 = ((char) (o_matchesAny_sd100445__7));
        java.lang.Boolean Boolean_68711 = o_matchesAny_sd100445__6;
        java.lang.String String_68712 = o_matchesAny_sd100445__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_68712);
        java.lang.String String_70789 = String_68712;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_70789);
        java.lang.Boolean Boolean_68713 = o_matchesAny_sd100445__8;
        java.lang.Boolean Boolean_68714 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68715 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68716 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_70790 = o_matchesAny_sd100445__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_70790);
        java.lang.Boolean Boolean_70791 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_70792 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_70793 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_70794 = String_68704;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_70794);
        java.lang.String String_70795 = String_68712;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_70795);
        java.lang.String String_70796 = String_68708;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Three", String_70796);
        java.lang.String String_70797 = o_matchesAny_sd100445__9;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Three", String_70797);
        // AssertGenerator create local variable with return value of invocation
        int o_matchesAny_sd100445_literalMutationChar101254_sd108275__55 = // StatementAdd: add invocation of a method
        r.pos();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(8, ((int) (o_matchesAny_sd100445_literalMutationChar101254_sd108275__55)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_70795);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_70794);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", o_matchesAny_sd100445__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_70787);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(8, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_70789);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_70790);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Three", String_70788);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_70786);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Three", String_68708);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Three", String_70797);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_68704);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_68712);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Three", o_matchesAny_sd100445__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Three", String_70796);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationChar100426 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationChar100426_literalMutationString100743 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationChar100426_literalMutationString100743_literalMutationString103355() {
        char[] scan = new char[]{ ' ' , ' ' , '\t' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<spa>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_69237 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_69238 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_69239 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_66447 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_66448 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_66449 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100426__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_66450 = o_matchesAny_literalMutationChar100426__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationChar100426__5 = r.consumeToAny(scan);
        java.lang.String String_69240 = o_matchesAny_literalMutationChar100426__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<spa>Hello", String_69240);
        java.lang.String String_66451 = o_matchesAny_literalMutationChar100426__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<spa>Hello", String_66451);
        java.lang.String String_69241 = String_66451;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<spa>Hello", String_69241);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100426__6 = r.matchesAny(scan);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationChar100426__7 = r.consume();
        java.lang.Character Character_66452 = ((char) (o_matchesAny_literalMutationChar100426__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100426__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_66453 = o_matchesAny_literalMutationChar100426__8;
        java.lang.Boolean Boolean_66454 = o_matchesAny_literalMutationChar100426__4;
        java.lang.Boolean Boolean_66455 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_66456 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_66457 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_66458 = o_matchesAny_literalMutationChar100426__6;
        java.lang.String String_66459 = o_matchesAny_literalMutationChar100426__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<spa>Hello", String_66459);
        java.lang.String String_69242 = String_66459;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<spa>Hello", String_69242);
        java.lang.Character Character_66460 = ((char) (o_matchesAny_literalMutationChar100426__7));
        java.lang.String String_69243 = String_66459;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<spa>Hello", String_69243);
        java.lang.String String_69244 = o_matchesAny_literalMutationChar100426__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<spa>Hello", String_69244);
        java.lang.Boolean Boolean_69245 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_69246 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_69247 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_69248 = String_66451;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<spa>Hello", String_69248);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<spa>Hello", String_69244);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<spa>Hello", String_66459);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(11, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<spa>Hello", String_69241);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<spa>Hello", String_69240);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<spa>Hello", String_69243);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<spa>Hello", String_69242);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<spa>Hello", String_66451);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("<spa>Hello", o_matchesAny_literalMutationChar100426__5);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_sd100448 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_sd100448_literalMutationChar101357 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_sd100448_literalMutationChar101357_literalMutationChar104406() {
        char[] scan = new char[]{ ' ' , '\t' , '\b' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_69566 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_69567 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_69568 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_66926 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_66927 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_66928 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100448__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_66929 = o_matchesAny_sd100448__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_sd100448__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", o_matchesAny_sd100448__5);
        java.lang.String String_69569 = o_matchesAny_sd100448__5;
        java.lang.String String_66930 = o_matchesAny_sd100448__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_66930);
        java.lang.String String_69570 = String_66930;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_69570);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100448__6 = r.matchesAny(scan);
        java.lang.Boolean Boolean_66931 = o_matchesAny_sd100448__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_sd100448__7 = r.consume();
        java.lang.Character Character_66932 = ((char) (o_matchesAny_sd100448__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100448__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_66933 = o_matchesAny_sd100448__8;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_sd100448__9 = // StatementAdd: add invocation of a method
        r.current();
        java.lang.Character Character_66934 = ((char) (o_matchesAny_sd100448__9));
        java.lang.String String_66935 = o_matchesAny_sd100448__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_66935);
        java.lang.String String_69571 = String_66935;
        java.lang.Boolean Boolean_66936 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_66937 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_66938 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_66939 = o_matchesAny_sd100448__4;
        java.lang.Boolean Boolean_66940 = o_matchesAny_sd100448__6;
        java.lang.Character Character_66941 = ((char) (o_matchesAny_sd100448__7));
        java.lang.Boolean Boolean_66942 = o_matchesAny_sd100448__8;
        java.lang.String String_69572 = o_matchesAny_sd100448__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_69572);
        java.lang.String String_69573 = String_66935;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_69573);
        java.lang.Boolean Boolean_69574 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_69575 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_69576 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_69577 = String_66930;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_69577);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_66930);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_69569);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_69571);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_69573);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", o_matchesAny_sd100448__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_69570);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_66935);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo", String_69572);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('T', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(8, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationChar100435 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationChar100435_literalMutationChar100975 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationChar100435_literalMutationChar100975_sd106407() {
        char[] __DSPOT_chars_5649 = new char[]{ 'c' , 'F' , '0' };
        char[] scan = new char[]{ '!' , '\n' , '\n' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_69802 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_69803 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_69804 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_67827 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_67828 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_67829 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100435__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_67830 = o_matchesAny_literalMutationChar100435__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationChar100435__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_literalMutationChar100435__5);
        java.lang.String String_69805 = o_matchesAny_literalMutationChar100435__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_69805);
        java.lang.String String_67831 = o_matchesAny_literalMutationChar100435__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_67831);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100435__6 = r.matchesAny(scan);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationChar100435__7 = r.consume();
        java.lang.Character Character_67832 = ((char) (o_matchesAny_literalMutationChar100435__7));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100435__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_67833 = o_matchesAny_literalMutationChar100435__8;
        java.lang.Boolean Boolean_67834 = o_matchesAny_literalMutationChar100435__6;
        java.lang.Boolean Boolean_67835 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_67836 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_67837 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_67838 = ((char) (o_matchesAny_literalMutationChar100435__7));
        java.lang.Boolean Boolean_67839 = o_matchesAny_literalMutationChar100435__4;
        java.lang.String String_67840 = o_matchesAny_literalMutationChar100435__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_67840);
        java.lang.String String_69806 = String_67840;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_69806);
        java.lang.Boolean Boolean_69807 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_69808 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_69809 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_69810 = o_matchesAny_literalMutationChar100435__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_69810);
        java.lang.String String_69811 = String_67831;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationChar100435_literalMutationChar100975_sd106407__44 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_5649);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Two\tThree", o_matchesAny_literalMutationChar100435_literalMutationChar100975_sd106407__44);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_69811);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_69806);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_67831);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", o_matchesAny_literalMutationChar100435__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_67840);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_69810);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One", String_69805);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_sd100445 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_sd100445_literalMutationChar101254 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_sd100445_literalMutationChar101254_literalMutationChar108260_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            char[] scan = new char[]{ ' ' , ' ' , '2' };
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tThree");
            java.lang.Boolean Boolean_71032 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_71033 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_71034 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.Boolean Boolean_68700 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_68701 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_68702 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesAny_sd100445__4 = r.matchesAny(scan);
            java.lang.Boolean Boolean_68703 = o_matchesAny_sd100445__4;
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_matchesAny_sd100445__5 = r.consumeToAny(scan);
            java.lang.String String_71035 = o_matchesAny_sd100445__5;
            java.lang.String String_68704 = o_matchesAny_sd100445__5;
            java.lang.String String_71036 = String_68704;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesAny_sd100445__6 = r.matchesAny(scan);
            java.lang.Boolean Boolean_68705 = o_matchesAny_sd100445__6;
            // AssertGenerator create local variable with return value of invocation
            char o_matchesAny_sd100445__7 = r.consume();
            java.lang.Character Character_68706 = ((char) (o_matchesAny_sd100445__7));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesAny_sd100445__8 = r.matchesAny(scan);
            java.lang.Boolean Boolean_68707 = o_matchesAny_sd100445__8;
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_matchesAny_sd100445__9 = // StatementAdd: add invocation of a method
            r.toString();
            java.lang.String String_68708 = o_matchesAny_sd100445__9;
            java.lang.String String_71037 = String_68708;
            java.lang.Boolean Boolean_68709 = o_matchesAny_sd100445__4;
            java.lang.Character Character_68710 = ((char) (o_matchesAny_sd100445__7));
            java.lang.Boolean Boolean_68711 = o_matchesAny_sd100445__6;
            java.lang.String String_68712 = o_matchesAny_sd100445__5;
            java.lang.String String_71038 = String_68712;
            java.lang.Boolean Boolean_68713 = o_matchesAny_sd100445__8;
            java.lang.Boolean Boolean_68714 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_68715 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_68716 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.String String_71039 = o_matchesAny_sd100445__5;
            java.lang.Boolean Boolean_71040 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_71041 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_71042 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.String String_71043 = String_68704;
            java.lang.String String_71044 = String_68712;
            java.lang.String String_71045 = String_68708;
            java.lang.String String_71046 = o_matchesAny_sd100445__9;
            org.junit.Assert.fail("matchesAny_sd100445_literalMutationChar101254_literalMutationChar108260 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_sd100446 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_sd100446_literalMutationChar101292 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_sd100446_literalMutationChar101292_literalMutationChar107386() {
        char[] scan = new char[]{ ' ' , '' , ' ' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_68998 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68999 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_69000 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_68290 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68291 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68292 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100446__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68293 = o_matchesAny_sd100446__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_sd100446__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo\tThree", o_matchesAny_sd100446__5);
        java.lang.String String_68294 = o_matchesAny_sd100446__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo\tThree", String_68294);
        java.lang.String String_69001 = String_68294;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo\tThree", String_69001);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100446__6 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68295 = o_matchesAny_sd100446__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_sd100446__7 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_sd100446__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68296 = o_matchesAny_sd100446__8;
        // StatementAdd: add invocation of a method
        r.isEmpty();
        java.lang.Boolean Boolean_68297 = o_matchesAny_sd100446__8;
        java.lang.Character Character_68298 = ((char) (o_matchesAny_sd100446__7));
        java.lang.String String_68299 = o_matchesAny_sd100446__5;
        java.lang.String String_69002 = String_68299;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo\tThree", String_69002);
        java.lang.Boolean Boolean_68300 = o_matchesAny_sd100446__6;
        java.lang.Boolean Boolean_68301 = o_matchesAny_sd100446__4;
        java.lang.Boolean Boolean_68302 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68303 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68304 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_69003 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_69004 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_69005 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_69006 = o_matchesAny_sd100446__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo\tThree", String_69006);
        java.lang.String String_69007 = String_68294;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo\tThree", String_69007);
        java.lang.String String_69008 = String_68299;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo\tThree", String_69008);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo\tThree", String_68299);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo\tThree", String_68294);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo\tThree", String_69007);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo\tThree", String_69001);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo\tThree", String_69002);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo\tThree", String_69006);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\nTwo\tThree", o_matchesAny_sd100446__5);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationChar100434 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesAny_literalMutationChar100434_sd100968 */
    @org.junit.Test(timeout = 10000)
    public void matchesAny_literalMutationChar100434_sd100968_literalMutationChar107933() {
        char __DSPOT_c_5352 = 'e';
        char[] scan = new char[]{ ' ' , '\t' , 'T' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One\nTwo\tThree");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_70599 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_70600 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_70601 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_68552 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68553 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68554 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100434__4 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68555 = o_matchesAny_literalMutationChar100434__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationChar100434__5 = r.consumeToAny(scan);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\n", o_matchesAny_literalMutationChar100434__5);
        java.lang.String String_70602 = o_matchesAny_literalMutationChar100434__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\n", String_70602);
        java.lang.String String_68556 = o_matchesAny_literalMutationChar100434__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\n", String_68556);
        java.lang.String String_70603 = String_68556;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\n", String_70603);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100434__6 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68557 = o_matchesAny_literalMutationChar100434__6;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesAny_literalMutationChar100434__7 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesAny_literalMutationChar100434__8 = r.matchesAny(scan);
        java.lang.Boolean Boolean_68558 = o_matchesAny_literalMutationChar100434__8;
        java.lang.Character Character_68559 = ((char) (o_matchesAny_literalMutationChar100434__7));
        java.lang.Boolean Boolean_68560 = o_matchesAny_literalMutationChar100434__6;
        java.lang.String String_68561 = o_matchesAny_literalMutationChar100434__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\n", String_68561);
        java.lang.Boolean Boolean_68562 = o_matchesAny_literalMutationChar100434__4;
        java.lang.Boolean Boolean_68563 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_68564 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_68565 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesAny_literalMutationChar100434_sd100968__34 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_5352);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo\tThr", o_matchesAny_literalMutationChar100434_sd100968__34);
        java.lang.String String_70604 = o_matchesAny_literalMutationChar100434_sd100968__34;
        java.lang.String String_70605 = String_68556;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\n", String_70605);
        java.lang.String String_70606 = String_68561;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\n", String_70606);
        java.lang.String String_70607 = o_matchesAny_literalMutationChar100434__5;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\n", String_70607);
        java.lang.Boolean Boolean_70608 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_70609 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_70610 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\n", String_70606);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\n", String_70602);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\n", String_70603);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\n", String_70607);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\n", String_70605);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo\tThr", o_matchesAny_literalMutationChar100434_sd100968__34);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(11, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\n", String_68556);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\n", o_matchesAny_literalMutationChar100434__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("wo\tThr", String_70604);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("One\n", String_68561);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109165_failAssert0() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            r.matchesIgnoreCase("O");
            r.matchesIgnoreCase("o");
            r.matches('O');
            r.matches('o');
            r.matchesIgnoreCase("One Two Three");
            r.matchesIgnoreCase("ONE two THREE");
            r.matchesIgnoreCase("One");
            r.matchesIgnoreCase("one");
            r.consume();
            r.matchesIgnoreCase("One");
            r.matchesIgnoreCase("NE Two Three");
            r.matchesIgnoreCase("ne Two Three Four");
            r.consumeToEnd();
            r.matchesIgnoreCase("ne");
            org.junit.Assert.fail("matchesIgnoreCase_literalMutationString109165 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_sd109237() {
        char __DSPOT_c_5784 = '!';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__4 = r.matchesIgnoreCase("O");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109237__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__5 = r.matchesIgnoreCase("o");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109237__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__6 = r.matches('O');
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109237__6);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__7 = r.matches('o');
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109237__7);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__8 = r.matchesIgnoreCase("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109237__8);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__9 = r.matchesIgnoreCase("ONE two THREE");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109237__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__10 = r.matchesIgnoreCase("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109237__10);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__11 = r.matchesIgnoreCase("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109237__11);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_sd109237__12 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matchesIgnoreCase_sd109237__12)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__13 = r.matchesIgnoreCase("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109237__13);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__14 = r.matchesIgnoreCase("NE Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109237__14);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__15 = r.matchesIgnoreCase("ne Two Three Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109237__15);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_sd109237__16 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_sd109237__16);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__17 = r.matchesIgnoreCase("ne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109237__17);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_sd109237__18 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_5784);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesIgnoreCase_sd109237__18);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109237__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_sd109237__16);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109237__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109237__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109237__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109237__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109237__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matchesIgnoreCase_sd109237__12)));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109237__17);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109237__15);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109237__14);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109237__13);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109237__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109237__10);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_sd109240() {
        char[] __DSPOT_chars_5785 = new char[]{ 'X' , 'C' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109240__4 = r.matchesIgnoreCase("O");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109240__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109240__5 = r.matchesIgnoreCase("o");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109240__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109240__6 = r.matches('O');
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109240__6);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109240__7 = r.matches('o');
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109240__7);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109240__8 = r.matchesIgnoreCase("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109240__8);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109240__9 = r.matchesIgnoreCase("ONE two THREE");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109240__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109240__10 = r.matchesIgnoreCase("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109240__10);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109240__11 = r.matchesIgnoreCase("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109240__11);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_sd109240__12 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matchesIgnoreCase_sd109240__12)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109240__13 = r.matchesIgnoreCase("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109240__13);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109240__14 = r.matchesIgnoreCase("NE Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109240__14);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109240__15 = r.matchesIgnoreCase("ne Two Three Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109240__15);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_sd109240__16 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_sd109240__16);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109240__17 = r.matchesIgnoreCase("ne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109240__17);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_sd109240__18 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_5785);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesIgnoreCase_sd109240__18);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_sd109240__16);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109240__15);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109240__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109240__17);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109240__14);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109240__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matchesIgnoreCase_sd109240__12)));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109240__13);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109240__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109240__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109240__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109240__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109240__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109240__6);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109166() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109166__3 = r.matchesIgnoreCase("O");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109166__4 = r.matchesIgnoreCase("o");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109166__5 = r.matches('O');
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109166__6 = r.matches('o');
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__6);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109166__7 = r.matchesIgnoreCase("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__7);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109166__8 = r.matchesIgnoreCase("ONE two THREE");
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109166__9 = r.matchesIgnoreCase("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109166__10 = r.matchesIgnoreCase("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__10);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_literalMutationString109166__11 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109166__12 = r.matchesIgnoreCase("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__12);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109166__13 = r.matchesIgnoreCase("NE Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__13);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109166__14 = r.matchesIgnoreCase("ne Two Three Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__14);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_literalMutationString109166__15 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", o_matchesIgnoreCase_literalMutationString109166__15);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109166__16 = r.matchesIgnoreCase("ne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__16);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__12);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", o_matchesIgnoreCase_literalMutationString109166__15);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (o_matchesIgnoreCase_literalMutationString109166__11)));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__14);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109166__13);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_sd109235() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__3 = r.matchesIgnoreCase("O");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109235__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__4 = r.matchesIgnoreCase("o");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109235__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__5 = r.matches('O');
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109235__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__6 = r.matches('o');
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109235__6);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__7 = r.matchesIgnoreCase("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109235__7);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__8 = r.matchesIgnoreCase("ONE two THREE");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109235__8);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__9 = r.matchesIgnoreCase("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109235__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__10 = r.matchesIgnoreCase("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109235__10);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_sd109235__11 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matchesIgnoreCase_sd109235__11)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__12 = r.matchesIgnoreCase("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109235__12);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__13 = r.matchesIgnoreCase("NE Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109235__13);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__14 = r.matchesIgnoreCase("ne Two Three Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109235__14);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_sd109235__15 = r.consumeToEnd();
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__16 = r.matchesIgnoreCase("ne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109235__16);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_sd109235__17 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesIgnoreCase_sd109235__17);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109235__14);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109235__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109235__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109235__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109235__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109235__13);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109235__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matchesIgnoreCase_sd109235__11)));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109235__16);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109235__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109235__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109235__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_sd109235__15);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109235__12);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_sd109234() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109234__3 = r.matchesIgnoreCase("O");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109234__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109234__4 = r.matchesIgnoreCase("o");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109234__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109234__5 = r.matches('O');
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109234__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109234__6 = r.matches('o');
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109234__6);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109234__7 = r.matchesIgnoreCase("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109234__7);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109234__8 = r.matchesIgnoreCase("ONE two THREE");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109234__8);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109234__9 = r.matchesIgnoreCase("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109234__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109234__10 = r.matchesIgnoreCase("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109234__10);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_sd109234__11 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matchesIgnoreCase_sd109234__11)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109234__12 = r.matchesIgnoreCase("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109234__12);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109234__13 = r.matchesIgnoreCase("NE Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109234__13);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109234__14 = r.matchesIgnoreCase("ne Two Three Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109234__14);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_sd109234__15 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_sd109234__15);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109234__16 = r.matchesIgnoreCase("ne");
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109234__14);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109234__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109234__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109234__12);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109234__13);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_sd109234__16);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matchesIgnoreCase_sd109234__11)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109234__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109234__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_sd109234__15);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109234__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109234__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109234__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_sd109234__8);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109174() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__3 = r.matchesIgnoreCase("O");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_literalMutationString109174__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__4 = r.matchesIgnoreCase("");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_literalMutationString109174__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__5 = r.matches('O');
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__6 = r.matches('o');
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109174__6);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__7 = r.matchesIgnoreCase("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_literalMutationString109174__7);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__8 = r.matchesIgnoreCase("ONE two THREE");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_literalMutationString109174__8);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__9 = r.matchesIgnoreCase("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_literalMutationString109174__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__10 = r.matchesIgnoreCase("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_literalMutationString109174__10);
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_literalMutationString109174__11 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matchesIgnoreCase_literalMutationString109174__11)));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__12 = r.matchesIgnoreCase("One");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109174__12);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__13 = r.matchesIgnoreCase("NE Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_literalMutationString109174__13);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__14 = r.matchesIgnoreCase("ne Two Three Four");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109174__14);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_literalMutationString109174__15 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_literalMutationString109174__15);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__16 = r.matchesIgnoreCase("ne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109174__16);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_literalMutationString109174__13);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_literalMutationString109174__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_literalMutationString109174__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_literalMutationString109174__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_literalMutationString109174__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109174__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_literalMutationString109174__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109174__14);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_literalMutationString109174__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (o_matchesIgnoreCase_literalMutationString109174__11)));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109174__12);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_matchesIgnoreCase_literalMutationString109174__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_literalMutationString109174__15);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109201 */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109201_literalMutationString112128_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            java.lang.Boolean Boolean_76658 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_76659 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_76660 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109201__3 = r.matchesIgnoreCase("O");
            java.lang.Boolean Boolean_76661 = o_matchesIgnoreCase_literalMutationString109201__3;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109201__4 = r.matchesIgnoreCase("o");
            java.lang.Boolean Boolean_76662 = o_matchesIgnoreCase_literalMutationString109201__4;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109201__5 = r.matches('O');
            java.lang.Boolean Boolean_76663 = o_matchesIgnoreCase_literalMutationString109201__5;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109201__6 = r.matches('o');
            java.lang.Boolean Boolean_76664 = o_matchesIgnoreCase_literalMutationString109201__6;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109201__7 = r.matchesIgnoreCase("One Two Three");
            java.lang.Boolean Boolean_76665 = o_matchesIgnoreCase_literalMutationString109201__7;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109201__8 = r.matchesIgnoreCase("ONE two THREE");
            java.lang.Boolean Boolean_76666 = o_matchesIgnoreCase_literalMutationString109201__8;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109201__9 = r.matchesIgnoreCase("");
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109201__10 = r.matchesIgnoreCase("one");
            java.lang.Boolean Boolean_76667 = o_matchesIgnoreCase_literalMutationString109201__10;
            // AssertGenerator create local variable with return value of invocation
            char o_matchesIgnoreCase_literalMutationString109201__11 = r.consume();
            java.lang.Character Character_76668 = ((char) (o_matchesIgnoreCase_literalMutationString109201__11));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109201__12 = r.matchesIgnoreCase("One");
            java.lang.Boolean Boolean_76669 = o_matchesIgnoreCase_literalMutationString109201__12;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109201__13 = r.matchesIgnoreCase("NE Two Three");
            java.lang.Boolean Boolean_76670 = o_matchesIgnoreCase_literalMutationString109201__13;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109201__14 = r.matchesIgnoreCase("ne Two Three Four");
            java.lang.Boolean Boolean_76671 = o_matchesIgnoreCase_literalMutationString109201__14;
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_matchesIgnoreCase_literalMutationString109201__15 = r.consumeToEnd();
            java.lang.String String_76672 = o_matchesIgnoreCase_literalMutationString109201__15;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109201__16 = r.matchesIgnoreCase("ne");
            java.lang.Boolean Boolean_76673 = o_matchesIgnoreCase_literalMutationString109201__16;
            java.lang.Boolean Boolean_76674 = o_matchesIgnoreCase_literalMutationString109201__4;
            java.lang.Boolean Boolean_76675 = o_matchesIgnoreCase_literalMutationString109201__13;
            java.lang.Boolean Boolean_76676 = o_matchesIgnoreCase_literalMutationString109201__9;
            java.lang.Boolean Boolean_76677 = o_matchesIgnoreCase_literalMutationString109201__3;
            java.lang.Boolean Boolean_76678 = o_matchesIgnoreCase_literalMutationString109201__8;
            java.lang.Boolean Boolean_76679 = o_matchesIgnoreCase_literalMutationString109201__5;
            java.lang.Boolean Boolean_76680 = o_matchesIgnoreCase_literalMutationString109201__6;
            java.lang.String String_76681 = o_matchesIgnoreCase_literalMutationString109201__15;
            java.lang.Boolean Boolean_76682 = o_matchesIgnoreCase_literalMutationString109201__10;
            java.lang.Boolean Boolean_76683 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_76684 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_76685 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.Boolean Boolean_76686 = o_matchesIgnoreCase_literalMutationString109201__7;
            java.lang.Boolean Boolean_76687 = o_matchesIgnoreCase_literalMutationString109201__14;
            java.lang.Boolean Boolean_76688 = o_matchesIgnoreCase_literalMutationString109201__12;
            java.lang.Character Character_76689 = ((char) (o_matchesIgnoreCase_literalMutationString109201__11));
            org.junit.Assert.fail("matchesIgnoreCase_literalMutationString109201_literalMutationString112128 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109202 */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109202_sd112276() {
        char[] __DSPOT_chars_5859 = new char[]{ 'R' , 'N' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_72235 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_72236 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_72237 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__3 = r.matchesIgnoreCase("O");
        java.lang.Boolean Boolean_72238 = o_matchesIgnoreCase_literalMutationString109202__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__4 = r.matchesIgnoreCase("o");
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__5 = r.matches('O');
        java.lang.Boolean Boolean_72239 = o_matchesIgnoreCase_literalMutationString109202__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__6 = r.matches('o');
        java.lang.Boolean Boolean_72240 = o_matchesIgnoreCase_literalMutationString109202__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__7 = r.matchesIgnoreCase("One Two Three");
        java.lang.Boolean Boolean_72241 = o_matchesIgnoreCase_literalMutationString109202__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__8 = r.matchesIgnoreCase("ONE two THREE");
        java.lang.Boolean Boolean_72242 = o_matchesIgnoreCase_literalMutationString109202__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__9 = r.matchesIgnoreCase("<span>Hello <div>there</div> <span>now</span></span>");
        java.lang.Boolean Boolean_72243 = o_matchesIgnoreCase_literalMutationString109202__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__10 = r.matchesIgnoreCase("one");
        java.lang.Boolean Boolean_72244 = o_matchesIgnoreCase_literalMutationString109202__10;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_literalMutationString109202__11 = r.consume();
        java.lang.Character Character_72245 = ((char) (o_matchesIgnoreCase_literalMutationString109202__11));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__12 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_72246 = o_matchesIgnoreCase_literalMutationString109202__12;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__13 = r.matchesIgnoreCase("NE Two Three");
        java.lang.Boolean Boolean_72247 = o_matchesIgnoreCase_literalMutationString109202__13;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__14 = r.matchesIgnoreCase("ne Two Three Four");
        java.lang.Boolean Boolean_72248 = o_matchesIgnoreCase_literalMutationString109202__14;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_literalMutationString109202__15 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_literalMutationString109202__15);
        java.lang.String String_72249 = o_matchesIgnoreCase_literalMutationString109202__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_72249);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__16 = r.matchesIgnoreCase("ne");
        java.lang.Boolean Boolean_72250 = o_matchesIgnoreCase_literalMutationString109202__16;
        java.lang.Boolean Boolean_72251 = o_matchesIgnoreCase_literalMutationString109202__7;
        java.lang.Boolean Boolean_72252 = o_matchesIgnoreCase_literalMutationString109202__5;
        java.lang.Boolean Boolean_72253 = o_matchesIgnoreCase_literalMutationString109202__14;
        java.lang.Boolean Boolean_72254 = o_matchesIgnoreCase_literalMutationString109202__13;
        java.lang.String String_72255 = o_matchesIgnoreCase_literalMutationString109202__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_72255);
        java.lang.Boolean Boolean_72256 = o_matchesIgnoreCase_literalMutationString109202__12;
        java.lang.Character Character_72257 = ((char) (o_matchesIgnoreCase_literalMutationString109202__11));
        java.lang.Boolean Boolean_72258 = o_matchesIgnoreCase_literalMutationString109202__10;
        java.lang.Boolean Boolean_72259 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_72260 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_72261 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_72262 = o_matchesIgnoreCase_literalMutationString109202__3;
        java.lang.Boolean Boolean_72263 = o_matchesIgnoreCase_literalMutationString109202__8;
        java.lang.Boolean Boolean_72264 = o_matchesIgnoreCase_literalMutationString109202__6;
        java.lang.Boolean Boolean_72265 = o_matchesIgnoreCase_literalMutationString109202__9;
        java.lang.Boolean Boolean_72266 = o_matchesIgnoreCase_literalMutationString109202__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_literalMutationString109202_sd112276__78 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_5859);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesIgnoreCase_literalMutationString109202_sd112276__78);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_72249);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_literalMutationString109202__15);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_72255);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109165 */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__5 = r.matchesIgnoreCase("O");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__5);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__6 = r.matchesIgnoreCase("o");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__6);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__7 = r.matches('O');
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__7);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__8 = r.matches('o');
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__8);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__9 = r.matchesIgnoreCase("One Two Three");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__9);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__10 = r.matchesIgnoreCase("ONE two THREE");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__10);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__11 = r.matchesIgnoreCase("");
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__11);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__12 = r.matchesIgnoreCase("one");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__12);
            // AssertGenerator create local variable with return value of invocation
            char o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__13 = r.consume();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals('\uffff', ((char) (o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__13)));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__14 = r.matchesIgnoreCase("One");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__14);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__15 = r.matchesIgnoreCase("NE Two Three");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__15);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__16 = r.matchesIgnoreCase("ne Two Three Four");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__16);
            r.consumeToEnd();
            r.matchesIgnoreCase("ne");
            org.junit.Assert.fail("matchesIgnoreCase_literalMutationString109165 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109211 */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109211_literalMutationString112912() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_74083 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_74084 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_74085 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109211__3 = r.matchesIgnoreCase("O");
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109211__4 = r.matchesIgnoreCase("o");
        java.lang.Boolean Boolean_74086 = o_matchesIgnoreCase_literalMutationString109211__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109211__5 = r.matches('O');
        java.lang.Boolean Boolean_74087 = o_matchesIgnoreCase_literalMutationString109211__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109211__6 = r.matches('o');
        java.lang.Boolean Boolean_74088 = o_matchesIgnoreCase_literalMutationString109211__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109211__7 = r.matchesIgnoreCase("One Two Three");
        java.lang.Boolean Boolean_74089 = o_matchesIgnoreCase_literalMutationString109211__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109211__8 = r.matchesIgnoreCase("ONE two THREE");
        java.lang.Boolean Boolean_74090 = o_matchesIgnoreCase_literalMutationString109211__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109211__9 = r.matchesIgnoreCase("");
        java.lang.Boolean Boolean_74091 = o_matchesIgnoreCase_literalMutationString109211__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109211__10 = r.matchesIgnoreCase("oPne");
        java.lang.Boolean Boolean_74092 = o_matchesIgnoreCase_literalMutationString109211__10;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_literalMutationString109211__11 = r.consume();
        java.lang.Character Character_74093 = ((char) (o_matchesIgnoreCase_literalMutationString109211__11));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109211__12 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_74094 = o_matchesIgnoreCase_literalMutationString109211__12;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109211__13 = r.matchesIgnoreCase("NE Two Three");
        java.lang.Boolean Boolean_74095 = o_matchesIgnoreCase_literalMutationString109211__13;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109211__14 = r.matchesIgnoreCase("ne Two Three Four");
        java.lang.Boolean Boolean_74096 = o_matchesIgnoreCase_literalMutationString109211__14;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_literalMutationString109211__15 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_literalMutationString109211__15);
        java.lang.String String_74097 = o_matchesIgnoreCase_literalMutationString109211__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_74097);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109211__16 = r.matchesIgnoreCase("ne");
        java.lang.Boolean Boolean_74098 = o_matchesIgnoreCase_literalMutationString109211__16;
        java.lang.Boolean Boolean_74099 = o_matchesIgnoreCase_literalMutationString109211__7;
        java.lang.Character Character_74100 = ((char) (o_matchesIgnoreCase_literalMutationString109211__11));
        java.lang.Boolean Boolean_74101 = o_matchesIgnoreCase_literalMutationString109211__4;
        java.lang.Boolean Boolean_74102 = o_matchesIgnoreCase_literalMutationString109211__5;
        java.lang.Boolean Boolean_74103 = o_matchesIgnoreCase_literalMutationString109211__9;
        java.lang.Boolean Boolean_74104 = o_matchesIgnoreCase_literalMutationString109211__8;
        java.lang.Boolean Boolean_74105 = o_matchesIgnoreCase_literalMutationString109211__12;
        java.lang.Boolean Boolean_74106 = o_matchesIgnoreCase_literalMutationString109211__6;
        java.lang.Boolean Boolean_74107 = o_matchesIgnoreCase_literalMutationString109211__10;
        java.lang.Boolean Boolean_74108 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_74109 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_74110 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_74111 = o_matchesIgnoreCase_literalMutationString109211__3;
        java.lang.Boolean Boolean_74112 = o_matchesIgnoreCase_literalMutationString109211__14;
        java.lang.Boolean Boolean_74113 = o_matchesIgnoreCase_literalMutationString109211__13;
        java.lang.String String_74114 = o_matchesIgnoreCase_literalMutationString109211__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_74114);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_74097);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_literalMutationString109211__15);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_sd109235 */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_sd109235_literalMutationString114698() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_75623 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_75624 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_75625 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__3 = r.matchesIgnoreCase("<span>Hello <div>there</div> <span>now</span></span>");
        java.lang.Boolean Boolean_75626 = o_matchesIgnoreCase_sd109235__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__4 = r.matchesIgnoreCase("o");
        java.lang.Boolean Boolean_75627 = o_matchesIgnoreCase_sd109235__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__5 = r.matches('O');
        java.lang.Boolean Boolean_75628 = o_matchesIgnoreCase_sd109235__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__6 = r.matches('o');
        java.lang.Boolean Boolean_75629 = o_matchesIgnoreCase_sd109235__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__7 = r.matchesIgnoreCase("One Two Three");
        java.lang.Boolean Boolean_75630 = o_matchesIgnoreCase_sd109235__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__8 = r.matchesIgnoreCase("ONE two THREE");
        java.lang.Boolean Boolean_75631 = o_matchesIgnoreCase_sd109235__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__9 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_75632 = o_matchesIgnoreCase_sd109235__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__10 = r.matchesIgnoreCase("one");
        java.lang.Boolean Boolean_75633 = o_matchesIgnoreCase_sd109235__10;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_sd109235__11 = r.consume();
        java.lang.Character Character_75634 = ((char) (o_matchesIgnoreCase_sd109235__11));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__12 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_75635 = o_matchesIgnoreCase_sd109235__12;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__13 = r.matchesIgnoreCase("NE Two Three");
        java.lang.Boolean Boolean_75636 = o_matchesIgnoreCase_sd109235__13;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__14 = r.matchesIgnoreCase("ne Two Three Four");
        java.lang.Boolean Boolean_75637 = o_matchesIgnoreCase_sd109235__14;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_sd109235__15 = r.consumeToEnd();
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109235__16 = r.matchesIgnoreCase("ne");
        java.lang.Boolean Boolean_75638 = o_matchesIgnoreCase_sd109235__16;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_sd109235__17 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesIgnoreCase_sd109235__17);
        java.lang.String String_75639 = o_matchesIgnoreCase_sd109235__17;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_75639);
        java.lang.Boolean Boolean_75640 = o_matchesIgnoreCase_sd109235__14;
        java.lang.Boolean Boolean_75641 = o_matchesIgnoreCase_sd109235__6;
        java.lang.Boolean Boolean_75642 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_75643 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_75644 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_75645 = o_matchesIgnoreCase_sd109235__4;
        java.lang.Boolean Boolean_75646 = o_matchesIgnoreCase_sd109235__9;
        java.lang.Boolean Boolean_75647 = o_matchesIgnoreCase_sd109235__5;
        java.lang.Boolean Boolean_75648 = o_matchesIgnoreCase_sd109235__13;
        java.lang.Boolean Boolean_75649 = o_matchesIgnoreCase_sd109235__8;
        java.lang.Character Character_75650 = ((char) (o_matchesIgnoreCase_sd109235__11));
        java.lang.Boolean Boolean_75651 = o_matchesIgnoreCase_sd109235__16;
        java.lang.Boolean Boolean_75652 = o_matchesIgnoreCase_sd109235__7;
        java.lang.Boolean Boolean_75653 = o_matchesIgnoreCase_sd109235__3;
        java.lang.Boolean Boolean_75654 = o_matchesIgnoreCase_sd109235__10;
        java.lang.String String_75655 = o_matchesIgnoreCase_sd109235__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_75655);
        java.lang.Boolean Boolean_75656 = o_matchesIgnoreCase_sd109235__12;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_75639);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_75655);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_sd109235__15);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesIgnoreCase_sd109235__17);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109165 */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__5 = r.matchesIgnoreCase("O");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__5);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__6 = r.matchesIgnoreCase("o");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__6);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__7 = r.matches('O');
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__7);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__8 = r.matches('o');
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__8);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__9 = r.matchesIgnoreCase("One Two Three");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__9);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__10 = r.matchesIgnoreCase("ONE two THREE");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__10);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__11 = r.matchesIgnoreCase("One");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__11);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__12 = r.matchesIgnoreCase("one");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__12);
            // AssertGenerator create local variable with return value of invocation
            char o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__13 = r.consume();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals('\uffff', ((char) (o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__13)));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__14 = r.matchesIgnoreCase("One");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__14);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__15 = r.matchesIgnoreCase("N Two Three");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__15);
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__16 = r.matchesIgnoreCase("ne Two Three Four");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115218__16);
            r.consumeToEnd();
            r.matchesIgnoreCase("ne");
            org.junit.Assert.fail("matchesIgnoreCase_literalMutationString109165 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109204 */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109204_sd112419() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_76105 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_76106 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_76107 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__3 = r.matchesIgnoreCase("O");
        java.lang.Boolean Boolean_76108 = o_matchesIgnoreCase_literalMutationString109204__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__4 = r.matchesIgnoreCase("o");
        java.lang.Boolean Boolean_76109 = o_matchesIgnoreCase_literalMutationString109204__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__5 = r.matches('O');
        java.lang.Boolean Boolean_76110 = o_matchesIgnoreCase_literalMutationString109204__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__6 = r.matches('o');
        java.lang.Boolean Boolean_76111 = o_matchesIgnoreCase_literalMutationString109204__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__7 = r.matchesIgnoreCase("One Two Three");
        java.lang.Boolean Boolean_76112 = o_matchesIgnoreCase_literalMutationString109204__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__8 = r.matchesIgnoreCase("ONE two THREE");
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__9 = r.matchesIgnoreCase("A4}");
        java.lang.Boolean Boolean_76113 = o_matchesIgnoreCase_literalMutationString109204__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__10 = r.matchesIgnoreCase("one");
        java.lang.Boolean Boolean_76114 = o_matchesIgnoreCase_literalMutationString109204__10;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_literalMutationString109204__11 = r.consume();
        java.lang.Character Character_76115 = ((char) (o_matchesIgnoreCase_literalMutationString109204__11));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__12 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_76116 = o_matchesIgnoreCase_literalMutationString109204__12;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__13 = r.matchesIgnoreCase("NE Two Three");
        java.lang.Boolean Boolean_76117 = o_matchesIgnoreCase_literalMutationString109204__13;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__14 = r.matchesIgnoreCase("ne Two Three Four");
        java.lang.Boolean Boolean_76118 = o_matchesIgnoreCase_literalMutationString109204__14;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_literalMutationString109204__15 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_literalMutationString109204__15);
        java.lang.String String_76119 = o_matchesIgnoreCase_literalMutationString109204__15;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__16 = r.matchesIgnoreCase("ne");
        java.lang.Boolean Boolean_76120 = o_matchesIgnoreCase_literalMutationString109204__16;
        java.lang.Boolean Boolean_76121 = o_matchesIgnoreCase_literalMutationString109204__3;
        java.lang.Boolean Boolean_76122 = o_matchesIgnoreCase_literalMutationString109204__8;
        java.lang.Boolean Boolean_76123 = o_matchesIgnoreCase_literalMutationString109204__10;
        java.lang.String String_76124 = o_matchesIgnoreCase_literalMutationString109204__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_76124);
        java.lang.Boolean Boolean_76125 = o_matchesIgnoreCase_literalMutationString109204__14;
        java.lang.Character Character_76126 = ((char) (o_matchesIgnoreCase_literalMutationString109204__11));
        java.lang.Boolean Boolean_76127 = o_matchesIgnoreCase_literalMutationString109204__12;
        java.lang.Boolean Boolean_76128 = o_matchesIgnoreCase_literalMutationString109204__13;
        java.lang.Boolean Boolean_76129 = o_matchesIgnoreCase_literalMutationString109204__7;
        java.lang.Boolean Boolean_76130 = o_matchesIgnoreCase_literalMutationString109204__4;
        java.lang.Boolean Boolean_76131 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_76132 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_76133 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_76134 = o_matchesIgnoreCase_literalMutationString109204__5;
        java.lang.Boolean Boolean_76135 = o_matchesIgnoreCase_literalMutationString109204__6;
        java.lang.Boolean Boolean_76136 = o_matchesIgnoreCase_literalMutationString109204__9;
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_76119);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_literalMutationString109204__15);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_76124);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109209 */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109209_literalMutationString112729() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_72365 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_72366 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_72367 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109209__3 = r.matchesIgnoreCase("O");
        java.lang.Boolean Boolean_72368 = o_matchesIgnoreCase_literalMutationString109209__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109209__4 = r.matchesIgnoreCase("o");
        java.lang.Boolean Boolean_72369 = o_matchesIgnoreCase_literalMutationString109209__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109209__5 = r.matches('O');
        java.lang.Boolean Boolean_72370 = o_matchesIgnoreCase_literalMutationString109209__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109209__6 = r.matches('o');
        java.lang.Boolean Boolean_72371 = o_matchesIgnoreCase_literalMutationString109209__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109209__7 = r.matchesIgnoreCase("One Two Three");
        java.lang.Boolean Boolean_72372 = o_matchesIgnoreCase_literalMutationString109209__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109209__8 = r.matchesIgnoreCase("ONE two THREE");
        java.lang.Boolean Boolean_72373 = o_matchesIgnoreCase_literalMutationString109209__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109209__9 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_72374 = o_matchesIgnoreCase_literalMutationString109209__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109209__10 = r.matchesIgnoreCase(">ne");
        java.lang.Boolean Boolean_72375 = o_matchesIgnoreCase_literalMutationString109209__10;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_literalMutationString109209__11 = r.consume();
        java.lang.Character Character_72376 = ((char) (o_matchesIgnoreCase_literalMutationString109209__11));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109209__12 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_72377 = o_matchesIgnoreCase_literalMutationString109209__12;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109209__13 = r.matchesIgnoreCase("NE Two Three");
        java.lang.Boolean Boolean_72378 = o_matchesIgnoreCase_literalMutationString109209__13;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109209__14 = r.matchesIgnoreCase("ne Two Three Four");
        java.lang.Boolean Boolean_72379 = o_matchesIgnoreCase_literalMutationString109209__14;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_literalMutationString109209__15 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", o_matchesIgnoreCase_literalMutationString109209__15);
        java.lang.String String_72380 = o_matchesIgnoreCase_literalMutationString109209__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_72380);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109209__16 = r.matchesIgnoreCase("ne");
        java.lang.Boolean Boolean_72381 = o_matchesIgnoreCase_literalMutationString109209__16;
        java.lang.Boolean Boolean_72382 = o_matchesIgnoreCase_literalMutationString109209__3;
        java.lang.Boolean Boolean_72383 = o_matchesIgnoreCase_literalMutationString109209__8;
        java.lang.Boolean Boolean_72384 = o_matchesIgnoreCase_literalMutationString109209__13;
        java.lang.Character Character_72385 = ((char) (o_matchesIgnoreCase_literalMutationString109209__11));
        java.lang.Boolean Boolean_72386 = o_matchesIgnoreCase_literalMutationString109209__5;
        java.lang.Boolean Boolean_72387 = o_matchesIgnoreCase_literalMutationString109209__4;
        java.lang.Boolean Boolean_72388 = o_matchesIgnoreCase_literalMutationString109209__9;
        java.lang.Boolean Boolean_72389 = o_matchesIgnoreCase_literalMutationString109209__7;
        java.lang.Boolean Boolean_72390 = o_matchesIgnoreCase_literalMutationString109209__6;
        java.lang.Boolean Boolean_72391 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_72392 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_72393 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_72394 = o_matchesIgnoreCase_literalMutationString109209__12;
        java.lang.Boolean Boolean_72395 = o_matchesIgnoreCase_literalMutationString109209__14;
        java.lang.String String_72396 = o_matchesIgnoreCase_literalMutationString109209__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_72396);
        java.lang.Boolean Boolean_72397 = o_matchesIgnoreCase_literalMutationString109209__10;
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_72380);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_72396);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", o_matchesIgnoreCase_literalMutationString109209__15);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109200 */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109200_literalMutationChar112066() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_72300 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_72301 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_72302 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109200__3 = r.matchesIgnoreCase("O");
        java.lang.Boolean Boolean_72303 = o_matchesIgnoreCase_literalMutationString109200__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109200__4 = r.matchesIgnoreCase("o");
        java.lang.Boolean Boolean_72304 = o_matchesIgnoreCase_literalMutationString109200__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109200__5 = r.matches('(');
        java.lang.Boolean Boolean_72305 = o_matchesIgnoreCase_literalMutationString109200__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109200__6 = r.matches('o');
        java.lang.Boolean Boolean_72306 = o_matchesIgnoreCase_literalMutationString109200__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109200__7 = r.matchesIgnoreCase("One Two Three");
        java.lang.Boolean Boolean_72307 = o_matchesIgnoreCase_literalMutationString109200__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109200__8 = r.matchesIgnoreCase("3BX0DE@a3uDI/");
        java.lang.Boolean Boolean_72308 = o_matchesIgnoreCase_literalMutationString109200__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109200__9 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_72309 = o_matchesIgnoreCase_literalMutationString109200__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109200__10 = r.matchesIgnoreCase("one");
        java.lang.Boolean Boolean_72310 = o_matchesIgnoreCase_literalMutationString109200__10;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_literalMutationString109200__11 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109200__12 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_72311 = o_matchesIgnoreCase_literalMutationString109200__12;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109200__13 = r.matchesIgnoreCase("NE Two Three");
        java.lang.Boolean Boolean_72312 = o_matchesIgnoreCase_literalMutationString109200__13;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109200__14 = r.matchesIgnoreCase("ne Two Three Four");
        java.lang.Boolean Boolean_72313 = o_matchesIgnoreCase_literalMutationString109200__14;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_literalMutationString109200__15 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_literalMutationString109200__15);
        java.lang.String String_72314 = o_matchesIgnoreCase_literalMutationString109200__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_72314);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109200__16 = r.matchesIgnoreCase("ne");
        java.lang.Boolean Boolean_72315 = o_matchesIgnoreCase_literalMutationString109200__16;
        java.lang.Boolean Boolean_72316 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_72317 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_72318 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_72319 = o_matchesIgnoreCase_literalMutationString109200__15;
        java.lang.Boolean Boolean_72320 = o_matchesIgnoreCase_literalMutationString109200__8;
        java.lang.Boolean Boolean_72321 = o_matchesIgnoreCase_literalMutationString109200__12;
        java.lang.Character Character_72322 = ((char) (o_matchesIgnoreCase_literalMutationString109200__11));
        java.lang.Boolean Boolean_72323 = o_matchesIgnoreCase_literalMutationString109200__13;
        java.lang.Boolean Boolean_72324 = o_matchesIgnoreCase_literalMutationString109200__7;
        java.lang.Boolean Boolean_72325 = o_matchesIgnoreCase_literalMutationString109200__9;
        java.lang.Boolean Boolean_72326 = o_matchesIgnoreCase_literalMutationString109200__10;
        java.lang.Boolean Boolean_72327 = o_matchesIgnoreCase_literalMutationString109200__5;
        java.lang.Boolean Boolean_72328 = o_matchesIgnoreCase_literalMutationString109200__6;
        java.lang.Boolean Boolean_72329 = o_matchesIgnoreCase_literalMutationString109200__3;
        java.lang.Boolean Boolean_72330 = o_matchesIgnoreCase_literalMutationString109200__4;
        java.lang.Boolean Boolean_72331 = o_matchesIgnoreCase_literalMutationString109200__14;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_72319);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_72314);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_literalMutationString109200__15);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_sd109237 */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_sd109237_literalMutationString114902() {
        char __DSPOT_c_5784 = '!';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_73146 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_73147 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_73148 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__4 = r.matchesIgnoreCase("O");
        java.lang.Boolean Boolean_73149 = o_matchesIgnoreCase_sd109237__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__5 = r.matchesIgnoreCase("o");
        java.lang.Boolean Boolean_73150 = o_matchesIgnoreCase_sd109237__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__6 = r.matches('O');
        java.lang.Boolean Boolean_73151 = o_matchesIgnoreCase_sd109237__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__7 = r.matches('o');
        java.lang.Boolean Boolean_73152 = o_matchesIgnoreCase_sd109237__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__8 = r.matchesIgnoreCase("One Two Three");
        java.lang.Boolean Boolean_73153 = o_matchesIgnoreCase_sd109237__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__9 = r.matchesIgnoreCase("ONE two THREE");
        java.lang.Boolean Boolean_73154 = o_matchesIgnoreCase_sd109237__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__10 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_73155 = o_matchesIgnoreCase_sd109237__10;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__11 = r.matchesIgnoreCase("one");
        java.lang.Boolean Boolean_73156 = o_matchesIgnoreCase_sd109237__11;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_sd109237__12 = r.consume();
        java.lang.Character Character_73157 = ((char) (o_matchesIgnoreCase_sd109237__12));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__13 = r.matchesIgnoreCase("O!ne");
        java.lang.Boolean Boolean_73158 = o_matchesIgnoreCase_sd109237__13;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__14 = r.matchesIgnoreCase("NE Two Three");
        java.lang.Boolean Boolean_73159 = o_matchesIgnoreCase_sd109237__14;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__15 = r.matchesIgnoreCase("ne Two Three Four");
        java.lang.Boolean Boolean_73160 = o_matchesIgnoreCase_sd109237__15;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_sd109237__16 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_sd109237__16);
        java.lang.String String_73161 = o_matchesIgnoreCase_sd109237__16;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_73161);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_sd109237__17 = r.matchesIgnoreCase("ne");
        java.lang.Boolean Boolean_73162 = o_matchesIgnoreCase_sd109237__17;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_sd109237__18 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_5784);
        java.lang.String String_73163 = o_matchesIgnoreCase_sd109237__18;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_73163);
        java.lang.Boolean Boolean_73164 = o_matchesIgnoreCase_sd109237__5;
        java.lang.Boolean Boolean_73165 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_73166 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_73167 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_73168 = o_matchesIgnoreCase_sd109237__16;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_73168);
        java.lang.Boolean Boolean_73169 = o_matchesIgnoreCase_sd109237__6;
        java.lang.Boolean Boolean_73170 = o_matchesIgnoreCase_sd109237__8;
        java.lang.Boolean Boolean_73171 = o_matchesIgnoreCase_sd109237__4;
        java.lang.Boolean Boolean_73172 = o_matchesIgnoreCase_sd109237__9;
        java.lang.Boolean Boolean_73173 = o_matchesIgnoreCase_sd109237__7;
        java.lang.Character Character_73174 = ((char) (o_matchesIgnoreCase_sd109237__12));
        java.lang.Boolean Boolean_73175 = o_matchesIgnoreCase_sd109237__17;
        java.lang.Boolean Boolean_73176 = o_matchesIgnoreCase_sd109237__15;
        java.lang.Boolean Boolean_73177 = o_matchesIgnoreCase_sd109237__14;
        java.lang.Boolean Boolean_73178 = o_matchesIgnoreCase_sd109237__13;
        java.lang.Boolean Boolean_73179 = o_matchesIgnoreCase_sd109237__11;
        java.lang.Boolean Boolean_73180 = o_matchesIgnoreCase_sd109237__10;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_73163);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_sd109237__16);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_73161);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesIgnoreCase_sd109237__18);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_73168);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109165 */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198_literalMutationString119716() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
            java.lang.Boolean Boolean_78162 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_78163 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_78164 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__5 = r.matchesIgnoreCase("-");
            java.lang.Boolean Boolean_78165 = o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__5;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__6 = r.matchesIgnoreCase("o");
            java.lang.Boolean Boolean_78166 = o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__6;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__7 = r.matches('O');
            java.lang.Boolean Boolean_78167 = o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__7;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__8 = r.matches('o');
            java.lang.Boolean Boolean_78168 = o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__8;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__9 = r.matchesIgnoreCase("One Two Three");
            java.lang.Boolean Boolean_78169 = o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__9;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__10 = r.matchesIgnoreCase("ONE two THREE");
            java.lang.Boolean Boolean_78170 = o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__10;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__11 = r.matchesIgnoreCase("");
            java.lang.Boolean Boolean_78171 = o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__11;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__12 = r.matchesIgnoreCase("one");
            java.lang.Boolean Boolean_78172 = o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__12;
            // AssertGenerator create local variable with return value of invocation
            char o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__13 = r.consume();
            java.lang.Character Character_78173 = ((char) (o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__13));
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__14 = r.matchesIgnoreCase("One");
            java.lang.Boolean Boolean_78174 = o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__14;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__15 = r.matchesIgnoreCase("NE Two Three");
            java.lang.Boolean Boolean_78175 = o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__15;
            // AssertGenerator create local variable with return value of invocation
            boolean o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__16 = r.matchesIgnoreCase("ne Two Three Four");
            java.lang.Boolean Boolean_78176 = o_matchesIgnoreCase_literalMutationString109165_failAssert0_literalMutationString115198__16;
            r.consumeToEnd();
            r.matchesIgnoreCase("ne");
            org.junit.Assert.fail("matchesIgnoreCase_literalMutationString109165 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109202 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109202_literalMutationString112253 */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109202_literalMutationString112253_sd126344() {
        char[] __DSPOT_chars_6215 = new char[]{ ',' , 'P' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_79467 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_79468 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_79469 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_75691 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_75692 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_75693 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__3 = r.matchesIgnoreCase("O");
        java.lang.Boolean Boolean_75694 = o_matchesIgnoreCase_literalMutationString109202__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__4 = r.matchesIgnoreCase("o");
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__5 = r.matches('O');
        java.lang.Boolean Boolean_75695 = o_matchesIgnoreCase_literalMutationString109202__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__6 = r.matches('o');
        java.lang.Boolean Boolean_75696 = o_matchesIgnoreCase_literalMutationString109202__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__7 = r.matchesIgnoreCase("One Two Three");
        java.lang.Boolean Boolean_75697 = o_matchesIgnoreCase_literalMutationString109202__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__8 = r.matchesIgnoreCase("ONE two THREE");
        java.lang.Boolean Boolean_75698 = o_matchesIgnoreCase_literalMutationString109202__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__9 = r.matchesIgnoreCase("<span>Hello <div>there</div> <span>now</span></span>");
        java.lang.Boolean Boolean_75699 = o_matchesIgnoreCase_literalMutationString109202__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__10 = r.matchesIgnoreCase("one");
        java.lang.Boolean Boolean_75700 = o_matchesIgnoreCase_literalMutationString109202__10;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_literalMutationString109202__11 = r.consume();
        java.lang.Character Character_75701 = ((char) (o_matchesIgnoreCase_literalMutationString109202__11));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__12 = r.matchesIgnoreCase("Oe");
        java.lang.Boolean Boolean_75702 = o_matchesIgnoreCase_literalMutationString109202__12;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__13 = r.matchesIgnoreCase("NE Two Three");
        java.lang.Boolean Boolean_75703 = o_matchesIgnoreCase_literalMutationString109202__13;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__14 = r.matchesIgnoreCase("ne Two Three Four");
        java.lang.Boolean Boolean_75704 = o_matchesIgnoreCase_literalMutationString109202__14;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_literalMutationString109202__15 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_literalMutationString109202__15);
        java.lang.String String_79470 = o_matchesIgnoreCase_literalMutationString109202__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79470);
        java.lang.String String_75705 = o_matchesIgnoreCase_literalMutationString109202__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_75705);
        java.lang.String String_79471 = String_75705;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79471);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109202__16 = r.matchesIgnoreCase("ne");
        java.lang.Boolean Boolean_75706 = o_matchesIgnoreCase_literalMutationString109202__16;
        java.lang.Boolean Boolean_75707 = o_matchesIgnoreCase_literalMutationString109202__7;
        java.lang.Boolean Boolean_75708 = o_matchesIgnoreCase_literalMutationString109202__5;
        java.lang.Boolean Boolean_75709 = o_matchesIgnoreCase_literalMutationString109202__14;
        java.lang.Boolean Boolean_75710 = o_matchesIgnoreCase_literalMutationString109202__13;
        java.lang.String String_75711 = o_matchesIgnoreCase_literalMutationString109202__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_75711);
        java.lang.String String_79472 = String_75711;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79472);
        java.lang.Boolean Boolean_75712 = o_matchesIgnoreCase_literalMutationString109202__12;
        java.lang.Character Character_75713 = ((char) (o_matchesIgnoreCase_literalMutationString109202__11));
        java.lang.Boolean Boolean_75714 = o_matchesIgnoreCase_literalMutationString109202__10;
        java.lang.Boolean Boolean_75715 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_75716 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_75717 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_75718 = o_matchesIgnoreCase_literalMutationString109202__3;
        java.lang.Boolean Boolean_75719 = o_matchesIgnoreCase_literalMutationString109202__8;
        java.lang.Boolean Boolean_75720 = o_matchesIgnoreCase_literalMutationString109202__6;
        java.lang.Boolean Boolean_75721 = o_matchesIgnoreCase_literalMutationString109202__9;
        java.lang.Boolean Boolean_75722 = o_matchesIgnoreCase_literalMutationString109202__4;
        java.lang.Boolean Boolean_79473 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_79474 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_79475 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_79476 = o_matchesIgnoreCase_literalMutationString109202__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79476);
        java.lang.String String_79477 = String_75711;
        java.lang.String String_79478 = String_75705;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79478);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_literalMutationString109202_literalMutationString112253_sd126344__90 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_6215);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesIgnoreCase_literalMutationString109202_literalMutationString112253_sd126344__90);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79472);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79476);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79477);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_75705);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79478);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_literalMutationString109202__15);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79471);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_75711);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79470);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109195 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109195_literalMutationString111676 */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109195_literalMutationString111676_literalMutationString126919() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_77639 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_77640 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_77641 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_75915 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_75916 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_75917 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109195__3 = r.matchesIgnoreCase("O");
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109195__4 = r.matchesIgnoreCase("o");
        java.lang.Boolean Boolean_75918 = o_matchesIgnoreCase_literalMutationString109195__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109195__5 = r.matches('O');
        java.lang.Boolean Boolean_75919 = o_matchesIgnoreCase_literalMutationString109195__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109195__6 = r.matches('o');
        java.lang.Boolean Boolean_75920 = o_matchesIgnoreCase_literalMutationString109195__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109195__7 = r.matchesIgnoreCase("One Two Three");
        java.lang.Boolean Boolean_75921 = o_matchesIgnoreCase_literalMutationString109195__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109195__8 = r.matchesIgnoreCase("");
        java.lang.Boolean Boolean_75922 = o_matchesIgnoreCase_literalMutationString109195__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109195__9 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_75923 = o_matchesIgnoreCase_literalMutationString109195__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109195__10 = r.matchesIgnoreCase("one");
        java.lang.Boolean Boolean_75924 = o_matchesIgnoreCase_literalMutationString109195__10;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_literalMutationString109195__11 = r.consume();
        java.lang.Character Character_75925 = ((char) (o_matchesIgnoreCase_literalMutationString109195__11));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109195__12 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_75926 = o_matchesIgnoreCase_literalMutationString109195__12;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109195__13 = r.matchesIgnoreCase("");
        java.lang.Boolean Boolean_75927 = o_matchesIgnoreCase_literalMutationString109195__13;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109195__14 = r.matchesIgnoreCase("ne Two Three Four");
        java.lang.Boolean Boolean_75928 = o_matchesIgnoreCase_literalMutationString109195__14;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_literalMutationString109195__15 = r.consumeToEnd();
        java.lang.String String_77642 = o_matchesIgnoreCase_literalMutationString109195__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_77642);
        java.lang.String String_75929 = o_matchesIgnoreCase_literalMutationString109195__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_75929);
        java.lang.String String_77643 = String_75929;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_77643);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109195__16 = r.matchesIgnoreCase("ne");
        java.lang.Boolean Boolean_75930 = o_matchesIgnoreCase_literalMutationString109195__16;
        java.lang.Boolean Boolean_75931 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_75932 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_75933 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_75934 = o_matchesIgnoreCase_literalMutationString109195__4;
        java.lang.Boolean Boolean_75935 = o_matchesIgnoreCase_literalMutationString109195__9;
        java.lang.Boolean Boolean_75936 = o_matchesIgnoreCase_literalMutationString109195__6;
        java.lang.Boolean Boolean_75937 = o_matchesIgnoreCase_literalMutationString109195__3;
        java.lang.Boolean Boolean_75938 = o_matchesIgnoreCase_literalMutationString109195__5;
        java.lang.Boolean Boolean_75939 = o_matchesIgnoreCase_literalMutationString109195__7;
        java.lang.Boolean Boolean_75940 = o_matchesIgnoreCase_literalMutationString109195__8;
        java.lang.Boolean Boolean_75941 = o_matchesIgnoreCase_literalMutationString109195__13;
        java.lang.Boolean Boolean_75942 = o_matchesIgnoreCase_literalMutationString109195__10;
        java.lang.String String_75943 = o_matchesIgnoreCase_literalMutationString109195__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_75943);
        java.lang.String String_77644 = String_75943;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_77644);
        java.lang.Boolean Boolean_75944 = o_matchesIgnoreCase_literalMutationString109195__14;
        java.lang.Boolean Boolean_75945 = o_matchesIgnoreCase_literalMutationString109195__12;
        java.lang.Character Character_75946 = ((char) (o_matchesIgnoreCase_literalMutationString109195__11));
        java.lang.String String_77645 = String_75943;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_77645);
        java.lang.String String_77646 = String_75929;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_77646);
        java.lang.String String_77647 = o_matchesIgnoreCase_literalMutationString109195__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_77647);
        java.lang.Boolean Boolean_77648 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_77649 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_77650 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_77642);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_77645);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_77647);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_75943);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_77646);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_77643);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_75929);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", o_matchesIgnoreCase_literalMutationString109195__15);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_77644);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109168 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109168_literalMutationString109645 */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109168_literalMutationString109645_sd117789() {
        char __DSPOT_c_5988 = '&';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Tfo Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_79365 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_79366 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_79367 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_72075 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_72076 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_72077 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109168__3 = r.matchesIgnoreCase("O");
        java.lang.Boolean Boolean_72078 = o_matchesIgnoreCase_literalMutationString109168__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109168__4 = r.matchesIgnoreCase("o");
        java.lang.Boolean Boolean_72079 = o_matchesIgnoreCase_literalMutationString109168__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109168__5 = r.matches('O');
        java.lang.Boolean Boolean_72080 = o_matchesIgnoreCase_literalMutationString109168__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109168__6 = r.matches('o');
        java.lang.Boolean Boolean_72081 = o_matchesIgnoreCase_literalMutationString109168__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109168__7 = r.matchesIgnoreCase("<span>Hello <div>there</div> <span>now</span></span>");
        java.lang.Boolean Boolean_72082 = o_matchesIgnoreCase_literalMutationString109168__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109168__8 = r.matchesIgnoreCase("ONE two THREE");
        java.lang.Boolean Boolean_72083 = o_matchesIgnoreCase_literalMutationString109168__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109168__9 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_72084 = o_matchesIgnoreCase_literalMutationString109168__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109168__10 = r.matchesIgnoreCase("one");
        java.lang.Boolean Boolean_72085 = o_matchesIgnoreCase_literalMutationString109168__10;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_literalMutationString109168__11 = r.consume();
        java.lang.Character Character_72086 = ((char) (o_matchesIgnoreCase_literalMutationString109168__11));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109168__12 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_72087 = o_matchesIgnoreCase_literalMutationString109168__12;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109168__13 = r.matchesIgnoreCase("NE Two Three");
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109168__14 = r.matchesIgnoreCase("ne Two Three Four");
        java.lang.Boolean Boolean_72088 = o_matchesIgnoreCase_literalMutationString109168__14;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_literalMutationString109168__15 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Tfo Three", o_matchesIgnoreCase_literalMutationString109168__15);
        java.lang.String String_79368 = o_matchesIgnoreCase_literalMutationString109168__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Tfo Three", String_79368);
        java.lang.String String_72089 = o_matchesIgnoreCase_literalMutationString109168__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Tfo Three", String_72089);
        java.lang.String String_79369 = String_72089;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Tfo Three", String_79369);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109168__16 = r.matchesIgnoreCase("ne");
        java.lang.Boolean Boolean_72090 = o_matchesIgnoreCase_literalMutationString109168__16;
        java.lang.Boolean Boolean_72091 = o_matchesIgnoreCase_literalMutationString109168__7;
        java.lang.Boolean Boolean_72092 = o_matchesIgnoreCase_literalMutationString109168__9;
        java.lang.Boolean Boolean_72093 = o_matchesIgnoreCase_literalMutationString109168__4;
        java.lang.Boolean Boolean_72094 = o_matchesIgnoreCase_literalMutationString109168__8;
        java.lang.Boolean Boolean_72095 = o_matchesIgnoreCase_literalMutationString109168__10;
        java.lang.Boolean Boolean_72096 = o_matchesIgnoreCase_literalMutationString109168__5;
        java.lang.Boolean Boolean_72097 = o_matchesIgnoreCase_literalMutationString109168__3;
        java.lang.Boolean Boolean_72098 = o_matchesIgnoreCase_literalMutationString109168__6;
        java.lang.Boolean Boolean_72099 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_72100 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_72101 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_72102 = ((char) (o_matchesIgnoreCase_literalMutationString109168__11));
        java.lang.Boolean Boolean_72103 = o_matchesIgnoreCase_literalMutationString109168__14;
        java.lang.String String_72104 = o_matchesIgnoreCase_literalMutationString109168__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Tfo Three", String_72104);
        java.lang.Boolean Boolean_72105 = o_matchesIgnoreCase_literalMutationString109168__12;
        java.lang.Boolean Boolean_72106 = o_matchesIgnoreCase_literalMutationString109168__13;
        java.lang.String String_79370 = String_72089;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Tfo Three", String_79370);
        java.lang.Boolean Boolean_79371 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_79372 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_79373 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_79374 = String_72104;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Tfo Three", String_79374);
        java.lang.String String_79375 = o_matchesIgnoreCase_literalMutationString109168__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Tfo Three", String_79375);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_literalMutationString109168_literalMutationString109645_sd117789__89 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_5988);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesIgnoreCase_literalMutationString109168_literalMutationString109645_sd117789__89);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Tfo Three", String_79375);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Tfo Three", String_79368);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Tfo Three", String_72104);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Tfo Three", o_matchesIgnoreCase_literalMutationString109168__15);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Tfo Three", String_72089);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Tfo Three", String_79369);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Tfo Three", String_79374);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Tfo Three", String_79370);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109204 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109204_sd112419 */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109204_sd112419_literalMutationChar127338() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_79123 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_79124 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_79125 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_76105 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_76106 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_76107 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__3 = r.matchesIgnoreCase("O");
        java.lang.Boolean Boolean_76108 = o_matchesIgnoreCase_literalMutationString109204__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__4 = r.matchesIgnoreCase("o");
        java.lang.Boolean Boolean_76109 = o_matchesIgnoreCase_literalMutationString109204__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__5 = r.matches('/');
        java.lang.Boolean Boolean_76110 = o_matchesIgnoreCase_literalMutationString109204__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__6 = r.matches('o');
        java.lang.Boolean Boolean_76111 = o_matchesIgnoreCase_literalMutationString109204__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__7 = r.matchesIgnoreCase("One Two Three");
        java.lang.Boolean Boolean_76112 = o_matchesIgnoreCase_literalMutationString109204__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__8 = r.matchesIgnoreCase("ONE two THREE");
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__9 = r.matchesIgnoreCase("A4}");
        java.lang.Boolean Boolean_76113 = o_matchesIgnoreCase_literalMutationString109204__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__10 = r.matchesIgnoreCase("one");
        java.lang.Boolean Boolean_76114 = o_matchesIgnoreCase_literalMutationString109204__10;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_literalMutationString109204__11 = r.consume();
        java.lang.Character Character_76115 = ((char) (o_matchesIgnoreCase_literalMutationString109204__11));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__12 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_76116 = o_matchesIgnoreCase_literalMutationString109204__12;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__13 = r.matchesIgnoreCase("NE Two Three");
        java.lang.Boolean Boolean_76117 = o_matchesIgnoreCase_literalMutationString109204__13;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__14 = r.matchesIgnoreCase("ne Two Three Four");
        java.lang.Boolean Boolean_76118 = o_matchesIgnoreCase_literalMutationString109204__14;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_literalMutationString109204__15 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_literalMutationString109204__15);
        java.lang.String String_79126 = o_matchesIgnoreCase_literalMutationString109204__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79126);
        java.lang.String String_76119 = o_matchesIgnoreCase_literalMutationString109204__15;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109204__16 = r.matchesIgnoreCase("ne");
        java.lang.Boolean Boolean_76120 = o_matchesIgnoreCase_literalMutationString109204__16;
        java.lang.Boolean Boolean_76121 = o_matchesIgnoreCase_literalMutationString109204__3;
        java.lang.Boolean Boolean_76122 = o_matchesIgnoreCase_literalMutationString109204__8;
        java.lang.Boolean Boolean_76123 = o_matchesIgnoreCase_literalMutationString109204__10;
        java.lang.String String_76124 = o_matchesIgnoreCase_literalMutationString109204__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_76124);
        java.lang.String String_79127 = String_76124;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79127);
        java.lang.Boolean Boolean_76125 = o_matchesIgnoreCase_literalMutationString109204__14;
        java.lang.Character Character_76126 = ((char) (o_matchesIgnoreCase_literalMutationString109204__11));
        java.lang.Boolean Boolean_76127 = o_matchesIgnoreCase_literalMutationString109204__12;
        java.lang.Boolean Boolean_76128 = o_matchesIgnoreCase_literalMutationString109204__13;
        java.lang.Boolean Boolean_76129 = o_matchesIgnoreCase_literalMutationString109204__7;
        java.lang.Boolean Boolean_76130 = o_matchesIgnoreCase_literalMutationString109204__4;
        java.lang.Boolean Boolean_76131 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_76132 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_76133 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_76134 = o_matchesIgnoreCase_literalMutationString109204__5;
        java.lang.Boolean Boolean_76135 = o_matchesIgnoreCase_literalMutationString109204__6;
        java.lang.Boolean Boolean_76136 = o_matchesIgnoreCase_literalMutationString109204__9;
        // StatementAdd: add invocation of a method
        r.advance();
        java.lang.String String_79128 = String_76119;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79128);
        java.lang.Boolean Boolean_79129 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_79130 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_79131 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_79132 = o_matchesIgnoreCase_literalMutationString109204__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79132);
        java.lang.String String_79133 = String_76124;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79133);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79127);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79126);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79132);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(14, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_79128);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_literalMutationString109204__15);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_76124);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_76119);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109194 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109194_literalMutationString111600 */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109194_literalMutationString111600_literalMutationString130261() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_78411 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_78412 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_78413 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_77368 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_77369 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_77370 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109194__3 = r.matchesIgnoreCase("O");
        java.lang.Boolean Boolean_77371 = o_matchesIgnoreCase_literalMutationString109194__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109194__4 = r.matchesIgnoreCase("o");
        java.lang.Boolean Boolean_77372 = o_matchesIgnoreCase_literalMutationString109194__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109194__5 = r.matches('O');
        java.lang.Boolean Boolean_77373 = o_matchesIgnoreCase_literalMutationString109194__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109194__6 = r.matches('o');
        java.lang.Boolean Boolean_77374 = o_matchesIgnoreCase_literalMutationString109194__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109194__7 = r.matchesIgnoreCase("One owo Three");
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109194__8 = r.matchesIgnoreCase("m_#/U7/ ![|i*");
        java.lang.Boolean Boolean_77375 = o_matchesIgnoreCase_literalMutationString109194__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109194__9 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_77376 = o_matchesIgnoreCase_literalMutationString109194__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109194__10 = r.matchesIgnoreCase("one");
        java.lang.Boolean Boolean_77377 = o_matchesIgnoreCase_literalMutationString109194__10;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_literalMutationString109194__11 = r.consume();
        java.lang.Character Character_77378 = ((char) (o_matchesIgnoreCase_literalMutationString109194__11));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109194__12 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_77379 = o_matchesIgnoreCase_literalMutationString109194__12;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109194__13 = r.matchesIgnoreCase("NE Two Three");
        java.lang.Boolean Boolean_77380 = o_matchesIgnoreCase_literalMutationString109194__13;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109194__14 = r.matchesIgnoreCase("ne Two Three Four");
        java.lang.Boolean Boolean_77381 = o_matchesIgnoreCase_literalMutationString109194__14;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_literalMutationString109194__15 = r.consumeToEnd();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", o_matchesIgnoreCase_literalMutationString109194__15);
        java.lang.String String_78414 = o_matchesIgnoreCase_literalMutationString109194__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_78414);
        java.lang.String String_77382 = o_matchesIgnoreCase_literalMutationString109194__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_77382);
        java.lang.String String_78415 = String_77382;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_78415);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109194__16 = r.matchesIgnoreCase("ne");
        java.lang.Boolean Boolean_77383 = o_matchesIgnoreCase_literalMutationString109194__16;
        java.lang.Boolean Boolean_77384 = o_matchesIgnoreCase_literalMutationString109194__8;
        java.lang.Boolean Boolean_77385 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_77386 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_77387 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_77388 = o_matchesIgnoreCase_literalMutationString109194__6;
        java.lang.Boolean Boolean_77389 = o_matchesIgnoreCase_literalMutationString109194__3;
        java.lang.Boolean Boolean_77390 = o_matchesIgnoreCase_literalMutationString109194__13;
        java.lang.Boolean Boolean_77391 = o_matchesIgnoreCase_literalMutationString109194__4;
        java.lang.Boolean Boolean_77392 = o_matchesIgnoreCase_literalMutationString109194__9;
        java.lang.Boolean Boolean_77393 = o_matchesIgnoreCase_literalMutationString109194__5;
        java.lang.Boolean Boolean_77394 = o_matchesIgnoreCase_literalMutationString109194__12;
        java.lang.Boolean Boolean_77395 = o_matchesIgnoreCase_literalMutationString109194__14;
        java.lang.Boolean Boolean_77396 = o_matchesIgnoreCase_literalMutationString109194__10;
        java.lang.Character Character_77397 = ((char) (o_matchesIgnoreCase_literalMutationString109194__11));
        java.lang.String String_77398 = o_matchesIgnoreCase_literalMutationString109194__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_77398);
        java.lang.String String_78416 = String_77398;
        java.lang.Boolean Boolean_77399 = o_matchesIgnoreCase_literalMutationString109194__7;
        java.lang.String String_78417 = String_77398;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_78417);
        java.lang.Boolean Boolean_78418 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_78419 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_78420 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_78421 = o_matchesIgnoreCase_literalMutationString109194__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_78421);
        java.lang.String String_78422 = String_77382;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_78422);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_78417);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", o_matchesIgnoreCase_literalMutationString109194__15);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_77382);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_78414);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_78415);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_78421);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_78416);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("span>Hello <div>there</div> <span>now</span></span>", String_77398);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109174 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#matchesIgnoreCase_literalMutationString109174_sd110149 */
    @org.junit.Test(timeout = 10000)
    public void matchesIgnoreCase_literalMutationString109174_sd110149_literalMutationString124094() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("One Two Three");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('O', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_77626 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_77627 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_77628 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_74756 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_74757 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_74758 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__3 = r.matchesIgnoreCase("O");
        java.lang.Boolean Boolean_74759 = o_matchesIgnoreCase_literalMutationString109174__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__4 = r.matchesIgnoreCase("z");
        java.lang.Boolean Boolean_74760 = o_matchesIgnoreCase_literalMutationString109174__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__5 = r.matches('O');
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__6 = r.matches('o');
        java.lang.Boolean Boolean_74761 = o_matchesIgnoreCase_literalMutationString109174__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__7 = r.matchesIgnoreCase("One Two Three");
        java.lang.Boolean Boolean_74762 = o_matchesIgnoreCase_literalMutationString109174__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__8 = r.matchesIgnoreCase("ONE two THREE");
        java.lang.Boolean Boolean_74763 = o_matchesIgnoreCase_literalMutationString109174__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__9 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_74764 = o_matchesIgnoreCase_literalMutationString109174__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__10 = r.matchesIgnoreCase("one");
        java.lang.Boolean Boolean_74765 = o_matchesIgnoreCase_literalMutationString109174__10;
        // AssertGenerator create local variable with return value of invocation
        char o_matchesIgnoreCase_literalMutationString109174__11 = r.consume();
        java.lang.Character Character_74766 = ((char) (o_matchesIgnoreCase_literalMutationString109174__11));
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__12 = r.matchesIgnoreCase("One");
        java.lang.Boolean Boolean_74767 = o_matchesIgnoreCase_literalMutationString109174__12;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__13 = r.matchesIgnoreCase("NE Two Three");
        java.lang.Boolean Boolean_74768 = o_matchesIgnoreCase_literalMutationString109174__13;
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__14 = r.matchesIgnoreCase("ne Two Three Four");
        java.lang.Boolean Boolean_74769 = o_matchesIgnoreCase_literalMutationString109174__14;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_literalMutationString109174__15 = r.consumeToEnd();
        java.lang.String String_77629 = o_matchesIgnoreCase_literalMutationString109174__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_77629);
        java.lang.String String_74770 = o_matchesIgnoreCase_literalMutationString109174__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_74770);
        java.lang.String String_77630 = String_74770;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_77630);
        // AssertGenerator create local variable with return value of invocation
        boolean o_matchesIgnoreCase_literalMutationString109174__16 = r.matchesIgnoreCase("ne");
        java.lang.Boolean Boolean_74771 = o_matchesIgnoreCase_literalMutationString109174__16;
        java.lang.Boolean Boolean_74772 = o_matchesIgnoreCase_literalMutationString109174__13;
        java.lang.Boolean Boolean_74773 = o_matchesIgnoreCase_literalMutationString109174__5;
        java.lang.Boolean Boolean_74774 = o_matchesIgnoreCase_literalMutationString109174__7;
        java.lang.Boolean Boolean_74775 = o_matchesIgnoreCase_literalMutationString109174__3;
        java.lang.Boolean Boolean_74776 = o_matchesIgnoreCase_literalMutationString109174__8;
        java.lang.Boolean Boolean_74777 = o_matchesIgnoreCase_literalMutationString109174__6;
        java.lang.Boolean Boolean_74778 = o_matchesIgnoreCase_literalMutationString109174__9;
        java.lang.Boolean Boolean_74779 = o_matchesIgnoreCase_literalMutationString109174__14;
        java.lang.Boolean Boolean_74780 = o_matchesIgnoreCase_literalMutationString109174__4;
        java.lang.Boolean Boolean_74781 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_74782 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_74783 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_74784 = ((char) (o_matchesIgnoreCase_literalMutationString109174__11));
        java.lang.Boolean Boolean_74785 = o_matchesIgnoreCase_literalMutationString109174__12;
        java.lang.Boolean Boolean_74786 = o_matchesIgnoreCase_literalMutationString109174__10;
        java.lang.String String_74787 = o_matchesIgnoreCase_literalMutationString109174__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_74787);
        java.lang.String String_77631 = String_74787;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_77631);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_matchesIgnoreCase_literalMutationString109174_sd110149__77 = // StatementAdd: add invocation of a method
        r.toString();
        java.lang.String String_77632 = o_matchesIgnoreCase_literalMutationString109174_sd110149__77;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_77632);
        java.lang.String String_77633 = String_74787;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_77633);
        java.lang.String String_77634 = o_matchesIgnoreCase_literalMutationString109174__15;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_77634);
        java.lang.Boolean Boolean_77635 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_77636 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_77637 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_77638 = String_74770;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_77638);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_77634);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", o_matchesIgnoreCase_literalMutationString109174__15);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_matchesIgnoreCase_literalMutationString109174_sd110149__77);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_77633);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_77630);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_77629);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_77632);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_77631);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_74787);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(13, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("ne Two Three", String_74770);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals */
    @org.junit.Test(timeout = 10000)
    public void rangeEquals_sd158677() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158677__3 = r.rangeEquals(0, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158677__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158677__4 = r.rangeEquals(0, 5, "CHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158677__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158677__5 = r.rangeEquals(0, 5, "Chec");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158677__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158677__6 = r.rangeEquals(6, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158677__6);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158677__7 = r.rangeEquals(6, 5, "Chuck");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158677__7);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158677__8 = r.rangeEquals(12, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158677__8);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158677__9 = r.rangeEquals(12, 5, "Cheeky");
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158677__10 = r.rangeEquals(18, 5, "CHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158677__10);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158677__11 = r.rangeEquals(18, 5, "CHIKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158677__11);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_rangeEquals_sd158677__12 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check\tCheck\tCheck\tCHOKE", o_rangeEquals_sd158677__12);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158677__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158677__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158677__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158677__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158677__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158677__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158677__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158677__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158677__5);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals */
    @org.junit.Test(timeout = 10000)
    public void rangeEquals_literalMutationNumber158634() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158634__3 = r.rangeEquals(0, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_literalMutationNumber158634__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158634__4 = r.rangeEquals(0, 5, "CHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_literalMutationNumber158634__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158634__5 = r.rangeEquals(0, 5, "Chec");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_literalMutationNumber158634__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158634__6 = r.rangeEquals(6, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_literalMutationNumber158634__6);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158634__7 = r.rangeEquals(6, 5, "Chuck");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_literalMutationNumber158634__7);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158634__8 = r.rangeEquals(12, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_literalMutationNumber158634__8);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158634__9 = r.rangeEquals(12, 0, "Cheeky");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_literalMutationNumber158634__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158634__11 = r.rangeEquals(18, 5, "CHOKE");
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158634__12 = r.rangeEquals(18, 5, "CHIKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_literalMutationNumber158634__12);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_literalMutationNumber158634__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_literalMutationNumber158634__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_literalMutationNumber158634__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_literalMutationNumber158634__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_literalMutationNumber158634__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_literalMutationNumber158634__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_literalMutationNumber158634__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_literalMutationNumber158634__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals */
    @org.junit.Test(timeout = 10000)
    public void rangeEquals_sd158676() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158676__3 = r.rangeEquals(0, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158676__3);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158676__4 = r.rangeEquals(0, 5, "CHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158676__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158676__5 = r.rangeEquals(0, 5, "Chec");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158676__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158676__6 = r.rangeEquals(6, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158676__6);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158676__7 = r.rangeEquals(6, 5, "Chuck");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158676__7);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158676__8 = r.rangeEquals(12, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158676__8);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158676__9 = r.rangeEquals(12, 5, "Cheeky");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158676__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158676__10 = r.rangeEquals(18, 5, "CHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158676__10);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158676__11 = r.rangeEquals(18, 5, "CHIKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158676__11);
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158676__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158676__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158676__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('h', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158676__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158676__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158676__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158676__3);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158676__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158676__8);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals */
    @org.junit.Test(timeout = 10000)
    public void rangeEquals_sd158682() {
        char[] __DSPOT_chars_7755 = new char[]{ 'K' , '(' , '(' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__4 = r.rangeEquals(0, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158682__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__5 = r.rangeEquals(0, 5, "CHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158682__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__6 = r.rangeEquals(0, 5, "Chec");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158682__6);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__7 = r.rangeEquals(6, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158682__7);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__8 = r.rangeEquals(6, 5, "Chuck");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158682__8);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__9 = r.rangeEquals(12, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158682__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__10 = r.rangeEquals(12, 5, "Cheeky");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158682__10);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__11 = r.rangeEquals(18, 5, "CHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158682__11);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__12 = r.rangeEquals(18, 5, "CHIKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158682__12);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_rangeEquals_sd158682__13 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_7755);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check\tCheck\tCheck\tCHO", o_rangeEquals_sd158682__13);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158682__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158682__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158682__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158682__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158682__9);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158682__12);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158682__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('K', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(21, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158682__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158682__4);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals */
    @org.junit.Test(timeout = 10000)
    public void rangeEquals_sd158679() {
        char __DSPOT_c_7754 = 'z';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158679__4 = r.rangeEquals(0, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158679__4);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158679__5 = r.rangeEquals(0, 5, "CHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158679__5);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158679__6 = r.rangeEquals(0, 5, "Chec");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158679__6);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158679__7 = r.rangeEquals(6, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158679__7);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158679__8 = r.rangeEquals(6, 5, "Chuck");
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158679__9 = r.rangeEquals(12, 5, "Check");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158679__9);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158679__10 = r.rangeEquals(12, 5, "Cheeky");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158679__10);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158679__11 = r.rangeEquals(18, 5, "CHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158679__11);
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158679__12 = r.rangeEquals(18, 5, "CHIKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158679__12);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_rangeEquals_sd158679__13 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_7754);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check\tCheck\tCheck\tCHOKE", o_rangeEquals_sd158679__13);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158679__8);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158679__10);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158679__11);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158679__12);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158679__4);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158679__6);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(23, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_rangeEquals_sd158679__5);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158679__7);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(o_rangeEquals_sd158679__9);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals */
    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals_literalMutationString158546 */
    @org.junit.Test(timeout = 10000)
    public void rangeEquals_literalMutationString158546_literalMutationString161425() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE");
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158546__3 = r.rangeEquals(0, 5, "?J^1m");
        java.lang.Boolean Boolean_80851 = o_rangeEquals_literalMutationString158546__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158546__4 = r.rangeEquals(0, 5, "CHOKE");
        java.lang.Boolean Boolean_80852 = o_rangeEquals_literalMutationString158546__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158546__5 = r.rangeEquals(0, 5, "Chec");
        java.lang.Boolean Boolean_80853 = o_rangeEquals_literalMutationString158546__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158546__6 = r.rangeEquals(6, 5, "Check");
        java.lang.Boolean Boolean_80854 = o_rangeEquals_literalMutationString158546__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158546__7 = r.rangeEquals(6, 5, "Chuck");
        java.lang.Boolean Boolean_80855 = o_rangeEquals_literalMutationString158546__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158546__8 = r.rangeEquals(12, 5, "Check");
        java.lang.Boolean Boolean_80856 = o_rangeEquals_literalMutationString158546__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158546__9 = r.rangeEquals(12, 5, "Cheeky");
        java.lang.Boolean Boolean_80857 = o_rangeEquals_literalMutationString158546__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158546__10 = r.rangeEquals(18, 5, "CHOKE");
        java.lang.Boolean Boolean_80858 = o_rangeEquals_literalMutationString158546__10;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158546__11 = r.rangeEquals(18, 5, "$HIKE");
        java.lang.Boolean Boolean_80859 = o_rangeEquals_literalMutationString158546__11;
        java.lang.Boolean Boolean_80860 = o_rangeEquals_literalMutationString158546__8;
        java.lang.Boolean Boolean_80861 = o_rangeEquals_literalMutationString158546__3;
        java.lang.Boolean Boolean_80862 = o_rangeEquals_literalMutationString158546__10;
        java.lang.Boolean Boolean_80863 = o_rangeEquals_literalMutationString158546__6;
        java.lang.Boolean Boolean_80864 = o_rangeEquals_literalMutationString158546__9;
        java.lang.Boolean Boolean_80865 = o_rangeEquals_literalMutationString158546__7;
        java.lang.Boolean Boolean_80866 = o_rangeEquals_literalMutationString158546__4;
        java.lang.Boolean Boolean_80867 = o_rangeEquals_literalMutationString158546__5;
        java.lang.Boolean Boolean_80868 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_80869 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_80870 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals */
    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals_literalMutationString158643 */
    @org.junit.Test(timeout = 10000)
    public void rangeEquals_literalMutationString158643_sd175717() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE");
        java.lang.Boolean Boolean_81471 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_81472 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_81473 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158643__3 = r.rangeEquals(0, 5, "Check");
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158643__4 = r.rangeEquals(0, 5, "CHOKE");
        java.lang.Boolean Boolean_81474 = o_rangeEquals_literalMutationString158643__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158643__5 = r.rangeEquals(0, 5, "Chec");
        java.lang.Boolean Boolean_81475 = o_rangeEquals_literalMutationString158643__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158643__6 = r.rangeEquals(6, 5, "Check");
        java.lang.Boolean Boolean_81476 = o_rangeEquals_literalMutationString158643__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158643__7 = r.rangeEquals(6, 5, "Chuck");
        java.lang.Boolean Boolean_81477 = o_rangeEquals_literalMutationString158643__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158643__8 = r.rangeEquals(12, 5, "Check");
        java.lang.Boolean Boolean_81478 = o_rangeEquals_literalMutationString158643__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158643__9 = r.rangeEquals(12, 5, "Cheky");
        java.lang.Boolean Boolean_81479 = o_rangeEquals_literalMutationString158643__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158643__10 = r.rangeEquals(18, 5, "CHOKE");
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158643__11 = r.rangeEquals(18, 5, "CHIKE");
        java.lang.Boolean Boolean_81480 = o_rangeEquals_literalMutationString158643__11;
        java.lang.Boolean Boolean_81481 = o_rangeEquals_literalMutationString158643__7;
        java.lang.Boolean Boolean_81482 = o_rangeEquals_literalMutationString158643__4;
        java.lang.Boolean Boolean_81483 = o_rangeEquals_literalMutationString158643__5;
        java.lang.Boolean Boolean_81484 = o_rangeEquals_literalMutationString158643__9;
        java.lang.Boolean Boolean_81485 = o_rangeEquals_literalMutationString158643__6;
        java.lang.Boolean Boolean_81486 = o_rangeEquals_literalMutationString158643__10;
        java.lang.Boolean Boolean_81487 = o_rangeEquals_literalMutationString158643__8;
        java.lang.Boolean Boolean_81488 = o_rangeEquals_literalMutationString158643__3;
        java.lang.Boolean Boolean_81489 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_81490 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_81491 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_rangeEquals_literalMutationString158643_sd175717__51 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check\tCheck\tCheck\tCHOKE", o_rangeEquals_literalMutationString158643_sd175717__51);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals */
    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals_literalMutationString158530 */
    @org.junit.Test(timeout = 10000)
    public void rangeEquals_literalMutationString158530_literalMutationString159243() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_83715 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_83716 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_83717 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158530__3 = r.rangeEquals(0, 5, "Check");
        java.lang.Boolean Boolean_83718 = o_rangeEquals_literalMutationString158530__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158530__4 = r.rangeEquals(0, 5, "CHOKE");
        java.lang.Boolean Boolean_83719 = o_rangeEquals_literalMutationString158530__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158530__5 = r.rangeEquals(0, 5, "Chec");
        java.lang.Boolean Boolean_83720 = o_rangeEquals_literalMutationString158530__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158530__6 = r.rangeEquals(6, 5, "Check");
        java.lang.Boolean Boolean_83721 = o_rangeEquals_literalMutationString158530__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158530__7 = r.rangeEquals(6, 5, "Chuck");
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158530__8 = r.rangeEquals(12, 5, "Check");
        java.lang.Boolean Boolean_83722 = o_rangeEquals_literalMutationString158530__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158530__9 = r.rangeEquals(12, 5, "Lg[M}B");
        java.lang.Boolean Boolean_83723 = o_rangeEquals_literalMutationString158530__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158530__10 = r.rangeEquals(18, 5, "CHOKE");
        java.lang.Boolean Boolean_83724 = o_rangeEquals_literalMutationString158530__10;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158530__11 = r.rangeEquals(18, 5, "CHIKE");
        java.lang.Boolean Boolean_83725 = o_rangeEquals_literalMutationString158530__11;
        java.lang.Boolean Boolean_83726 = o_rangeEquals_literalMutationString158530__6;
        java.lang.Boolean Boolean_83727 = o_rangeEquals_literalMutationString158530__4;
        java.lang.Boolean Boolean_83728 = o_rangeEquals_literalMutationString158530__9;
        java.lang.Boolean Boolean_83729 = o_rangeEquals_literalMutationString158530__8;
        java.lang.Boolean Boolean_83730 = o_rangeEquals_literalMutationString158530__5;
        java.lang.Boolean Boolean_83731 = o_rangeEquals_literalMutationString158530__7;
        java.lang.Boolean Boolean_83732 = o_rangeEquals_literalMutationString158530__3;
        java.lang.Boolean Boolean_83733 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_83734 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_83735 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_83736 = o_rangeEquals_literalMutationString158530__10;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals */
    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals_literalMutationNumber158663 */
    @org.junit.Test(timeout = 10000)
    public void rangeEquals_literalMutationNumber158663_failAssert5_literalMutationNumber182206() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
            // AssertGenerator create local variable with return value of invocation
            boolean o_rangeEquals_literalMutationNumber158663_failAssert5_literalMutationNumber182206__5 = r.rangeEquals(1, 5, "Check");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_rangeEquals_literalMutationNumber158663_failAssert5_literalMutationNumber182206__5);
            // AssertGenerator create local variable with return value of invocation
            boolean o_rangeEquals_literalMutationNumber158663_failAssert5_literalMutationNumber182206__7 = r.rangeEquals(0, 5, "CHOKE");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_rangeEquals_literalMutationNumber158663_failAssert5_literalMutationNumber182206__7);
            // AssertGenerator create local variable with return value of invocation
            boolean o_rangeEquals_literalMutationNumber158663_failAssert5_literalMutationNumber182206__8 = r.rangeEquals(0, 5, "Chec");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_rangeEquals_literalMutationNumber158663_failAssert5_literalMutationNumber182206__8);
            // AssertGenerator create local variable with return value of invocation
            boolean o_rangeEquals_literalMutationNumber158663_failAssert5_literalMutationNumber182206__9 = r.rangeEquals(6, 5, "Check");
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(o_rangeEquals_literalMutationNumber158663_failAssert5_literalMutationNumber182206__9);
            // AssertGenerator create local variable with return value of invocation
            boolean o_rangeEquals_literalMutationNumber158663_failAssert5_literalMutationNumber182206__10 = r.rangeEquals(6, 5, "Chuck");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_rangeEquals_literalMutationNumber158663_failAssert5_literalMutationNumber182206__10);
            // AssertGenerator create local variable with return value of invocation
            boolean o_rangeEquals_literalMutationNumber158663_failAssert5_literalMutationNumber182206__11 = r.rangeEquals(12, 5, "Check");
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(o_rangeEquals_literalMutationNumber158663_failAssert5_literalMutationNumber182206__11);
            // AssertGenerator create local variable with return value of invocation
            boolean o_rangeEquals_literalMutationNumber158663_failAssert5_literalMutationNumber182206__12 = r.rangeEquals(12, 5, "Cheeky");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_rangeEquals_literalMutationNumber158663_failAssert5_literalMutationNumber182206__12);
            // AssertGenerator create local variable with return value of invocation
            boolean o_rangeEquals_literalMutationNumber158663_failAssert5_literalMutationNumber182206__13 = r.rangeEquals(18, 5, "CHOKE");
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(o_rangeEquals_literalMutationNumber158663_failAssert5_literalMutationNumber182206__13);
            r.rangeEquals(36, 5, "CHIKE");
            org.junit.Assert.fail("rangeEquals_literalMutationNumber158663 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals */
    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals_literalMutationString158549 */
    @org.junit.Test(timeout = 10000)
    public void rangeEquals_literalMutationString158549_sd161890() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_81911 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_81912 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_81913 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158549__3 = r.rangeEquals(0, 5, "C^eck");
        java.lang.Boolean Boolean_81914 = o_rangeEquals_literalMutationString158549__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158549__4 = r.rangeEquals(0, 5, "CHOKE");
        java.lang.Boolean Boolean_81915 = o_rangeEquals_literalMutationString158549__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158549__5 = r.rangeEquals(0, 5, "Chec");
        java.lang.Boolean Boolean_81916 = o_rangeEquals_literalMutationString158549__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158549__6 = r.rangeEquals(6, 5, "Check");
        java.lang.Boolean Boolean_81917 = o_rangeEquals_literalMutationString158549__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158549__7 = r.rangeEquals(6, 5, "Chuck");
        java.lang.Boolean Boolean_81918 = o_rangeEquals_literalMutationString158549__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158549__8 = r.rangeEquals(12, 5, "Check");
        java.lang.Boolean Boolean_81919 = o_rangeEquals_literalMutationString158549__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158549__9 = r.rangeEquals(12, 5, "Cheeky");
        java.lang.Boolean Boolean_81920 = o_rangeEquals_literalMutationString158549__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158549__10 = r.rangeEquals(18, 5, "CHOKE");
        java.lang.Boolean Boolean_81921 = o_rangeEquals_literalMutationString158549__10;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158549__11 = r.rangeEquals(18, 5, "CHIKE");
        java.lang.Boolean Boolean_81922 = o_rangeEquals_literalMutationString158549__11;
        java.lang.Boolean Boolean_81923 = o_rangeEquals_literalMutationString158549__7;
        java.lang.Boolean Boolean_81924 = o_rangeEquals_literalMutationString158549__5;
        java.lang.Boolean Boolean_81925 = o_rangeEquals_literalMutationString158549__9;
        java.lang.Boolean Boolean_81926 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_81927 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_81928 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_81929 = o_rangeEquals_literalMutationString158549__8;
        java.lang.Boolean Boolean_81930 = o_rangeEquals_literalMutationString158549__6;
        java.lang.Boolean Boolean_81931 = o_rangeEquals_literalMutationString158549__3;
        java.lang.Boolean Boolean_81932 = o_rangeEquals_literalMutationString158549__4;
        java.lang.Boolean Boolean_81933 = o_rangeEquals_literalMutationString158549__10;
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('h', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(1, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals */
    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals_literalMutationNumber158584 */
    @org.junit.Test(timeout = 10000)
    public void rangeEquals_literalMutationNumber158584_sd166810() {
        char __DSPOT_c_7854 = '3';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_81999 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_82000 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_82001 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158584__3 = r.rangeEquals(0, 5, "Check");
        java.lang.Boolean Boolean_82002 = o_rangeEquals_literalMutationNumber158584__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158584__4 = r.rangeEquals(0, 5, "CHOKE");
        java.lang.Boolean Boolean_82003 = o_rangeEquals_literalMutationNumber158584__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158584__5 = r.rangeEquals(0, 5, "Chec");
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158584__6 = r.rangeEquals(7, 5, "Check");
        java.lang.Boolean Boolean_82004 = o_rangeEquals_literalMutationNumber158584__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158584__8 = r.rangeEquals(6, 5, "Chuck");
        java.lang.Boolean Boolean_82005 = o_rangeEquals_literalMutationNumber158584__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158584__9 = r.rangeEquals(12, 5, "Check");
        java.lang.Boolean Boolean_82006 = o_rangeEquals_literalMutationNumber158584__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158584__10 = r.rangeEquals(12, 5, "Cheeky");
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158584__11 = r.rangeEquals(18, 5, "CHOKE");
        java.lang.Boolean Boolean_82007 = o_rangeEquals_literalMutationNumber158584__11;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158584__12 = r.rangeEquals(18, 5, "CHIKE");
        java.lang.Boolean Boolean_82008 = o_rangeEquals_literalMutationNumber158584__12;
        java.lang.Boolean Boolean_82009 = o_rangeEquals_literalMutationNumber158584__6;
        java.lang.Boolean Boolean_82010 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_82011 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_82012 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_82013 = o_rangeEquals_literalMutationNumber158584__9;
        java.lang.Boolean Boolean_82014 = o_rangeEquals_literalMutationNumber158584__3;
        java.lang.Boolean Boolean_82015 = o_rangeEquals_literalMutationNumber158584__8;
        java.lang.Boolean Boolean_82016 = o_rangeEquals_literalMutationNumber158584__4;
        java.lang.Boolean Boolean_82017 = o_rangeEquals_literalMutationNumber158584__5;
        java.lang.Boolean Boolean_82018 = o_rangeEquals_literalMutationNumber158584__10;
        java.lang.Boolean Boolean_82019 = o_rangeEquals_literalMutationNumber158584__11;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_rangeEquals_literalMutationNumber158584_sd166810__53 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_7854);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check\tCheck\tCheck\tCHOKE", o_rangeEquals_literalMutationNumber158584_sd166810__53);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(23, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals */
    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals_literalMutationString158531 */
    @org.junit.Test(timeout = 10000)
    public void rangeEquals_literalMutationString158531_sd159437() {
        char[] __DSPOT_chars_7759 = new char[0];
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tChe,ck\tCHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_81492 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_81493 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_81494 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158531__3 = r.rangeEquals(0, 5, "Check");
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158531__4 = r.rangeEquals(0, 5, "CHOKE");
        java.lang.Boolean Boolean_81495 = o_rangeEquals_literalMutationString158531__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158531__5 = r.rangeEquals(0, 5, "Chec");
        java.lang.Boolean Boolean_81496 = o_rangeEquals_literalMutationString158531__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158531__6 = r.rangeEquals(6, 5, "Check");
        java.lang.Boolean Boolean_81497 = o_rangeEquals_literalMutationString158531__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158531__7 = r.rangeEquals(6, 5, "Chuck");
        java.lang.Boolean Boolean_81498 = o_rangeEquals_literalMutationString158531__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158531__8 = r.rangeEquals(12, 5, "Check");
        java.lang.Boolean Boolean_81499 = o_rangeEquals_literalMutationString158531__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158531__9 = r.rangeEquals(12, 5, "Cheeky");
        java.lang.Boolean Boolean_81500 = o_rangeEquals_literalMutationString158531__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158531__10 = r.rangeEquals(18, 5, "CHOKE");
        java.lang.Boolean Boolean_81501 = o_rangeEquals_literalMutationString158531__10;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationString158531__11 = r.rangeEquals(18, 5, "CHIKE");
        java.lang.Boolean Boolean_81502 = o_rangeEquals_literalMutationString158531__11;
        java.lang.Boolean Boolean_81503 = o_rangeEquals_literalMutationString158531__5;
        java.lang.Boolean Boolean_81504 = o_rangeEquals_literalMutationString158531__3;
        java.lang.Boolean Boolean_81505 = o_rangeEquals_literalMutationString158531__6;
        java.lang.Boolean Boolean_81506 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_81507 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_81508 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_81509 = o_rangeEquals_literalMutationString158531__7;
        java.lang.Boolean Boolean_81510 = o_rangeEquals_literalMutationString158531__8;
        java.lang.Boolean Boolean_81511 = o_rangeEquals_literalMutationString158531__10;
        java.lang.Boolean Boolean_81512 = o_rangeEquals_literalMutationString158531__9;
        java.lang.Boolean Boolean_81513 = o_rangeEquals_literalMutationString158531__4;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_rangeEquals_literalMutationString158531_sd159437__53 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_7759);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check\tCheck\tChe,ck\tCHOKE", o_rangeEquals_literalMutationString158531_sd159437__53);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(24, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals */
    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals_literalMutationNumber158616 */
    @org.junit.Test(timeout = 10000)
    public void rangeEquals_literalMutationNumber158616_literalMutationNumber171473() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_81846 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_81847 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_81848 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158616__3 = r.rangeEquals(0, 5, "Check");
        java.lang.Boolean Boolean_81849 = o_rangeEquals_literalMutationNumber158616__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158616__4 = r.rangeEquals(0, 5, "CHOKE");
        java.lang.Boolean Boolean_81850 = o_rangeEquals_literalMutationNumber158616__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158616__5 = r.rangeEquals(0, 5, "Chec");
        java.lang.Boolean Boolean_81851 = o_rangeEquals_literalMutationNumber158616__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158616__6 = r.rangeEquals(0, 5, "Check");
        java.lang.Boolean Boolean_81852 = o_rangeEquals_literalMutationNumber158616__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158616__7 = r.rangeEquals(6, 5, "Chuck");
        java.lang.Boolean Boolean_81853 = o_rangeEquals_literalMutationNumber158616__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158616__8 = r.rangeEquals(13, 5, "Check");
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158616__10 = r.rangeEquals(12, 5, "Cheeky");
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158616__11 = r.rangeEquals(18, 5, "CHOKE");
        java.lang.Boolean Boolean_81854 = o_rangeEquals_literalMutationNumber158616__11;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158616__12 = r.rangeEquals(18, 5, "CHIKE");
        java.lang.Boolean Boolean_81855 = o_rangeEquals_literalMutationNumber158616__12;
        java.lang.Boolean Boolean_81856 = o_rangeEquals_literalMutationNumber158616__11;
        java.lang.Boolean Boolean_81857 = o_rangeEquals_literalMutationNumber158616__8;
        java.lang.Boolean Boolean_81858 = o_rangeEquals_literalMutationNumber158616__5;
        java.lang.Boolean Boolean_81859 = o_rangeEquals_literalMutationNumber158616__3;
        java.lang.Boolean Boolean_81860 = o_rangeEquals_literalMutationNumber158616__10;
        java.lang.Boolean Boolean_81861 = o_rangeEquals_literalMutationNumber158616__6;
        java.lang.Boolean Boolean_81862 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_81863 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_81864 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_81865 = o_rangeEquals_literalMutationNumber158616__4;
        java.lang.Boolean Boolean_81866 = o_rangeEquals_literalMutationNumber158616__7;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals */
    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals_literalMutationNumber158648 */
    @org.junit.Test(timeout = 10000)
    public void rangeEquals_literalMutationNumber158648_literalMutationNumber176251() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE");
        java.lang.Boolean Boolean_83474 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_83475 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_83476 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158648__3 = r.rangeEquals(0, 5, "Check");
        java.lang.Boolean Boolean_83477 = o_rangeEquals_literalMutationNumber158648__3;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158648__4 = r.rangeEquals(0, 5, "CHOKE");
        java.lang.Boolean Boolean_83478 = o_rangeEquals_literalMutationNumber158648__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158648__5 = r.rangeEquals(0, 5, "Chec");
        java.lang.Boolean Boolean_83479 = o_rangeEquals_literalMutationNumber158648__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158648__6 = r.rangeEquals(6, 5, "Check");
        java.lang.Boolean Boolean_83480 = o_rangeEquals_literalMutationNumber158648__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158648__7 = r.rangeEquals(0, 5, "Chuck");
        java.lang.Boolean Boolean_83481 = o_rangeEquals_literalMutationNumber158648__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158648__8 = r.rangeEquals(12, 5, "Check");
        java.lang.Boolean Boolean_83482 = o_rangeEquals_literalMutationNumber158648__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158648__9 = r.rangeEquals(12, 5, "Cheeky");
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158648__10 = r.rangeEquals(19, 5, "CHOKE");
        java.lang.Boolean Boolean_83483 = o_rangeEquals_literalMutationNumber158648__10;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_literalMutationNumber158648__12 = r.rangeEquals(18, 5, "CHIKE");
        java.lang.Boolean Boolean_83484 = o_rangeEquals_literalMutationNumber158648__12;
        java.lang.Boolean Boolean_83485 = o_rangeEquals_literalMutationNumber158648__7;
        java.lang.Boolean Boolean_83486 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_83487 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_83488 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_83489 = o_rangeEquals_literalMutationNumber158648__6;
        java.lang.Boolean Boolean_83490 = o_rangeEquals_literalMutationNumber158648__4;
        java.lang.Boolean Boolean_83491 = o_rangeEquals_literalMutationNumber158648__9;
        java.lang.Boolean Boolean_83492 = o_rangeEquals_literalMutationNumber158648__8;
        java.lang.Boolean Boolean_83493 = o_rangeEquals_literalMutationNumber158648__3;
        java.lang.Boolean Boolean_83494 = o_rangeEquals_literalMutationNumber158648__5;
        java.lang.Boolean Boolean_83495 = o_rangeEquals_literalMutationNumber158648__10;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals */
    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals_literalMutationString158529 */
    @org.junit.Test(timeout = 10000)
    public void rangeEquals_literalMutationString158529_failAssert0_literalMutationNumber181453() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
            r.rangeEquals(0, 5, "Check");
            r.rangeEquals(0, 5, "CHOKE");
            r.rangeEquals(0, 5, "Chec");
            r.rangeEquals(6, 5, "Check");
            r.rangeEquals(6, 5, "Chuck");
            r.rangeEquals(12, 5, "Check");
            r.rangeEquals(12, 5, "Cheeky");
            r.rangeEquals(18, 5, "CHOKE");
            r.rangeEquals(18, 5, "CHIKE");
            org.junit.Assert.fail("rangeEquals_literalMutationString158529 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals */
    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals_literalMutationNumber158620 */
    @org.junit.Test(timeout = 10000)
    public void rangeEquals_literalMutationNumber158620_literalMutationString172036_failAssert2() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            // AssertGenerator create local variable with return value of invocation
            boolean o_rangeEquals_literalMutationNumber158620__3 = r.rangeEquals(0, 5, "Check");
            java.lang.Boolean Boolean_81053 = o_rangeEquals_literalMutationNumber158620__3;
            // AssertGenerator create local variable with return value of invocation
            boolean o_rangeEquals_literalMutationNumber158620__4 = r.rangeEquals(0, 5, "CHOKE");
            java.lang.Boolean Boolean_81054 = o_rangeEquals_literalMutationNumber158620__4;
            // AssertGenerator create local variable with return value of invocation
            boolean o_rangeEquals_literalMutationNumber158620__5 = r.rangeEquals(0, 5, "Chec");
            java.lang.Boolean Boolean_81055 = o_rangeEquals_literalMutationNumber158620__5;
            // AssertGenerator create local variable with return value of invocation
            boolean o_rangeEquals_literalMutationNumber158620__6 = r.rangeEquals(6, 5, "Check");
            java.lang.Boolean Boolean_81056 = o_rangeEquals_literalMutationNumber158620__6;
            // AssertGenerator create local variable with return value of invocation
            boolean o_rangeEquals_literalMutationNumber158620__7 = r.rangeEquals(6, 5, "Chuck");
            java.lang.Boolean Boolean_81057 = o_rangeEquals_literalMutationNumber158620__7;
            // AssertGenerator create local variable with return value of invocation
            boolean o_rangeEquals_literalMutationNumber158620__8 = r.rangeEquals(12, 10, "Check");
            java.lang.Boolean Boolean_81058 = o_rangeEquals_literalMutationNumber158620__8;
            // AssertGenerator create local variable with return value of invocation
            boolean o_rangeEquals_literalMutationNumber158620__10 = r.rangeEquals(12, 5, "Cheeky");
            java.lang.Boolean Boolean_81059 = o_rangeEquals_literalMutationNumber158620__10;
            // AssertGenerator create local variable with return value of invocation
            boolean o_rangeEquals_literalMutationNumber158620__11 = r.rangeEquals(18, 5, "CHOKE");
            java.lang.Boolean Boolean_81060 = o_rangeEquals_literalMutationNumber158620__11;
            // AssertGenerator create local variable with return value of invocation
            boolean o_rangeEquals_literalMutationNumber158620__12 = r.rangeEquals(18, 5, "CHIKE");
            java.lang.Boolean Boolean_81061 = o_rangeEquals_literalMutationNumber158620__12;
            java.lang.Boolean Boolean_81062 = o_rangeEquals_literalMutationNumber158620__5;
            java.lang.Boolean Boolean_81063 = o_rangeEquals_literalMutationNumber158620__8;
            java.lang.Boolean Boolean_81064 = o_rangeEquals_literalMutationNumber158620__3;
            java.lang.Boolean Boolean_81065 = o_rangeEquals_literalMutationNumber158620__7;
            java.lang.Boolean Boolean_81066 = o_rangeEquals_literalMutationNumber158620__10;
            java.lang.Boolean Boolean_81067 = o_rangeEquals_literalMutationNumber158620__11;
            java.lang.Boolean Boolean_81068 = o_rangeEquals_literalMutationNumber158620__6;
            java.lang.Boolean Boolean_81069 = o_rangeEquals_literalMutationNumber158620__4;
            java.lang.Boolean Boolean_81070 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_81071 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_81072 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            org.junit.Assert.fail("rangeEquals_literalMutationNumber158620_literalMutationString172036 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals */
    /* amplification of org.jsoup.parser.CharacterReaderTest#rangeEquals_sd158682 */
    @org.junit.Test(timeout = 10000)
    public void rangeEquals_sd158682_literalMutationChar181270() {
        char[] __DSPOT_chars_7755 = new char[]{ 'K' , ')' , '(' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("Check\tCheck\tCheck\tCHOKE");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('C', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_81312 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_81313 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_81314 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__4 = r.rangeEquals(0, 5, "Check");
        java.lang.Boolean Boolean_81315 = o_rangeEquals_sd158682__4;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__5 = r.rangeEquals(0, 5, "CHOKE");
        java.lang.Boolean Boolean_81316 = o_rangeEquals_sd158682__5;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__6 = r.rangeEquals(0, 5, "Chec");
        java.lang.Boolean Boolean_81317 = o_rangeEquals_sd158682__6;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__7 = r.rangeEquals(6, 5, "Check");
        java.lang.Boolean Boolean_81318 = o_rangeEquals_sd158682__7;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__8 = r.rangeEquals(6, 5, "Chuck");
        java.lang.Boolean Boolean_81319 = o_rangeEquals_sd158682__8;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__9 = r.rangeEquals(12, 5, "Check");
        java.lang.Boolean Boolean_81320 = o_rangeEquals_sd158682__9;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__10 = r.rangeEquals(12, 5, "Cheeky");
        java.lang.Boolean Boolean_81321 = o_rangeEquals_sd158682__10;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__11 = r.rangeEquals(18, 5, "CHOKE");
        java.lang.Boolean Boolean_81322 = o_rangeEquals_sd158682__11;
        // AssertGenerator create local variable with return value of invocation
        boolean o_rangeEquals_sd158682__12 = r.rangeEquals(18, 5, "CHIKE");
        java.lang.Boolean Boolean_81323 = o_rangeEquals_sd158682__12;
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_rangeEquals_sd158682__13 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_7755);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check\tCheck\tCheck\tCHO", o_rangeEquals_sd158682__13);
        java.lang.String String_81324 = o_rangeEquals_sd158682__13;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check\tCheck\tCheck\tCHO", String_81324);
        java.lang.Boolean Boolean_81325 = o_rangeEquals_sd158682__6;
        java.lang.Boolean Boolean_81326 = o_rangeEquals_sd158682__10;
        java.lang.Boolean Boolean_81327 = o_rangeEquals_sd158682__7;
        java.lang.Boolean Boolean_81328 = o_rangeEquals_sd158682__11;
        java.lang.Boolean Boolean_81329 = o_rangeEquals_sd158682__9;
        java.lang.Boolean Boolean_81330 = o_rangeEquals_sd158682__12;
        java.lang.Boolean Boolean_81331 = o_rangeEquals_sd158682__8;
        java.lang.Boolean Boolean_81332 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_81333 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_81334 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_81335 = o_rangeEquals_sd158682__5;
        java.lang.Boolean Boolean_81336 = o_rangeEquals_sd158682__4;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check\tCheck\tCheck\tCHO", o_rangeEquals_sd158682__13);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("Check\tCheck\tCheck\tCHO", String_81324);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('K', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(21, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214139() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__3 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214139__3)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__4 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume_sd214139__4)));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__6 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214139__6)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214139__7)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume_sd214139__8)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__9 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214139__9)));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__13 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214139__13)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__14 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214139__14)));
        r.isEmpty();
        char char_85466 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__17 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume_sd214139__17)));
        r.unconsume();
        r.isEmpty();
        char char_85467 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__21 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume_sd214139__21)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214139__22 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214139__22);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214139__14)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume_sd214139__21)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume_sd214139__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214139__13)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214139__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214139__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume_sd214139__17)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214139__9)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214139__3)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume_sd214139__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214141() {
        char __DSPOT_c_8456 = 'x';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__4 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214141__4)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__5 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume_sd214141__5)));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__7 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214141__7)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214141__8)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__9 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume_sd214141__9)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__10 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214141__10)));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__14 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214141__14)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__15 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214141__15)));
        r.isEmpty();
        char char_85470 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__18 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume_sd214141__18)));
        r.unconsume();
        r.isEmpty();
        char char_85471 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__22 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume_sd214141__22)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214141__23 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_8456);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214141__23);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume_sd214141__9)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume_sd214141__18)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214141__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214141__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214141__14)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214141__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214141__15)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume_sd214141__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume_sd214141__22)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214141__10)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214144() {
        char[] __DSPOT_chars_8457 = new char[]{ '`' , '7' , 'X' , 'o' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__4 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214144__4)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__5 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume_sd214144__5)));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__7 = r.current();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214144__8)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__9 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume_sd214144__9)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__10 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214144__10)));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__14 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214144__14)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__15 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214144__15)));
        r.isEmpty();
        char char_85476 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__18 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume_sd214144__18)));
        r.unconsume();
        r.isEmpty();
        char char_85477 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__22 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume_sd214144__22)));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214144__23 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_8457);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214144__23);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214144__8)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume_sd214144__18)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214144__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214144__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214144__10)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume_sd214144__5)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume_sd214144__9)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume_sd214144__22)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214144__14)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214144__15)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214138() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__3 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214138__3)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__4 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume_sd214138__4)));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__6 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214138__6)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__7 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214138__7)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__8 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume_sd214138__8)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__9 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214138__9)));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__13 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214138__13)));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__14 = r.consume();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214138__14)));
        r.isEmpty();
        char char_85464 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__17 = r.consume();
        r.unconsume();
        r.isEmpty();
        char char_85465 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__21 = r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume_sd214138__21)));
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume_sd214138__21)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214138__9)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214138__14)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('e', ((char) (o_unconsume_sd214138__13)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume_sd214138__4)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214138__3)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214138__6)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume_sd214138__17)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(4, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (o_unconsume_sd214138__7)));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume_sd214138__8)));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214141 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214141_sd214310() {
        char __DSPOT_c_8476 = 'J';
        char __DSPOT_c_8456 = 'x';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_88635 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88636 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88637 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__4 = r.consume();
        java.lang.Character Character_88638 = ((char) (o_unconsume_sd214141__4));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__5 = r.current();
        java.lang.Character Character_88639 = ((char) (o_unconsume_sd214141__5));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__7 = r.current();
        java.lang.Character Character_88640 = ((char) (o_unconsume_sd214141__7));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__8 = r.consume();
        java.lang.Character Character_88641 = ((char) (o_unconsume_sd214141__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__9 = r.consume();
        java.lang.Character Character_88642 = ((char) (o_unconsume_sd214141__9));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__10 = r.consume();
        java.lang.Character Character_88643 = ((char) (o_unconsume_sd214141__10));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__14 = r.current();
        java.lang.Character Character_88644 = ((char) (o_unconsume_sd214141__14));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__15 = r.consume();
        java.lang.Character Character_88645 = ((char) (o_unconsume_sd214141__15));
        r.isEmpty();
        char char_85470 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__18 = r.consume();
        java.lang.Character Character_88646 = ((char) (o_unconsume_sd214141__18));
        r.unconsume();
        r.isEmpty();
        char char_85471 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__22 = r.current();
        java.lang.Character Character_88647 = ((char) (o_unconsume_sd214141__22));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214141__23 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_8456);
        java.lang.String String_88648 = o_unconsume_sd214141__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_88648);
        java.lang.Character Character_88649 = ((char) (o_unconsume_sd214141__9));
        java.lang.Character Character_88650 = ((char) (o_unconsume_sd214141__18));
        java.lang.Character Character_88651 = ((char) (o_unconsume_sd214141__8));
        java.lang.Boolean Boolean_88652 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88653 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88654 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_88655 = ((char) (o_unconsume_sd214141__7));
        java.lang.Character Character_88656 = ((char) (o_unconsume_sd214141__14));
        java.lang.Character Character_88657 = ((char) (o_unconsume_sd214141__4));
        java.lang.Character Character_88658 = ((char) (o_unconsume_sd214141__15));
        java.lang.Character Character_88659 = ((char) (o_unconsume_sd214141__5));
        java.lang.Character Character_88660 = ((char) (o_unconsume_sd214141__22));
        java.lang.Character Character_88661 = ((char) (o_unconsume_sd214141__10));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214141_sd214310__75 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_8476);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214141_sd214310__75);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_88648);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214141__23);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214142 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214142_sd214320() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_88905 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88906 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88907 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__3 = r.consume();
        java.lang.Character Character_88908 = ((char) (o_unconsume_sd214142__3));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__4 = r.current();
        java.lang.Character Character_88909 = ((char) (o_unconsume_sd214142__4));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__6 = r.current();
        java.lang.Character Character_88910 = ((char) (o_unconsume_sd214142__6));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__7 = r.consume();
        java.lang.Character Character_88911 = ((char) (o_unconsume_sd214142__7));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__8 = r.consume();
        java.lang.Character Character_88912 = ((char) (o_unconsume_sd214142__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__9 = r.consume();
        java.lang.Character Character_88913 = ((char) (o_unconsume_sd214142__9));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__13 = r.current();
        java.lang.Character Character_88914 = ((char) (o_unconsume_sd214142__13));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__14 = r.consume();
        java.lang.Character Character_88915 = ((char) (o_unconsume_sd214142__14));
        r.isEmpty();
        char char_85472 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__17 = r.consume();
        java.lang.Character Character_88916 = ((char) (o_unconsume_sd214142__17));
        r.unconsume();
        r.isEmpty();
        char char_85473 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__21 = r.current();
        java.lang.Character Character_88917 = ((char) (o_unconsume_sd214142__21));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__22 = // StatementAdd: add invocation of a method
        r.current();
        java.lang.Character Character_88918 = ((char) (o_unconsume_sd214142__22));
        java.lang.Boolean Boolean_88919 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88920 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88921 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_88922 = ((char) (o_unconsume_sd214142__7));
        java.lang.Character Character_88923 = ((char) (o_unconsume_sd214142__13));
        java.lang.Character Character_88924 = ((char) (o_unconsume_sd214142__6));
        java.lang.Character Character_88925 = ((char) (o_unconsume_sd214142__8));
        java.lang.Character Character_88926 = ((char) (o_unconsume_sd214142__21));
        java.lang.Character Character_88927 = ((char) (o_unconsume_sd214142__17));
        java.lang.Character Character_88928 = ((char) (o_unconsume_sd214142__9));
        java.lang.Character Character_88929 = ((char) (o_unconsume_sd214142__4));
        java.lang.Character Character_88930 = ((char) (o_unconsume_sd214142__14));
        java.lang.Character Character_88931 = ((char) (o_unconsume_sd214142__3));
        // StatementAdd: add invocation of a method
        r.advance();
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(4, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214141 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214141_literalMutationString214304() {
        char __DSPOT_c_8456 = 'x';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("oXne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_88473 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88474 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88475 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__4 = r.consume();
        java.lang.Character Character_88476 = ((char) (o_unconsume_sd214141__4));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__5 = r.current();
        java.lang.Character Character_88477 = ((char) (o_unconsume_sd214141__5));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__7 = r.current();
        java.lang.Character Character_88478 = ((char) (o_unconsume_sd214141__7));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__8 = r.consume();
        java.lang.Character Character_88479 = ((char) (o_unconsume_sd214141__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__9 = r.consume();
        java.lang.Character Character_88480 = ((char) (o_unconsume_sd214141__9));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__10 = r.consume();
        java.lang.Character Character_88481 = ((char) (o_unconsume_sd214141__10));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__14 = r.current();
        java.lang.Character Character_88482 = ((char) (o_unconsume_sd214141__14));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__15 = r.consume();
        java.lang.Character Character_88483 = ((char) (o_unconsume_sd214141__15));
        r.isEmpty();
        char char_85470 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__18 = r.consume();
        java.lang.Character Character_88484 = ((char) (o_unconsume_sd214141__18));
        r.unconsume();
        r.isEmpty();
        char char_85471 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__22 = r.current();
        java.lang.Character Character_88485 = ((char) (o_unconsume_sd214141__22));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214141__23 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_8456);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("e", o_unconsume_sd214141__23);
        java.lang.String String_88486 = o_unconsume_sd214141__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("e", String_88486);
        java.lang.Character Character_88487 = ((char) (o_unconsume_sd214141__9));
        java.lang.Character Character_88488 = ((char) (o_unconsume_sd214141__18));
        java.lang.Character Character_88489 = ((char) (o_unconsume_sd214141__8));
        java.lang.Boolean Boolean_88490 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88491 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88492 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_88493 = ((char) (o_unconsume_sd214141__7));
        java.lang.Character Character_88494 = ((char) (o_unconsume_sd214141__14));
        java.lang.Character Character_88495 = ((char) (o_unconsume_sd214141__4));
        java.lang.Character Character_88496 = ((char) (o_unconsume_sd214141__15));
        java.lang.Character Character_88497 = ((char) (o_unconsume_sd214141__5));
        java.lang.Character Character_88498 = ((char) (o_unconsume_sd214141__22));
        java.lang.Character Character_88499 = ((char) (o_unconsume_sd214141__10));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(4, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("e", o_unconsume_sd214141__23);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("e", String_88486);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214141 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214141_literalMutationString214303() {
        char __DSPOT_c_8456 = 'x';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("b8v");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('b', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_88446 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88447 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88448 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__4 = r.consume();
        java.lang.Character Character_88449 = ((char) (o_unconsume_sd214141__4));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__5 = r.current();
        java.lang.Character Character_88450 = ((char) (o_unconsume_sd214141__5));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__7 = r.current();
        java.lang.Character Character_88451 = ((char) (o_unconsume_sd214141__7));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__8 = r.consume();
        java.lang.Character Character_88452 = ((char) (o_unconsume_sd214141__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__9 = r.consume();
        java.lang.Character Character_88453 = ((char) (o_unconsume_sd214141__9));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__10 = r.consume();
        java.lang.Character Character_88454 = ((char) (o_unconsume_sd214141__10));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__14 = r.current();
        java.lang.Character Character_88455 = ((char) (o_unconsume_sd214141__14));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__15 = r.consume();
        java.lang.Character Character_88456 = ((char) (o_unconsume_sd214141__15));
        r.isEmpty();
        char char_85470 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__18 = r.consume();
        java.lang.Character Character_88457 = ((char) (o_unconsume_sd214141__18));
        r.unconsume();
        r.isEmpty();
        char char_85471 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__22 = r.current();
        java.lang.Character Character_88458 = ((char) (o_unconsume_sd214141__22));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214141__23 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_8456);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214141__23);
        java.lang.String String_88459 = o_unconsume_sd214141__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_88459);
        java.lang.Character Character_88460 = ((char) (o_unconsume_sd214141__9));
        java.lang.Character Character_88461 = ((char) (o_unconsume_sd214141__18));
        java.lang.Character Character_88462 = ((char) (o_unconsume_sd214141__8));
        java.lang.Boolean Boolean_88463 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88464 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88465 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_88466 = ((char) (o_unconsume_sd214141__7));
        java.lang.Character Character_88467 = ((char) (o_unconsume_sd214141__14));
        java.lang.Character Character_88468 = ((char) (o_unconsume_sd214141__4));
        java.lang.Character Character_88469 = ((char) (o_unconsume_sd214141__15));
        java.lang.Character Character_88470 = ((char) (o_unconsume_sd214141__5));
        java.lang.Character Character_88471 = ((char) (o_unconsume_sd214141__22));
        java.lang.Character Character_88472 = ((char) (o_unconsume_sd214141__10));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214141__23);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_88459);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214141 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214141_literalMutationString214302() {
        char __DSPOT_c_8456 = 'x';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_88419 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88420 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88421 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__4 = r.consume();
        java.lang.Character Character_88422 = ((char) (o_unconsume_sd214141__4));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__5 = r.current();
        java.lang.Character Character_88423 = ((char) (o_unconsume_sd214141__5));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__7 = r.current();
        java.lang.Character Character_88424 = ((char) (o_unconsume_sd214141__7));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__8 = r.consume();
        java.lang.Character Character_88425 = ((char) (o_unconsume_sd214141__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__9 = r.consume();
        java.lang.Character Character_88426 = ((char) (o_unconsume_sd214141__9));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__10 = r.consume();
        java.lang.Character Character_88427 = ((char) (o_unconsume_sd214141__10));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__14 = r.current();
        java.lang.Character Character_88428 = ((char) (o_unconsume_sd214141__14));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__15 = r.consume();
        java.lang.Character Character_88429 = ((char) (o_unconsume_sd214141__15));
        r.isEmpty();
        char char_85470 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__18 = r.consume();
        java.lang.Character Character_88430 = ((char) (o_unconsume_sd214141__18));
        r.unconsume();
        r.isEmpty();
        char char_85471 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__22 = r.current();
        java.lang.Character Character_88431 = ((char) (o_unconsume_sd214141__22));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214141__23 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_8456);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", o_unconsume_sd214141__23);
        java.lang.String String_88432 = o_unconsume_sd214141__23;
        java.lang.Character Character_88433 = ((char) (o_unconsume_sd214141__9));
        java.lang.Character Character_88434 = ((char) (o_unconsume_sd214141__18));
        java.lang.Character Character_88435 = ((char) (o_unconsume_sd214141__8));
        java.lang.Boolean Boolean_88436 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88437 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88438 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_88439 = ((char) (o_unconsume_sd214141__7));
        java.lang.Character Character_88440 = ((char) (o_unconsume_sd214141__14));
        java.lang.Character Character_88441 = ((char) (o_unconsume_sd214141__4));
        java.lang.Character Character_88442 = ((char) (o_unconsume_sd214141__15));
        java.lang.Character Character_88443 = ((char) (o_unconsume_sd214141__5));
        java.lang.Character Character_88444 = ((char) (o_unconsume_sd214141__22));
        java.lang.Character Character_88445 = ((char) (o_unconsume_sd214141__10));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", o_unconsume_sd214141__23);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", String_88432);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214144 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214144_literalMutationString214365() {
        char[] __DSPOT_chars_8457 = new char[]{ '`' , '7' , 'X' , 'o' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_90082 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_90083 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_90084 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__4 = r.consume();
        java.lang.Character Character_90085 = ((char) (o_unconsume_sd214144__4));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__5 = r.current();
        java.lang.Character Character_90086 = ((char) (o_unconsume_sd214144__5));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__7 = r.current();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__8 = r.consume();
        java.lang.Character Character_90087 = ((char) (o_unconsume_sd214144__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__9 = r.consume();
        java.lang.Character Character_90088 = ((char) (o_unconsume_sd214144__9));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__10 = r.consume();
        java.lang.Character Character_90089 = ((char) (o_unconsume_sd214144__10));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__14 = r.current();
        java.lang.Character Character_90090 = ((char) (o_unconsume_sd214144__14));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__15 = r.consume();
        java.lang.Character Character_90091 = ((char) (o_unconsume_sd214144__15));
        r.isEmpty();
        char char_85476 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__18 = r.consume();
        java.lang.Character Character_90092 = ((char) (o_unconsume_sd214144__18));
        r.unconsume();
        r.isEmpty();
        char char_85477 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__22 = r.current();
        java.lang.Character Character_90093 = ((char) (o_unconsume_sd214144__22));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214144__23 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_8457);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hell", o_unconsume_sd214144__23);
        java.lang.String String_90094 = o_unconsume_sd214144__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hell", String_90094);
        java.lang.Character Character_90095 = ((char) (o_unconsume_sd214144__8));
        java.lang.Boolean Boolean_90096 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_90097 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_90098 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_90099 = ((char) (o_unconsume_sd214144__18));
        java.lang.Character Character_90100 = ((char) (o_unconsume_sd214144__7));
        java.lang.Character Character_90101 = ((char) (o_unconsume_sd214144__4));
        java.lang.Character Character_90102 = ((char) (o_unconsume_sd214144__10));
        java.lang.Character Character_90103 = ((char) (o_unconsume_sd214144__5));
        java.lang.Character Character_90104 = ((char) (o_unconsume_sd214144__9));
        java.lang.Character Character_90105 = ((char) (o_unconsume_sd214144__22));
        java.lang.Character Character_90106 = ((char) (o_unconsume_sd214144__14));
        java.lang.Character Character_90107 = ((char) (o_unconsume_sd214144__15));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hell", String_90094);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hell", o_unconsume_sd214144__23);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(10, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214144 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214144_literalMutationString214364() {
        char[] __DSPOT_chars_8457 = new char[]{ '`' , '7' , 'X' , 'o' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_90056 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_90057 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_90058 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__4 = r.consume();
        java.lang.Character Character_90059 = ((char) (o_unconsume_sd214144__4));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__5 = r.current();
        java.lang.Character Character_90060 = ((char) (o_unconsume_sd214144__5));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__7 = r.current();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__8 = r.consume();
        java.lang.Character Character_90061 = ((char) (o_unconsume_sd214144__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__9 = r.consume();
        java.lang.Character Character_90062 = ((char) (o_unconsume_sd214144__9));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__10 = r.consume();
        java.lang.Character Character_90063 = ((char) (o_unconsume_sd214144__10));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__14 = r.current();
        java.lang.Character Character_90064 = ((char) (o_unconsume_sd214144__14));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__15 = r.consume();
        java.lang.Character Character_90065 = ((char) (o_unconsume_sd214144__15));
        r.isEmpty();
        char char_85476 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__18 = r.consume();
        java.lang.Character Character_90066 = ((char) (o_unconsume_sd214144__18));
        r.unconsume();
        r.isEmpty();
        char char_85477 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__22 = r.current();
        java.lang.Character Character_90067 = ((char) (o_unconsume_sd214144__22));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214144__23 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_8457);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214144__23);
        java.lang.String String_90068 = o_unconsume_sd214144__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_90068);
        java.lang.Character Character_90069 = ((char) (o_unconsume_sd214144__8));
        java.lang.Boolean Boolean_90070 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_90071 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_90072 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_90073 = ((char) (o_unconsume_sd214144__18));
        java.lang.Character Character_90074 = ((char) (o_unconsume_sd214144__7));
        java.lang.Character Character_90075 = ((char) (o_unconsume_sd214144__4));
        java.lang.Character Character_90076 = ((char) (o_unconsume_sd214144__10));
        java.lang.Character Character_90077 = ((char) (o_unconsume_sd214144__5));
        java.lang.Character Character_90078 = ((char) (o_unconsume_sd214144__9));
        java.lang.Character Character_90079 = ((char) (o_unconsume_sd214144__22));
        java.lang.Character Character_90080 = ((char) (o_unconsume_sd214144__14));
        java.lang.Character Character_90081 = ((char) (o_unconsume_sd214144__15));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214144__23);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_90068);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_literalMutationString214133 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_literalMutationString214133_sd214206() {
        char[] __DSPOT_chars_8461 = new char[]{ 'W' , ',' , 'G' , '+' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_86006 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_86007 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_86008 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_literalMutationString214133__3 = r.consume();
        java.lang.Character Character_86009 = ((char) (o_unconsume_literalMutationString214133__3));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_literalMutationString214133__4 = r.current();
        java.lang.Character Character_86010 = ((char) (o_unconsume_literalMutationString214133__4));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_literalMutationString214133__6 = r.current();
        java.lang.Character Character_86011 = ((char) (o_unconsume_literalMutationString214133__6));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_literalMutationString214133__7 = r.consume();
        java.lang.Character Character_86012 = ((char) (o_unconsume_literalMutationString214133__7));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_literalMutationString214133__8 = r.consume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_literalMutationString214133__9 = r.consume();
        java.lang.Character Character_86013 = ((char) (o_unconsume_literalMutationString214133__9));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_literalMutationString214133__13 = r.current();
        java.lang.Character Character_86014 = ((char) (o_unconsume_literalMutationString214133__13));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_literalMutationString214133__14 = r.consume();
        java.lang.Character Character_86015 = ((char) (o_unconsume_literalMutationString214133__14));
        r.isEmpty();
        char char_85454 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_literalMutationString214133__17 = r.consume();
        java.lang.Character Character_86016 = ((char) (o_unconsume_literalMutationString214133__17));
        r.unconsume();
        r.isEmpty();
        char char_85455 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_literalMutationString214133__21 = r.current();
        java.lang.Character Character_86017 = ((char) (o_unconsume_literalMutationString214133__21));
        java.lang.Character Character_86018 = ((char) (o_unconsume_literalMutationString214133__14));
        java.lang.Character Character_86019 = ((char) (o_unconsume_literalMutationString214133__4));
        java.lang.Character Character_86020 = ((char) (o_unconsume_literalMutationString214133__13));
        java.lang.Character Character_86021 = ((char) (o_unconsume_literalMutationString214133__6));
        java.lang.Character Character_86022 = ((char) (o_unconsume_literalMutationString214133__9));
        java.lang.Character Character_86023 = ((char) (o_unconsume_literalMutationString214133__8));
        java.lang.Character Character_86024 = ((char) (o_unconsume_literalMutationString214133__7));
        java.lang.Character Character_86025 = ((char) (o_unconsume_literalMutationString214133__17));
        java.lang.Character Character_86026 = ((char) (o_unconsume_literalMutationString214133__3));
        java.lang.Boolean Boolean_86027 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_86028 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_86029 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_literalMutationString214133_sd214206__67 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_8461);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", o_unconsume_literalMutationString214133_sd214206__67);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214140 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214140_sd214294() {
        char[] __DSPOT_chars_8475 = new char[]{ 'b' , 'n' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_88204 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88205 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88206 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214140__3 = r.consume();
        java.lang.Character Character_88207 = ((char) (o_unconsume_sd214140__3));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214140__4 = r.current();
        java.lang.Character Character_88208 = ((char) (o_unconsume_sd214140__4));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214140__6 = r.current();
        java.lang.Character Character_88209 = ((char) (o_unconsume_sd214140__6));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214140__7 = r.consume();
        java.lang.Character Character_88210 = ((char) (o_unconsume_sd214140__7));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214140__8 = r.consume();
        java.lang.Character Character_88211 = ((char) (o_unconsume_sd214140__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214140__9 = r.consume();
        java.lang.Character Character_88212 = ((char) (o_unconsume_sd214140__9));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214140__13 = r.current();
        java.lang.Character Character_88213 = ((char) (o_unconsume_sd214140__13));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214140__14 = r.consume();
        java.lang.Character Character_88214 = ((char) (o_unconsume_sd214140__14));
        r.isEmpty();
        char char_85468 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214140__17 = r.consume();
        java.lang.Character Character_88215 = ((char) (o_unconsume_sd214140__17));
        r.unconsume();
        r.isEmpty();
        char char_85469 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214140__21 = r.current();
        java.lang.Character Character_88216 = ((char) (o_unconsume_sd214140__21));
        // StatementAdd: add invocation of a method
        r.isEmpty();
        java.lang.Character Character_88217 = ((char) (o_unconsume_sd214140__17));
        java.lang.Character Character_88218 = ((char) (o_unconsume_sd214140__6));
        java.lang.Boolean Boolean_88219 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88220 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88221 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_88222 = ((char) (o_unconsume_sd214140__13));
        java.lang.Character Character_88223 = ((char) (o_unconsume_sd214140__14));
        java.lang.Character Character_88224 = ((char) (o_unconsume_sd214140__9));
        java.lang.Character Character_88225 = ((char) (o_unconsume_sd214140__3));
        java.lang.Character Character_88226 = ((char) (o_unconsume_sd214140__4));
        java.lang.Character Character_88227 = ((char) (o_unconsume_sd214140__21));
        java.lang.Character Character_88228 = ((char) (o_unconsume_sd214140__7));
        java.lang.Character Character_88229 = ((char) (o_unconsume_sd214140__8));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214140_sd214294__71 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_8475);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214140_sd214294__71);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214141 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214141_literalMutationString214301_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            char __DSPOT_c_8456 = 'x';
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            java.lang.Boolean Boolean_88392 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_88393 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_88394 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_sd214141__4 = r.consume();
            java.lang.Character Character_88395 = ((char) (o_unconsume_sd214141__4));
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_sd214141__5 = r.current();
            java.lang.Character Character_88396 = ((char) (o_unconsume_sd214141__5));
            r.unconsume();
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_sd214141__7 = r.current();
            java.lang.Character Character_88397 = ((char) (o_unconsume_sd214141__7));
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_sd214141__8 = r.consume();
            java.lang.Character Character_88398 = ((char) (o_unconsume_sd214141__8));
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_sd214141__9 = r.consume();
            java.lang.Character Character_88399 = ((char) (o_unconsume_sd214141__9));
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_sd214141__10 = r.consume();
            java.lang.Character Character_88400 = ((char) (o_unconsume_sd214141__10));
            r.isEmpty();
            r.unconsume();
            r.isEmpty();
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_sd214141__14 = r.current();
            java.lang.Character Character_88401 = ((char) (o_unconsume_sd214141__14));
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_sd214141__15 = r.consume();
            java.lang.Character Character_88402 = ((char) (o_unconsume_sd214141__15));
            r.isEmpty();
            char char_85470 = org.jsoup.parser.CharacterReader.EOF;
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_sd214141__18 = r.consume();
            java.lang.Character Character_88403 = ((char) (o_unconsume_sd214141__18));
            r.unconsume();
            r.isEmpty();
            char char_85471 = org.jsoup.parser.CharacterReader.EOF;
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_sd214141__22 = r.current();
            java.lang.Character Character_88404 = ((char) (o_unconsume_sd214141__22));
            // AssertGenerator create local variable with return value of invocation
            java.lang.String o_unconsume_sd214141__23 = // StatementAdd: add invocation of a method
            r.consumeTo(__DSPOT_c_8456);
            java.lang.String String_88405 = o_unconsume_sd214141__23;
            java.lang.Character Character_88406 = ((char) (o_unconsume_sd214141__9));
            java.lang.Character Character_88407 = ((char) (o_unconsume_sd214141__18));
            java.lang.Character Character_88408 = ((char) (o_unconsume_sd214141__8));
            java.lang.Boolean Boolean_88409 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_88410 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_88411 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.Character Character_88412 = ((char) (o_unconsume_sd214141__7));
            java.lang.Character Character_88413 = ((char) (o_unconsume_sd214141__14));
            java.lang.Character Character_88414 = ((char) (o_unconsume_sd214141__4));
            java.lang.Character Character_88415 = ((char) (o_unconsume_sd214141__15));
            java.lang.Character Character_88416 = ((char) (o_unconsume_sd214141__5));
            java.lang.Character Character_88417 = ((char) (o_unconsume_sd214141__22));
            java.lang.Character Character_88418 = ((char) (o_unconsume_sd214141__10));
            org.junit.Assert.fail("unconsume_sd214141_literalMutationString214301 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214139 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214139_sd214279() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_87811 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_87812 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_87813 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__3 = r.consume();
        java.lang.Character Character_87814 = ((char) (o_unconsume_sd214139__3));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__4 = r.current();
        java.lang.Character Character_87815 = ((char) (o_unconsume_sd214139__4));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__6 = r.current();
        java.lang.Character Character_87816 = ((char) (o_unconsume_sd214139__6));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__7 = r.consume();
        java.lang.Character Character_87817 = ((char) (o_unconsume_sd214139__7));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__8 = r.consume();
        java.lang.Character Character_87818 = ((char) (o_unconsume_sd214139__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__9 = r.consume();
        java.lang.Character Character_87819 = ((char) (o_unconsume_sd214139__9));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__13 = r.current();
        java.lang.Character Character_87820 = ((char) (o_unconsume_sd214139__13));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__14 = r.consume();
        java.lang.Character Character_87821 = ((char) (o_unconsume_sd214139__14));
        r.isEmpty();
        char char_85466 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__17 = r.consume();
        java.lang.Character Character_87822 = ((char) (o_unconsume_sd214139__17));
        r.unconsume();
        r.isEmpty();
        char char_85467 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139__21 = r.current();
        java.lang.Character Character_87823 = ((char) (o_unconsume_sd214139__21));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214139__22 = // StatementAdd: add invocation of a method
        r.toString();
        java.lang.String String_87824 = o_unconsume_sd214139__22;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_87824);
        java.lang.Character Character_87825 = ((char) (o_unconsume_sd214139__14));
        java.lang.Character Character_87826 = ((char) (o_unconsume_sd214139__21));
        java.lang.Character Character_87827 = ((char) (o_unconsume_sd214139__8));
        java.lang.Character Character_87828 = ((char) (o_unconsume_sd214139__13));
        java.lang.Character Character_87829 = ((char) (o_unconsume_sd214139__6));
        java.lang.Character Character_87830 = ((char) (o_unconsume_sd214139__7));
        java.lang.Character Character_87831 = ((char) (o_unconsume_sd214139__17));
        java.lang.Character Character_87832 = ((char) (o_unconsume_sd214139__9));
        java.lang.Character Character_87833 = ((char) (o_unconsume_sd214139__3));
        java.lang.Character Character_87834 = ((char) (o_unconsume_sd214139__4));
        java.lang.Boolean Boolean_87835 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_87836 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_87837 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214139_sd214279__73 = // StatementAdd: add invocation of a method
        r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (o_unconsume_sd214139_sd214279__73)));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214139__22);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_87824);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214141 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214141_sd214309 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214141_sd214309_sd216610() {
        char __DSPOT_c_8714 = 's';
        char __DSPOT_c_8456 = 'x';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_91136 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_91137 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_91138 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_88608 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88609 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88610 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__4 = r.consume();
        java.lang.Character Character_88611 = ((char) (o_unconsume_sd214141__4));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__5 = r.current();
        java.lang.Character Character_88612 = ((char) (o_unconsume_sd214141__5));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__7 = r.current();
        java.lang.Character Character_88613 = ((char) (o_unconsume_sd214141__7));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__8 = r.consume();
        java.lang.Character Character_88614 = ((char) (o_unconsume_sd214141__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__9 = r.consume();
        java.lang.Character Character_88615 = ((char) (o_unconsume_sd214141__9));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__10 = r.consume();
        java.lang.Character Character_88616 = ((char) (o_unconsume_sd214141__10));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__14 = r.current();
        java.lang.Character Character_88617 = ((char) (o_unconsume_sd214141__14));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__15 = r.consume();
        java.lang.Character Character_88618 = ((char) (o_unconsume_sd214141__15));
        r.isEmpty();
        char char_85470 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__18 = r.consume();
        java.lang.Character Character_88619 = ((char) (o_unconsume_sd214141__18));
        r.unconsume();
        r.isEmpty();
        char char_85471 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__22 = r.current();
        java.lang.Character Character_88620 = ((char) (o_unconsume_sd214141__22));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214141__23 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_8456);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214141__23);
        java.lang.String String_91139 = o_unconsume_sd214141__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91139);
        java.lang.String String_88621 = o_unconsume_sd214141__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_88621);
        java.lang.String String_91140 = String_88621;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91140);
        java.lang.Character Character_88622 = ((char) (o_unconsume_sd214141__9));
        java.lang.Character Character_88623 = ((char) (o_unconsume_sd214141__18));
        java.lang.Character Character_88624 = ((char) (o_unconsume_sd214141__8));
        java.lang.Boolean Boolean_88625 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88626 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88627 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_88628 = ((char) (o_unconsume_sd214141__7));
        java.lang.Character Character_88629 = ((char) (o_unconsume_sd214141__14));
        java.lang.Character Character_88630 = ((char) (o_unconsume_sd214141__4));
        java.lang.Character Character_88631 = ((char) (o_unconsume_sd214141__15));
        java.lang.Character Character_88632 = ((char) (o_unconsume_sd214141__5));
        java.lang.Character Character_88633 = ((char) (o_unconsume_sd214141__22));
        java.lang.Character Character_88634 = ((char) (o_unconsume_sd214141__10));
        // StatementAdd: add invocation of a method
        r.isEmpty();
        java.lang.String String_91141 = o_unconsume_sd214141__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91141);
        java.lang.String String_91142 = String_88621;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91142);
        java.lang.Boolean Boolean_91143 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_91144 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_91145 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214141_sd214309_sd216610__87 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_8714);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214141_sd214309_sd216610__87);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91142);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91141);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91140);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_88621);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91139);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214141__23);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_literalMutationString214137 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_literalMutationString214137_literalMutationString214243 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_literalMutationString214137_literalMutationString214243_sd215709_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            char __DSPOT_c_8594 = '7';
            org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("");
            java.lang.Boolean Boolean_90992 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_90993 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_90994 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.Boolean Boolean_86904 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_86905 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_86906 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_literalMutationString214137__3 = r.consume();
            java.lang.Character Character_86907 = ((char) (o_unconsume_literalMutationString214137__3));
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_literalMutationString214137__4 = r.current();
            java.lang.Character Character_86908 = ((char) (o_unconsume_literalMutationString214137__4));
            r.unconsume();
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_literalMutationString214137__6 = r.current();
            java.lang.Character Character_86909 = ((char) (o_unconsume_literalMutationString214137__6));
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_literalMutationString214137__7 = r.consume();
            java.lang.Character Character_86910 = ((char) (o_unconsume_literalMutationString214137__7));
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_literalMutationString214137__8 = r.consume();
            java.lang.Character Character_86911 = ((char) (o_unconsume_literalMutationString214137__8));
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_literalMutationString214137__9 = r.consume();
            r.isEmpty();
            r.unconsume();
            r.isEmpty();
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_literalMutationString214137__13 = r.current();
            java.lang.Character Character_86912 = ((char) (o_unconsume_literalMutationString214137__13));
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_literalMutationString214137__14 = r.consume();
            java.lang.Character Character_86913 = ((char) (o_unconsume_literalMutationString214137__14));
            r.isEmpty();
            char char_85462 = org.jsoup.parser.CharacterReader.EOF;
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_literalMutationString214137__17 = r.consume();
            java.lang.Character Character_86914 = ((char) (o_unconsume_literalMutationString214137__17));
            r.unconsume();
            r.isEmpty();
            char char_85463 = org.jsoup.parser.CharacterReader.EOF;
            // AssertGenerator create local variable with return value of invocation
            char o_unconsume_literalMutationString214137__21 = r.current();
            java.lang.Character Character_86915 = ((char) (o_unconsume_literalMutationString214137__21));
            java.lang.Boolean Boolean_86916 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_86917 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_86918 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            java.lang.Character Character_86919 = ((char) (o_unconsume_literalMutationString214137__7));
            java.lang.Character Character_86920 = ((char) (o_unconsume_literalMutationString214137__6));
            java.lang.Character Character_86921 = ((char) (o_unconsume_literalMutationString214137__17));
            java.lang.Character Character_86922 = ((char) (o_unconsume_literalMutationString214137__8));
            java.lang.Character Character_86923 = ((char) (o_unconsume_literalMutationString214137__13));
            java.lang.Character Character_86924 = ((char) (o_unconsume_literalMutationString214137__9));
            java.lang.Character Character_86925 = ((char) (o_unconsume_literalMutationString214137__14));
            java.lang.Character Character_86926 = ((char) (o_unconsume_literalMutationString214137__4));
            java.lang.Character Character_86927 = ((char) (o_unconsume_literalMutationString214137__3));
            java.lang.Boolean Boolean_90995 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
            java.lang.Character Character_90996 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
            java.lang.Integer Integer_90997 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
            // StatementAdd: add invocation of a method
            r.consumeTo(__DSPOT_c_8594);
            org.junit.Assert.fail("unconsume_literalMutationString214137_literalMutationString214243_sd215709 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214144 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214144_literalMutationString214365 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214144_literalMutationString214365_sd218041() {
        char[] __DSPOT_chars_8457 = new char[]{ '`' , '7' , 'X' , 'o' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_91599 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_91600 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_91601 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_90082 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_90083 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_90084 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__4 = r.consume();
        java.lang.Character Character_90085 = ((char) (o_unconsume_sd214144__4));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__5 = r.current();
        java.lang.Character Character_90086 = ((char) (o_unconsume_sd214144__5));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__7 = r.current();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__8 = r.consume();
        java.lang.Character Character_90087 = ((char) (o_unconsume_sd214144__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__9 = r.consume();
        java.lang.Character Character_90088 = ((char) (o_unconsume_sd214144__9));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__10 = r.consume();
        java.lang.Character Character_90089 = ((char) (o_unconsume_sd214144__10));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__14 = r.current();
        java.lang.Character Character_90090 = ((char) (o_unconsume_sd214144__14));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__15 = r.consume();
        java.lang.Character Character_90091 = ((char) (o_unconsume_sd214144__15));
        r.isEmpty();
        char char_85476 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__18 = r.consume();
        java.lang.Character Character_90092 = ((char) (o_unconsume_sd214144__18));
        r.unconsume();
        r.isEmpty();
        char char_85477 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__22 = r.current();
        java.lang.Character Character_90093 = ((char) (o_unconsume_sd214144__22));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214144__23 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_8457);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hell", o_unconsume_sd214144__23);
        java.lang.String String_91602 = o_unconsume_sd214144__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hell", String_91602);
        java.lang.String String_90094 = o_unconsume_sd214144__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hell", String_90094);
        java.lang.String String_91603 = String_90094;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hell", String_91603);
        java.lang.Character Character_90095 = ((char) (o_unconsume_sd214144__8));
        java.lang.Boolean Boolean_90096 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_90097 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_90098 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_90099 = ((char) (o_unconsume_sd214144__18));
        java.lang.Character Character_90100 = ((char) (o_unconsume_sd214144__7));
        java.lang.Character Character_90101 = ((char) (o_unconsume_sd214144__4));
        java.lang.Character Character_90102 = ((char) (o_unconsume_sd214144__10));
        java.lang.Character Character_90103 = ((char) (o_unconsume_sd214144__5));
        java.lang.Character Character_90104 = ((char) (o_unconsume_sd214144__9));
        java.lang.Character Character_90105 = ((char) (o_unconsume_sd214144__22));
        java.lang.Character Character_90106 = ((char) (o_unconsume_sd214144__14));
        java.lang.Character Character_90107 = ((char) (o_unconsume_sd214144__15));
        java.lang.String String_91604 = String_90094;
        java.lang.String String_91605 = o_unconsume_sd214144__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hell", String_91605);
        java.lang.Boolean Boolean_91606 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_91607 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_91608 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214144_literalMutationString214365_sd218041__83 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("o <div>there</div> <span>now</span></span>", o_unconsume_sd214144_literalMutationString214365_sd218041__83);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hell", String_91604);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hell", o_unconsume_sd214144__23);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hell", String_91605);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hell", String_91602);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hell", String_90094);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(10, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hell", String_91603);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214142 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214142_sd214321 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214142_sd214321_literalMutationString216803() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("@ne");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('@', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_91813 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_91814 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_91815 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_88932 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88933 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88934 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__3 = r.consume();
        java.lang.Character Character_88935 = ((char) (o_unconsume_sd214142__3));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__4 = r.current();
        java.lang.Character Character_88936 = ((char) (o_unconsume_sd214142__4));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__6 = r.current();
        java.lang.Character Character_88937 = ((char) (o_unconsume_sd214142__6));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__7 = r.consume();
        java.lang.Character Character_88938 = ((char) (o_unconsume_sd214142__7));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__8 = r.consume();
        java.lang.Character Character_88939 = ((char) (o_unconsume_sd214142__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__9 = r.consume();
        java.lang.Character Character_88940 = ((char) (o_unconsume_sd214142__9));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__13 = r.current();
        java.lang.Character Character_88941 = ((char) (o_unconsume_sd214142__13));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__14 = r.consume();
        java.lang.Character Character_88942 = ((char) (o_unconsume_sd214142__14));
        r.isEmpty();
        char char_85472 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__17 = r.consume();
        java.lang.Character Character_88943 = ((char) (o_unconsume_sd214142__17));
        r.unconsume();
        r.isEmpty();
        char char_85473 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__21 = r.current();
        java.lang.Character Character_88944 = ((char) (o_unconsume_sd214142__21));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__22 = // StatementAdd: add invocation of a method
        r.current();
        java.lang.Character Character_88945 = ((char) (o_unconsume_sd214142__22));
        java.lang.Boolean Boolean_88946 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88947 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88948 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_88949 = ((char) (o_unconsume_sd214142__7));
        java.lang.Character Character_88950 = ((char) (o_unconsume_sd214142__13));
        java.lang.Character Character_88951 = ((char) (o_unconsume_sd214142__6));
        java.lang.Character Character_88952 = ((char) (o_unconsume_sd214142__8));
        java.lang.Character Character_88953 = ((char) (o_unconsume_sd214142__21));
        java.lang.Character Character_88954 = ((char) (o_unconsume_sd214142__17));
        java.lang.Character Character_88955 = ((char) (o_unconsume_sd214142__9));
        java.lang.Character Character_88956 = ((char) (o_unconsume_sd214142__4));
        java.lang.Character Character_88957 = ((char) (o_unconsume_sd214142__14));
        java.lang.Character Character_88958 = ((char) (o_unconsume_sd214142__3));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214142_sd214321__73 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214142_sd214321__73);
        java.lang.String String_91816 = o_unconsume_sd214142_sd214321__73;
        java.lang.Boolean Boolean_91817 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_91818 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_91819 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91816);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214142_sd214321__73);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214144 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214144_literalMutationChar214356 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214144_literalMutationChar214356_literalMutationString217706() {
        char[] __DSPOT_chars_8457 = new char[]{ '`' , '7' , 'W' , 'o' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("oe");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_91761 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_91762 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_91763 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_89848 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_89849 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_89850 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__4 = r.consume();
        java.lang.Character Character_89851 = ((char) (o_unconsume_sd214144__4));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__5 = r.current();
        java.lang.Character Character_89852 = ((char) (o_unconsume_sd214144__5));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__7 = r.current();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__8 = r.consume();
        java.lang.Character Character_89853 = ((char) (o_unconsume_sd214144__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__9 = r.consume();
        java.lang.Character Character_89854 = ((char) (o_unconsume_sd214144__9));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__10 = r.consume();
        java.lang.Character Character_89855 = ((char) (o_unconsume_sd214144__10));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__14 = r.current();
        java.lang.Character Character_89856 = ((char) (o_unconsume_sd214144__14));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__15 = r.consume();
        java.lang.Character Character_89857 = ((char) (o_unconsume_sd214144__15));
        r.isEmpty();
        char char_85476 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__18 = r.consume();
        java.lang.Character Character_89858 = ((char) (o_unconsume_sd214144__18));
        r.unconsume();
        r.isEmpty();
        char char_85477 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__22 = r.current();
        java.lang.Character Character_89859 = ((char) (o_unconsume_sd214144__22));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214144__23 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_8457);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214144__23);
        java.lang.String String_91764 = o_unconsume_sd214144__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91764);
        java.lang.String String_89860 = o_unconsume_sd214144__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_89860);
        java.lang.Character Character_89861 = ((char) (o_unconsume_sd214144__8));
        java.lang.Boolean Boolean_89862 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_89863 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_89864 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_89865 = ((char) (o_unconsume_sd214144__18));
        java.lang.Character Character_89866 = ((char) (o_unconsume_sd214144__7));
        java.lang.Character Character_89867 = ((char) (o_unconsume_sd214144__4));
        java.lang.Character Character_89868 = ((char) (o_unconsume_sd214144__10));
        java.lang.Character Character_89869 = ((char) (o_unconsume_sd214144__5));
        java.lang.Character Character_89870 = ((char) (o_unconsume_sd214144__9));
        java.lang.Character Character_89871 = ((char) (o_unconsume_sd214144__22));
        java.lang.Character Character_89872 = ((char) (o_unconsume_sd214144__14));
        java.lang.Character Character_89873 = ((char) (o_unconsume_sd214144__15));
        java.lang.Boolean Boolean_91765 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_91766 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_91767 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_91768 = o_unconsume_sd214144__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91768);
        java.lang.String String_91769 = String_89860;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91769);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214144__23);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91764);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91768);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_89860);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214138 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214138_literalMutationString214257 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214138_literalMutationString214257_sd215904() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_90448 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_90449 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_90450 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_87241 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_87242 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_87243 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__3 = r.consume();
        java.lang.Character Character_87244 = ((char) (o_unconsume_sd214138__3));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__4 = r.current();
        java.lang.Character Character_87245 = ((char) (o_unconsume_sd214138__4));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__6 = r.current();
        java.lang.Character Character_87246 = ((char) (o_unconsume_sd214138__6));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__7 = r.consume();
        java.lang.Character Character_87247 = ((char) (o_unconsume_sd214138__7));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__8 = r.consume();
        java.lang.Character Character_87248 = ((char) (o_unconsume_sd214138__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__9 = r.consume();
        java.lang.Character Character_87249 = ((char) (o_unconsume_sd214138__9));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__13 = r.current();
        java.lang.Character Character_87250 = ((char) (o_unconsume_sd214138__13));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__14 = r.consume();
        java.lang.Character Character_87251 = ((char) (o_unconsume_sd214138__14));
        r.isEmpty();
        char char_85464 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__17 = r.consume();
        r.unconsume();
        r.isEmpty();
        char char_85465 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138__21 = r.current();
        java.lang.Character Character_87252 = ((char) (o_unconsume_sd214138__21));
        // StatementAdd: add invocation of a method
        r.advance();
        java.lang.Character Character_87253 = ((char) (o_unconsume_sd214138__21));
        java.lang.Character Character_87254 = ((char) (o_unconsume_sd214138__9));
        java.lang.Character Character_87255 = ((char) (o_unconsume_sd214138__14));
        java.lang.Character Character_87256 = ((char) (o_unconsume_sd214138__13));
        java.lang.Character Character_87257 = ((char) (o_unconsume_sd214138__4));
        java.lang.Character Character_87258 = ((char) (o_unconsume_sd214138__3));
        java.lang.Character Character_87259 = ((char) (o_unconsume_sd214138__6));
        java.lang.Character Character_87260 = ((char) (o_unconsume_sd214138__17));
        java.lang.Boolean Boolean_87261 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_87262 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_87263 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_87264 = ((char) (o_unconsume_sd214138__7));
        java.lang.Character Character_87265 = ((char) (o_unconsume_sd214138__8));
        java.lang.Boolean Boolean_90451 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_90452 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_90453 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214138_literalMutationString214257_sd215904__75 = // StatementAdd: add invocation of a method
        r.current();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (o_unconsume_sd214138_literalMutationString214257_sd215904__75)));
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('n', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(4, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214144 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214144_literalMutationChar214343 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214144_literalMutationChar214343_literalMutationChar217212() {
        char[] __DSPOT_chars_8457 = new char[]{ 'a' , '7' , ' ' , 'o' };
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("one");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('o', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_90687 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_90688 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_90689 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_89510 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_89511 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_89512 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__4 = r.consume();
        java.lang.Character Character_89513 = ((char) (o_unconsume_sd214144__4));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__5 = r.current();
        java.lang.Character Character_89514 = ((char) (o_unconsume_sd214144__5));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__7 = r.current();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__8 = r.consume();
        java.lang.Character Character_89515 = ((char) (o_unconsume_sd214144__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__9 = r.consume();
        java.lang.Character Character_89516 = ((char) (o_unconsume_sd214144__9));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__10 = r.consume();
        java.lang.Character Character_89517 = ((char) (o_unconsume_sd214144__10));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__14 = r.current();
        java.lang.Character Character_89518 = ((char) (o_unconsume_sd214144__14));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__15 = r.consume();
        java.lang.Character Character_89519 = ((char) (o_unconsume_sd214144__15));
        r.isEmpty();
        char char_85476 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__18 = r.consume();
        java.lang.Character Character_89520 = ((char) (o_unconsume_sd214144__18));
        r.unconsume();
        r.isEmpty();
        char char_85477 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214144__22 = r.current();
        java.lang.Character Character_89521 = ((char) (o_unconsume_sd214144__22));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214144__23 = // StatementAdd: add invocation of a method
        r.consumeToAny(__DSPOT_chars_8457);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214144__23);
        java.lang.String String_90690 = o_unconsume_sd214144__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_90690);
        java.lang.String String_89522 = o_unconsume_sd214144__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_89522);
        java.lang.Character Character_89523 = ((char) (o_unconsume_sd214144__8));
        java.lang.Boolean Boolean_89524 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_89525 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_89526 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_89527 = ((char) (o_unconsume_sd214144__18));
        java.lang.Character Character_89528 = ((char) (o_unconsume_sd214144__7));
        java.lang.Character Character_89529 = ((char) (o_unconsume_sd214144__4));
        java.lang.Character Character_89530 = ((char) (o_unconsume_sd214144__10));
        java.lang.Character Character_89531 = ((char) (o_unconsume_sd214144__5));
        java.lang.Character Character_89532 = ((char) (o_unconsume_sd214144__9));
        java.lang.Character Character_89533 = ((char) (o_unconsume_sd214144__22));
        java.lang.Character Character_89534 = ((char) (o_unconsume_sd214144__14));
        java.lang.Character Character_89535 = ((char) (o_unconsume_sd214144__15));
        java.lang.Boolean Boolean_90691 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_90692 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_90693 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_90694 = o_unconsume_sd214144__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_90694);
        java.lang.String String_90695 = String_89522;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_90695);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_90690);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_89522);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214144__23);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_90694);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214141 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214141_literalMutationString214302 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214141_literalMutationString214302_sd216494() {
        char __DSPOT_c_8456 = 'x';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_90998 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_90999 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_91000 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_88419 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88420 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88421 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__4 = r.consume();
        java.lang.Character Character_88422 = ((char) (o_unconsume_sd214141__4));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__5 = r.current();
        java.lang.Character Character_88423 = ((char) (o_unconsume_sd214141__5));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__7 = r.current();
        java.lang.Character Character_88424 = ((char) (o_unconsume_sd214141__7));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__8 = r.consume();
        java.lang.Character Character_88425 = ((char) (o_unconsume_sd214141__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__9 = r.consume();
        java.lang.Character Character_88426 = ((char) (o_unconsume_sd214141__9));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__10 = r.consume();
        java.lang.Character Character_88427 = ((char) (o_unconsume_sd214141__10));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__14 = r.current();
        java.lang.Character Character_88428 = ((char) (o_unconsume_sd214141__14));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__15 = r.consume();
        java.lang.Character Character_88429 = ((char) (o_unconsume_sd214141__15));
        r.isEmpty();
        char char_85470 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__18 = r.consume();
        java.lang.Character Character_88430 = ((char) (o_unconsume_sd214141__18));
        r.unconsume();
        r.isEmpty();
        char char_85471 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__22 = r.current();
        java.lang.Character Character_88431 = ((char) (o_unconsume_sd214141__22));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214141__23 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_8456);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", o_unconsume_sd214141__23);
        java.lang.String String_91001 = o_unconsume_sd214141__23;
        java.lang.String String_88432 = o_unconsume_sd214141__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", String_88432);
        java.lang.Character Character_88433 = ((char) (o_unconsume_sd214141__9));
        java.lang.Character Character_88434 = ((char) (o_unconsume_sd214141__18));
        java.lang.Character Character_88435 = ((char) (o_unconsume_sd214141__8));
        java.lang.Boolean Boolean_88436 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88437 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88438 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_88439 = ((char) (o_unconsume_sd214141__7));
        java.lang.Character Character_88440 = ((char) (o_unconsume_sd214141__14));
        java.lang.Character Character_88441 = ((char) (o_unconsume_sd214141__4));
        java.lang.Character Character_88442 = ((char) (o_unconsume_sd214141__15));
        java.lang.Character Character_88443 = ((char) (o_unconsume_sd214141__5));
        java.lang.Character Character_88444 = ((char) (o_unconsume_sd214141__22));
        java.lang.Character Character_88445 = ((char) (o_unconsume_sd214141__10));
        java.lang.Boolean Boolean_91002 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_91003 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_91004 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.String String_91005 = o_unconsume_sd214141__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", String_91005);
        java.lang.String String_91006 = String_88432;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", String_91006);
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214141_literalMutationString214302_sd216494__83 = // StatementAdd: add invocation of a method
        r.toString();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214141_literalMutationString214302_sd216494__83);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", String_91001);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", String_91005);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", o_unconsume_sd214141__23);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", String_88432);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(52, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", String_91006);
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214142 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214142_sd214321 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214142_sd214321_literalMutationString216800() {
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("<span>Hello <div>there</div> <span>now</span></span>");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('<', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_90939 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_90940 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_90941 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_88932 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88933 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88934 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__3 = r.consume();
        java.lang.Character Character_88935 = ((char) (o_unconsume_sd214142__3));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__4 = r.current();
        java.lang.Character Character_88936 = ((char) (o_unconsume_sd214142__4));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__6 = r.current();
        java.lang.Character Character_88937 = ((char) (o_unconsume_sd214142__6));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__7 = r.consume();
        java.lang.Character Character_88938 = ((char) (o_unconsume_sd214142__7));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__8 = r.consume();
        java.lang.Character Character_88939 = ((char) (o_unconsume_sd214142__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__9 = r.consume();
        java.lang.Character Character_88940 = ((char) (o_unconsume_sd214142__9));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__13 = r.current();
        java.lang.Character Character_88941 = ((char) (o_unconsume_sd214142__13));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__14 = r.consume();
        java.lang.Character Character_88942 = ((char) (o_unconsume_sd214142__14));
        r.isEmpty();
        char char_85472 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__17 = r.consume();
        java.lang.Character Character_88943 = ((char) (o_unconsume_sd214142__17));
        r.unconsume();
        r.isEmpty();
        char char_85473 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__21 = r.current();
        java.lang.Character Character_88944 = ((char) (o_unconsume_sd214142__21));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214142__22 = // StatementAdd: add invocation of a method
        r.current();
        java.lang.Character Character_88945 = ((char) (o_unconsume_sd214142__22));
        java.lang.Boolean Boolean_88946 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88947 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88948 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_88949 = ((char) (o_unconsume_sd214142__7));
        java.lang.Character Character_88950 = ((char) (o_unconsume_sd214142__13));
        java.lang.Character Character_88951 = ((char) (o_unconsume_sd214142__6));
        java.lang.Character Character_88952 = ((char) (o_unconsume_sd214142__8));
        java.lang.Character Character_88953 = ((char) (o_unconsume_sd214142__21));
        java.lang.Character Character_88954 = ((char) (o_unconsume_sd214142__17));
        java.lang.Character Character_88955 = ((char) (o_unconsume_sd214142__9));
        java.lang.Character Character_88956 = ((char) (o_unconsume_sd214142__4));
        java.lang.Character Character_88957 = ((char) (o_unconsume_sd214142__14));
        java.lang.Character Character_88958 = ((char) (o_unconsume_sd214142__3));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214142_sd214321__73 = // StatementAdd: add invocation of a method
        r.toString();
        java.lang.String String_90942 = o_unconsume_sd214142_sd214321__73;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", String_90942);
        java.lang.Boolean Boolean_90943 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_90944 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_90945 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", o_unconsume_sd214142_sd214321__73);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("an>Hello <div>there</div> <span>now</span></span>", String_90942);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('a', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
    }

    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214141 */
    /* amplification of org.jsoup.parser.CharacterReaderTest#unconsume_sd214141_literalMutationString214303 */
    @org.junit.Test(timeout = 10000)
    public void unconsume_sd214141_literalMutationString214303_sd216514() {
        char __DSPOT_c_8456 = 'x';
        org.jsoup.parser.CharacterReader r = new org.jsoup.parser.CharacterReader("b8v");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('b', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(0, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        java.lang.Boolean Boolean_91646 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_91647 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_91648 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Boolean Boolean_88446 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88447 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88448 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__4 = r.consume();
        java.lang.Character Character_88449 = ((char) (o_unconsume_sd214141__4));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__5 = r.current();
        java.lang.Character Character_88450 = ((char) (o_unconsume_sd214141__5));
        r.unconsume();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__7 = r.current();
        java.lang.Character Character_88451 = ((char) (o_unconsume_sd214141__7));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__8 = r.consume();
        java.lang.Character Character_88452 = ((char) (o_unconsume_sd214141__8));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__9 = r.consume();
        java.lang.Character Character_88453 = ((char) (o_unconsume_sd214141__9));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__10 = r.consume();
        java.lang.Character Character_88454 = ((char) (o_unconsume_sd214141__10));
        r.isEmpty();
        r.unconsume();
        r.isEmpty();
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__14 = r.current();
        java.lang.Character Character_88455 = ((char) (o_unconsume_sd214141__14));
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__15 = r.consume();
        java.lang.Character Character_88456 = ((char) (o_unconsume_sd214141__15));
        r.isEmpty();
        char char_85470 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__18 = r.consume();
        java.lang.Character Character_88457 = ((char) (o_unconsume_sd214141__18));
        r.unconsume();
        r.isEmpty();
        char char_85471 = org.jsoup.parser.CharacterReader.EOF;
        // AssertGenerator create local variable with return value of invocation
        char o_unconsume_sd214141__22 = r.current();
        java.lang.Character Character_88458 = ((char) (o_unconsume_sd214141__22));
        // AssertGenerator create local variable with return value of invocation
        java.lang.String o_unconsume_sd214141__23 = // StatementAdd: add invocation of a method
        r.consumeTo(__DSPOT_c_8456);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214141__23);
        java.lang.String String_91649 = o_unconsume_sd214141__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91649);
        java.lang.String String_88459 = o_unconsume_sd214141__23;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_88459);
        java.lang.String String_91650 = String_88459;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91650);
        java.lang.Character Character_88460 = ((char) (o_unconsume_sd214141__9));
        java.lang.Character Character_88461 = ((char) (o_unconsume_sd214141__18));
        java.lang.Character Character_88462 = ((char) (o_unconsume_sd214141__8));
        java.lang.Boolean Boolean_88463 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_88464 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_88465 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        java.lang.Character Character_88466 = ((char) (o_unconsume_sd214141__7));
        java.lang.Character Character_88467 = ((char) (o_unconsume_sd214141__14));
        java.lang.Character Character_88468 = ((char) (o_unconsume_sd214141__4));
        java.lang.Character Character_88469 = ((char) (o_unconsume_sd214141__15));
        java.lang.Character Character_88470 = ((char) (o_unconsume_sd214141__5));
        java.lang.Character Character_88471 = ((char) (o_unconsume_sd214141__22));
        java.lang.Character Character_88472 = ((char) (o_unconsume_sd214141__10));
        java.lang.String String_91651 = o_unconsume_sd214141__23;
        java.lang.String String_91652 = String_88459;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91652);
        java.lang.Boolean Boolean_91653 = ((org.jsoup.parser.CharacterReader)r).isEmpty();
        java.lang.Character Character_91654 = ((char) (((org.jsoup.parser.CharacterReader)r).current()));
        java.lang.Integer Integer_91655 = ((int) (((org.jsoup.parser.CharacterReader)r).pos()));
        // StatementAdd: add invocation of a method
        r.isEmpty();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_88459);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((org.jsoup.parser.CharacterReader)r).isEmpty());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals('\uffff', ((char) (((org.jsoup.parser.CharacterReader)r).current())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(3, ((int) (((org.jsoup.parser.CharacterReader)r).pos())));
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91649);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91650);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91651);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", o_unconsume_sd214141__23);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("", String_91652);
    }
}

