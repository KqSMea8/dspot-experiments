[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building JavaPoet 1.12.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ javapoet ---
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0:enforce (enforce-maven) @ javapoet ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ javapoet ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /tmp/dspot-experiments/dataset/javapoet/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ javapoet ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 17 source files to /tmp/dspot-experiments/dataset/javapoet/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ javapoet ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /tmp/dspot-experiments/dataset/javapoet/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ javapoet ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 19 source files to /tmp/dspot-experiments/dataset/javapoet/target/test-classes
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ javapoet ---
[INFO] Tests are skipped.
[INFO] 
[INFO] --- pitest-maven:1.4.0:mutationCoverage (default-cli) @ javapoet ---
[INFO] Found plugin : Default csv report plugin
[INFO] Found plugin : Default xml report plugin
[INFO] Found plugin : Default html report plugin
[INFO] Found plugin : Static initializer code detector plugin
[INFO] Found plugin : Static initializer filter plugin
[INFO] Found plugin : Excluded annotations plugin
[INFO] Found plugin : Inlined finally block filter plugin
[INFO] Found plugin : Try with resources filter
[INFO] Found plugin : Implicit null check filter
[INFO] Found plugin : For each loop filter
[INFO] Found plugin : Logging calls filter
[INFO] Found plugin : Infinite for loop filter
[INFO] Found plugin : Long running iterator loop filter
[INFO] Found plugin : For loop counter filter
[INFO] Found plugin : Kotlin junk mutations filter
[INFO] Found plugin : Max mutations per class limit
[INFO] Found plugin : Equals shortcut equivalent mutant filter
[INFO] Found plugin : Trivial return vals equivalence filter
[INFO] Found plugin : Mutant export plugin
[INFO] Found shared classpath plugin : Default mutation engine
[INFO] Found shared classpath plugin : JUnit plugin
[INFO] Found shared classpath plugin : TestNG plugin
[INFO] Adding org.pitest:pitest to SUT classpath
[INFO] Mutating from /tmp/dspot-experiments/dataset/javapoet/target/classes
/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|//-\|/-stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=simpleNames, methodDesc=()Ljava/util/List;], indexes=[17], mutator=org.pitest.mutationtest.engine.gregor.mutatorsstderr  : .NonVoidMethodCallMutator], filename=ClassName.java, block=28, lineNumber=113, description=removed call to com/squareup/javapoet/ClassName::simpleNames, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapostderr  : et.ClassNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNamestderr  : OutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.sqstderr  : uareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflistderr  : ct(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTestderr  : st.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squarstderr  : eup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=emit, methodDesc=(Lcom/squareup/javapoet/CodeWriter;)Lcom/squareup/javapoet/CodeWriter;], indexes=[42], mutator=ostderr  : rg.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE], filename=ClassName.java, block=66, lineNumber=242, description=removed conditional - replaced equality check with false, testsInOrder=[com.squareup.javapoet.ClassNameTest.bstderr  : estGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), comstderr  : .squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(stderr  : com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.stderr  : TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.sqstderr  : uareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest),stderr  :  com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapostderr  : et.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockstderr  : Test), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotstderr  : ationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.stderr  : squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTestderr  : st.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedTstderr  : ype(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNastderr  : meTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.stderr  : javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.jstderr  : avapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.stderr  : javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.Annstderr  : otatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.defaultPackageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.stderr  : classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squarestderr  : up.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflicstderr  : tingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareustderr  : p.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javastderr  : poet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotstderr  : ationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypstderr  : eNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.cstderr  : onflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squarstderr  : eup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(costderr  : m.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(stderr  : com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTystderr  : peMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrostderr  : rExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typesstderr  : Test.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareupstderr  : .javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTstderr  : est), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfstderr  : CodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoestderr  : t.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.Javstderr  : aFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.jastderr  : vapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.stderr  : TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJastderr  : vaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squstderr  : areup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tystderr  : peSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), comstderr  : .squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTeststderr  : .multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squarstderr  : eup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDstderr  : eclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squarestderr  : up.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javastderr  : poet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squstderr  : areup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.jstderr  : avapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapstderr  : oet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javastderr  : poet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEstderr  : numConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(costderr  : m.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSstderr  : pecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefastderr  : ults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclstderr  : ipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTestderr  : st), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrstderr  : orExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTeststderr  : ), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTystderr  : peMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipsestderr  : Test), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.sstderr  : quareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.Typestderr  : sEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[81], mutator=org.pitest.mutationtstderr  : est.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=39, lineNumber=150, description=removed call to java/lang/Class::getName, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNstderr  : ameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=topLevelClassName, methodDesc=()Lcom/squareup/javapoet/ClassName;], indexes=[15], mutator=org.pitest.mutationteststderr  : .engine.gregor.mutators.NullReturnValsMutator], filename=ClassName.java, block=21, lineNumber=100, description=replaced return value with null for com/squareup/javapoet/ClassName::topLevelClassName, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuestderr  : ssForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squarstderr  : eup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.sqstderr  : uareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNastderr  : meTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareupstderr  : .javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.sstderr  : quareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Typstderr  : eNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest),stderr  :  com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsstderr  : OnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squarestderr  : up.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annstderr  : otatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(costderr  : m.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTeststderr  : ), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapostderr  : et.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoestderr  : t.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapostderr  : et.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.Annotatedstderr  : TypeNameTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTestderr  : st.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(cstderr  : om.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.Javstderr  : aFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTestderr  : st.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javstderr  : apoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.bstderr  : ox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareupstderr  : .javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToStringstderr  : (com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(stderr  : com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFrostderr  : mTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.codeBlstderr  : ockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Tstderr  : ypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squarestderr  : up.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTestderr  : st), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTesstderr  : t.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squstderr  : areup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.Jstderr  : avaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.stderr  : javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.fstderr  : ilerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), cstderr  : om.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.sqstderr  : uareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTeststderr  : .multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), cstderr  : om.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.Tstderr  : ypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.jstderr  : avapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tstderr  : ypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareupstderr  : .javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tystderr  : peSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.sstderr  : quareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpstderr  : ecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), comstderr  : .squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorstderr  : ksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoestderr  : t.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javstderr  : apoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTestderr  : st.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), cstderr  : om.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squarestderr  : up.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equstderr  : alsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipstderr  : seTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclistderr  : pseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipsstderr  : eTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoestderr  : t.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTeststderr  : .wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.Tstderr  : ypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.Anstderr  : notationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljavax/lang/model/element/TypeElement;)Lcom/squareup/javapoet/ClassName;], indexes=[18], mutatorstderr  : =org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=61, lineNumber=210, description=removed call to javax/lang/model/element/TypeElement::getEnclosingElement, testsInOrder=[com.squareup.javapoet.ClassNastderr  : meTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javstderr  : apoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTeststderr  : ), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapostderr  : et.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTstderr  : est), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.Annotastderr  : tionSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.sqstderr  : uareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squarestderr  : up.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirrostderr  : r(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest),stderr  :  com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotationSpecTest.defaultAstderr  : nnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=enclosingClasses, methodDesc=()Ljava/util/List;], indexes=[19], mutator=org.pitest.mutationtest.engine.gregor.mutstderr  : ators.NonVoidMethodCallMutator], filename=ClassName.java, block=75, lineNumber=275, description=removed call to java/util/List::add, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.stderr  : squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squastderr  : reup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTesstderr  : t.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), com.sstderr  : quareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTestderr  : st.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatstderr  : edEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNamestderr  : Test), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.sqstderr  : uareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTstderr  : ypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(cstderr  : om.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTeststderr  : ), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.stderr  : AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.sstderr  : quareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(cstderr  : om.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), com.squstderr  : areup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNamestderr  : Test.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotstderr  : ation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.defaultPackageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squstderr  : areup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictinstderr  : gChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.stderr  : javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.costderr  : nflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squarstderr  : eup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javstderr  : apoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(stderr  : com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javastderr  : poet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getArrayTypeMirstderr  : ror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anstderr  : notationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcastderr  : rdExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Typstderr  : eSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squstderr  : areup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTstderr  : est), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javstderr  : apoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.Typstderr  : esTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squstderr  : areup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.parameterToStstderr  : ring(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTeststderr  : ), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToStringstderr  : (com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Fstderr  : ileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.Mestderr  : thodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotstderr  : atedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.stderr  : TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squstderr  : areup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStringstderr  : s(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrstderr  : ows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squastderr  : reup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.Methodstderr  : SpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareupstderr  : .javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.Tystderr  : peSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectiostderr  : nType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.overridestderr  : ExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpstderr  : ecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(stderr  : com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javstderr  : apoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.stderr  : TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tystderr  : peVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTstderr  : est), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.Mestderr  : thodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javstderr  : apoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.jastderr  : vapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javastderr  : poet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.stderr  : squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.stderr  : TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squstderr  : areup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.vastderr  : rargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squastderr  : reup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[39], mutator=org.pitest.mutationtstderr  : est.engine.gregor.mutators.InlineConstantMutator], filename=ClassName.java, block=36, lineNumber=144, description=Substituted 0 with 1, testsInOrder=[com.squareup.javapoet.ClassNameTest.fromClassRejectionTypes(com.squareup.javapoet.ClassNameTest), com.squastderr  : reup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest)stderr  : , com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTeststderr  : .danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squstderr  : areup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.stderr  : TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equastderr  : lsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTeststderr  : ), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squarestderr  : up.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), comstderr  : .squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTstderr  : est.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedstderr  : Type(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNstderr  : ameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareupstderr  : .javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.stderr  : javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annotatstderr  : edTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTesstderr  : t.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoetstderr  : .AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Jstderr  : avaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoestderr  : t.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareustderr  : p.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest),stderr  :  com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), cstderr  : om.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTystderr  : peMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTeststderr  : .annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Javastderr  : FileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.jstderr  : avapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExstderr  : ample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNastderr  : meTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.jstderr  : avapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecstderr  : Test.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWstderr  : ritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(comstderr  : .squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecstderr  : Test.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfacestderr  : Extends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.stderr  : multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpestderr  : cTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTstderr  : est), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSstderr  : pecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.sstderr  : quareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squarstderr  : eup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squastderr  : reup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamistderr  : cArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(costderr  : m.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.sstderr  : quareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTeststderr  : ), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariastderr  : ble(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.stderr  : squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirrostderr  : r(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoetstderr  : .TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[112], mutator=org.pitest.mstderr  : utationtest.engine.gregor.mutators.InlineConstantMutator], filename=ClassName.java, block=56, lineNumber=185, description=Substituted 0 with 1, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAscii(com.squareup.javapoet.ClassNameTest), com.sqstderr  : uareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForStristderr  : ng_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNamestderr  : Test)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[22], mutator=org.pitest.mustderr  : tationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=47, lineNumber=177, description=removed call to java/lang/String::indexOf, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAscii(com.squareup.javapoetstderr  : .ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNastderr  : meTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[120], mutator=org.pitest.mutationstderr  : test.engine.gregor.mutators.ArgumentPropagationMutator], filename=ClassName.java, block=41, lineNumber=157, description=replaced call to java/lang/String::lastIndexOf with argument, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.sstderr  : quareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnstderr  : notationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest),stderr  :  com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotatistderr  : onsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.sstderr  : quareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.Typstderr  : eNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(stderr  : com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Annstderr  : otatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWstderr  : ithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.stderr  : AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), cstderr  : om.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTesstderr  : t.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidstderr  : imensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParamestderr  : terizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(stderr  : com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoestderr  : t.TypeSpecTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFstderr  : ileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoetstderr  : .JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(stderr  : com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squarstderr  : eup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirstderr  : ror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBoustderr  : nds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWstderr  : ildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecstderr  : Test.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squarstderr  : eup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTestderr  : st), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFistderr  : leTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFilstderr  : eTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squarstderr  : eup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squastderr  : reup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.Tystderr  : peSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methstderr  : odToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTstderr  : est.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultMostderr  : difiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClassestderr  : s(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndenstderr  : t(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.estderr  : qualsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(cstderr  : om.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tystderr  : peSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Astderr  : nnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.Annotatistderr  : onSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBstderr  : uilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(costderr  : m.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExstderr  : tendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squstderr  : areup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTystderr  : peMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squarstderr  : eup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=withoutAnnotations, methodDesc=()Lcom/squareup/javapoet/ClassName;], indexes=[13], mutator=org.pitest.mutationtesstderr  : t.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE], filename=ClassName.java, block=9, lineNumber=69, description=removed conditional - replaced equality check with false, testsInOrder=[com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotatiostderr  : nsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnstderr  : notationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.stderr  : javapoet.TypeSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=emit, methodDesc=(Lcom/squareup/javapoet/CodeWriter;)Lcom/squareup/javapoet/CodeWriter;], indexes=[8], mutator=orstderr  : g.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=63, lineNumber=235, description=removed call to com/squareup/javapoet/ClassName::enclosingClasses, testsInOrder=[com.squareup.javapoet.ClassNameTest.beststderr  : GuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.sqstderr  : uareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(comstderr  : .squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Typstderr  : eNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squarstderr  : eup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), costderr  : m.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.stderr  : TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTesstderr  : t), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotatistderr  : onsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squstderr  : areup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.stderr  : annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedTypestderr  : (com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTstderr  : est), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javstderr  : apoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javastderr  : poet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javstderr  : apoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.Annotastderr  : tedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.defaultPackageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.clastderr  : ssAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.stderr  : javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictinstderr  : gTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.jstderr  : avapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoestderr  : t.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotatistderr  : onIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNastderr  : meTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.confstderr  : lictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareupstderr  : .javapoet.TypesTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.sstderr  : quareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(comstderr  : .squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMstderr  : irror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExstderr  : tendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTesstderr  : t.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.jastderr  : vapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTeststderr  : ), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodstderr  : eBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.Tstderr  : ypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFistderr  : leTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapstderr  : oet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.Typstderr  : eSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLstderr  : angTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapostderr  : et.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squarestderr  : up.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSstderr  : pecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.sqstderr  : uareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapstderr  : oet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.mustderr  : ltipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareupstderr  : .javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclstderr  : aredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.stderr  : javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoestderr  : t.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squarestderr  : up.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoetstderr  : .TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoestderr  : t.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumstderr  : Constants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squarestderr  : up.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.sstderr  : quareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecstderr  : Test.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaultstderr  : s(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipsstderr  : eTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest)stderr  : , com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorEstderr  : xtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), stderr  : com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMstderr  : irror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTesstderr  : t), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squastderr  : reup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEcstderr  : lipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=emit, methodDesc=(Lcom/squareup/javapoet/CodeWriter;)Lcom/squareup/javapoet/CodeWriter;], indexes=[73], mutator=ostderr  : rg.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=69, lineNumber=247, description=removed call to com/squareup/javapoet/CodeWriter::emitAndIndent, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGstderr  : uessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squstderr  : areup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.stderr  : squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Typestderr  : NameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squarestderr  : up.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), comstderr  : .squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Tstderr  : ypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTeststderr  : ), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotatiostderr  : nsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squastderr  : reup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.astderr  : nnotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(stderr  : com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTestderr  : st), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javastderr  : poet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapstderr  : oet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javastderr  : poet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.Annotatstderr  : edTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictinstderr  : gAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFstderr  : ileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConfstderr  : lictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.jstderr  : avapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squarestderr  : up.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.sqstderr  : uareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), cstderr  : om.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapostderr  : et.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), stderr  : com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoetstderr  : .TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.stderr  : TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareupstderr  : .javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameteristderr  : zedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.stderr  : wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javastderr  : poet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(stderr  : com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFilstderr  : eTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squastderr  : reup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.stderr  : classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), costderr  : m.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTstderr  : est.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoetstderr  : .TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStstderr  : ringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squastderr  : reup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForstderr  : InterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.sqstderr  : uareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareupstderr  : .javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.astderr  : nnotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.stderr  : TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTeststderr  : .typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.stderr  : squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enustderr  : mWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.jstderr  : avapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squastderr  : reup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTestderr  : st.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.stderr  : defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javstderr  : apoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(costderr  : m.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoetstderr  : .TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.sstderr  : quareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squarestderr  : up.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareupstderr  : .javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.stderr  : javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotatstderr  : ion(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=compareTo, methodDesc=(Lcom/squareup/javapoet/ClassName;)I], indexes=[8], mutator=org.pitest.mutationtest.engine.stderr  : gregor.mutators.ReturnValsMutator], filename=ClassName.java, block=62, lineNumber=230, description=replaced return of integer sized value with (x == 0 ? 1 : 0), testsInOrder=[com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareupstderr  : .javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest)stderr  : , com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.stderr  : javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.defaultPackage(stderr  : com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.Javstderr  : aFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.stderr  : squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpstderr  : ecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.stderr  : TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultMostderr  : difiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(costderr  : m.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSstderr  : pecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.stderr  : TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squarestderr  : up.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.Tstderr  : ypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.Tstderr  : ypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersTostderr  : Builder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.sqstderr  : uareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareustderr  : p.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[73], mutator=org.pitest.mutationtstderr  : est.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=39, lineNumber=149, description=removed call to java/lang/String::lastIndexOf, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.Cstderr  : lassNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[29], mutator=org.pitest.mustderr  : tationtest.engine.gregor.mutators.NegateConditionalsMutator], filename=ClassName.java, block=47, lineNumber=178, description=negated conditional, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAscii(com.squareup.javapoet.ClassNameTest), com.stderr  : squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForStstderr  : ring_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[47], mutator=org.pitest.mutationtstderr  : est.engine.gregor.mutators.InlineConstantMutator], filename=ClassName.java, block=37, lineNumber=145, description=Substituted 1 with 0, testsInOrder=[com.squareup.javapoet.ClassNameTest.fromClassRejectionTypes(com.squareup.javapoet.ClassNameTest), com.squastderr  : reup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest)stderr  : , com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTeststderr  : .danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squstderr  : areup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.stderr  : TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equastderr  : lsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTeststderr  : ), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squarestderr  : up.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), comstderr  : .squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTstderr  : est.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedstderr  : Type(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNstderr  : ameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareupstderr  : .javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.stderr  : javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annotatstderr  : edTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTesstderr  : t.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoetstderr  : .AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Jstderr  : avaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoestderr  : t.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareustderr  : p.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest),stderr  :  com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), cstderr  : om.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTystderr  : peMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTeststderr  : .annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Javastderr  : FileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.jstderr  : avapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExstderr  : ample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNastderr  : meTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.jstderr  : avapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecstderr  : Test.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWstderr  : ritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(comstderr  : .squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecstderr  : Test.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfacestderr  : Extends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.stderr  : multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpestderr  : cTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTstderr  : est), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSstderr  : pecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.sstderr  : quareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squarstderr  : eup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squastderr  : reup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamistderr  : cArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(costderr  : m.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.sstderr  : quareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTeststderr  : ), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariastderr  : ble(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.stderr  : squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirrostderr  : r(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoetstderr  : .TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[14], mutator=org.pitest.mustderr  : tationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=46, lineNumber=176, description=removed call to java/lang/String::codePointAt, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAscii(com.squareup.javastderr  : poet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.Clastderr  : ssNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(comstderr  : .squareup.javapoet.TypeNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=<init>, methodDesc=(Ljava/lang/String;Lcom/squareup/javapoet/ClassName;Ljava/lang/String;Ljava/util/List;)V], indstderr  : exes=[54], mutator=org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=5, lineNumber=59, description=removed call to java/lang/StringBuilder::append, testsInOrder=[com.squareup.javapoet.ClassNameTest.besstderr  : tGuessNonAscii(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.sstderr  : quareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPastderr  : ckage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoestderr  : t.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.isPrimitive(com.squareup.javapoet.TypeNameTest), com.stderr  : squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.danglstderr  : ingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Tstderr  : ypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCostderr  : deParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(costderr  : m.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareustderr  : p.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.Costderr  : deBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.stderr  : squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapostderr  : et.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.jastderr  : vapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTstderr  : est.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.Astderr  : nnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapostderr  : et.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.Codstderr  : eBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParastderr  : meterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareupstderr  : .javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.defaultPackageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classNameFactories(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTeststderr  : .classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squarstderr  : eup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflistderr  : ctingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squarestderr  : up.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javstderr  : apoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.supestderr  : rClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareupstderr  : .javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.stderr  : annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), stderr  : com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.Typesstderr  : Test), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), cstderr  : om.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.Typstderr  : esTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.Typstderr  : esTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.Typstderr  : esTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(comstderr  : .squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVstderr  : ariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Typstderr  : esTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squstderr  : areup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), comstderr  : .squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFrstderr  : omTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.jastderr  : vapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTstderr  : est), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoetstderr  : .TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.Tstderr  : ypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annostderr  : tationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotastderr  : tion(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareupstderr  : .javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.stderr  : AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVastderr  : riableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTeststderr  : .enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Metstderr  : hodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(stderr  : com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tstderr  : ypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpestderr  : cTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameterstderr  : s(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elsestderr  : If(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithstderr  : Bounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoetstderr  : .MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNostderr  : ConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTstderr  : est.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoetstderr  : .TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.Typstderr  : eSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatestderr  : mentWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationstderr  : WithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTstderr  : est), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapostderr  : et.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTeststderr  : .getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.stderr  : TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.Typesstderr  : EclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEcstderr  : lipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclstderr  : ipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.stderr  : javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[50], mutator=org.pitest.mustderr  : tationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE], filename=ClassName.java, block=50, lineNumber=180, description=removed conditional - replaced equality check with false, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAstderr  : scii(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), comstderr  : .squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAnstderr  : dHashCodeClassName(com.squareup.javapoet.TypeNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[92], mutator=org.pitest.mutationtstderr  : est.engine.gregor.mutators.experimental.NakedReceiverMutator], filename=ClassName.java, block=39, lineNumber=151, description=replaced call to java/lang/Class::getEnclosingClass with receiver, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromstderr  : Class(com.squareup.javapoet.ClassNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=reflectionName, methodDesc=()Ljava/lang/String;], indexes=[41], mutator=org.pitest.mutationtest.engine.gregor.mutstderr  : ators.experimental.NakedReceiverMutator], filename=ClassName.java, block=26, lineNumber=107, description=replaced call to java/lang/StringBuilder::append with receiver, testsInOrder=[com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.stderr  : ClassNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[123], mutator=org.pitest.mstderr  : utationtest.engine.gregor.mutators.ConstructorCallMutator], filename=ClassName.java, block=56, lineNumber=187, description=removed call to com/squareup/javapoet/ClassName::<init>, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAscii(com.squastderr  : reup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javstderr  : apoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClasstderr  : sName(com.squareup.javapoet.TypeNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=simpleNames, methodDesc=()Ljava/util/List;], indexes=[11], mutator=org.pitest.mutationtest.engine.gregor.mutatorsstderr  : .RemoveConditionalMutator_EQUAL_IF], filename=ClassName.java, block=27, lineNumber=112, description=removed conditional - replaced equality check with true, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.jastderr  : vapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflstderr  : ictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), costderr  : m.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsstderr  : WithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapstderr  : oet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingImports(cstderr  : om.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importSstderr  : taticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.jastderr  : vapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFilestderr  : Test), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtstderr  : ends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squarestderr  : up.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedVastderr  : lues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tstderr  : ypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.stderr  : TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), cstderr  : om.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.metstderr  : hodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), costderr  : m.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoetstderr  : .TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoestderr  : t.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareupstderr  : .javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indstderr  : exedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTeststderr  : .codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecstderr  : Test.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotatiostderr  : n(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.Annotastderr  : tionSpecTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[84], mutator=org.pitest.mutationtstderr  : est.engine.gregor.mutators.experimental.NakedReceiverMutator], filename=ClassName.java, block=39, lineNumber=150, description=replaced call to java/lang/StringBuilder::append with receiver, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClastderr  : ss(com.squareup.javapoet.ClassNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=emit, methodDesc=(Lcom/squareup/javapoet/CodeWriter;)Lcom/squareup/javapoet/CodeWriter;], indexes=[57], mutator=ostderr  : rg.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=68, lineNumber=245, description=removed call to java/lang/String::lastIndexOf, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpstderr  : leClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.Clastderr  : ssNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.stderr  : ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrstderr  : imitive(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.Annotastderr  : tedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoetstderr  : .AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGstderr  : enericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.jastderr  : vapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclostderr  : singAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.Codestderr  : BlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElemestderr  : ntType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapstderr  : oet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.stderr  : javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypestderr  : NameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.stderr  : join(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypestderr  : NameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), cstderr  : om.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.defaultPackageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassSharstderr  : eName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTestderr  : st), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(stderr  : com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTystderr  : peNameTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipstderr  : JavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(comstderr  : .squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squarestderr  : up.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.stderr  : squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTeststderr  : ), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.Tystderr  : peSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.stderr  : TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squarstderr  : eup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTystderr  : peMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wistderr  : ldcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javstderr  : apoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getTypeVarstderr  : iableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squarestderr  : up.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.imstderr  : portStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.dstderr  : uplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSstderr  : pecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.sstderr  : quareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typstderr  : eSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), cstderr  : om.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), stderr  : com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddstderr  : ition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTstderr  : est), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConfstderr  : lict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecstderr  : Test.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTestderr  : st), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTeststderr  : .overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), comstderr  : .squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), costderr  : m.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squarstderr  : eup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.Tystderr  : peSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotatstderr  : ionToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javastderr  : poet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squstderr  : areup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javastderr  : poet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squastderr  : reup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapostderr  : et.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.stderr  : javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.jastderr  : vapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileRstderr  : eadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayTypestderr  : (com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[31], mutator=org.pitest.mutationtstderr  : est.engine.gregor.mutators.InlineConstantMutator], filename=ClassName.java, block=35, lineNumber=144, description=Substituted 1 with 0, testsInOrder=[com.squareup.javapoet.ClassNameTest.fromClassRejectionTypes(com.squareup.javapoet.ClassNameTest), com.squastderr  : reup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest)stderr  : , com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTeststderr  : .danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squstderr  : areup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.stderr  : TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equastderr  : lsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTeststderr  : ), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squarestderr  : up.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), comstderr  : .squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTstderr  : est.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedstderr  : Type(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNstderr  : ameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareupstderr  : .javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.stderr  : javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annotatstderr  : edTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTesstderr  : t.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoetstderr  : .AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Jstderr  : avaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoestderr  : t.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareustderr  : p.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest),stderr  :  com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), cstderr  : om.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTystderr  : peMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTeststderr  : .annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Javastderr  : FileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.jstderr  : avapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExstderr  : ample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNastderr  : meTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.jstderr  : avapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecstderr  : Test.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWstderr  : ritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(comstderr  : .squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecstderr  : Test.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfacestderr  : Extends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.stderr  : multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpestderr  : cTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTstderr  : est), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSstderr  : pecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.sstderr  : quareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squarstderr  : eup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squastderr  : reup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamistderr  : cArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(costderr  : m.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.sstderr  : quareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTeststderr  : ), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariastderr  : ble(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.stderr  : squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirrostderr  : r(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoetstderr  : .TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=<init>, methodDesc=(Ljava/lang/String;Lcom/squareup/javapoet/ClassName;Ljava/lang/String;Ljava/util/List;)V], indstderr  : exes=[38], mutator=org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=2, lineNumber=58, description=removed call to java/lang/StringBuilder::toString, testsInOrder=[com.squareup.javapoet.ClassNameTest.cstderr  : lassNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), comstderr  : .squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javstderr  : apoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annstderr  : otatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestderr  : stedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squstderr  : areup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypstderr  : eNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapostderr  : et.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTeststderr  : .annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.sqstderr  : uareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squstderr  : areup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.Astderr  : nnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTeststderr  : ), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarastderr  : rgsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFilestderr  : Test), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annostderr  : tatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.stderr  : squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), cstderr  : om.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(comstderr  : .squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.jstderr  : avapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.sstderr  : quareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaulstderr  : tAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squarstderr  : eup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNamstderr  : eTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=withoutAnnotations, methodDesc=()Lcom/squareup/javapoet/ClassName;], indexes=[5], mutator=org.pitest.mutationteststderr  : .engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE], filename=ClassName.java, block=7, lineNumber=68, description=removed conditional - replaced equality check with false, testsInOrder=[com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationstderr  : sOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnstderr  : otationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConfstderr  : lictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoestderr  : t.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTeststderr  : ), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squarstderr  : eup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importstderr  : StaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.jastderr  : vapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(stderr  : com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTesstderr  : t.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareupstderr  : .javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpstderr  : ecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpstderr  : ecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpestderr  : cTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.sqstderr  : uareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdstderr  : ering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapostderr  : et.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleIstderr  : nterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.stderr  : AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.FileReadingTest.compileJavaFilstderr  : e(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=stderr  : NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=isAnnotated, methodDesc=()Z], indexes=[12], mutator=org.pitest.mutationtest.engine.gregor.mutators.RemoveConditiostderr  : nalMutator_EQUAL_IF], filename=ClassName.java, block=14, lineNumber=76, description=removed conditional - replaced equality check with true, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTesstderr  : t), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(stderr  : com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.Classtderr  : sNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTeststderr  : ), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Tystderr  : peNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOstderr  : nAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.stderr  : TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexestderr  : d(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.Anstderr  : notatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFstderr  : ormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypestderr  : NameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.jstderr  : avapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTystderr  : pe(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrstderr  : ayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest),stderr  :  com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annotatedstderr  : TypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictstderr  : ingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.defaultPackageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest),stderr  :  com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.costderr  : nflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.sstderr  : quareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFilstderr  : eTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(cstderr  : om.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squastderr  : reup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferenstderr  : cesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squarstderr  : eup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getArrastderr  : yTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTesstderr  : t.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javastderr  : poet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest),stderr  :  com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoestderr  : t.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squastderr  : reup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javastderr  : poet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwicestderr  : (com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.paramstderr  : eterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.Javastderr  : FileTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassstderr  : ToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javstderr  : apoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTestderr  : st.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squarestderr  : up.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.jstderr  : avapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatchstderr  : (com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilistderr  : neStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest),stderr  :  com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.mstderr  : ethodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), stderr  : com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoestderr  : t.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intstderr  : ersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.stderr  : overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.stderr  : MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethstderr  : ods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.empstderr  : tyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squastderr  : reup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.jstderr  : avapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.Annotatstderr  : ionSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javstderr  : apoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squastderr  : reup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squstderr  : areup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squarstderr  : eup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirstderr  : ror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.jstderr  : avapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirrorstderr  : (com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpestderr  : cTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), stderr  : com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=topLevelClassName, methodDesc=()Lcom/squareup/javapoet/ClassName;], indexes=[5], mutator=org.pitest.mutationtest.stderr  : engine.gregor.mutators.NegateConditionalsMutator], filename=ClassName.java, block=19, lineNumber=100, description=negated conditional, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), costderr  : m.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.sqstderr  : uareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTstderr  : est.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), comstderr  : .squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNamestderr  : Test.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotstderr  : atedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNastderr  : meTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.stderr  : squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.Annotatestderr  : dTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormatsstderr  : (com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTestderr  : st), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoestderr  : t.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(comstderr  : .squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayTypestderr  : (com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), com.sstderr  : quareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNastderr  : meTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.classAndSupercstderr  : lassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTestderr  : st), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapostderr  : et.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImporstderr  : tsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareustderr  : p.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTeststderr  : .annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Typesstderr  : Test.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatstderr  : edTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : sTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTesstderr  : t.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTstderr  : est), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.Tystderr  : pesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormstderr  : atsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.sstderr  : quareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapostderr  : et.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNamstderr  : eTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javastderr  : poet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImstderr  : plementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest),stderr  :  com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTesstderr  : t.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(stderr  : com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overstderr  : rideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multstderr  : ipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squastderr  : reup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.jstderr  : avapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squarstderr  : eup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.mustderr  : ltilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest)stderr  : , com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(stderr  : com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlstderr  : ock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.listderr  : neWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymoustderr  : sClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Annotatiostderr  : nSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.sstderr  : quareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squarestderr  : up.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTstderr  : est), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizestderr  : dTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTeststderr  : ), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parastderr  : meterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.stderr  : squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTystderr  : pes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.cstderr  : lassNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.Annotatstderr  : ionSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[13], mutator=org.pitest.mutationtstderr  : est.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF], filename=ClassName.java, block=32, lineNumber=143, description=removed conditional - replaced equality check with true, testsInOrder=[com.squareup.javapoet.ClassNameTest.fromClassRejectionTypesstderr  : (com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflstderr  : ectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypstderr  : eNameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassNastderr  : me(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareupstderr  : .javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNamstderr  : eTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamstderr  : edArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.stderr  : TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.generstderr  : icType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNamestderr  : Test), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Anstderr  : notatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annostderr  : tatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareustderr  : p.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareupstderr  : .javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.Annotastderr  : tedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.addAnnotationDisallowsNull(com.squareup.javapoet.TypeSpecTest), com.squareupstderr  : .javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.singlestderr  : Import(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.Javstderr  : aFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFstderr  : ieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecstderr  : Test.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoestderr  : t.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoestderr  : t.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareupstderr  : .javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.jastderr  : vapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticFostderr  : rCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest)stderr  : , com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.jstderr  : avapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoestderr  : t.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpestderr  : cTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationstderr  : sAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squarestderr  : up.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(cstderr  : om.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTstderr  : est.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest),stderr  :  com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopystderr  : DefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTstderr  : est), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAdditistderr  : on(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTestderr  : st.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapostderr  : et.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapostderr  : et.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest)stderr  : , com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTstderr  : ypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoestderr  : t.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.Annotatstderr  : ionSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSustderr  : bclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.jstderr  : avapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javstderr  : apoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoetstderr  : .TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.sstderr  : quareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirrorstderr  : (com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squastderr  : reup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squarestderr  : up.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesEclipseTest.arrayType(costderr  : m.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=isAnnotated, methodDesc=()Z], indexes=[15], mutator=org.pitest.mutationtest.engine.gregor.mutators.InlineConstantstderr  : Mutator], filename=ClassName.java, block=15, lineNumber=76, description=Substituted 1 with 0, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNastderr  : meFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squarstderr  : eup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareupstderr  : .javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndstderr  : HashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeNastderr  : me(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.Astderr  : nnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTstderr  : est.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squstderr  : areup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Typstderr  : eNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), costderr  : m.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNstderr  : ameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedTystderr  : pe(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest)stderr  : , com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTstderr  : est), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.joiningWitstderr  : hPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squstderr  : areup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTesstderr  : t), com.squareup.javapoet.JavaFileTest.defaultPackageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingstderr  : AnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFistderr  : leTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflstderr  : ictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.jastderr  : vapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareustderr  : p.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squstderr  : areup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), costderr  : m.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoestderr  : t.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), cstderr  : om.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.stderr  : TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.Tstderr  : ypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizstderr  : edTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wstderr  : ildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapstderr  : oet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFilestderr  : Test.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squarstderr  : eup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.astderr  : nnotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), cstderr  : om.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndenstderr  : t(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.Tystderr  : peSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpestderr  : cTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfacestderr  : Addition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tystderr  : peSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), stderr  : com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModistderr  : fiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpstderr  : ecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.jstderr  : avapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParametstderr  : ers(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecstderr  : Test.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.sqstderr  : uareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(stderr  : com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tystderr  : peSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSstderr  : pecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSstderr  : pecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squastderr  : reup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsOstderr  : bject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.stderr  : javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsTystderr  : pe(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), costderr  : m.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.stderr  : squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.sstderr  : quareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaulstderr  : tAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=<init>, methodDesc=(Ljava/lang/String;Lcom/squareup/javapoet/ClassName;Ljava/lang/String;Ljava/util/List;)V], indstderr  : exes=[58], mutator=org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator], filename=ClassName.java, block=5, lineNumber=59, description=replaced call to java/lang/StringBuilder::append with receiver, testsInOrder=[com.squareup.jastderr  : vapoet.ClassNameTest.bestGuessNonAscii(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapostderr  : et.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.beststderr  : GuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTesstderr  : t), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.isPrimitive(com.squareup.javastderr  : poet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javastderr  : poet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest),stderr  :  com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Typestderr  : NameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAstderr  : nnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.Tystderr  : peNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(stderr  : com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.Annostderr  : tatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentForstderr  : mats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNastderr  : meTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javstderr  : apoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTypestderr  : (com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArraystderr  : Type(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), cstderr  : om.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTystderr  : peNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictinstderr  : gAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.defaultPackageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classNameFactories(com.squareup.javapoet.TypeSpecTest), com.squarestderr  : up.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWstderr  : ithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javastderr  : poet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarstderr  : argsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFilstderr  : eTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.jastderr  : vapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.Javstderr  : aFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoestderr  : t.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.parameterizedType(comstderr  : .squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.jstderr  : avapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(cstderr  : om.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(cstderr  : om.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(cstderr  : om.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTestderr  : st.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), cstderr  : om.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.Annotatstderr  : edTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javstderr  : apoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.Typstderr  : esTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squstderr  : areup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.parameterToStstderr  : ring(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTeststderr  : ), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToStringstderr  : (com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javastderr  : poet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDstderr  : oesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.Typstderr  : eSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberNamstderr  : e(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typstderr  : eSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squarestderr  : up.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), cstderr  : om.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifstderr  : iersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest),stderr  :  com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.sstderr  : quareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSstderr  : pecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParametestderr  : rs(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTstderr  : est.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTeststderr  : ), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typstderr  : eSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpstderr  : ecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpstderr  : ecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squarstderr  : eup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObstderr  : ject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.jstderr  : avapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsTypstderr  : e(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), comstderr  : .squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.sstderr  : quareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.sqstderr  : uareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultstderr  : Annotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[72], mutator=org.pitest.mustderr  : tationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=52, lineNumber=184, description=removed call to java/lang/String::substring, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAscii(com.squareup.javapostderr  : et.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.Classstderr  : NameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.sstderr  : quareup.javapoet.TypeNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[114], mutator=org.pitest.mutationstderr  : test.engine.gregor.mutators.NegateConditionalsMutator], filename=ClassName.java, block=40, lineNumber=155, description=negated conditional, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squarstderr  : eup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.Annotastderr  : tedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerSstderr  : taticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javastderr  : poet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squarestderr  : up.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNamestderr  : Test.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.stderr  : squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnstderr  : otatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.stderr  : CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapstderr  : oet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTeststderr  : .annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.Annostderr  : tatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.stderr  : AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.Annotatestderr  : dTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTesstderr  : t), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Javstderr  : aFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squarstderr  : eup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.Typestderr  : SpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.sstderr  : quareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.jstderr  : avapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.stderr  : squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.stderr  : squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTesstderr  : t), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javastderr  : poet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsTypestderr  : (com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nastderr  : meFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTesstderr  : t.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapostderr  : et.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwicstderr  : e(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.stderr  : squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTstderr  : est), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverstderr  : rideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoestderr  : t.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplementsstderr  : (com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.ovestderr  : rrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.mulstderr  : tipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), comstderr  : .squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), comstderr  : .squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.Annstderr  : otationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersstderr  : WorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javastderr  : poet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.stderr  : javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(stderr  : com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.sstderr  : quareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclstderr  : ipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParametstderr  : erizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipsstderr  : eTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSupestderr  : rType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesEclipseTstderr  : est.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=isAnnotated, methodDesc=()Z], indexes=[12], mutator=org.pitest.mutationtest.engine.gregor.mutators.RemoveConditiostderr  : nalMutator_EQUAL_ELSE], filename=ClassName.java, block=14, lineNumber=76, description=removed conditional - replaced equality check with false, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNamestderr  : Test), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClastderr  : ss(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.Cstderr  : lassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTstderr  : est), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoetstderr  : .TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotatiostderr  : nsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapostderr  : et.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndstderr  : exed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoetstderr  : .AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferestderr  : ntFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTstderr  : ypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareustderr  : p.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatestderr  : dType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalstderr  : ArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTesstderr  : t), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annotastderr  : tedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflstderr  : ictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.defaultPackageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTesstderr  : t), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTeststderr  : .conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), costderr  : m.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Javastderr  : FileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirsstderr  : t(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.sstderr  : quareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassRefestderr  : rencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.sqstderr  : uareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getAstderr  : rrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Typesstderr  : Test.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.jstderr  : avapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTesstderr  : t), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javastderr  : poet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.sstderr  : quareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.sqstderr  : uareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.jstderr  : avapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwstderr  : ice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.pastderr  : rameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.Jstderr  : avaFileTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClstderr  : assToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareupstderr  : .javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.stderr  : javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCastderr  : tch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multstderr  : ilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTesstderr  : t.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javastderr  : poet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.stderr  : intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTestderr  : st.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapostderr  : et.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMstderr  : ethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.stderr  : emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.sstderr  : quareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.Annostderr  : tationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.stderr  : javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.sstderr  : quareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.stderr  : squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.sqstderr  : uareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypestderr  : Mirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareustderr  : p.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirstderr  : ror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.Typestderr  : SpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTeststderr  : ), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=withoutAnnotations, methodDesc=()Lcom/squareup/javapoet/ClassName;], indexes=[36], mutator=org.pitest.mutationtesstderr  : t.engine.gregor.mutators.ConstructorCallMutator], filename=ClassName.java, block=11, lineNumber=72, description=removed call to com/squareup/javapoet/ClassName::<init>, testsInOrder=[com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedstderr  : NestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnstderr  : notatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.Typestderr  : SpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[155], mutator=org.pitest.mutationstderr  : test.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=44, lineNumber=162, description=removed call to com/squareup/javapoet/ClassName::nestedClass, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squstderr  : areup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annostderr  : tatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNesstderr  : tedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squastderr  : reup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypestderr  : NameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoestderr  : t.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.stderr  : annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squstderr  : areup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squastderr  : reup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.Anstderr  : notatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.Annotastderr  : tedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), stderr  : com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFilstderr  : eTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.stderr  : AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTestderr  : st.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squarstderr  : eup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=emit, methodDesc=(Lcom/squareup/javapoet/CodeWriter;)Lcom/squareup/javapoet/CodeWriter;], indexes=[80], mutator=ostderr  : rg.pitest.mutationtest.engine.gregor.mutators.MathMutator], filename=ClassName.java, block=69, lineNumber=248, description=Replaced integer addition with subtraction, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squastderr  : reup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGstderr  : uessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), stderr  : com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squastderr  : reup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest)stderr  : , com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNastderr  : meTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericTstderr  : ype(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockstderr  : Test.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedTypstderr  : e(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameInstderr  : dexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squarstderr  : eup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypstderr  : eNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annotatstderr  : edTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatstderr  : edOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareustderr  : p.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.sstderr  : quareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javastderr  : poet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squstderr  : areup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.Jastderr  : vaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.jastderr  : vapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareustderr  : p.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLstderr  : angImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), comstderr  : .squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypestderr  : NameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapostderr  : et.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTeststderr  : .annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.stderr  : TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoestderr  : t.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javstderr  : apoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCstderr  : razyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareustderr  : p.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldTostderr  : String(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Annotatestderr  : dTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squstderr  : areup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.astderr  : nnotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), cstderr  : om.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnstderr  : otation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.stderr  : TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrstderr  : ideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javastderr  : poet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multistderr  : pleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.jstderr  : avapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.mulstderr  : tilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest),stderr  :  com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlostderr  : ck(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.linstderr  : eWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.sstderr  : quareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousstderr  : Class(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Annotationstderr  : SpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.sqstderr  : uareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareustderr  : p.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTestderr  : st), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedstderr  : TypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest)stderr  : , com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.paramstderr  : eterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.sstderr  : quareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypstderr  : es(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.clstderr  : assNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.Annotatistderr  : onSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=enclosingClasses, methodDesc=()Ljava/util/List;], indexes=[5], mutator=org.pitest.mutationtest.engine.gregor.mutastderr  : tors.ConstructorCallMutator], filename=ClassName.java, block=74, lineNumber=273, description=removed call to java/util/ArrayList::<init>, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest),stderr  :  com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(comstderr  : .squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNastderr  : meTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), stderr  : com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNstderr  : ameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnstderr  : notatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.Typstderr  : eNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(cstderr  : om.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.Annotstderr  : atedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormstderr  : ats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNamstderr  : eTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javastderr  : poet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(stderr  : com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayTstderr  : ype(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), costderr  : m.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypstderr  : eNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingstderr  : Annotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.defaultPackageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), costderr  : m.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflstderr  : ictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squastderr  : reup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTestderr  : st.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.stderr  : squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareustderr  : p.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesstderr  : Self(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareupstderr  : .javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getArrayTystderr  : peMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTestderr  : st.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wstderr  : ildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoestderr  : t.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), costderr  : m.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.Tstderr  : ypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareustderr  : p.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareupstderr  : .javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoestderr  : t.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(costderr  : m.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.parametestderr  : rToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFilstderr  : eTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToSstderr  : tring(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapostderr  : et.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.stderr  : annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.stderr  : javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javastderr  : poet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(costderr  : m.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineSstderr  : trings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), costderr  : m.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methstderr  : odThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), comstderr  : .squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.Mstderr  : ethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squstderr  : areup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersstderr  : ectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.ovestderr  : rrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.Metstderr  : hodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethodsstderr  : (com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyAstderr  : rray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareustderr  : p.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javastderr  : poet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTestderr  : st.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.Annotationstderr  : SpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapostderr  : et.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareustderr  : p.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squarestderr  : up.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareupstderr  : .javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorstderr  : (com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javastderr  : poet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(costderr  : m.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTestderr  : st.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), comstderr  : .squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indestderr  : xes=[32], mutator=org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=59, lineNumber=200, description=removed call to com/squareup/javapoet/ClassName::nestedClass, testsInOrder=[com.squareup.javapoet.Clastderr  : ssNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.jstderr  : avapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(comstderr  : .squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFilestderr  : Test.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.Jstderr  : avaFileTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymoustderr  : sInnerClass(com.squareup.javapoet.TypeSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=simpleNames, methodDesc=()Ljava/util/List;], indexes=[16], mutator=org.pitest.mutationtest.engine.gregor.mutatorsstderr  : .NonVoidMethodCallMutator], filename=ClassName.java, block=28, lineNumber=113, description=removed call to com/squareup/javapoet/ClassName::enclosingClassName, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareupstderr  : .javapoet.ClassNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictstderr  : ingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest),stderr  :  com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamestderr  : sConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Annotatiostderr  : nSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(costderr  : m.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=nestedClass, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[10], mutator=org.pitest.stderr  : mutationtest.engine.gregor.mutators.NullReturnValsMutator], filename=ClassName.java, block=30, lineNumber=133, description=replaced return value with null for com/squareup/javapoet/ClassName::nestedClass, testsInOrder=[com.squareup.javapoet.ClassNameTest.cstderr  : lassNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), comstderr  : .squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javstderr  : apoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annstderr  : otatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestderr  : stedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squstderr  : areup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypstderr  : eNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapostderr  : et.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTeststderr  : .annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.sqstderr  : uareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squstderr  : areup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.Astderr  : nnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTeststderr  : ), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarastderr  : rgsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFilestderr  : Test), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annostderr  : tatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.stderr  : squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), cstderr  : om.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(comstderr  : .squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.jstderr  : avapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.sstderr  : quareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaulstderr  : tAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squarstderr  : eup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNamstderr  : eTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[46], mutator=org.pitest.mutationtstderr  : est.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF], filename=ClassName.java, block=36, lineNumber=145, description=removed conditional - replaced equality check with true, testsInOrder=[com.squareup.javapoet.ClassNameTest.fromClassRejectionTypesstderr  : (com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflstderr  : ectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypstderr  : eNameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassNastderr  : me(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareupstderr  : .javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNamstderr  : eTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamstderr  : edArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.stderr  : TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.generstderr  : icType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNamestderr  : Test), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Anstderr  : notatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annostderr  : tatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareustderr  : p.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareupstderr  : .javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.Annotastderr  : tedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTstderr  : ypeNameTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArstderr  : rayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.stderr  : AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squstderr  : areup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbostderr  : x(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annostderr  : tationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardstderr  : ExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTesstderr  : t.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), comstderr  : .squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTesstderr  : t), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlocstderr  : kAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squastderr  : reup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSstderr  : pecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpestderr  : cTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.Annostderr  : tationSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerCstderr  : lassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.sqstderr  : uareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoestderr  : t.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpstderr  : ecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.Typstderr  : eSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAstderr  : nnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotstderr  : atedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typstderr  : eVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squastderr  : reup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdestderr  : ring(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareustderr  : p.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), stderr  : com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockIstderr  : nRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(cstderr  : om.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTestderr  : st.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), cstderr  : om.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsTypstderr  : e(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squarstderr  : eup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.jstderr  : avapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=emit, methodDesc=(Lcom/squareup/javapoet/CodeWriter;)Lcom/squareup/javapoet/CodeWriter;], indexes=[72], mutator=ostderr  : rg.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=69, lineNumber=247, description=removed call to java/lang/String::substring, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simplestderr  : Class(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.Classstderr  : NameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.Clstderr  : assNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimstderr  : itive(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.Annotatestderr  : dTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Astderr  : nnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenstderr  : ericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javastderr  : poet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosistderr  : ngAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlstderr  : ockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementstderr  : Type(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoestderr  : t.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.jastderr  : vapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNastderr  : meTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.jostderr  : in(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNastderr  : meTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), comstderr  : .squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencestderr  : dClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squarestderr  : up.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(cstderr  : om.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTeststderr  : ), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFilestderr  : Test.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.Javastderr  : FileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoetstderr  : .AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.sstderr  : quareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoestderr  : t.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squastderr  : reup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.sqstderr  : uareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(costderr  : m.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.imstderr  : portStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoestderr  : t.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticOnstderr  : ce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpstderr  : ecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestestderr  : dClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.stderr  : TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.Tystderr  : peSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCstderr  : opyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squastderr  : reup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enstderr  : umImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Methodstderr  : SpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(comstderr  : .squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(stderr  : com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBoustderr  : nds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tystderr  : peSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.Mestderr  : thodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstderr  : structorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTeststderr  : .staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.Tystderr  : peSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpstderr  : ecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatemenstderr  : tWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWitstderr  : hImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTeststderr  : ), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.stderr  : TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.gestderr  : tParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.Typstderr  : esEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclstderr  : ipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipstderr  : seTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipsstderr  : eTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Clstderr  : assNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javstderr  : apoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=emit, methodDesc=(Lcom/squareup/javapoet/CodeWriter;)Lcom/squareup/javapoet/CodeWriter;], indexes=[79], mutator=ostderr  : rg.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator], filename=ClassName.java, block=69, lineNumber=248, description=Substituted 1 with 0, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoestderr  : t.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForStrinstderr  : g_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareupstderr  : .javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoestderr  : t.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squarestderr  : up.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withostderr  : utAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squastderr  : reup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeForstderr  : matCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squarestderr  : up.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedstderr  : WithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoetstderr  : .AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), stderr  : com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTestderr  : st.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultistderr  : dimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.Cstderr  : odeBlockTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javastderr  : poet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFilstderr  : eTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapostderr  : et.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.cstderr  : onflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFstderr  : ileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.Jstderr  : avaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWistderr  : thConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.jastderr  : vapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annstderr  : otatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTeststderr  : .parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTystderr  : peParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTesstderr  : t.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wistderr  : ldcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapostderr  : et.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest)stderr  : , com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTstderr  : est), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWstderr  : orks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.Jstderr  : avaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.sstderr  : quareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTesstderr  : t.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAnstderr  : dJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.stderr  : javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.stderr  : squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecstderr  : Test.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCostderr  : pyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpestderr  : cTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddistderr  : tion(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSstderr  : pecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.Typestderr  : SpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.stderr  : TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatemstderr  : ent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareustderr  : p.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squarstderr  : eup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(costderr  : m.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.sqstderr  : uareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.refstderr  : lectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapstderr  : oet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.Tstderr  : ypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squstderr  : areup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(cstderr  : om.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squarestderr  : up.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedTypestderr  : (com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javastderr  : poet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squarstderr  : eup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTstderr  : ypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)]stderr  : , isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=annotated, methodDesc=(Ljava/util/List;)Lcom/squareup/javapoet/ClassName;], indexes=[16], mutator=org.pitest.mutastderr  : tiontest.engine.gregor.mutators.ConstructorCallMutator], filename=ClassName.java, block=6, lineNumber=64, description=removed call to com/squareup/javapoet/ClassName::<init>, testsInOrder=[com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnstderr  : otatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingstderr  : Type(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareustderr  : p.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTestderr  : st.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedstderr  : Type(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTesstderr  : t), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.stderr  : squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javstderr  : apoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.jstderr  : avapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatestderr  : d(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squarstderr  : eup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classtderr  : sImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareustderr  : p.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapstderr  : oet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapostderr  : et.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEcstderr  : lipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadistderr  : ngTest.compileJavaFile(com.squareup.javapoet.FileReadingTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[66], mutator=org.pitest.mutationtstderr  : est.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=38, lineNumber=148, description=removed call to java/lang/Class::isAnonymousClass, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapostderr  : et.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(stderr  : com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.stderr  : javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedstderr  : NestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapostderr  : et.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), costderr  : m.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.jstderr  : avapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNamestderr  : Test.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFostderr  : rmats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNstderr  : ameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.jastderr  : vapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTypstderr  : e(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrastderr  : yType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(costderr  : m.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.jstderr  : avapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.supercstderr  : lassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest)stderr  : , com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.jstderr  : avapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.Jstderr  : avaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squarestderr  : up.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squarestderr  : up.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.sstderr  : quareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromRstderr  : eflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Tstderr  : ypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squarstderr  : eup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.sstderr  : quareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStstderr  : aticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.Jstderr  : avaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.stderr  : AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymoustderr  : sClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), cstderr  : om.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(comstderr  : .squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecstderr  : Test.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringstderr  : Literal(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareupstderr  : .javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForIntestderr  : rfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squarestderr  : up.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSstderr  : pecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareupstderr  : .javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareupstderr  : .javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCostderr  : de(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpstderr  : ecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.jastderr  : vapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.natstderr  : iveMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTstderr  : est.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), cstderr  : om.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squstderr  : areup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Annotatiostderr  : nSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javstderr  : apoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(costderr  : m.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoetstderr  : .TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.sstderr  : quareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.Tstderr  : ypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljavax/lang/model/element/TypeElement;)Lcom/squareup/javapoet/ClassName;], indexes=[25], mutatorstderr  : =org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=61, lineNumber=210, description=removed call to javax/lang/model/element/Element::accept, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFstderr  : romTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTesstderr  : t.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.jstderr  : avapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.MethodSpecTeststderr  : .overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareustderr  : p.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defastderr  : ultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.Mstderr  : ethodSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.Typesstderr  : EclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.jastderr  : vapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javstderr  : apoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squstderr  : areup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[95], mutator=org.pitest.mustderr  : tationtest.engine.gregor.mutators.NegateConditionalsMutator], filename=ClassName.java, block=53, lineNumber=185, description=negated conditional, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAscii(com.squareup.javapoet.ClassNameTest), com.stderr  : squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForStstderr  : ring_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNastderr  : meTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[15], mutator=org.pitest.mustderr  : tationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=46, lineNumber=176, description=removed call to java/lang/Character::isLowerCase, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAscii(com.squareup.jstderr  : avapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.stderr  : ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(stderr  : com.squareup.javapoet.TypeNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[131], mutator=org.pitest.mutationstderr  : test.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=42, lineNumber=158, description=removed call to java/lang/String::substring, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.Clstderr  : assNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.sstderr  : quareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapstderr  : oet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestestderr  : dType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.Tystderr  : peNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squstderr  : areup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapostderr  : et.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.stderr  : withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormatsstderr  : (com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTestderr  : st), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoestderr  : t.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(comstderr  : .squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayTypestderr  : (com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squstderr  : areup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapostderr  : et.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), costderr  : m.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassRstderr  : eferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), comstderr  : .squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFistderr  : leTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.jastderr  : vapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.jastderr  : vapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squarestderr  : up.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflecstderr  : tType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTstderr  : est.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.jstderr  : avapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squarestderr  : up.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNstderr  : one(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFistderr  : leTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.Annotstderr  : atedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClasstderr  : sToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.sqstderr  : uareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squastderr  : reup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.stderr  : overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiterstderr  : al(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfacestderr  : Members(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javastderr  : poet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javastderr  : poet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(costderr  : m.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTesstderr  : t.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoestderr  : t.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMestderr  : thods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.estderr  : mptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.sqstderr  : uareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareupstderr  : .javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecstderr  : Test.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoetstderr  : .MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squstderr  : areup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.Typestderr  : sEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squarestderr  : up.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEstderr  : clipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareupstderr  : .javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=reflectionName, methodDesc=()Ljava/lang/String;], indexes=[28], mutator=org.pitest.mutationtest.engine.gregor.mutstderr  : ators.NegateConditionalsMutator], filename=ClassName.java, block=24, lineNumber=107, description=negated conditional, testsInOrder=[com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest)], isInFinallyBlock=false, poison=NORstderr  : MAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=emit, methodDesc=(Lcom/squareup/javapoet/CodeWriter;)Lcom/squareup/javapoet/CodeWriter;], indexes=[63], mutator=ostderr  : rg.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator], filename=ClassName.java, block=68, lineNumber=246, description=negated conditional, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javastderr  : poet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForStstderr  : ring_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squarstderr  : eup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javastderr  : poet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squstderr  : areup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.wistderr  : thoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.sstderr  : quareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typestderr  : FormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squstderr  : areup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUstderr  : sedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapstderr  : oet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTeststderr  : ), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNamstderr  : eTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMustderr  : ltidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoestderr  : t.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.jstderr  : avapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Javastderr  : FileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.defaultPackageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapostderr  : et.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoestderr  : t.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.Javstderr  : aFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareupstderr  : .javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflistderr  : ctingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFistderr  : leTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.stderr  : superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFilstderr  : eTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.stderr  : TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareupstderr  : .javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.stderr  : javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), cstderr  : om.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), stderr  : com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javstderr  : apoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(comstderr  : .squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.defaulstderr  : tPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpestderr  : cTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(stderr  : com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.stderr  : importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tstderr  : ypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squarstderr  : eup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTestderr  : st.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnoredstderr  : (com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.jastderr  : vapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiterstderr  : al(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typstderr  : eSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapostderr  : et.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoestderr  : t.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(comstderr  : .squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymostderr  : usInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadocstderr  : (com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoetstderr  : .TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoestderr  : t.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.sstderr  : quareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpstderr  : ecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Annotstderr  : ationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpstderr  : ecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuildstderr  : er(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareupstderr  : .javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareupstderr  : .javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest),stderr  :  com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipstderr  : seTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typstderr  : eVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipsstderr  : eTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTystderr  : peVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTeststderr  : ), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.gstderr  : etArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareupstderr  : .javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.Tystderr  : pesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[30], mutator=org.pitest.mutationtstderr  : est.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF], filename=ClassName.java, block=34, lineNumber=144, description=removed conditional - replaced equality check with true, testsInOrder=[com.squareup.javapoet.ClassNameTest.fromClassRejectionTypesstderr  : (com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflstderr  : ectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypstderr  : eNameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassNastderr  : me(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareupstderr  : .javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNamstderr  : eTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamstderr  : edArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.stderr  : TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.generstderr  : icType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNamestderr  : Test), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Anstderr  : notatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annostderr  : tatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareustderr  : p.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareupstderr  : .javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.Annotastderr  : tedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTstderr  : ypeNameTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArstderr  : rayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.stderr  : AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squstderr  : areup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbostderr  : x(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annostderr  : tationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardstderr  : ExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTesstderr  : t.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), comstderr  : .squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTesstderr  : t), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlocstderr  : kAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squastderr  : reup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSstderr  : pecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpestderr  : cTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.Annostderr  : tationSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerCstderr  : lassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.sqstderr  : uareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoestderr  : t.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpstderr  : ecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.Typstderr  : eSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAstderr  : nnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotstderr  : atedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typstderr  : eVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squastderr  : reup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdestderr  : ring(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareustderr  : p.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), stderr  : com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockIstderr  : nRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(cstderr  : om.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTestderr  : st.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), cstderr  : om.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsTypstderr  : e(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squarstderr  : eup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.jstderr  : avapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=packageName, methodDesc=()Ljava/lang/String;], indexes=[5], mutator=org.pitest.mutationtest.engine.gregor.mutatorstderr  : s.ReturnValsMutator], filename=ClassName.java, block=17, lineNumber=84, description=mutated return of Object value for com/squareup/javapoet/ClassName::packageName to ( if (x != null) null else throw new RuntimeException ), testsInOrder=[com.squareup.javapstderr  : oet.ClassNameTest.bestGuessNonAscii(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.stderr  : ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuestderr  : ssForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squastderr  : reup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javstderr  : apoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTstderr  : est), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareustderr  : p.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squstderr  : areup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerCstderr  : lassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareupstderr  : .javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.estderr  : qualsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squstderr  : areup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.Annotatedstderr  : TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTstderr  : ypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annotastderr  : tedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javastderr  : poet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTestderr  : st), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.defaultPackageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapstderr  : oet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(cstderr  : om.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypstderr  : eNameTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoetstderr  : .JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javastderr  : poet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareupstderr  : .javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTesstderr  : t), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareustderr  : p.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest),stderr  :  com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.Tstderr  : ypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoetstderr  : .TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirrstderr  : or(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSupstderr  : erType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFistderr  : leTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.imporstderr  : tStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapostderr  : et.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.annotationsstderr  : InAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareustderr  : p.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squastderr  : reup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTeststderr  : .annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), costderr  : m.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTeststderr  : .multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapostderr  : et.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squarestderr  : up.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInstderr  : terfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squastderr  : reup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.jstderr  : avapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annstderr  : otatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tystderr  : peSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tstderr  : ypeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.sqstderr  : uareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.sqstderr  : uareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWstderr  : ithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.sqstderr  : uareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTeststderr  : .multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), stderr  : com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.destderr  : faultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapstderr  : oet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.stderr  : squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.Tstderr  : ypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squstderr  : areup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareupstderr  : .javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.jstderr  : avapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.jastderr  : vapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.sqstderr  : uareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotatiostderr  : n(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=reflectionName, methodDesc=()Ljava/lang/String;], indexes=[13], mutator=org.pitest.mutationtest.engine.gregor.mutstderr  : ators.NonVoidMethodCallMutator], filename=ClassName.java, block=23, lineNumber=106, description=removed call to com/squareup/javapoet/ClassName::reflectionName, testsInOrder=[com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNamstderr  : eTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[147], mutator=org.pitest.mutationstderr  : test.engine.gregor.mutators.NullReturnValsMutator], filename=ClassName.java, block=43, lineNumber=159, description=replaced return value with null for com/squareup/javapoet/ClassName::get, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClasstderr  : s(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTeststderr  : .nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlocstderr  : kTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAstderr  : nnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableNamstderr  : e(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapstderr  : oet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNstderr  : ewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapstderr  : oet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanstderr  : BeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.jastderr  : vapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTstderr  : est), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypestderr  : NameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOutestderr  : rMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestestderr  : dParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithEstderr  : xtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoestderr  : t.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.jstderr  : avapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAdstderr  : dition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(costderr  : m.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicstderr  : TypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrstderr  : orNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStatistderr  : cUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tstderr  : ypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), costderr  : m.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypstderr  : eNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoetstderr  : .JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.stderr  : JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), costderr  : m.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(cstderr  : om.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.stderr  : TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javastderr  : poet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTestderr  : st.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareustderr  : p.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squarstderr  : eup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tystderr  : peSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), stderr  : com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpstderr  : ecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.destderr  : faultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.Typestderr  : SpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.sqstderr  : uareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestestderr  : dClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlistderr  : neIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpestderr  : cTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverystderr  : thing(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.Astderr  : nnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initialistderr  : zersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squarestderr  : up.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashstderr  : Code(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wilstderr  : dcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), stderr  : com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVarstderr  : iableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), costderr  : m.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.Tstderr  : ypeSpecTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=simpleNames, methodDesc=()Ljava/util/List;], indexes=[11], mutator=org.pitest.mutationtest.engine.gregor.mutatorsstderr  : .RemoveConditionalMutator_EQUAL_ELSE], filename=ClassName.java, block=27, lineNumber=112, description=removed conditional - replaced equality check with false, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareupstderr  : .javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.costderr  : nflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest),stderr  :  com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImpostderr  : rtsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.jastderr  : vapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingImportstderr  : s(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.impostderr  : rtStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareupstderr  : .javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFstderr  : ileTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsstderr  : Extends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squstderr  : areup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatestderr  : dValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoestderr  : t.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapostderr  : et.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.stderr  : methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest),stderr  :  com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapstderr  : oet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javastderr  : poet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squarstderr  : eup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.stderr  : indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTstderr  : est.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSstderr  : pecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotastderr  : tion(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.Annstderr  : otationSpecTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 11:14:46 AM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[13], mutator=org.pitest.mutationtstderr  : est.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE], filename=ClassName.java, block=32, lineNumber=143, description=removed conditional - replaced equality check with false, testsInOrder=[com.squareup.javapoet.ClassNameTest.fromClassRejectionTystderr  : pes(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.rstderr  : eflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.Annotatedstderr  : TypeNameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClasstderr  : sName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squarstderr  : eup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypestderr  : NameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multiplestderr  : NamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapostderr  : et.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.gestderr  : nericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNstderr  : ameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoetstderr  : .AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.astderr  : nnotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squastderr  : reup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squarstderr  : eup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.Annstderr  : otatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.addAnnotationDisallowsNull(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.sinstderr  : gleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.stderr  : JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubstderr  : leFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSstderr  : pecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javastderr  : poet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javastderr  : poet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squarstderr  : eup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareupstderr  : .javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStatistderr  : cForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTestderr  : st), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareustderr  : p.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javastderr  : poet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.Typestderr  : SpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatstderr  : ionsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotatiostderr  : n(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpstderr  : ecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareupstderr  : .javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCstderr  : opyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpstderr  : ecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddstderr  : ition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpestderr  : cTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTestderr  : st), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActustderr  : alTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.Annostderr  : tationSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.enumWitstderr  : hSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareustderr  : p.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.stderr  : javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapstderr  : oet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), costderr  : m.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirstderr  : ror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.sstderr  : quareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squstderr  : areup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesEclipseTest.arrayTypestderr  : (com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
\|/-\|/-\|/-\|/-\|/-\|/-\================================================================================
- Timings
================================================================================
> scan classpath : < 1 second
> coverage and dependency analysis : 16 seconds
> build mutation tests : 4 seconds
> run mutation analysis : 34 minutes and 55 seconds
--------------------------------------------------------------------------------
> Total  : 35 minutes and 16 seconds
--------------------------------------------------------------------------------
================================================================================
- Statistics
================================================================================
>> Generated 5551 mutations Killed 4460 (80%)
>> Ran 48544 tests (8.75 tests per mutation)
================================================================================
- Mutators
================================================================================
> org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator
>> Generated 146 Killed 103 (71%)
> KILLED 102 SURVIVED 43 TIMED_OUT 1 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.SwitchMutator
>> Generated 6 Killed 6 (100%)
> KILLED 6 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE
>> Generated 385 Killed 313 (81%)
> KILLED 305 SURVIVED 63 TIMED_OUT 1 NON_VIABLE 7 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 9 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF
>> Generated 32 Killed 28 (88%)
> KILLED 26 SURVIVED 4 TIMED_OUT 2 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.MathMutator
>> Generated 45 Killed 41 (91%)
> KILLED 39 SURVIVED 4 TIMED_OUT 1 NON_VIABLE 1 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator
>> Generated 10 Killed 3 (30%)
> KILLED 3 SURVIVED 5 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 2 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_7
>> Generated 5 Killed 5 (100%)
> KILLED 5 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_6
>> Generated 5 Killed 4 (80%)
> KILLED 4 SURVIVED 1 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator
>> Generated 32 Killed 29 (91%)
> KILLED 29 SURVIVED 3 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator
>> Generated 17 Killed 17 (100%)
> KILLED 15 SURVIVED 0 TIMED_OUT 2 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveIncrementsMutator
>> Generated 13 Killed 13 (100%)
> KILLED 8 SURVIVED 0 TIMED_OUT 5 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_9
>> Generated 2 Killed 2 (100%)
> KILLED 2 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_8
>> Generated 3 Killed 3 (100%)
> KILLED 3 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator
>> Generated 318 Killed 217 (68%)
> KILLED 214 SURVIVED 59 TIMED_OUT 0 NON_VIABLE 3 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 42 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_3
>> Generated 5 Killed 4 (80%)
> KILLED 4 SURVIVED 1 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_2
>> Generated 6 Killed 6 (100%)
> KILLED 6 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator
>> Generated 672 Killed 473 (70%)
> KILLED 466 SURVIVED 195 TIMED_OUT 1 NON_VIABLE 6 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 4 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_5
>> Generated 5 Killed 3 (60%)
> KILLED 3 SURVIVED 2 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator
>> Generated 406 Killed 358 (88%)
> KILLED 352 SURVIVED 20 TIMED_OUT 2 NON_VIABLE 4 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 28 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_4
>> Generated 5 Killed 4 (80%)
> KILLED 4 SURVIVED 1 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator
>> Generated 426 Killed 292 (69%)
> KILLED 290 SURVIVED 84 TIMED_OUT 0 NON_VIABLE 2 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 50 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_1
>> Generated 6 Killed 5 (83%)
> KILLED 5 SURVIVED 1 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator
>> Generated 234 Killed 189 (81%)
> KILLED 185 SURVIVED 6 TIMED_OUT 0 NON_VIABLE 4 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 39 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_0
>> Generated 6 Killed 6 (100%)
> KILLED 6 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_10
>> Generated 2 Killed 2 (100%)
> KILLED 2 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF
>> Generated 393 Killed 312 (79%)
> KILLED 305 SURVIVED 71 TIMED_OUT 2 NON_VIABLE 5 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 10 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE
>> Generated 32 Killed 32 (100%)
> KILLED 32 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator
>> Generated 191 Killed 162 (85%)
> KILLED 162 SURVIVED 29 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator
>> Generated 425 Killed 409 (96%)
> KILLED 401 SURVIVED 6 TIMED_OUT 2 NON_VIABLE 6 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 10 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator
>> Generated 40 Killed 14 (35%)
> KILLED 14 SURVIVED 21 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 5 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator
>> Generated 48 Killed 48 (100%)
> KILLED 48 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator
>> Generated 140 Killed 76 (54%)
> KILLED 75 SURVIVED 56 TIMED_OUT 0 NON_VIABLE 1 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 8 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator
>> Generated 30 Killed 20 (67%)
> KILLED 20 SURVIVED 6 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 4 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator
>> Generated 1460 Killed 1261 (86%)
> KILLED 1234 SURVIVED 111 TIMED_OUT 5 NON_VIABLE 22 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 88 
--------------------------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 35:34 min
[INFO] Finished at: 2018-08-17T11:25:44+02:00
[INFO] Final Memory: 43M/2397M
[INFO] ------------------------------------------------------------------------
