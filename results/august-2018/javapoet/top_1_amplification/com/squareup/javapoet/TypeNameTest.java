package com.squareup.javapoet;


import com.google.common.truth.Truth;
import java.io.Serializable;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import org.junit.Assert;
import org.junit.Test;


public class TypeNameTest {
    protected <E extends Enum<E>> E generic(E[] values) {
        return values[0];
    }

    protected static class TestGeneric<T> {
        class Inner {}

        class InnerGeneric<T2> {}

        static class NestedNonGeneric {}
    }

    protected static TypeNameTest.TestGeneric<String>.Inner testGenericStringInner() {
        return null;
    }

    protected static TypeNameTest.TestGeneric<Integer>.Inner testGenericIntInner() {
        return null;
    }

    protected static TypeNameTest.TestGeneric<Short>.InnerGeneric<Long> testGenericInnerLong() {
        return null;
    }

    protected static TypeNameTest.TestGeneric<Short>.InnerGeneric<Integer> testGenericInnerInt() {
        return null;
    }

    protected static TypeNameTest.TestGeneric.NestedNonGeneric testNestedNonGeneric() {
        return null;
    }

    @Test(timeout = 10000)
    public void genericType() throws Exception {
        Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
        TypeName o_genericType__4 = TypeName.get(recursiveEnum.getReturnType());
        Assert.assertFalse(((ClassName) (o_genericType__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType__4)).isPrimitive());
        TypeName o_genericType__6 = TypeName.get(recursiveEnum.getGenericReturnType());
        Assert.assertFalse(((TypeVariableName) (o_genericType__6)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_genericType__6)).isAnnotated());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType__6)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType__6)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType__6)).isPrimitive());
        TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        TypeName o_genericType__11 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (o_genericType__11)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_genericType__11)).isAnnotated());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType__11)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType__11)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType__11)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_genericType__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType__4)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_genericType__6)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_genericType__6)).isAnnotated());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType__6)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType__6)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType__6)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void genericType_rv92801() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_15016 = new AnnotationSpec[]{  };
        Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
        TypeName __DSPOT_invoc_4 = TypeName.get(recursiveEnum.getReturnType());
        TypeName o_genericType_rv92801__9 = TypeName.get(recursiveEnum.getGenericReturnType());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92801__9)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92801__9)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92801__9)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92801__9)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92801__9)).isPrimitive());
        TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        TypeName o_genericType_rv92801__14 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92801__14)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92801__14)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92801__14)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92801__14)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92801__14)).isPrimitive());
        TypeName o_genericType_rv92801__16 = __DSPOT_invoc_4.annotated(__DSPOT_annotations_15016);
        Assert.assertFalse(((ClassName) (o_genericType_rv92801__16)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92801__16)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92801__16)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92801__16)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92801__16)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92801__9)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92801__9)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92801__9)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92801__9)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92801__9)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92801__14)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92801__14)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92801__14)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92801__14)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92801__14)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void genericType_rv92823() throws Exception {
        Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
        TypeName o_genericType_rv92823__4 = TypeName.get(recursiveEnum.getReturnType());
        Assert.assertFalse(((ClassName) (o_genericType_rv92823__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92823__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92823__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92823__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92823__4)).isPrimitive());
        TypeName __DSPOT_invoc_6 = TypeName.get(recursiveEnum.getGenericReturnType());
        TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        TypeName o_genericType_rv92823__13 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92823__13)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92823__13)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92823__13)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92823__13)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92823__13)).isPrimitive());
        TypeName o_genericType_rv92823__15 = __DSPOT_invoc_6.withoutAnnotations();
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92823__15)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92823__15)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92823__15)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92823__15)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92823__15)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_genericType_rv92823__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92823__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92823__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92823__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92823__4)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92823__13)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92823__13)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92823__13)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92823__13)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92823__13)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void genericType_rv92822_failAssert205() throws Exception {
        try {
            Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
            TypeName.get(recursiveEnum.getReturnType());
            TypeName __DSPOT_invoc_6 = TypeName.get(recursiveEnum.getGenericReturnType());
            TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
            TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
            __DSPOT_invoc_6.unbox();
            org.junit.Assert.fail("genericType_rv92822 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox E", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void genericType_mg92795() throws Exception {
        List<AnnotationSpec> __DSPOT_annotations_15014 = Collections.<AnnotationSpec>emptyList();
        Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
        TypeName o_genericType_mg92795__6 = TypeName.get(recursiveEnum.getReturnType());
        Assert.assertFalse(((ClassName) (o_genericType_mg92795__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_mg92795__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_mg92795__6)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_mg92795__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_mg92795__6)).isPrimitive());
        TypeName o_genericType_mg92795__8 = TypeName.get(recursiveEnum.getGenericReturnType());
        Assert.assertFalse(((TypeVariableName) (o_genericType_mg92795__8)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_mg92795__8)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_mg92795__8)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_mg92795__8)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_mg92795__8)).isPrimitive());
        TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        TypeName o_genericType_mg92795__13 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (o_genericType_mg92795__13)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_mg92795__13)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_mg92795__13)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_mg92795__13)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_mg92795__13)).isPrimitive());
        TypeName o_genericType_mg92795__15 = genericTypeName.annotated(__DSPOT_annotations_15014);
        Assert.assertFalse(((ArrayTypeName) (o_genericType_mg92795__15)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_mg92795__15)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (o_genericType_mg92795__15)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (o_genericType_mg92795__15)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_mg92795__15)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_genericType_mg92795__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_mg92795__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_mg92795__6)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_mg92795__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_mg92795__6)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_genericType_mg92795__8)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_mg92795__8)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_mg92795__8)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_mg92795__8)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_mg92795__8)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_mg92795__13)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_mg92795__13)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_mg92795__13)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_mg92795__13)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_mg92795__13)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void genericType_rv92819() throws Exception {
        Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
        TypeName o_genericType_rv92819__4 = TypeName.get(recursiveEnum.getReturnType());
        Assert.assertFalse(((ClassName) (o_genericType_rv92819__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92819__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92819__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92819__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92819__4)).isPrimitive());
        TypeName __DSPOT_invoc_6 = TypeName.get(recursiveEnum.getGenericReturnType());
        TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        TypeName o_genericType_rv92819__13 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92819__13)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92819__13)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92819__13)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92819__13)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92819__13)).isPrimitive());
        __DSPOT_invoc_6.isBoxedPrimitive();
        Assert.assertFalse(((ClassName) (o_genericType_rv92819__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92819__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92819__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92819__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92819__4)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92819__13)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92819__13)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92819__13)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92819__13)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92819__13)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void genericType_rv92827() throws Exception {
        Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
        TypeName o_genericType_rv92827__4 = TypeName.get(recursiveEnum.getReturnType());
        Assert.assertFalse(((ClassName) (o_genericType_rv92827__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92827__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92827__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92827__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92827__4)).isPrimitive());
        TypeName o_genericType_rv92827__6 = TypeName.get(recursiveEnum.getGenericReturnType());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92827__6)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92827__6)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92827__6)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92827__6)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92827__6)).isPrimitive());
        TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        TypeName __DSPOT_invoc_11 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
        TypeName o_genericType_rv92827__15 = __DSPOT_invoc_11.box();
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92827__15)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92827__15)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92827__15)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92827__15)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92827__15)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_genericType_rv92827__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92827__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92827__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92827__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92827__4)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92827__6)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92827__6)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92827__6)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92827__6)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92827__6)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void genericType_rv92834_failAssert206() throws Exception {
        try {
            Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
            TypeName.get(recursiveEnum.getReturnType());
            TypeName.get(recursiveEnum.getGenericReturnType());
            TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
            TypeName __DSPOT_invoc_11 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
            __DSPOT_invoc_11.unbox();
            org.junit.Assert.fail("genericType_rv92834 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox E[]", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void genericType_rv92813() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_15019 = new AnnotationSpec[]{  };
        Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
        TypeName o_genericType_rv92813__5 = TypeName.get(recursiveEnum.getReturnType());
        Assert.assertFalse(((ClassName) (o_genericType_rv92813__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92813__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92813__5)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92813__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92813__5)).isPrimitive());
        TypeName __DSPOT_invoc_6 = TypeName.get(recursiveEnum.getGenericReturnType());
        TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        TypeName o_genericType_rv92813__14 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92813__14)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92813__14)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92813__14)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92813__14)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92813__14)).isPrimitive());
        TypeName o_genericType_rv92813__16 = __DSPOT_invoc_6.annotated(__DSPOT_annotations_15019);
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92813__16)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92813__16)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92813__16)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92813__16)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92813__16)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_genericType_rv92813__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92813__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92813__5)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92813__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92813__5)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92813__14)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92813__14)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92813__14)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92813__14)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92813__14)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void genericType_rv92835() throws Exception {
        Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
        TypeName o_genericType_rv92835__4 = TypeName.get(recursiveEnum.getReturnType());
        Assert.assertFalse(((ClassName) (o_genericType_rv92835__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92835__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92835__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92835__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92835__4)).isPrimitive());
        TypeName o_genericType_rv92835__6 = TypeName.get(recursiveEnum.getGenericReturnType());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92835__6)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92835__6)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92835__6)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92835__6)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92835__6)).isPrimitive());
        TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        TypeName __DSPOT_invoc_11 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
        TypeName o_genericType_rv92835__15 = __DSPOT_invoc_11.withoutAnnotations();
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92835__15)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92835__15)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92835__15)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92835__15)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92835__15)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_genericType_rv92835__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92835__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92835__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92835__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92835__4)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92835__6)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92835__6)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92835__6)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92835__6)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92835__6)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void genericTypelitNum92768_failAssert202_rv99097() throws Exception {
        try {
            Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
            TypeName __DSPOT_invoc_6 = TypeName.get(recursiveEnum.getReturnType());
            TypeName o_genericTypelitNum92768_failAssert202_rv99097__10 = TypeName.get(recursiveEnum.getGenericReturnType());
            Assert.assertFalse(((TypeVariableName) (o_genericTypelitNum92768_failAssert202_rv99097__10)).isAnnotated());
            Assert.assertFalse(((TypeVariableName) (o_genericTypelitNum92768_failAssert202_rv99097__10)).isBoxedPrimitive());
            Assert.assertEquals("E", ((TypeVariableName) (o_genericTypelitNum92768_failAssert202_rv99097__10)).toString());
            Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericTypelitNum92768_failAssert202_rv99097__10)).hashCode())));
            Assert.assertFalse(((TypeVariableName) (o_genericTypelitNum92768_failAssert202_rv99097__10)).isPrimitive());
            TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[1]);
            TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
            org.junit.Assert.fail("genericTypelitNum92768 should have thrown ArrayIndexOutOfBoundsException");
            __DSPOT_invoc_6.unbox();
        } catch (ArrayIndexOutOfBoundsException expected) {
        }
    }

    @Test(timeout = 10000)
    public void genericTypelitNum92778_mg97317_failAssert259() throws Exception {
        try {
            Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
            TypeName o_genericTypelitNum92778__4 = TypeName.get(recursiveEnum.getReturnType());
            TypeName o_genericTypelitNum92778__6 = TypeName.get(recursiveEnum.getGenericReturnType());
            TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
            TypeName o_genericTypelitNum92778__11 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
            o_genericTypelitNum92778__11.unbox();
            org.junit.Assert.fail("genericTypelitNum92778_mg97317 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox E[]", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void genericType_rv92804_mg98201() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_15661 = new AnnotationSpec[]{  };
        TypeName __DSPOT_o_15018 = null;
        Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
        TypeName __DSPOT_invoc_4 = TypeName.get(recursiveEnum.getReturnType());
        TypeName o_genericType_rv92804__9 = TypeName.get(recursiveEnum.getGenericReturnType());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92804__9)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92804__9)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92804__9)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92804__9)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92804__9)).isPrimitive());
        TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        TypeName o_genericType_rv92804__14 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92804__14)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92804__14)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92804__14)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92804__14)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92804__14)).isPrimitive());
        boolean o_genericType_rv92804__16 = __DSPOT_invoc_4.equals(__DSPOT_o_15018);
        TypeName o_genericType_rv92804_mg98201__24 = genericTypeName.annotated(__DSPOT_annotations_15661);
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92804_mg98201__24)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92804_mg98201__24)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (o_genericType_rv92804_mg98201__24)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (o_genericType_rv92804_mg98201__24)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92804_mg98201__24)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92804__9)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92804__9)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92804__9)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92804__9)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92804__9)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92804__14)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92804__14)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92804__14)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92804__14)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92804__14)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void genericType_rv92831_mg97674() throws Exception {
        List<AnnotationSpec> __DSPOT_annotations_15398 = Collections.<AnnotationSpec>emptyList();
        Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
        TypeName o_genericType_rv92831__4 = TypeName.get(recursiveEnum.getReturnType());
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92831__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92831__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isPrimitive());
        TypeName o_genericType_rv92831__6 = TypeName.get(recursiveEnum.getGenericReturnType());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92831__6)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92831__6)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isPrimitive());
        TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        TypeName __DSPOT_invoc_11 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
        __DSPOT_invoc_11.isBoxedPrimitive();
        TypeName o_genericType_rv92831_mg97674__22 = o_genericType_rv92831__6.annotated(__DSPOT_annotations_15398);
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831_mg97674__22)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831_mg97674__22)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92831_mg97674__22)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92831_mg97674__22)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831_mg97674__22)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92831__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92831__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92831__6)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92831__6)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void genericType_rv92808_mg97405() throws Exception {
        Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
        TypeName __DSPOT_invoc_4 = TypeName.get(recursiveEnum.getReturnType());
        TypeName o_genericType_rv92808__8 = TypeName.get(recursiveEnum.getGenericReturnType());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92808__8)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92808__8)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92808__8)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92808__8)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92808__8)).isPrimitive());
        TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        TypeName o_genericType_rv92808__13 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92808__13)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92808__13)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92808__13)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92808__13)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92808__13)).isPrimitive());
        __DSPOT_invoc_4.isPrimitive();
        TypeName o_genericType_rv92808_mg97405__20 = o_genericType_rv92808__8.box();
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92808_mg97405__20)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92808_mg97405__20)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92808_mg97405__20)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92808_mg97405__20)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92808_mg97405__20)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92808__8)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92808__8)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92808__8)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92808__8)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92808__8)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92808__13)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92808__13)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92808__13)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92808__13)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92808__13)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void genericTypelitNum92778_add95100_mg108446() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_17032 = new AnnotationSpec[]{  };
        Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
        TypeName o_genericTypelitNum92778__4 = TypeName.get(recursiveEnum.getReturnType());
        Assert.assertFalse(((ClassName) (o_genericTypelitNum92778__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericTypelitNum92778__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericTypelitNum92778__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericTypelitNum92778__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericTypelitNum92778__4)).isPrimitive());
        TypeName o_genericTypelitNum92778__6 = TypeName.get(recursiveEnum.getGenericReturnType());
        Assert.assertFalse(((TypeVariableName) (o_genericTypelitNum92778__6)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericTypelitNum92778__6)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericTypelitNum92778__6)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericTypelitNum92778__6)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericTypelitNum92778__6)).isPrimitive());
        TypeName o_genericTypelitNum92778_add95100__12 = TypeName.get(recursiveEnum.getParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (o_genericTypelitNum92778_add95100__12)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericTypelitNum92778_add95100__12)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (o_genericTypelitNum92778_add95100__12)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (o_genericTypelitNum92778_add95100__12)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericTypelitNum92778_add95100__12)).isPrimitive());
        TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        TypeName o_genericTypelitNum92778__11 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (o_genericTypelitNum92778__11)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericTypelitNum92778__11)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericTypelitNum92778__11)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericTypelitNum92778__11)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericTypelitNum92778__11)).isPrimitive());
        TypeName o_genericTypelitNum92778_add95100_mg108446__24 = o_genericTypelitNum92778_add95100__12.annotated(__DSPOT_annotations_17032);
        Assert.assertFalse(((ArrayTypeName) (o_genericTypelitNum92778_add95100_mg108446__24)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericTypelitNum92778_add95100_mg108446__24)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (o_genericTypelitNum92778_add95100_mg108446__24)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (o_genericTypelitNum92778_add95100_mg108446__24)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericTypelitNum92778_add95100_mg108446__24)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_genericTypelitNum92778__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericTypelitNum92778__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericTypelitNum92778__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericTypelitNum92778__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericTypelitNum92778__4)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_genericTypelitNum92778__6)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericTypelitNum92778__6)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericTypelitNum92778__6)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericTypelitNum92778__6)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericTypelitNum92778__6)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_genericTypelitNum92778_add95100__12)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericTypelitNum92778_add95100__12)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (o_genericTypelitNum92778_add95100__12)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (o_genericTypelitNum92778_add95100__12)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericTypelitNum92778_add95100__12)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_genericTypelitNum92778__11)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericTypelitNum92778__11)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericTypelitNum92778__11)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericTypelitNum92778__11)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericTypelitNum92778__11)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void genericType_rv92831_remove96921_mg106533() throws Exception {
        List<AnnotationSpec> __DSPOT_annotations_16076 = Collections.<AnnotationSpec>emptyList();
        Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
        TypeName o_genericType_rv92831__4 = TypeName.get(recursiveEnum.getReturnType());
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92831__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92831__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isPrimitive());
        TypeName o_genericType_rv92831__6 = TypeName.get(recursiveEnum.getGenericReturnType());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92831__6)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92831__6)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isPrimitive());
        TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        TypeName __DSPOT_invoc_11 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
        TypeName o_genericType_rv92831_remove96921_mg106533__21 = __DSPOT_invoc_11.annotated(__DSPOT_annotations_16076);
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92831_remove96921_mg106533__21)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92831_remove96921_mg106533__21)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92831_remove96921_mg106533__21)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92831_remove96921_mg106533__21)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92831_remove96921_mg106533__21)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92831__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92831__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92831__6)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92831__6)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void genericType_rv92831_mg97674_remove106354() throws Exception {
        List<AnnotationSpec> __DSPOT_annotations_15398 = Collections.<AnnotationSpec>emptyList();
        Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
        TypeName o_genericType_rv92831__4 = TypeName.get(recursiveEnum.getReturnType());
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92831__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92831__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isPrimitive());
        TypeName o_genericType_rv92831__6 = TypeName.get(recursiveEnum.getGenericReturnType());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92831__6)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92831__6)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isPrimitive());
        TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        TypeName __DSPOT_invoc_11 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
        TypeName o_genericType_rv92831_mg97674__22 = o_genericType_rv92831__6.annotated(__DSPOT_annotations_15398);
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831_mg97674__22)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831_mg97674__22)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92831_mg97674__22)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92831_mg97674__22)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831_mg97674__22)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92831__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92831__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92831__4)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92831__6)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92831__6)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92831__6)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void genericTypelitNum92768_failAssert202_rv99097_rv110441() throws Exception {
        try {
            AnnotationSpec[] __DSPOT_annotations_17974 = new AnnotationSpec[]{  };
            Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
            TypeName __DSPOT_invoc_6 = TypeName.get(recursiveEnum.getReturnType());
            TypeName o_genericTypelitNum92768_failAssert202_rv99097__10 = TypeName.get(recursiveEnum.getGenericReturnType());
            Assert.assertFalse(((TypeVariableName) (o_genericTypelitNum92768_failAssert202_rv99097__10)).isAnnotated());
            Assert.assertFalse(((TypeVariableName) (o_genericTypelitNum92768_failAssert202_rv99097__10)).isBoxedPrimitive());
            Assert.assertEquals("E", ((TypeVariableName) (o_genericTypelitNum92768_failAssert202_rv99097__10)).toString());
            Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericTypelitNum92768_failAssert202_rv99097__10)).hashCode())));
            Assert.assertFalse(((TypeVariableName) (o_genericTypelitNum92768_failAssert202_rv99097__10)).isPrimitive());
            TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[1]);
            TypeName __DSPOT_invoc_32 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
            org.junit.Assert.fail("genericTypelitNum92768 should have thrown ArrayIndexOutOfBoundsException");
            __DSPOT_invoc_6.unbox();
            __DSPOT_invoc_32.annotated(__DSPOT_annotations_17974);
        } catch (ArrayIndexOutOfBoundsException expected) {
        }
    }

    @Test(timeout = 10000)
    public void genericType_rv92806_add96430_mg106735() throws Exception {
        Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
        TypeName __DSPOT_invoc_4 = TypeName.get(recursiveEnum.getReturnType());
        TypeName o_genericType_rv92806__8 = TypeName.get(recursiveEnum.getGenericReturnType());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92806__8)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92806__8)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92806__8)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92806__8)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92806__8)).isPrimitive());
        TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        TypeName o_genericType_rv92806__13 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92806__13)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92806__13)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92806__13)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92806__13)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92806__13)).isPrimitive());
        __DSPOT_invoc_4.isAnnotated();
        ((ArrayTypeName) (genericTypeName)).isPrimitive();
        TypeName o_genericType_rv92806_add96430_mg106735__21 = genericTypeName.withoutAnnotations();
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92806_add96430_mg106735__21)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92806_add96430_mg106735__21)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (o_genericType_rv92806_add96430_mg106735__21)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (o_genericType_rv92806_add96430_mg106735__21)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92806_add96430_mg106735__21)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92806__8)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92806__8)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92806__8)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92806__8)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92806__8)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92806__13)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92806__13)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92806__13)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92806__13)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92806__13)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void genericType_rv92830_mg98174_mg107500() throws Exception {
        TypeName __DSPOT_o_15648 = null;
        Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
        TypeName o_genericType_rv92830__4 = TypeName.get(recursiveEnum.getReturnType());
        Assert.assertFalse(((ClassName) (o_genericType_rv92830__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92830__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92830__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92830__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92830__4)).isPrimitive());
        TypeName o_genericType_rv92830__6 = TypeName.get(recursiveEnum.getGenericReturnType());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92830__6)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92830__6)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92830__6)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92830__6)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92830__6)).isPrimitive());
        TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
        TypeName __DSPOT_invoc_11 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
        __DSPOT_invoc_11.isAnnotated();
        boolean o_genericType_rv92830_mg98174__21 = genericTypeName.equals(__DSPOT_o_15648);
        TypeName o_genericType_rv92830_mg98174_mg107500__24 = __DSPOT_invoc_11.box();
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92830_mg98174_mg107500__24)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92830_mg98174_mg107500__24)).isBoxedPrimitive());
        Assert.assertEquals("E[]", ((ArrayTypeName) (o_genericType_rv92830_mg98174_mg107500__24)).toString());
        Assert.assertEquals(69223, ((int) (((ArrayTypeName) (o_genericType_rv92830_mg98174_mg107500__24)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_genericType_rv92830_mg98174_mg107500__24)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_genericType_rv92830__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_genericType_rv92830__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum", ((ClassName) (o_genericType_rv92830__4)).toString());
        Assert.assertEquals(398585941, ((int) (((ClassName) (o_genericType_rv92830__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_genericType_rv92830__4)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92830__6)).isAnnotated());
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92830__6)).isBoxedPrimitive());
        Assert.assertEquals("E", ((TypeVariableName) (o_genericType_rv92830__6)).toString());
        Assert.assertEquals(69, ((int) (((TypeVariableName) (o_genericType_rv92830__6)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_genericType_rv92830__6)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Enum[]", ((ArrayTypeName) (genericTypeName)).toString());
        Assert.assertEquals(789002871, ((int) (((ArrayTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (genericTypeName)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void genericType_rv92832_remove96923_mg106560_failAssert331() throws Exception {
        try {
            Method recursiveEnum = getClass().getDeclaredMethod("generic", Enum[].class);
            TypeName o_genericType_rv92832__4 = TypeName.get(recursiveEnum.getReturnType());
            TypeName o_genericType_rv92832__6 = TypeName.get(recursiveEnum.getGenericReturnType());
            TypeName genericTypeName = TypeName.get(recursiveEnum.getParameterTypes()[0]);
            TypeName __DSPOT_invoc_11 = TypeName.get(recursiveEnum.getGenericParameterTypes()[0]);
            __DSPOT_invoc_11.unbox();
            org.junit.Assert.fail("genericType_rv92832_remove96923_mg106560 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox E[]", expected.getMessage());
        }
    }

    @Test
    public void innerClassInGenericType() throws Exception {
        Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
        TypeName.get(genericStringInner.getReturnType());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType()), TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType()));
        Truth.assertThat(genericTypeName.toString()).isEqualTo(((TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner"));
    }

    @Test(timeout = 10000)
    public void innerClassInGenericType_mg112161() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_18229 = new AnnotationSpec[]{  };
        Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
        TypeName o_innerClassInGenericType_mg112161__5 = TypeName.get(genericStringInner.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112161__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112161__5)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112161__5)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112161__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112161__5)).isPrimitive());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112161__10 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112161__12 = TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).isPrimitive());
        String String_47 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_47);
        TypeName o_innerClassInGenericType_mg112161__18 = genericTypeName.annotated(__DSPOT_annotations_18229);
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__18)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__18)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__18)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__18)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__18)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112161__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112161__5)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112161__5)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112161__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112161__5)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_47);
    }

    @Test(timeout = 10000)
    public void innerClassInGenericType_mg112163() throws Exception {
        Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
        TypeName o_innerClassInGenericType_mg112163__4 = TypeName.get(genericStringInner.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112163__4)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112163__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isPrimitive());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112163__9 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112163__11 = TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isPrimitive());
        String String_51 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_51);
        TypeName o_innerClassInGenericType_mg112163__17 = genericTypeName.box();
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112163__4)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112163__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_51);
    }

    @Test(timeout = 10000)
    public void innerClassInGenericType_rv112178() throws Exception {
        Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
        TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerClassInGenericType_rv112178__11 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__11)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__11)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__11)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__11)).isPrimitive());
        TypeName o_innerClassInGenericType_rv112178__13 = TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__13)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__13)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__13)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__13)).isPrimitive());
        String String_42 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_42);
        TypeName o_innerClassInGenericType_rv112178__19 = __DSPOT_invoc_4.withoutAnnotations();
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_rv112178__19)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_rv112178__19)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_rv112178__19)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_rv112178__19)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_rv112178__19)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__11)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__11)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__11)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__11)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__13)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__13)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__13)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112178__13)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_42);
    }

    @Test(timeout = 10000)
    public void innerClassInGenericType_mg112166() throws Exception {
        Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
        TypeName o_innerClassInGenericType_mg112166__4 = TypeName.get(genericStringInner.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112166__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112166__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112166__4)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112166__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112166__4)).isPrimitive());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112166__9 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112166__11 = TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).isPrimitive());
        String String_48 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_48);
        TypeName o_innerClassInGenericType_mg112166__17 = genericTypeName.withoutAnnotations();
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__17)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__17)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__17)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__17)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__17)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112166__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112166__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112166__4)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112166__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112166__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_48);
    }

    @Test(timeout = 10000)
    public void innerClassInGenericType_rv112168() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_18232 = new AnnotationSpec[]{  };
        Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
        TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerClassInGenericType_rv112168__12 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).isPrimitive());
        TypeName o_innerClassInGenericType_rv112168__14 = TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).isPrimitive());
        String String_45 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_45);
        TypeName o_innerClassInGenericType_rv112168__20 = __DSPOT_invoc_4.annotated(__DSPOT_annotations_18232);
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_rv112168__20)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_rv112168__20)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_rv112168__20)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_rv112168__20)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_rv112168__20)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_45);
    }

    @Test(timeout = 10000)
    public void innerClassInGenericType_add112152() throws Exception {
        Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
        TypeName o_innerClassInGenericType_add112152__4 = TypeName.get(genericStringInner.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_add112152__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_add112152__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_add112152__4)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_add112152__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_add112152__4)).isPrimitive());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerClassInGenericType_add112152__9 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__9)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__9)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_add112152__9)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_add112152__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__9)).isPrimitive());
        TypeName o_innerClassInGenericType_add112152__11 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__11)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__11)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_add112152__11)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_add112152__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__11)).isPrimitive());
        TypeName o_innerClassInGenericType_add112152__13 = TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__13)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__13)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_add112152__13)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_add112152__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__13)).isPrimitive());
        String String_4 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_4);
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_add112152__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_add112152__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_add112152__4)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_add112152__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_add112152__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__9)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__9)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_add112152__9)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_add112152__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__9)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__11)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__11)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_add112152__11)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_add112152__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__11)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__13)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__13)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_add112152__13)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_add112152__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_add112152__13)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void innerClassInGenericType_rv112177_failAssert378() throws Exception {
        try {
            Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
            TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
            TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
            TypeName.get(genericStringInner.getGenericReturnType());
            TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType());
            String String_44 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner";
            __DSPOT_invoc_4.unbox();
            org.junit.Assert.fail("innerClassInGenericType_rv112177 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void innerClassInGenericType_mg112163_mg115909() throws Exception {
        Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
        TypeName o_innerClassInGenericType_mg112163__4 = TypeName.get(genericStringInner.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112163__4)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112163__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isPrimitive());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112163__9 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112163__11 = TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isPrimitive());
        String String_51 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_51);
        TypeName o_innerClassInGenericType_mg112163__17 = genericTypeName.box();
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112163_mg115909__26 = o_innerClassInGenericType_mg112163__4.box();
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163_mg115909__26)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163_mg115909__26)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112163_mg115909__26)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112163_mg115909__26)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163_mg115909__26)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112163__4)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112163__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_51);
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void innerClassInGenericType_mg112164_mg115887_failAssert402() throws Exception {
        try {
            TypeName __DSPOT_o_18231 = null;
            Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
            TypeName o_innerClassInGenericType_mg112164__5 = TypeName.get(genericStringInner.getReturnType());
            TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
            TypeName o_innerClassInGenericType_mg112164__10 = TypeName.get(genericStringInner.getGenericReturnType());
            TypeName o_innerClassInGenericType_mg112164__12 = TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType());
            String String_49 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner";
            boolean o_innerClassInGenericType_mg112164__18 = genericTypeName.equals(__DSPOT_o_18231);
            o_innerClassInGenericType_mg112164__5.unbox();
            org.junit.Assert.fail("innerClassInGenericType_mg112164_mg115887 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void innerClassInGenericType_mg112166_add114741() throws Exception {
        Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
        TypeName o_innerClassInGenericType_mg112166__4 = TypeName.get(genericStringInner.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112166__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112166__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112166__4)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112166__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112166__4)).isPrimitive());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112166__9 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).isPrimitive());
        ((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).isBoxedPrimitive();
        TypeName o_innerClassInGenericType_mg112166__11 = TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).isPrimitive());
        String String_48 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_48);
        TypeName o_innerClassInGenericType_mg112166__17 = genericTypeName.withoutAnnotations();
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__17)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__17)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__17)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__17)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__17)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112166__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112166__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112166__4)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112166__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112166__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__9)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112166__11)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_48);
    }

    @Test(timeout = 10000)
    public void innerClassInGenericType_mg112161_add114708() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_18229 = new AnnotationSpec[]{  };
        Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
        TypeName o_innerClassInGenericType_mg112161__5 = TypeName.get(genericStringInner.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112161__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112161__5)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112161__5)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112161__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112161__5)).isPrimitive());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112161__10 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112161__12 = TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).isPrimitive());
        String String_47 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_47);
        TypeName o_innerClassInGenericType_mg112161__18 = genericTypeName.annotated(__DSPOT_annotations_18229);
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__18)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__18)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__18)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__18)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__18)).isPrimitive());
        ((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive();
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112161__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112161__5)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112161__5)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112161__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112161__5)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__10)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__12)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_47);
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__18)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__18)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__18)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__18)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112161__18)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void innerClassInGenericType_rv112168_add114581() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_18232 = new AnnotationSpec[]{  };
        Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
        TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerClassInGenericType_rv112168_add114581__12 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168_add114581__12)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168_add114581__12)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_rv112168_add114581__12)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_rv112168_add114581__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168_add114581__12)).isPrimitive());
        TypeName o_innerClassInGenericType_rv112168__12 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).isPrimitive());
        TypeName o_innerClassInGenericType_rv112168__14 = TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).isPrimitive());
        String String_45 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_45);
        TypeName o_innerClassInGenericType_rv112168__20 = __DSPOT_invoc_4.annotated(__DSPOT_annotations_18232);
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_rv112168__20)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_rv112168__20)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_rv112168__20)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_rv112168__20)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_rv112168__20)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168_add114581__12)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168_add114581__12)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_rv112168_add114581__12)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_rv112168_add114581__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168_add114581__12)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__12)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_rv112168__14)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_45);
    }

    @Test(timeout = 10000)
    public void innerClassInGenericTypelitString112138_failAssert364_rv116350() throws Exception {
        try {
            Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
            TypeName o_innerClassInGenericTypelitString112138_failAssert364_rv116350__6 = TypeName.get(genericStringInner.getReturnType());
            Assert.assertFalse(((ClassName) (o_innerClassInGenericTypelitString112138_failAssert364_rv116350__6)).isAnnotated());
            Assert.assertFalse(((ClassName) (o_innerClassInGenericTypelitString112138_failAssert364_rv116350__6)).isBoxedPrimitive());
            Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericTypelitString112138_failAssert364_rv116350__6)).toString());
            Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericTypelitString112138_failAssert364_rv116350__6)).hashCode())));
            Assert.assertFalse(((ClassName) (o_innerClassInGenericTypelitString112138_failAssert364_rv116350__6)).isPrimitive());
            TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
            Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
            Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
            Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
            Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
            Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
            TypeName __DSPOT_invoc_11 = TypeName.get(genericStringInner.getGenericReturnType());
            TypeName.get(getClass().getDeclaredMethod("java.lang").getGenericReturnType());
            String String_21 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner";
            org.junit.Assert.fail("innerClassInGenericTypelitString112138 should have thrown NoSuchMethodException");
            __DSPOT_invoc_11.hashCode();
        } catch (NoSuchMethodException expected) {
        }
    }

    @Test(timeout = 10000)
    public void innerClassInGenericType_mg112163_mg115933_mg125816_failAssert458() throws Exception {
        try {
            Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
            TypeName o_innerClassInGenericType_mg112163__4 = TypeName.get(genericStringInner.getReturnType());
            TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
            TypeName o_innerClassInGenericType_mg112163__9 = TypeName.get(genericStringInner.getGenericReturnType());
            TypeName o_innerClassInGenericType_mg112163__11 = TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType());
            String String_51 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner";
            TypeName o_innerClassInGenericType_mg112163__17 = genericTypeName.box();
            TypeName o_innerClassInGenericType_mg112163_mg115933__26 = o_innerClassInGenericType_mg112163__17.box();
            o_innerClassInGenericType_mg112163_mg115933__26.unbox();
            org.junit.Assert.fail("innerClassInGenericType_mg112163_mg115933_mg125816 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void innerClassInGenericType_mg112163_mg115933_mg125788() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_19351 = new AnnotationSpec[]{  };
        Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
        TypeName o_innerClassInGenericType_mg112163__4 = TypeName.get(genericStringInner.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112163__4)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112163__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isPrimitive());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112163__9 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112163__11 = TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isPrimitive());
        String String_51 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_51);
        TypeName o_innerClassInGenericType_mg112163__17 = genericTypeName.box();
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112163_mg115933__26 = o_innerClassInGenericType_mg112163__17.box();
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_mg115933__26)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_mg115933__26)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_mg115933__26)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_mg115933__26)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_mg115933__26)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112163_mg115933_mg125788__30 = genericTypeName.annotated(__DSPOT_annotations_19351);
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_mg115933_mg125788__30)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_mg115933_mg125788__30)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_mg115933_mg125788__30)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_mg115933_mg125788__30)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_mg115933_mg125788__30)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112163__4)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112163__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_51);
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_mg115933__26)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_mg115933__26)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_mg115933__26)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_mg115933__26)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_mg115933__26)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void innerClassInGenericType_mg112164_mg115883litNum119747() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_18589 = new AnnotationSpec[1];
        TypeName __DSPOT_o_18231 = null;
        Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
        TypeName o_innerClassInGenericType_mg112164__5 = TypeName.get(genericStringInner.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112164__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112164__5)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112164__5)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112164__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112164__5)).isPrimitive());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112164__10 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__10)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__10)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__10)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__10)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__10)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112164__12 = TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__12)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__12)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__12)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__12)).isPrimitive());
        String String_49 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_49);
        boolean o_innerClassInGenericType_mg112164__18 = genericTypeName.equals(__DSPOT_o_18231);
        TypeName o_innerClassInGenericType_mg112164_mg115883__28 = o_innerClassInGenericType_mg112164__5.annotated(__DSPOT_annotations_18589);
        Assert.assertTrue(((ClassName) (o_innerClassInGenericType_mg112164_mg115883__28)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112164_mg115883__28)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112164__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112164__5)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112164__5)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112164__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112164__5)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__10)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__10)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__10)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__10)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__10)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__12)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__12)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__12)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112164__12)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_49);
    }

    @Test(timeout = 10000)
    public void innerClassInGenericTypelitString112145_failAssert370litString113127_add122944() throws Exception {
        try {
            Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
            TypeName o_innerClassInGenericTypelitString112145_failAssert370litString113127__6 = TypeName.get(genericStringInner.getReturnType());
            Assert.assertFalse(((ClassName) (o_innerClassInGenericTypelitString112145_failAssert370litString113127__6)).isAnnotated());
            Assert.assertFalse(((ClassName) (o_innerClassInGenericTypelitString112145_failAssert370litString113127__6)).isBoxedPrimitive());
            Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericTypelitString112145_failAssert370litString113127__6)).toString());
            Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericTypelitString112145_failAssert370litString113127__6)).hashCode())));
            Assert.assertFalse(((ClassName) (o_innerClassInGenericTypelitString112145_failAssert370litString113127__6)).isPrimitive());
            TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
            Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
            Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
            Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
            Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
            Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
            TypeName o_innerClassInGenericTypelitString112145_failAssert370litString113127__11 = TypeName.get(genericStringInner.getGenericReturnType());
            Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericTypelitString112145_failAssert370litString113127__11)).isAnnotated());
            Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericTypelitString112145_failAssert370litString113127__11)).isBoxedPrimitive());
            Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericTypelitString112145_failAssert370litString113127__11)).toString());
            Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericTypelitString112145_failAssert370litString113127__11)).hashCode())));
            Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericTypelitString112145_failAssert370litString113127__11)).isPrimitive());
            TypeName.get(getClass().getDeclaredMethod(":").getGenericReturnType());
            TypeName.get(getClass().getDeclaredMethod(":").getGenericReturnType());
            String String_27 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Strng>.Inner";
            org.junit.Assert.fail("innerClassInGenericTypelitString112145 should have thrown NoSuchMethodException");
        } catch (NoSuchMethodException expected) {
        }
    }

    @Test(timeout = 10000)
    public void innerClassInGenericType_mg112163_add114883_mg126447() throws Exception {
        Method genericStringInner = getClass().getDeclaredMethod("testGenericStringInner");
        TypeName o_innerClassInGenericType_mg112163__4 = TypeName.get(genericStringInner.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112163__4)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112163__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isPrimitive());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112163__9 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isPrimitive());
        TypeName o_innerClassInGenericType_mg112163__11 = TypeName.get(getClass().getDeclaredMethod("testGenericIntInner").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isPrimitive());
        String String_51 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.String>.Inner";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_51);
        TypeName o_innerClassInGenericType_mg112163__17 = genericTypeName.box();
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isPrimitive());
        ((ParameterizedTypeName) (genericTypeName)).isPrimitive();
        TypeName o_innerClassInGenericType_mg112163_add114883_mg126447__27 = o_innerClassInGenericType_mg112163__11.withoutAnnotations();
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_add114883_mg126447__27)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_add114883_mg126447__27)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_add114883_mg126447__27)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_add114883_mg126447__27)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163_add114883_mg126447__27)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.Inner", ((ClassName) (o_innerClassInGenericType_mg112163__4)).toString());
        Assert.assertEquals(1615782859, ((int) (((ClassName) (o_innerClassInGenericType_mg112163__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerClassInGenericType_mg112163__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__9)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Integer>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).toString());
        Assert.assertEquals(-1471120843, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__11)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", String_51);
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.String>.Inner", ((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).toString());
        Assert.assertEquals(409558280, ((int) (((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerClassInGenericType_mg112163__17)).isPrimitive());
    }

    @Test
    public void innerGenericInGenericType() throws Exception {
        Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
        TypeName.get(genericStringInner.getReturnType());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertNotEquals(TypeName.get(genericStringInner.getGenericReturnType()), TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType()));
        Truth.assertThat(genericTypeName.toString()).isEqualTo(((TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>"));
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_rv131073() throws Exception {
        Object __DSPOT_o_21118 = new Object();
        Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
        TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131073__13 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131073__15 = TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).isPrimitive());
        String String_90 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_90);
        boolean o_innerGenericInGenericType_rv131073__21 = __DSPOT_invoc_4.equals(__DSPOT_o_21118);
        Assert.assertFalse(o_innerGenericInGenericType_rv131073__21);
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_90);
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_mg131068() throws Exception {
        Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
        TypeName o_innerGenericInGenericType_mg131068__4 = TypeName.get(genericStringInner.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_mg131068__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_mg131068__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.InnerGeneric", ((ClassName) (o_innerGenericInGenericType_mg131068__4)).toString());
        Assert.assertEquals(-1262750836, ((int) (((ClassName) (o_innerGenericInGenericType_mg131068__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_mg131068__4)).isPrimitive());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerGenericInGenericType_mg131068__9 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__9)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__9)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__9)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__9)).isPrimitive());
        TypeName o_innerGenericInGenericType_mg131068__11 = TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__11)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__11)).isPrimitive());
        String String_97 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_97);
        TypeName o_innerGenericInGenericType_mg131068__17 = genericTypeName.withoutAnnotations();
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__17)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__17)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__17)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__17)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__17)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_mg131068__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_mg131068__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.InnerGeneric", ((ClassName) (o_innerGenericInGenericType_mg131068__4)).toString());
        Assert.assertEquals(-1262750836, ((int) (((ClassName) (o_innerGenericInGenericType_mg131068__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_mg131068__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__9)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__9)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__9)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__9)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__11)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131068__11)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_97);
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_rv131072() throws Exception {
        Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
        TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131072__11 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__11)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__11)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131072__13 = TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__13)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__13)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__13)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__13)).isPrimitive());
        String String_94 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_94);
        TypeName o_innerGenericInGenericType_rv131072__19 = __DSPOT_invoc_4.box();
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_rv131072__19)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_rv131072__19)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.InnerGeneric", ((ClassName) (o_innerGenericInGenericType_rv131072__19)).toString());
        Assert.assertEquals(-1262750836, ((int) (((ClassName) (o_innerGenericInGenericType_rv131072__19)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_rv131072__19)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__11)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__11)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__13)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__13)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__13)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131072__13)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_94);
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_rv131079_failAssert477() throws Exception {
        try {
            Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
            TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
            TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
            TypeName.get(genericStringInner.getGenericReturnType());
            TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
            String String_88 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>";
            __DSPOT_invoc_4.unbox();
            org.junit.Assert.fail("innerGenericInGenericType_rv131079 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox com.squareup.javapoet.TypeNameTest.TestGeneric.InnerGeneric", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_rv131070() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_21116 = new AnnotationSpec[0];
        Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
        TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131070__12 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131070__14 = TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isPrimitive());
        String String_91 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_91);
        TypeName o_innerGenericInGenericType_rv131070__20 = __DSPOT_invoc_4.annotated(__DSPOT_annotations_21116);
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_rv131070__20)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_rv131070__20)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.InnerGeneric", ((ClassName) (o_innerGenericInGenericType_rv131070__20)).toString());
        Assert.assertEquals(-1262750836, ((int) (((ClassName) (o_innerGenericInGenericType_rv131070__20)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_rv131070__20)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_91);
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_mg131063() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_21113 = new AnnotationSpec[]{  };
        Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
        TypeName o_innerGenericInGenericType_mg131063__5 = TypeName.get(genericStringInner.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_mg131063__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_mg131063__5)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.InnerGeneric", ((ClassName) (o_innerGenericInGenericType_mg131063__5)).toString());
        Assert.assertEquals(-1262750836, ((int) (((ClassName) (o_innerGenericInGenericType_mg131063__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_mg131063__5)).isPrimitive());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerGenericInGenericType_mg131063__10 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__10)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__10)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__10)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__10)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__10)).isPrimitive());
        TypeName o_innerGenericInGenericType_mg131063__12 = TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__12)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__12)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__12)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__12)).isPrimitive());
        String String_99 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_99);
        TypeName o_innerGenericInGenericType_mg131063__18 = genericTypeName.annotated(__DSPOT_annotations_21113);
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__18)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__18)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__18)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__18)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__18)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_mg131063__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_mg131063__5)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.InnerGeneric", ((ClassName) (o_innerGenericInGenericType_mg131063__5)).toString());
        Assert.assertEquals(-1262750836, ((int) (((ClassName) (o_innerGenericInGenericType_mg131063__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_mg131063__5)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__10)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__10)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__10)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__10)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__10)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__12)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__12)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__12)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_mg131063__12)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_99);
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_rv131070litNum132215() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_21116 = new AnnotationSpec[0];
        Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
        TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131070__12 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131070__14 = TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isPrimitive());
        String String_91 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_91);
        TypeName o_innerGenericInGenericType_rv131070__20 = __DSPOT_invoc_4.annotated(__DSPOT_annotations_21116);
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_rv131070__20)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_rv131070__20)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.InnerGeneric", ((ClassName) (o_innerGenericInGenericType_rv131070__20)).toString());
        Assert.assertEquals(-1262750836, ((int) (((ClassName) (o_innerGenericInGenericType_rv131070__20)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_rv131070__20)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_91);
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_remove131062_mg134129_failAssert492() throws Exception {
        try {
            Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
            TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
            TypeName o_innerGenericInGenericType_remove131062__7 = TypeName.get(genericStringInner.getGenericReturnType());
            TypeName o_innerGenericInGenericType_remove131062__9 = TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
            String String_53 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>";
            o_innerGenericInGenericType_remove131062__7.unbox();
            org.junit.Assert.fail("innerGenericInGenericType_remove131062_mg134129 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_rv131073_mg134589() throws Exception {
        Object __DSPOT_o_21118 = new Object();
        Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
        TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131073__13 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131073__15 = TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).isPrimitive());
        String String_90 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_90);
        boolean o_innerGenericInGenericType_rv131073__21 = __DSPOT_invoc_4.equals(__DSPOT_o_21118);
        TypeName o_innerGenericInGenericType_rv131073_mg134589__28 = o_innerGenericInGenericType_rv131073__15.box();
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073_mg134589__28)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073_mg134589__28)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073_mg134589__28)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073_mg134589__28)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073_mg134589__28)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__13)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131073__15)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_90);
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_rv131080litString131766() throws Exception {
        Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
        TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131080__11 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__11)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__11)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131080__13 = TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__13)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__13)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__13)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__13)).isPrimitive());
        String String_93 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Sort>.InnerGeneric<java.lang.Long>";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Sort>.InnerGeneric<java.lang.Long>", String_93);
        TypeName o_innerGenericInGenericType_rv131080__19 = __DSPOT_invoc_4.withoutAnnotations();
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_rv131080__19)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_rv131080__19)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.InnerGeneric", ((ClassName) (o_innerGenericInGenericType_rv131080__19)).toString());
        Assert.assertEquals(-1262750836, ((int) (((ClassName) (o_innerGenericInGenericType_rv131080__19)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_rv131080__19)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__11)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__11)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__13)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__13)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__13)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131080__13)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Sort>.InnerGeneric<java.lang.Long>", String_93);
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_add131061_mg134227() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_21173 = new AnnotationSpec[]{  };
        Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
        TypeName o_innerGenericInGenericType_add131061__4 = TypeName.get(genericStringInner.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_add131061__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_add131061__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.InnerGeneric", ((ClassName) (o_innerGenericInGenericType_add131061__4)).toString());
        Assert.assertEquals(-1262750836, ((int) (((ClassName) (o_innerGenericInGenericType_add131061__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_add131061__4)).isPrimitive());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerGenericInGenericType_add131061__9 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).isPrimitive());
        TypeName o_innerGenericInGenericType_add131061__11 = TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).isPrimitive());
        TypeNameTest.TestGeneric.class.getCanonicalName();
        String String_57 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_57);
        TypeName o_innerGenericInGenericType_add131061_mg134227__25 = o_innerGenericInGenericType_add131061__9.annotated(__DSPOT_annotations_21173);
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061_mg134227__25)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061_mg134227__25)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_add131061_mg134227__25)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_add131061_mg134227__25)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061_mg134227__25)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_add131061__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_add131061__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.InnerGeneric", ((ClassName) (o_innerGenericInGenericType_add131061__4)).toString());
        Assert.assertEquals(-1262750836, ((int) (((ClassName) (o_innerGenericInGenericType_add131061__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_add131061__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_57);
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_rv131077_remove134116() throws Exception {
        Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
        TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131077__11 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__11)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__11)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131077__13 = TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__13)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__13)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__13)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__13)).isPrimitive());
        String String_89 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_89);
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__11)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__11)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__13)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__13)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__13)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131077__13)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_rv131070litNum132211() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_21116 = new AnnotationSpec[1];
        Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
        TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131070__12 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131070__14 = TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isPrimitive());
        String String_91 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_91);
        TypeName o_innerGenericInGenericType_rv131070__20 = __DSPOT_invoc_4.annotated(__DSPOT_annotations_21116);
        Assert.assertTrue(((ClassName) (o_innerGenericInGenericType_rv131070__20)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_rv131070__20)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__12)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131070__14)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_91);
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_rv131074_mg134544() throws Exception {
        Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
        TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131074__11 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131074__13 = TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).isPrimitive());
        String String_87 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_87);
        __DSPOT_invoc_4.hashCode();
        TypeName o_innerGenericInGenericType_rv131074_mg134544__24 = o_innerGenericInGenericType_rv131074__13.withoutAnnotations();
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074_mg134544__24)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074_mg134544__24)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074_mg134544__24)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074_mg134544__24)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074_mg134544__24)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_87);
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_add131061_mg134227_remove142840() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_21173 = new AnnotationSpec[]{  };
        Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
        TypeName o_innerGenericInGenericType_add131061__4 = TypeName.get(genericStringInner.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_add131061__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_add131061__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.InnerGeneric", ((ClassName) (o_innerGenericInGenericType_add131061__4)).toString());
        Assert.assertEquals(-1262750836, ((int) (((ClassName) (o_innerGenericInGenericType_add131061__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_add131061__4)).isPrimitive());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerGenericInGenericType_add131061__9 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).isPrimitive());
        TypeName o_innerGenericInGenericType_add131061__11 = TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).isPrimitive());
        String String_57 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_57);
        TypeName o_innerGenericInGenericType_add131061_mg134227__25 = o_innerGenericInGenericType_add131061__9.annotated(__DSPOT_annotations_21173);
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061_mg134227__25)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061_mg134227__25)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_add131061_mg134227__25)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_add131061_mg134227__25)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061_mg134227__25)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_add131061__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_add131061__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.InnerGeneric", ((ClassName) (o_innerGenericInGenericType_add131061__4)).toString());
        Assert.assertEquals(-1262750836, ((int) (((ClassName) (o_innerGenericInGenericType_add131061__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerGenericInGenericType_add131061__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__9)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_add131061__11)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_57);
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_rv131079_failAssert477litString132173_failAssert513litString138561() throws Exception {
        try {
            try {
                Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
                TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
                TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
                Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
                Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
                Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
                Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
                Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
                TypeName o_innerGenericInGenericType_rv131079_failAssert477litString132173_failAssert513litString138561__15 = TypeName.get(genericStringInner.getGenericReturnType());
                Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131079_failAssert477litString132173_failAssert513litString138561__15)).isBoxedPrimitive());
                Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131079_failAssert477litString132173_failAssert513litString138561__15)).isAnnotated());
                Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131079_failAssert477litString132173_failAssert513litString138561__15)).toString());
                Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131079_failAssert477litString132173_failAssert513litString138561__15)).hashCode())));
                Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131079_failAssert477litString132173_failAssert513litString138561__15)).isPrimitive());
                TypeName.get(getClass().getDeclaredMethod("testGenVericInnerInt").getGenericReturnType());
                String String_88 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "tN+ZB50q]YIJ>/6LKEfhHK _P5NuXuZ:*`m+Z;,P;Oi@V,";
                __DSPOT_invoc_4.unbox();
                org.junit.Assert.fail("innerGenericInGenericType_rv131079 should have thrown UnsupportedOperationException");
            } catch (UnsupportedOperationException expected) {
            }
            org.junit.Assert.fail("innerGenericInGenericType_rv131079_failAssert477litString132173 should have thrown NoSuchMethodException");
        } catch (NoSuchMethodException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_rv131074_mg134544_remove142842() throws Exception {
        Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
        TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131074__11 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131074__13 = TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).isPrimitive());
        String String_87 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_87);
        TypeName o_innerGenericInGenericType_rv131074_mg134544__24 = o_innerGenericInGenericType_rv131074__13.withoutAnnotations();
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074_mg134544__24)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074_mg134544__24)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074_mg134544__24)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074_mg134544__24)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074_mg134544__24)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__11)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131074__13)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_87);
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_rv131071_add133406_mg145077_failAssert543() throws Exception {
        try {
            List<AnnotationSpec> __DSPOT_annotations_21117 = Collections.<AnnotationSpec>emptyList();
            Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
            TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
            TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
            TypeName o_innerGenericInGenericType_rv131071__13 = TypeName.get(genericStringInner.getGenericReturnType());
            TypeName o_innerGenericInGenericType_rv131071__15 = TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
            String String_92 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>";
            TypeName o_innerGenericInGenericType_rv131071__21 = __DSPOT_invoc_4.annotated(__DSPOT_annotations_21117);
            ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131071__15)).isPrimitive();
            o_innerGenericInGenericType_rv131071__21.unbox();
            org.junit.Assert.fail("innerGenericInGenericType_rv131071_add133406_mg145077 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox com.squareup.javapoet.TypeNameTest.TestGeneric.InnerGeneric", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void innerGenericInGenericType_rv131075_remove134118_mg144055() throws Exception {
        Method genericStringInner = getClass().getDeclaredMethod("testGenericInnerLong");
        TypeName __DSPOT_invoc_4 = TypeName.get(genericStringInner.getReturnType());
        TypeName genericTypeName = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131075__11 = TypeName.get(genericStringInner.getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__11)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__11)).isPrimitive());
        TypeName o_innerGenericInGenericType_rv131075__13 = TypeName.get(getClass().getDeclaredMethod("testGenericInnerInt").getGenericReturnType());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__13)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__13)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__13)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__13)).isPrimitive());
        String String_96 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + "<java.lang.Short>.InnerGeneric<java.lang.Long>";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_96);
        TypeName o_innerGenericInGenericType_rv131075_remove134118_mg144055__23 = o_innerGenericInGenericType_rv131075__13.box();
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075_remove134118_mg144055__23)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075_remove134118_mg144055__23)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075_remove134118_mg144055__23)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075_remove134118_mg144055__23)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075_remove134118_mg144055__23)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (genericTypeName)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (genericTypeName)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (genericTypeName)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__11)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__11)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__11)).toString());
        Assert.assertEquals(-302376430, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__11)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__11)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__13)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__13)).isAnnotated());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Integer>", ((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__13)).toString());
        Assert.assertEquals(1095443440, ((int) (((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__13)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_innerGenericInGenericType_rv131075__13)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric<java.lang.Short>.InnerGeneric<java.lang.Long>", String_96);
    }

    @Test(timeout = 10000)
    public void innerStaticInGenericType() throws Exception {
        Method staticInGeneric = getClass().getDeclaredMethod("testNestedNonGeneric");
        TypeName o_innerStaticInGenericType__4 = TypeName.get(staticInGeneric.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType__4)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType__4)).isPrimitive());
        TypeName typeName = TypeName.get(staticInGeneric.getGenericReturnType());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        String String_2 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + ".NestedNonGeneric";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_2);
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType__4)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void innerStaticInGenericType_rv148380_failAssert555() throws Exception {
        try {
            Method staticInGeneric = getClass().getDeclaredMethod("testNestedNonGeneric");
            TypeName __DSPOT_invoc_4 = TypeName.get(staticInGeneric.getReturnType());
            TypeName typeName = TypeName.get(staticInGeneric.getGenericReturnType());
            String String_131 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + ".NestedNonGeneric";
            __DSPOT_invoc_4.unbox();
            org.junit.Assert.fail("innerStaticInGenericType_rv148380 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void innerStaticInGenericType_rv148373() throws Exception {
        Method staticInGeneric = getClass().getDeclaredMethod("testNestedNonGeneric");
        TypeName __DSPOT_invoc_4 = TypeName.get(staticInGeneric.getReturnType());
        TypeName typeName = TypeName.get(staticInGeneric.getGenericReturnType());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        String String_125 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + ".NestedNonGeneric";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_125);
        TypeName o_innerStaticInGenericType_rv148373__13 = __DSPOT_invoc_4.box();
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_rv148373__13)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_rv148373__13)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_rv148373__13)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_rv148373__13)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_rv148373__13)).isPrimitive());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_125);
    }

    @Test(timeout = 10000)
    public void innerStaticInGenericType_rv148371() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_23726 = new AnnotationSpec[]{  };
        Method staticInGeneric = getClass().getDeclaredMethod("testNestedNonGeneric");
        TypeName __DSPOT_invoc_4 = TypeName.get(staticInGeneric.getReturnType());
        TypeName typeName = TypeName.get(staticInGeneric.getGenericReturnType());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        String String_130 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + ".NestedNonGeneric";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_130);
        TypeName o_innerStaticInGenericType_rv148371__14 = __DSPOT_invoc_4.annotated(__DSPOT_annotations_23726);
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_rv148371__14)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_rv148371__14)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_rv148371__14)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_rv148371__14)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_rv148371__14)).isPrimitive());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_130);
    }

    @Test(timeout = 10000)
    public void innerStaticInGenericType_mg148367() throws Exception {
        TypeName __DSPOT_o_23725 = null;
        Method staticInGeneric = getClass().getDeclaredMethod("testNestedNonGeneric");
        TypeName o_innerStaticInGenericType_mg148367__5 = TypeName.get(staticInGeneric.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148367__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148367__5)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148367__5)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148367__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148367__5)).isPrimitive());
        TypeName typeName = TypeName.get(staticInGeneric.getGenericReturnType());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        String String_132 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + ".NestedNonGeneric";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_132);
        boolean o_innerStaticInGenericType_mg148367__12 = typeName.equals(__DSPOT_o_23725);
        Assert.assertFalse(o_innerStaticInGenericType_mg148367__12);
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148367__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148367__5)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148367__5)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148367__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148367__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_132);
    }

    @Test(timeout = 10000)
    public void innerStaticInGenericType_rv148381() throws Exception {
        Method staticInGeneric = getClass().getDeclaredMethod("testNestedNonGeneric");
        TypeName __DSPOT_invoc_4 = TypeName.get(staticInGeneric.getReturnType());
        TypeName typeName = TypeName.get(staticInGeneric.getGenericReturnType());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        String String_124 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + ".NestedNonGeneric";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_124);
        TypeName o_innerStaticInGenericType_rv148381__13 = __DSPOT_invoc_4.withoutAnnotations();
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_rv148381__13)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_rv148381__13)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_rv148381__13)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_rv148381__13)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_rv148381__13)).isPrimitive());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_124);
    }

    @Test(timeout = 10000)
    public void innerStaticInGenericType_mg148366_mg149912() throws Exception {
        Method staticInGeneric = getClass().getDeclaredMethod("testNestedNonGeneric");
        TypeName o_innerStaticInGenericType_mg148366__4 = TypeName.get(staticInGeneric.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148366__4)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148366__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isPrimitive());
        TypeName typeName = TypeName.get(staticInGeneric.getGenericReturnType());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        String String_134 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + ".NestedNonGeneric";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_134);
        TypeName o_innerStaticInGenericType_mg148366__11 = typeName.box();
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__11)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__11)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148366__11)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148366__11)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__11)).isPrimitive());
        TypeName o_innerStaticInGenericType_mg148366_mg149912__16 = typeName.withoutAnnotations();
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366_mg149912__16)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366_mg149912__16)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148366_mg149912__16)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148366_mg149912__16)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366_mg149912__16)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148366__4)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148366__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_134);
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__11)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__11)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148366__11)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148366__11)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__11)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void innerStaticInGenericType_add148362_remove149630() throws Exception {
        Method staticInGeneric = getClass().getDeclaredMethod("testNestedNonGeneric");
        TypeName o_innerStaticInGenericType_add148362__4 = TypeName.get(staticInGeneric.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148362__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148362__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_add148362__4)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_add148362__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148362__4)).isPrimitive());
        TypeName typeName = TypeName.get(staticInGeneric.getGenericReturnType());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        String String_108 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + ".NestedNonGeneric";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_108);
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148362__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148362__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_add148362__4)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_add148362__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148362__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void innerStaticInGenericType_mg148366_mg149913() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_23867 = new AnnotationSpec[]{  };
        Method staticInGeneric = getClass().getDeclaredMethod("testNestedNonGeneric");
        TypeName o_innerStaticInGenericType_mg148366__4 = TypeName.get(staticInGeneric.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148366__4)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148366__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isPrimitive());
        TypeName typeName = TypeName.get(staticInGeneric.getGenericReturnType());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        String String_134 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + ".NestedNonGeneric";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_134);
        TypeName o_innerStaticInGenericType_mg148366__11 = typeName.box();
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__11)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__11)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148366__11)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148366__11)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__11)).isPrimitive());
        TypeName o_innerStaticInGenericType_mg148366_mg149913__17 = o_innerStaticInGenericType_mg148366__11.annotated(__DSPOT_annotations_23867);
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366_mg149913__17)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366_mg149913__17)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148366_mg149913__17)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148366_mg149913__17)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366_mg149913__17)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148366__4)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148366__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_134);
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__11)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__11)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148366__11)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148366__11)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__11)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void innerStaticInGenericType_mg148364_mg149923_failAssert602() throws Exception {
        try {
            AnnotationSpec[] __DSPOT_annotations_23723 = new AnnotationSpec[]{  };
            Method staticInGeneric = getClass().getDeclaredMethod("testNestedNonGeneric");
            TypeName o_innerStaticInGenericType_mg148364__5 = TypeName.get(staticInGeneric.getReturnType());
            TypeName typeName = TypeName.get(staticInGeneric.getGenericReturnType());
            String String_136 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + ".NestedNonGeneric";
            TypeName o_innerStaticInGenericType_mg148364__12 = typeName.annotated(__DSPOT_annotations_23723);
            o_innerStaticInGenericType_mg148364__5.unbox();
            org.junit.Assert.fail("innerStaticInGenericType_mg148364_mg149923 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void innerStaticInGenericType_rv148378_mg149781litNum152416() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_23801 = new AnnotationSpec[1];
        Method staticInGeneric = getClass().getDeclaredMethod("testNestedNonGeneric");
        TypeName __DSPOT_invoc_4 = TypeName.get(staticInGeneric.getReturnType());
        TypeName typeName = TypeName.get(staticInGeneric.getGenericReturnType());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        String String_123 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + ".NestedNonGeneric";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_123);
        __DSPOT_invoc_4.isPrimitive();
        TypeName o_innerStaticInGenericType_rv148378_mg149781__15 = typeName.annotated(__DSPOT_annotations_23801);
        Assert.assertTrue(((ClassName) (o_innerStaticInGenericType_rv148378_mg149781__15)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_rv148378_mg149781__15)).isPrimitive());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_123);
    }

    @Test(timeout = 10000)
    public void innerStaticInGenericType_mg148367_add149427_mg155937() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_24335 = new AnnotationSpec[]{  };
        TypeName __DSPOT_o_23725 = null;
        Method staticInGeneric = getClass().getDeclaredMethod("testNestedNonGeneric");
        TypeName o_innerStaticInGenericType_mg148367__5 = TypeName.get(staticInGeneric.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148367__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148367__5)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148367__5)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148367__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148367__5)).isPrimitive());
        TypeName typeName = TypeName.get(staticInGeneric.getGenericReturnType());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        String String_132 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + ".NestedNonGeneric";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_132);
        boolean o_innerStaticInGenericType_mg148367_add149427__14 = typeName.equals(__DSPOT_o_23725);
        boolean o_innerStaticInGenericType_mg148367__12 = typeName.equals(__DSPOT_o_23725);
        TypeName o_innerStaticInGenericType_mg148367_add149427_mg155937__21 = o_innerStaticInGenericType_mg148367__5.annotated(__DSPOT_annotations_24335);
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148367_add149427_mg155937__21)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148367_add149427_mg155937__21)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148367_add149427_mg155937__21)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148367_add149427_mg155937__21)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148367_add149427_mg155937__21)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148367__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148367__5)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148367__5)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148367__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148367__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_132);
    }

    @Test(timeout = 10000)
    public void innerStaticInGenericType_mg148366_add149458_remove155217() throws Exception {
        Method staticInGeneric = getClass().getDeclaredMethod("testNestedNonGeneric");
        TypeName o_innerStaticInGenericType_mg148366__4 = TypeName.get(staticInGeneric.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148366__4)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148366__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isPrimitive());
        TypeName typeName = TypeName.get(staticInGeneric.getGenericReturnType());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        String String_134 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + ".NestedNonGeneric";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_134);
        TypeName o_innerStaticInGenericType_mg148366__11 = typeName.box();
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__11)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__11)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148366__11)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148366__11)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__11)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_mg148366__4)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_mg148366__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_mg148366__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", String_134);
    }

    @Test(timeout = 10000)
    public void innerStaticInGenericType_add148359_mg149732litString151291() throws Exception {
        Method staticInGeneric = getClass().getDeclaredMethod("testNestedNonGeneric");
        TypeName o_innerStaticInGenericType_add148359__4 = TypeName.get(staticInGeneric.getReturnType());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148359__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148359__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_add148359__4)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_add148359__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148359__4)).isPrimitive());
        TypeName o_innerStaticInGenericType_add148359__6 = TypeName.get(staticInGeneric.getGenericReturnType());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148359__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148359__6)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_add148359__6)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_add148359__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148359__6)).isPrimitive());
        TypeName typeName = TypeName.get(staticInGeneric.getGenericReturnType());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        String String_110 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + ".NestedNInGeneric";
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNInGeneric", String_110);
        TypeName o_innerStaticInGenericType_add148359_mg149732__17 = o_innerStaticInGenericType_add148359__6.withoutAnnotations();
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148359_mg149732__17)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148359_mg149732__17)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_add148359_mg149732__17)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_add148359_mg149732__17)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148359_mg149732__17)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148359__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148359__4)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_add148359__4)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_add148359__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148359__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148359__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148359__6)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (o_innerStaticInGenericType_add148359__6)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (o_innerStaticInGenericType_add148359__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_innerStaticInGenericType_add148359__6)).isPrimitive());
        Assert.assertFalse(((ClassName) (typeName)).isAnnotated());
        Assert.assertFalse(((ClassName) (typeName)).isBoxedPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", ((ClassName) (typeName)).toString());
        Assert.assertEquals(-1020773876, ((int) (((ClassName) (typeName)).hashCode())));
        Assert.assertFalse(((ClassName) (typeName)).isPrimitive());
        Assert.assertEquals("com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNInGeneric", String_110);
    }

    @Test(timeout = 10000)
    public void innerStaticInGenericType_add148356_rv150055_mg156205_failAssert633() throws Exception {
        try {
            Class<? extends TypeNameTest> __DSPOT_invoc_1 = getClass();
            Method staticInGeneric = getClass().getDeclaredMethod("testNestedNonGeneric");
            TypeName o_innerStaticInGenericType_add148356__5 = TypeName.get(staticInGeneric.getReturnType());
            TypeName typeName = TypeName.get(staticInGeneric.getGenericReturnType());
            String String_106 = (TypeNameTest.TestGeneric.class.getCanonicalName()) + ".NestedNonGeneric";
            __DSPOT_invoc_1.getGenericSuperclass();
            o_innerStaticInGenericType_add148356__5.unbox();
            org.junit.Assert.fail("innerStaticInGenericType_add148356_rv150055_mg156205 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox com.squareup.javapoet.TypeNameTest.TestGeneric.NestedNonGeneric", expected.getMessage());
        }
    }

    @Test
    public void equalsAndHashCodePrimitive() {
        assertEqualsHashCodeAndToString(TypeName.BOOLEAN, TypeName.BOOLEAN);
        assertEqualsHashCodeAndToString(TypeName.BYTE, TypeName.BYTE);
        assertEqualsHashCodeAndToString(TypeName.CHAR, TypeName.CHAR);
        assertEqualsHashCodeAndToString(TypeName.DOUBLE, TypeName.DOUBLE);
        assertEqualsHashCodeAndToString(TypeName.FLOAT, TypeName.FLOAT);
        assertEqualsHashCodeAndToString(TypeName.INT, TypeName.INT);
        assertEqualsHashCodeAndToString(TypeName.LONG, TypeName.LONG);
        assertEqualsHashCodeAndToString(TypeName.SHORT, TypeName.SHORT);
        assertEqualsHashCodeAndToString(TypeName.VOID, TypeName.VOID);
    }

    @Test
    public void equalsAndHashCodeArrayTypeName() {
        assertEqualsHashCodeAndToString(ArrayTypeName.of(Object.class), ArrayTypeName.of(Object.class));
        assertEqualsHashCodeAndToString(TypeName.get(Object[].class), ArrayTypeName.of(Object.class));
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeArrayTypeName_add2() throws Exception {
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add2__1 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add2__2 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add2__3 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add2__4 = TypeName.get(Object[].class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add2__5 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeArrayTypeName_add3_mg267_failAssert1() throws Exception {
        try {
            ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__1 = ArrayTypeName.of(Object.class);
            ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__2 = ArrayTypeName.of(Object.class);
            TypeName o_equalsAndHashCodeArrayTypeName_add3__3 = TypeName.get(Object[].class);
            TypeName o_equalsAndHashCodeArrayTypeName_add3__4 = TypeName.get(Object[].class);
            ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__5 = ArrayTypeName.of(Object.class);
            o_equalsAndHashCodeArrayTypeName_add3__3.unbox();
            org.junit.Assert.fail("equalsAndHashCodeArrayTypeName_add3_mg267 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox java.lang.Object[]", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeArrayTypeName_add3_mg263() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_23 = new AnnotationSpec[]{  };
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__1 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__2 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add3__3 = TypeName.get(Object[].class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add3__4 = TypeName.get(Object[].class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__5 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add3_mg263__17 = o_equalsAndHashCodeArrayTypeName_add3__3.annotated(__DSPOT_annotations_23);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_mg263__17)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_mg263__17)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_mg263__17)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_mg263__17)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_mg263__17)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeArrayTypeName_add3_mg260() throws Exception {
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__1 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__2 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add3__3 = TypeName.get(Object[].class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add3__4 = TypeName.get(Object[].class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__5 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add3_mg260__16 = o_equalsAndHashCodeArrayTypeName_add3__1.withoutAnnotations();
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_mg260__16)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_mg260__16)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_mg260__16)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_mg260__16)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_mg260__16)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeArrayTypeName_add3_mg261() throws Exception {
        List<AnnotationSpec> __DSPOT_annotations_22 = Collections.<AnnotationSpec>emptyList();
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__1 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__2 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add3__3 = TypeName.get(Object[].class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add3__4 = TypeName.get(Object[].class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__5 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3_mg261__18 = o_equalsAndHashCodeArrayTypeName_add3__2.annotated(__DSPOT_annotations_22);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_mg261__18)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_mg261__18)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_mg261__18)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_mg261__18)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_mg261__18)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeArrayTypeName_add2_mg225() throws Exception {
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add2__1 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add2__2 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add2__3 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add2__4 = TypeName.get(Object[].class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add2__5 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add2_mg225__16 = o_equalsAndHashCodeArrayTypeName_add2__4.box();
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2_mg225__16)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2_mg225__16)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2_mg225__16)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2_mg225__16)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2_mg225__16)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeArrayTypeName_add3_add212() throws Exception {
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__1 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__2 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add3__3 = TypeName.get(Object[].class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add3__4 = TypeName.get(Object[].class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__5 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isPrimitive());
        ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isBoxedPrimitive();
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeArrayTypeName_add2_mg223litNum798() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_3 = new AnnotationSpec[1];
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add2__1 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add2__2 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add2__3 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add2__4 = TypeName.get(Object[].class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add2__5 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add2_mg223__17 = o_equalsAndHashCodeArrayTypeName_add2__4.annotated(__DSPOT_annotations_3);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2_mg223__17)).isBoxedPrimitive());
        Assert.assertTrue(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2_mg223__17)).isAnnotated());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2_mg223__17)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeArrayTypeName_add4_mg253_add6020() throws Exception {
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add4_mg253_add6020__1 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg253_add6020__1)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg253_add6020__1)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg253_add6020__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg253_add6020__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg253_add6020__1)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add4__1 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add4__2 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add4__3 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add4__4 = TypeName.get(Object[].class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add4__5 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add4_mg253__16 = o_equalsAndHashCodeArrayTypeName_add4__4.box();
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg253__16)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg253__16)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg253__16)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg253__16)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg253__16)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg253_add6020__1)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg253_add6020__1)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg253_add6020__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg253_add6020__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg253_add6020__1)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeArrayTypeName_add2_mg228_add6449() throws Exception {
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add2__1 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add2__2 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isPrimitive());
        ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isPrimitive();
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add2__3 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add2__4 = TypeName.get(Object[].class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add2__5 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add2_mg228__16 = o_equalsAndHashCodeArrayTypeName_add2__4.withoutAnnotations();
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2_mg228__16)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2_mg228__16)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2_mg228__16)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2_mg228__16)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2_mg228__16)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__1)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__2)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__3)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__4)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add2__5)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeArrayTypeName_add4_mg252_mg9996_failAssert5() throws Exception {
        try {
            List<AnnotationSpec> __DSPOT_annotations_18 = Collections.<AnnotationSpec>emptyList();
            ArrayTypeName o_equalsAndHashCodeArrayTypeName_add4__1 = ArrayTypeName.of(Object.class);
            ArrayTypeName o_equalsAndHashCodeArrayTypeName_add4__2 = ArrayTypeName.of(Object.class);
            ArrayTypeName o_equalsAndHashCodeArrayTypeName_add4__3 = ArrayTypeName.of(Object.class);
            TypeName o_equalsAndHashCodeArrayTypeName_add4__4 = TypeName.get(Object[].class);
            ArrayTypeName o_equalsAndHashCodeArrayTypeName_add4__5 = ArrayTypeName.of(Object.class);
            TypeName o_equalsAndHashCodeArrayTypeName_add4_mg252__18 = o_equalsAndHashCodeArrayTypeName_add4__4.annotated(__DSPOT_annotations_18);
            o_equalsAndHashCodeArrayTypeName_add4_mg252__18.unbox();
            org.junit.Assert.fail("equalsAndHashCodeArrayTypeName_add4_mg252_mg9996 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox java.lang.Object[]", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeArrayTypeName_add4_mg246_mg10004() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_116 = new AnnotationSpec[]{  };
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add4__1 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add4__2 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add4__3 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add4__4 = TypeName.get(Object[].class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add4__5 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add4_mg246__16 = o_equalsAndHashCodeArrayTypeName_add4__1.withoutAnnotations();
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg246__16)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg246__16)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg246__16)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg246__16)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg246__16)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add4_mg246_mg10004__20 = o_equalsAndHashCodeArrayTypeName_add4__4.annotated(__DSPOT_annotations_116);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg246_mg10004__20)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg246_mg10004__20)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg246_mg10004__20)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg246_mg10004__20)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg246_mg10004__20)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__1)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__2)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__3)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__4)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4__5)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg246__16)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg246__16)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg246__16)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg246__16)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add4_mg246__16)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeArrayTypeName_add3_add216_mg10978() throws Exception {
        List<AnnotationSpec> __DSPOT_annotations_603 = Collections.<AnnotationSpec>emptyList();
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__1 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__2 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add3__3 = TypeName.get(Object[].class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isPrimitive());
        TypeName o_equalsAndHashCodeArrayTypeName_add3__4 = TypeName.get(Object[].class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isPrimitive());
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3__5 = ArrayTypeName.of(Object.class);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isPrimitive());
        ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isPrimitive();
        ArrayTypeName o_equalsAndHashCodeArrayTypeName_add3_add216_mg10978__19 = o_equalsAndHashCodeArrayTypeName_add3__5.annotated(__DSPOT_annotations_603);
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_add216_mg10978__19)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_add216_mg10978__19)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_add216_mg10978__19)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_add216_mg10978__19)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3_add216_mg10978__19)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__1)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__2)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__3)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__4)).isPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isBoxedPrimitive());
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isAnnotated());
        Assert.assertEquals("java.lang.Object[]", ((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).toString());
        Assert.assertEquals(183594037, ((int) (((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).hashCode())));
        Assert.assertFalse(((ArrayTypeName) (o_equalsAndHashCodeArrayTypeName_add3__5)).isPrimitive());
    }

    @Test
    public void equalsAndHashCodeClassName() {
        assertEqualsHashCodeAndToString(ClassName.get(Object.class), ClassName.get(Object.class));
        assertEqualsHashCodeAndToString(TypeName.get(Object.class), ClassName.get(Object.class));
        assertEqualsHashCodeAndToString(ClassName.bestGuess("java.lang.Object"), ClassName.get(Object.class));
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassNamelitString13163_failAssert13() throws Exception {
        try {
            ClassName.get(Object.class);
            ClassName.get(Object.class);
            TypeName.get(Object.class);
            ClassName.get(Object.class);
            ClassName.bestGuess("\n");
            ClassName.get(Object.class);
            org.junit.Assert.fail("equalsAndHashCodeClassNamelitString13163 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("couldn\'t make a guess for \n", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13166() throws Exception {
        ClassName o_equalsAndHashCodeClassName_add13166__1 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13166__2 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13166__3 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isPrimitive());
        TypeName o_equalsAndHashCodeClassName_add13166__4 = TypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13166__5 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13166__6 = ClassName.bestGuess("java.lang.Object");
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13166__7 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassNamelitString13162_failAssert17() throws Exception {
        try {
            ClassName.get(Object.class);
            ClassName.get(Object.class);
            TypeName.get(Object.class);
            ClassName.get(Object.class);
            ClassName.bestGuess("");
            ClassName.get(Object.class);
            org.junit.Assert.fail("equalsAndHashCodeClassNamelitString13162 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("couldn\'t make a guess for ", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassNamelitString13160_mg14322() throws Exception {
        ClassName o_equalsAndHashCodeClassNamelitString13160__1 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).isPrimitive());
        ClassName o_equalsAndHashCodeClassNamelitString13160__2 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).isPrimitive());
        TypeName o_equalsAndHashCodeClassNamelitString13160__3 = TypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).isPrimitive());
        ClassName o_equalsAndHashCodeClassNamelitString13160__4 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).isPrimitive());
        ClassName o_equalsAndHashCodeClassNamelitString13160__5 = ClassName.bestGuess("jav.lang.Object");
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).isBoxedPrimitive());
        Assert.assertEquals("jav.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).toString());
        Assert.assertEquals(189290000, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).isPrimitive());
        ClassName o_equalsAndHashCodeClassNamelitString13160__6 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).isPrimitive());
        String o_equalsAndHashCodeClassNamelitString13160_mg14322__19 = o_equalsAndHashCodeClassNamelitString13160__1.reflectionName();
        Assert.assertEquals("java.lang.Object", o_equalsAndHashCodeClassNamelitString13160_mg14322__19);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).isBoxedPrimitive());
        Assert.assertEquals("jav.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).toString());
        Assert.assertEquals(189290000, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13166_mg14167_failAssert47() throws Exception {
        try {
            ClassName o_equalsAndHashCodeClassName_add13166__1 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13166__2 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13166__3 = ClassName.get(Object.class);
            TypeName o_equalsAndHashCodeClassName_add13166__4 = TypeName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13166__5 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13166__6 = ClassName.bestGuess("java.lang.Object");
            ClassName o_equalsAndHashCodeClassName_add13166__7 = ClassName.get(Object.class);
            o_equalsAndHashCodeClassName_add13166__4.unbox();
            org.junit.Assert.fail("equalsAndHashCodeClassName_add13166_mg14167 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox java.lang.Object", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13170_mg13975() throws Exception {
        String __DSPOT_name_1440 = ">T@&-]*#]GeIg,x4}FGS";
        ClassName o_equalsAndHashCodeClassName_add13170__1 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13170__2 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isPrimitive());
        TypeName o_equalsAndHashCodeClassName_add13170__3 = TypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13170__4 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13170__5 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13170__6 = ClassName.bestGuess("java.lang.Object");
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13170__7 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13170_mg13975__23 = o_equalsAndHashCodeClassName_add13170__5.peerClass(__DSPOT_name_1440);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170_mg13975__23)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170_mg13975__23)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.>T@&-]*#]GeIg,x4}FGS", ((ClassName) (o_equalsAndHashCodeClassName_add13170_mg13975__23)).toString());
        Assert.assertEquals(-1671468483, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170_mg13975__23)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170_mg13975__23)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13168litString13229_failAssert53() throws Exception {
        try {
            ClassName o_equalsAndHashCodeClassName_add13168__1 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13168__2 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13168__3 = ClassName.get(Object.class);
            TypeName o_equalsAndHashCodeClassName_add13168__4 = TypeName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13168__5 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13168__6 = ClassName.bestGuess("java.lang.bject");
            ClassName o_equalsAndHashCodeClassName_add13168__7 = ClassName.get(Object.class);
            org.junit.Assert.fail("equalsAndHashCodeClassName_add13168litString13229 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("couldn\'t make a guess for java.lang.bject", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13170litString13218() throws Exception {
        ClassName o_equalsAndHashCodeClassName_add13170__1 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13170__2 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isPrimitive());
        TypeName o_equalsAndHashCodeClassName_add13170__3 = TypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13170__4 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13170__5 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13170__6 = ClassName.bestGuess("String");
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isBoxedPrimitive());
        Assert.assertEquals("String", ((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).toString());
        Assert.assertEquals(-1808118735, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13170__7 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isBoxedPrimitive());
        Assert.assertEquals("String", ((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).toString());
        Assert.assertEquals(-1808118735, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13169_mg14087() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_1474 = new AnnotationSpec[]{  };
        ClassName o_equalsAndHashCodeClassName_add13169__1 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13169__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13169__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__1)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13169__2 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13169__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13169__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__2)).isPrimitive());
        TypeName o_equalsAndHashCodeClassName_add13169__3 = TypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13169__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13169__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__3)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13169__4 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13169__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13169__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__4)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13169__5 = ClassName.bestGuess("java.lang.Object");
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13169__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13169__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__5)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13169__6 = ClassName.bestGuess("java.lang.Object");
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13169__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13169__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__6)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13169__7 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13169__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13169__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__7)).isPrimitive());
        TypeName o_equalsAndHashCodeClassName_add13169_mg14087__23 = o_equalsAndHashCodeClassName_add13169__3.annotated(__DSPOT_annotations_1474);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169_mg14087__23)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169_mg14087__23)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13169_mg14087__23)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13169_mg14087__23)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169_mg14087__23)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13169__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13169__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13169__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13169__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13169__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13169__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13169__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13169__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13169__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13169__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13169__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13169__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__6)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13169__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13169__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13169__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13168litString13231_failAssert23() throws Exception {
        try {
            ClassName o_equalsAndHashCodeClassName_add13168__1 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13168__2 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13168__3 = ClassName.get(Object.class);
            TypeName o_equalsAndHashCodeClassName_add13168__4 = TypeName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13168__5 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13168__6 = ClassName.bestGuess("");
            ClassName o_equalsAndHashCodeClassName_add13168__7 = ClassName.get(Object.class);
            org.junit.Assert.fail("equalsAndHashCodeClassName_add13168litString13231 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("couldn\'t make a guess for ", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13170_mg13968() throws Exception {
        ClassName o_equalsAndHashCodeClassName_add13170__1 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13170__2 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isPrimitive());
        TypeName o_equalsAndHashCodeClassName_add13170__3 = TypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13170__4 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13170__5 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13170__6 = ClassName.bestGuess("java.lang.Object");
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13170__7 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).isPrimitive());
        List<String> o_equalsAndHashCodeClassName_add13170_mg13968__22 = o_equalsAndHashCodeClassName_add13170__4.simpleNames();
        Assert.assertTrue(o_equalsAndHashCodeClassName_add13170_mg13968__22.contains("Object"));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__6)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13170__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassNamenull13171_failAssert18_add13865() throws Exception {
        try {
            ClassName o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__3 = ClassName.get(Object.class);
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__3)).isAnnotated());
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__3)).isBoxedPrimitive());
            Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__3)).toString());
            Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__3)).hashCode())));
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__3)).isPrimitive());
            ClassName o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__4 = ClassName.get(Object.class);
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__4)).isAnnotated());
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__4)).isBoxedPrimitive());
            Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__4)).toString());
            Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__4)).hashCode())));
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__4)).isPrimitive());
            TypeName o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__5 = TypeName.get(Object.class);
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__5)).isAnnotated());
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__5)).isBoxedPrimitive());
            Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__5)).toString());
            Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__5)).hashCode())));
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__5)).isPrimitive());
            ClassName o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__6 = ClassName.get(Object.class);
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__6)).isAnnotated());
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__6)).isBoxedPrimitive());
            Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__6)).toString());
            Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__6)).hashCode())));
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__6)).isPrimitive());
            ClassName o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__7 = ClassName.get(Object.class);
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__7)).isAnnotated());
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__7)).isBoxedPrimitive());
            Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__7)).toString());
            Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__7)).hashCode())));
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamenull13171_failAssert18_add13865__7)).isPrimitive());
            ClassName.bestGuess(null);
            ClassName.get(Object.class);
            org.junit.Assert.fail("equalsAndHashCodeClassNamenull13171 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13168litString13232_failAssert44() throws Exception {
        try {
            ClassName o_equalsAndHashCodeClassName_add13168__1 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13168__2 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13168__3 = ClassName.get(Object.class);
            TypeName o_equalsAndHashCodeClassName_add13168__4 = TypeName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13168__5 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13168__6 = ClassName.bestGuess("\n");
            ClassName o_equalsAndHashCodeClassName_add13168__7 = ClassName.get(Object.class);
            org.junit.Assert.fail("equalsAndHashCodeClassName_add13168litString13232 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("couldn\'t make a guess for \n", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassNamelitString13160_mg14362() throws Exception {
        ClassName o_equalsAndHashCodeClassNamelitString13160__1 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).isPrimitive());
        ClassName o_equalsAndHashCodeClassNamelitString13160__2 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).isPrimitive());
        TypeName o_equalsAndHashCodeClassNamelitString13160__3 = TypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).isPrimitive());
        ClassName o_equalsAndHashCodeClassNamelitString13160__4 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).isPrimitive());
        ClassName o_equalsAndHashCodeClassNamelitString13160__5 = ClassName.bestGuess("jav.lang.Object");
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).isBoxedPrimitive());
        Assert.assertEquals("jav.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).toString());
        Assert.assertEquals(189290000, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).isPrimitive());
        ClassName o_equalsAndHashCodeClassNamelitString13160__6 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).isPrimitive());
        ClassName o_equalsAndHashCodeClassNamelitString13160_mg14362__19 = o_equalsAndHashCodeClassNamelitString13160__5.withoutAnnotations();
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160_mg14362__19)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160_mg14362__19)).isBoxedPrimitive());
        Assert.assertEquals("jav.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160_mg14362__19)).toString());
        Assert.assertEquals(189290000, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160_mg14362__19)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160_mg14362__19)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).isBoxedPrimitive());
        Assert.assertEquals("jav.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).toString());
        Assert.assertEquals(189290000, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13160__6)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13167_mg14259litString15491() throws Exception {
        ClassName o_equalsAndHashCodeClassName_add13167__1 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13167__2 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).isPrimitive());
        TypeName o_equalsAndHashCodeClassName_add13167__3 = TypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).isPrimitive());
        TypeName o_equalsAndHashCodeClassName_add13167__4 = TypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13167__5 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13167__6 = ClassName.bestGuess("YBb&j?hx1If127X{");
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).isBoxedPrimitive());
        Assert.assertEquals("YBb&j?hx1If127X{", ((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).toString());
        Assert.assertEquals(-1359282019, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13167__7 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13167_mg14259__22 = o_equalsAndHashCodeClassName_add13167__7.topLevelClassName();
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259__22)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259__22)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259__22)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259__22)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259__22)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).isBoxedPrimitive());
        Assert.assertEquals("YBb&j?hx1If127X{", ((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).toString());
        Assert.assertEquals(-1359282019, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13165_add13333_mg26302() throws Exception {
        String __DSPOT_name_2328 = "!l74E&<>g32*bUYE=Vv`";
        ClassName o_equalsAndHashCodeClassName_add13165__1 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13165__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13165__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__1)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13165__2 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13165__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13165__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__2)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13165__3 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13165__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13165__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__3)).isPrimitive());
        TypeName o_equalsAndHashCodeClassName_add13165__4 = TypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13165__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13165__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__4)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13165__5 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13165__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13165__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__5)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13165__6 = ClassName.bestGuess("java.lang.Object");
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13165__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13165__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__6)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13165__7 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13165__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13165__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__7)).isPrimitive());
        ((ClassName) (o_equalsAndHashCodeClassName_add13165__6)).isAnnotated();
        ClassName o_equalsAndHashCodeClassName_add13165_add13333_mg26302__24 = o_equalsAndHashCodeClassName_add13165__5.peerClass(__DSPOT_name_2328);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165_add13333_mg26302__24)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165_add13333_mg26302__24)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.!l74E&<>g32*bUYE=Vv`", ((ClassName) (o_equalsAndHashCodeClassName_add13165_add13333_mg26302__24)).toString());
        Assert.assertEquals(1370288645, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13165_add13333_mg26302__24)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165_add13333_mg26302__24)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13165__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13165__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13165__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13165__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13165__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13165__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13165__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13165__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13165__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13165__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13165__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13165__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__6)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13165__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13165__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13165__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746_rv36246() throws Exception {
        try {
            List<AnnotationSpec> __DSPOT_annotations_1660 = Collections.<AnnotationSpec>emptyList();
            ClassName o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__5 = ClassName.get(Object.class);
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__5)).isAnnotated());
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__5)).isBoxedPrimitive());
            Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__5)).toString());
            Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__5)).hashCode())));
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__5)).isPrimitive());
            ClassName __DSPOT_invoc_4 = ClassName.get(Object.class);
            TypeName o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__9 = TypeName.get(Object.class);
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__9)).isAnnotated());
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__9)).isBoxedPrimitive());
            Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__9)).toString());
            Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__9)).hashCode())));
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__9)).isPrimitive());
            ClassName o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__10 = ClassName.get(Object.class);
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__10)).isAnnotated());
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__10)).isBoxedPrimitive());
            Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__10)).toString());
            Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__10)).hashCode())));
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassNamelitString13162_failAssert17_rv14746__10)).isPrimitive());
            ClassName __DSPOT_invoc_62 = ClassName.bestGuess("");
            ClassName.get(Object.class);
            org.junit.Assert.fail("equalsAndHashCodeClassNamelitString13162 should have thrown IllegalArgumentException");
            __DSPOT_invoc_4.annotated(__DSPOT_annotations_1660);
            __DSPOT_invoc_62.enclosingClassName();
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13165_mg13921litString15748_failAssert77() throws Exception {
        try {
            ClassName o_equalsAndHashCodeClassName_add13165__1 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13165__2 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13165__3 = ClassName.get(Object.class);
            TypeName o_equalsAndHashCodeClassName_add13165__4 = TypeName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13165__5 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13165__6 = ClassName.bestGuess("");
            ClassName o_equalsAndHashCodeClassName_add13165__7 = ClassName.get(Object.class);
            String o_equalsAndHashCodeClassName_add13165_mg13921__22 = o_equalsAndHashCodeClassName_add13165__6.simpleName();
            org.junit.Assert.fail("equalsAndHashCodeClassName_add13165_mg13921litString15748 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("couldn\'t make a guess for ", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13167_mg14259_mg25457() throws Exception {
        ClassName o_equalsAndHashCodeClassName_add13167__1 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13167__2 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).isPrimitive());
        TypeName o_equalsAndHashCodeClassName_add13167__3 = TypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).isPrimitive());
        TypeName o_equalsAndHashCodeClassName_add13167__4 = TypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13167__5 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13167__6 = ClassName.bestGuess("java.lang.Object");
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13167__7 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13167_mg14259__22 = o_equalsAndHashCodeClassName_add13167__7.topLevelClassName();
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259__22)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259__22)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259__22)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259__22)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259__22)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13167_mg14259_mg25457__25 = o_equalsAndHashCodeClassName_add13167__5.withoutAnnotations();
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259_mg25457__25)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259_mg25457__25)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259_mg25457__25)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259_mg25457__25)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259_mg25457__25)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__6)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167__7)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259__22)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259__22)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259__22)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259__22)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13167_mg14259__22)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13168_mg14038_mg30426_failAssert72() throws Exception {
        try {
            ClassName o_equalsAndHashCodeClassName_add13168__1 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13168__2 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13168__3 = ClassName.get(Object.class);
            TypeName o_equalsAndHashCodeClassName_add13168__4 = TypeName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13168__5 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13168__6 = ClassName.bestGuess("java.lang.Object");
            ClassName o_equalsAndHashCodeClassName_add13168__7 = ClassName.get(Object.class);
            o_equalsAndHashCodeClassName_add13168__5.enclosingClassName();
            o_equalsAndHashCodeClassName_add13168__4.unbox();
            org.junit.Assert.fail("equalsAndHashCodeClassName_add13168_mg14038_mg30426 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox java.lang.Object", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13166_mg14191null36831() throws Exception {
        String __DSPOT_name_1508 = null;
        ClassName o_equalsAndHashCodeClassName_add13166__1 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13166__2 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13166__3 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isPrimitive());
        TypeName o_equalsAndHashCodeClassName_add13166__4 = TypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13166__5 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13166__6 = ClassName.bestGuess("java.lang.Object");
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13166__7 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13166_mg14191__23 = o_equalsAndHashCodeClassName_add13166__7.nestedClass(__DSPOT_name_1508);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166_mg14191__23)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166_mg14191__23)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object.null", ((ClassName) (o_equalsAndHashCodeClassName_add13166_mg14191__23)).toString());
        Assert.assertEquals(1915652354, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166_mg14191__23)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166_mg14191__23)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13166litString13251_mg27615() throws Exception {
        ClassName o_equalsAndHashCodeClassName_add13166__1 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13166__2 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13166__3 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isPrimitive());
        TypeName o_equalsAndHashCodeClassName_add13166__4 = TypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13166__5 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13166__6 = ClassName.bestGuess("java.lang.Ob,ect");
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Ob,ect", ((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).toString());
        Assert.assertEquals(1062029969, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isPrimitive());
        ClassName o_equalsAndHashCodeClassName_add13166__7 = ClassName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).isPrimitive());
        String o_equalsAndHashCodeClassName_add13166litString13251_mg27615__22 = o_equalsAndHashCodeClassName_add13166__1.reflectionName();
        Assert.assertEquals("java.lang.Object", o_equalsAndHashCodeClassName_add13166litString13251_mg27615__22);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Ob,ect", ((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).toString());
        Assert.assertEquals(1062029969, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__6)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeClassName_add13166__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13167_mg14259litString15494_failAssert56() throws Exception {
        try {
            ClassName o_equalsAndHashCodeClassName_add13167__1 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13167__2 = ClassName.get(Object.class);
            TypeName o_equalsAndHashCodeClassName_add13167__3 = TypeName.get(Object.class);
            TypeName o_equalsAndHashCodeClassName_add13167__4 = TypeName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13167__5 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13167__6 = ClassName.bestGuess(":");
            ClassName o_equalsAndHashCodeClassName_add13167__7 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13167_mg14259__22 = o_equalsAndHashCodeClassName_add13167__7.topLevelClassName();
            org.junit.Assert.fail("equalsAndHashCodeClassName_add13167_mg14259litString15494 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("couldn\'t make a guess for :", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeClassName_add13167_mg14259litString15487_failAssert94() throws Exception {
        try {
            ClassName o_equalsAndHashCodeClassName_add13167__1 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13167__2 = ClassName.get(Object.class);
            TypeName o_equalsAndHashCodeClassName_add13167__3 = TypeName.get(Object.class);
            TypeName o_equalsAndHashCodeClassName_add13167__4 = TypeName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13167__5 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13167__6 = ClassName.bestGuess("testGenericStringInner");
            ClassName o_equalsAndHashCodeClassName_add13167__7 = ClassName.get(Object.class);
            ClassName o_equalsAndHashCodeClassName_add13167_mg14259__22 = o_equalsAndHashCodeClassName_add13167__7.topLevelClassName();
            org.junit.Assert.fail("equalsAndHashCodeClassName_add13167_mg14259litString15487 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("couldn\'t make a guess for testGenericStringInner", expected.getMessage());
        }
    }

    @Test
    public void equalsAndHashCodeParameterizedTypeName() {
        assertEqualsHashCodeAndToString(ParameterizedTypeName.get(Object.class), ParameterizedTypeName.get(Object.class));
        assertEqualsHashCodeAndToString(ParameterizedTypeName.get(Set.class, UUID.class), ParameterizedTypeName.get(Set.class, UUID.class));
        Assert.assertNotEquals(ClassName.get(List.class), ParameterizedTypeName.get(List.class, String.class));
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37427() throws Exception {
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__3 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__5 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37427__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37427_mg37895() throws Exception {
        String __DSPOT_name_5595 = "TRQAQAv9A?M!G,39l.>O";
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__3 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__5 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37427__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427_mg37895__23 = o_equalsAndHashCodeParameterizedTypeName_add37427__4.nestedClass(__DSPOT_name_5595);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37895__23)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37895__23)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>.TRQAQAv9A?M!G,39l.>O", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37895__23)).toString());
        Assert.assertEquals(2070774230, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37895__23)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37895__23)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37425_mg38088_failAssert99() throws Exception {
        try {
            TypeName o_equalsAndHashCodeParameterizedTypeName_add37425__1 = ParameterizedTypeName.get(Object.class);
            TypeName o_equalsAndHashCodeParameterizedTypeName_add37425__2 = ParameterizedTypeName.get(Object.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37425__3 = ParameterizedTypeName.get(Set.class, UUID.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37425__4 = ParameterizedTypeName.get(Set.class, UUID.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37425__5 = ParameterizedTypeName.get(Set.class, UUID.class);
            ClassName o_equalsAndHashCodeParameterizedTypeName_add37425__6 = ClassName.get(List.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37425__7 = ParameterizedTypeName.get(List.class, String.class);
            o_equalsAndHashCodeParameterizedTypeName_add37425__2.unbox();
            org.junit.Assert.fail("equalsAndHashCodeParameterizedTypeName_add37425_mg38088 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox java.lang.Object", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37427_mg37878() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_5584 = new AnnotationSpec[]{  };
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__3 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__5 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37427__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427_mg37878__23 = o_equalsAndHashCodeParameterizedTypeName_add37427__1.annotated(__DSPOT_annotations_5584);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37878__23)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37878__23)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37878__23)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37878__23)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37878__23)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37425_mg38107() throws Exception {
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37425__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37425__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37425__3 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37425__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37425__5 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37425__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37425__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).isPrimitive());
        String o_equalsAndHashCodeParameterizedTypeName_add37425_mg38107__22 = o_equalsAndHashCodeParameterizedTypeName_add37425__6.reflectionName();
        Assert.assertEquals("java.util.List", o_equalsAndHashCodeParameterizedTypeName_add37425_mg38107__22);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37427_mg37906() throws Exception {
        String __DSPOT_name_5604 = "wL,OlZz8kf7(xR*(!&{]";
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__3 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__5 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37427__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37427_mg37906__23 = o_equalsAndHashCodeParameterizedTypeName_add37427__6.peerClass(__DSPOT_name_5604);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37906__23)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37906__23)).isBoxedPrimitive());
        Assert.assertEquals("java.util.wL,OlZz8kf7(xR*(!&{]", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37906__23)).toString());
        Assert.assertEquals(542264527, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37906__23)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37906__23)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37426_mg37953() throws Exception {
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37426__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37426__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__2)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37426__3 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37426__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__4)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37426__5 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__5)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37426__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37426__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__7)).isPrimitive());
        List<String> o_equalsAndHashCodeParameterizedTypeName_add37426_mg37953__22 = o_equalsAndHashCodeParameterizedTypeName_add37426__6.simpleNames();
        Assert.assertTrue(o_equalsAndHashCodeParameterizedTypeName_add37426_mg37953__22.contains("List"));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__2)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__5)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37426__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37426__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37427_mg37893() throws Exception {
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__3 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__5 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37427__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427_mg37893__22 = o_equalsAndHashCodeParameterizedTypeName_add37427__3.withoutAnnotations();
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37893__22)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37893__22)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37893__22)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37893__22)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37893__22)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37425_mg38086() throws Exception {
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37425__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37425__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37425__3 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37425__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37425__5 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37425__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37425__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37425_mg38086__22 = o_equalsAndHashCodeParameterizedTypeName_add37425__2.box();
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425_mg38086__22)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425_mg38086__22)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425_mg38086__22)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425_mg38086__22)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425_mg38086__22)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__2)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37425__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37427_mg37883() throws Exception {
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__3 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__5 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37427__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427_mg37883__22 = o_equalsAndHashCodeParameterizedTypeName_add37427__1.withoutAnnotations();
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37883__22)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37883__22)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37883__22)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37883__22)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37883__22)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37427_mg37894() throws Exception {
        List<AnnotationSpec> __DSPOT_annotations_5594 = Collections.<AnnotationSpec>emptyList();
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__3 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__5 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37427__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427_mg37894__24 = o_equalsAndHashCodeParameterizedTypeName_add37427__4.annotated(__DSPOT_annotations_5594);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37894__24)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37894__24)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37894__24)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37894__24)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37894__24)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37423_mg38033_mg58539() throws Exception {
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37423__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37423__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37423__3 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37423__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37423__5 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37423__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37423__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isPrimitive());
        List<String> o_equalsAndHashCodeParameterizedTypeName_add37423_mg38033__22 = o_equalsAndHashCodeParameterizedTypeName_add37423__6.simpleNames();
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37423_mg38033_mg58539__25 = o_equalsAndHashCodeParameterizedTypeName_add37423__6.withoutAnnotations();
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423_mg38033_mg58539__25)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423_mg38033_mg58539__25)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423_mg38033_mg58539__25)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423_mg38033_mg58539__25)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423_mg38033_mg58539__25)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37427_mg37900_mg52835() throws Exception {
        String __DSPOT_name_6249 = "(ky2I}VYy4^ChZh6zluC";
        List<TypeName> __DSPOT_typeArguments_5601 = Collections.<TypeName>emptyList();
        String __DSPOT_name_5600 = "TQIf^egSY;@d6-]]nXQ>";
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__3 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__5 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37427__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900__25 = o_equalsAndHashCodeParameterizedTypeName_add37427__5.nestedClass(__DSPOT_name_5600, __DSPOT_typeArguments_5601);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900__25)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900__25)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>.TQIf^egSY;@d6-]]nXQ>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900__25)).toString());
        Assert.assertEquals(-1733566156, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900__25)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900__25)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900_mg52835__29 = o_equalsAndHashCodeParameterizedTypeName_add37427__4.nestedClass(__DSPOT_name_6249);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900_mg52835__29)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900_mg52835__29)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>.(ky2I}VYy4^ChZh6zluC", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900_mg52835__29)).toString());
        Assert.assertEquals(-934270536, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900_mg52835__29)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900_mg52835__29)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900__25)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900__25)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>.TQIf^egSY;@d6-]]nXQ>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900__25)).toString());
        Assert.assertEquals(-1733566156, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900__25)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900__25)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37424_mg38040litNum38843() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_5681 = new AnnotationSpec[1];
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37424__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37424__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__3 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__5 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37424__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37424_mg38040__23 = o_equalsAndHashCodeParameterizedTypeName_add37424__1.annotated(__DSPOT_annotations_5681);
        Assert.assertTrue(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38040__23)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38040__23)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37423_mg38002_add41217() throws Exception {
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37423__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37423__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37423__3 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37423__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37423__5 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37423__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37423__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isPrimitive());
        ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).toString();
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37423_mg38002__22 = o_equalsAndHashCodeParameterizedTypeName_add37423__1.box();
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423_mg38002__22)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423_mg38002__22)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423_mg38002__22)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423_mg38002__22)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423_mg38002__22)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37427_mg37895litString38705() throws Exception {
        String __DSPOT_name_5595 = "\n";
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__3 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__5 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37427__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427_mg37895__23 = o_equalsAndHashCodeParameterizedTypeName_add37427__4.nestedClass(__DSPOT_name_5595);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37895__23)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37895__23)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>.\n", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37895__23)).toString());
        Assert.assertEquals(356958341, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37895__23)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37895__23)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37424_mg38066null59304() throws Exception {
        String __DSPOT_name_5700 = "NT^Yt.HH=lC6SBqYfz:S";
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37424__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37424__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__3 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__5 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37424__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37424_mg38066__23 = o_equalsAndHashCodeParameterizedTypeName_add37424__6.nestedClass(null);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38066__23)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38066__23)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List.null", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38066__23)).toString());
        Assert.assertEquals(-958435561, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38066__23)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38066__23)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37425_add37859_mg55030_failAssert106() throws Exception {
        try {
            TypeName o_equalsAndHashCodeParameterizedTypeName_add37425__1 = ParameterizedTypeName.get(Object.class);
            TypeName o_equalsAndHashCodeParameterizedTypeName_add37425__2 = ParameterizedTypeName.get(Object.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37425__3 = ParameterizedTypeName.get(Set.class, UUID.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37425__4 = ParameterizedTypeName.get(Set.class, UUID.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37425__5 = ParameterizedTypeName.get(Set.class, UUID.class);
            ClassName o_equalsAndHashCodeParameterizedTypeName_add37425__6 = ClassName.get(List.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37425__7 = ParameterizedTypeName.get(List.class, String.class);
            ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37425__3)).isAnnotated();
            o_equalsAndHashCodeParameterizedTypeName_add37425__2.unbox();
            org.junit.Assert.fail("equalsAndHashCodeParameterizedTypeName_add37425_add37859_mg55030 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox java.lang.Object", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37423_mg38039_add50672() throws Exception {
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37423__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isPrimitive());
        ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isAnnotated();
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37423__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37423__3 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37423__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37423__5 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37423__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37423__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37423_mg38039__22 = o_equalsAndHashCodeParameterizedTypeName_add37423__7.withoutAnnotations();
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423_mg38039__22)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423_mg38039__22)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423_mg38039__22)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423_mg38039__22)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423_mg38039__22)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37424_mg38061null59301_failAssert108() throws Exception {
        try {
            String __DSPOT_name_5696 = null;
            TypeName o_equalsAndHashCodeParameterizedTypeName_add37424__1 = ParameterizedTypeName.get(Object.class);
            TypeName o_equalsAndHashCodeParameterizedTypeName_add37424__2 = ParameterizedTypeName.get(Object.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__3 = ParameterizedTypeName.get(Set.class, UUID.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__4 = ParameterizedTypeName.get(Set.class, UUID.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__5 = ParameterizedTypeName.get(Set.class, UUID.class);
            ClassName o_equalsAndHashCodeParameterizedTypeName_add37424__6 = ClassName.get(List.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__7 = ParameterizedTypeName.get(List.class, String.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23 = o_equalsAndHashCodeParameterizedTypeName_add37424__5.nestedClass(__DSPOT_name_5696);
            org.junit.Assert.fail("equalsAndHashCodeParameterizedTypeName_add37424_mg38061null59301 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals("name == null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37424_mg38061_mg57161() throws Exception {
        String __DSPOT_name_5696 = "g4)JZB_o>bGy,78JQ_TI";
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37424__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37424__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__3 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__5 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37424__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23 = o_equalsAndHashCodeParameterizedTypeName_add37424__5.nestedClass(__DSPOT_name_5696);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>.g4)JZB_o>bGy,78JQ_TI", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).toString());
        Assert.assertEquals(-622396959, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).isPrimitive());
        List<String> o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061_mg57161__26 = o_equalsAndHashCodeParameterizedTypeName_add37424__6.simpleNames();
        Assert.assertTrue(o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061_mg57161__26.contains("List"));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>.g4)JZB_o>bGy,78JQ_TI", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).toString());
        Assert.assertEquals(-622396959, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37423_mg38033null59331() throws Exception {
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37423__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37423__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37423__3 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37423__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37423__5 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37423__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37423__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isPrimitive());
        List<String> o_equalsAndHashCodeParameterizedTypeName_add37423_mg38033__22 = o_equalsAndHashCodeParameterizedTypeName_add37423__6.simpleNames();
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37423__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37423__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37427_mg37906litString38716() throws Exception {
        String __DSPOT_name_5604 = "wL,OlZz8kf7(xR*(!H{]";
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__3 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__5 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37427__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37427_mg37906__23 = o_equalsAndHashCodeParameterizedTypeName_add37427__6.peerClass(__DSPOT_name_5604);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37906__23)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37906__23)).isBoxedPrimitive());
        Assert.assertEquals("java.util.wL,OlZz8kf7(xR*(!H{]", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37906__23)).toString());
        Assert.assertEquals(542297201, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37906__23)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427_mg37906__23)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__2)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37427__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37427__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37427_mg37900null59267_failAssert109() throws Exception {
        try {
            List<TypeName> __DSPOT_typeArguments_5601 = Collections.<TypeName>emptyList();
            String __DSPOT_name_5600 = "TQIf^egSY;@d6-]]nXQ>";
            TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__1 = ParameterizedTypeName.get(Object.class);
            TypeName o_equalsAndHashCodeParameterizedTypeName_add37427__2 = ParameterizedTypeName.get(Object.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__3 = ParameterizedTypeName.get(Set.class, UUID.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__4 = ParameterizedTypeName.get(Set.class, UUID.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__5 = ParameterizedTypeName.get(List.class, String.class);
            ClassName o_equalsAndHashCodeParameterizedTypeName_add37427__6 = ClassName.get(List.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427__7 = ParameterizedTypeName.get(List.class, String.class);
            ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37427_mg37900__25 = o_equalsAndHashCodeParameterizedTypeName_add37427__5.nestedClass(null, __DSPOT_typeArguments_5601);
            org.junit.Assert.fail("equalsAndHashCodeParameterizedTypeName_add37427_mg37900null59267 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals("name == null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeParameterizedTypeName_add37424_mg38061_mg57159() throws Exception {
        String __DSPOT_name_5696 = "g4)JZB_o>bGy,78JQ_TI";
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37424__1 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isPrimitive());
        TypeName o_equalsAndHashCodeParameterizedTypeName_add37424__2 = ParameterizedTypeName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__3 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__4 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__5 = ParameterizedTypeName.get(Set.class, UUID.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isPrimitive());
        ClassName o_equalsAndHashCodeParameterizedTypeName_add37424__6 = ClassName.get(List.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424__7 = ParameterizedTypeName.get(List.class, String.class);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isPrimitive());
        ParameterizedTypeName o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23 = o_equalsAndHashCodeParameterizedTypeName_add37424__5.nestedClass(__DSPOT_name_5696);
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>.g4)JZB_o>bGy,78JQ_TI", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).toString());
        Assert.assertEquals(-622396959, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).isPrimitive());
        String o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061_mg57159__26 = o_equalsAndHashCodeParameterizedTypeName_add37424__6.reflectionName();
        Assert.assertEquals("java.util.List", o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061_mg57159__26);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__2)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__3)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__4)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).toString());
        Assert.assertEquals(1113219369, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List", ((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).toString());
        Assert.assertEquals(65821278, ((int) (((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeParameterizedTypeName_add37424__6)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isBoxedPrimitive());
        Assert.assertEquals("java.util.List<java.lang.String>", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).toString());
        Assert.assertEquals(2123584667, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424__7)).isPrimitive());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).isAnnotated());
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).isBoxedPrimitive());
        Assert.assertEquals("java.util.Set<java.util.UUID>.g4)JZB_o>bGy,78JQ_TI", ((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).toString());
        Assert.assertEquals(-622396959, ((int) (((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).hashCode())));
        Assert.assertFalse(((ParameterizedTypeName) (o_equalsAndHashCodeParameterizedTypeName_add37424_mg38061__23)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName() throws Exception {
        TypeName o_equalsAndHashCodeTypeVariableName__1 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName__1)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName__2 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName__2)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName__2)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableNamelitString59863() throws Exception {
        TypeName o_equalsAndHashCodeTypeVariableNamelitString59863__1 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__1)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableNamelitString59863__2 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__2)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get(":", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals(":", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(58, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59863__2)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals(":", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(58, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59882() throws Exception {
        TypeName o_equalsAndHashCodeTypeVariableName_mg59882__1 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59882__2 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59882__7 = typeVar2.withoutAnnotations();
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59880() throws Exception {
        Type[] __DSPOT_bounds_10172 = new Type[]{  };
        TypeName o_equalsAndHashCodeTypeVariableName_mg59880__2 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59880__3 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        TypeVariableName o_equalsAndHashCodeTypeVariableName_mg59880__8 = typeVar2.withBounds(__DSPOT_bounds_10172);
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59880__8)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59880__8)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59880__8)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59880__8)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59880__8)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59876() throws Exception {
        List<? extends TypeName> __DSPOT_bounds_10169 = Collections.emptyList();
        TypeName o_equalsAndHashCodeTypeVariableName_mg59876__3 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__3)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59876__4 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__4)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        TypeVariableName o_equalsAndHashCodeTypeVariableName_mg59876__9 = typeVar1.withBounds(__DSPOT_bounds_10169);
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59876__9)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59876__9)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59876__9)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59876__9)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59876__9)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59876__4)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59879() throws Exception {
        TypeName[] __DSPOT_bounds_10171 = new TypeName[0];
        TypeName o_equalsAndHashCodeTypeVariableName_mg59879__2 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59879__3 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        TypeVariableName o_equalsAndHashCodeTypeVariableName_mg59879__8 = typeVar2.withBounds(__DSPOT_bounds_10171);
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59879__8)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59879__8)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59879__8)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59879__8)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59879__8)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59878() throws Exception {
        List<AnnotationSpec> __DSPOT_annotations_10170 = Collections.<AnnotationSpec>emptyList();
        TypeName o_equalsAndHashCodeTypeVariableName_mg59878__3 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59878__4 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        TypeVariableName o_equalsAndHashCodeTypeVariableName_mg59878__9 = typeVar2.annotated(__DSPOT_annotations_10170);
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59878__9)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59878__9)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59878__9)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59878__9)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59878__9)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableNamelitString59867() throws Exception {
        TypeName o_equalsAndHashCodeTypeVariableNamelitString59867__1 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableNamelitString59867__2 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("\n", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("\n", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(10, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableNamenull59883_failAssert123() throws Exception {
        try {
            TypeVariableName.get(Object.class);
            TypeVariableName.get(Object.class);
            TypeVariableName typeVar1 = TypeVariableName.get(null, Comparator.class, Serializable.class);
            TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
            org.junit.Assert.fail("equalsAndHashCodeTypeVariableNamenull59883 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals("name == null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableNamelitString59859_mg61326() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_10261 = new AnnotationSpec[]{  };
        TypeName o_equalsAndHashCodeTypeVariableNamelitString59859__1 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__1)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableNamelitString59859__2 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__2)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("generic", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("generic", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(-80148009, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableNamelitString59859_mg61326__12 = o_equalsAndHashCodeTypeVariableNamelitString59859__2.annotated(__DSPOT_annotations_10261);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859_mg61326__12)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859_mg61326__12)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859_mg61326__12)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859_mg61326__12)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859_mg61326__12)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59859__2)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("generic", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(-80148009, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableNamenull59883_failAssert123_add61186() throws Exception {
        try {
            TypeName o_equalsAndHashCodeTypeVariableNamenull59883_failAssert123_add61186__3 = TypeVariableName.get(Object.class);
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamenull59883_failAssert123_add61186__3)).isAnnotated());
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamenull59883_failAssert123_add61186__3)).isBoxedPrimitive());
            Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamenull59883_failAssert123_add61186__3)).toString());
            Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamenull59883_failAssert123_add61186__3)).hashCode())));
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamenull59883_failAssert123_add61186__3)).isPrimitive());
            TypeName o_equalsAndHashCodeTypeVariableNamenull59883_failAssert123_add61186__4 = TypeVariableName.get(Object.class);
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamenull59883_failAssert123_add61186__4)).isAnnotated());
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamenull59883_failAssert123_add61186__4)).isBoxedPrimitive());
            Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamenull59883_failAssert123_add61186__4)).toString());
            Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamenull59883_failAssert123_add61186__4)).hashCode())));
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamenull59883_failAssert123_add61186__4)).isPrimitive());
            TypeVariableName typeVar1 = TypeVariableName.get(null, Comparator.class, Serializable.class);
            TypeVariableName.get("T", Comparator.class, Serializable.class);
            TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
            org.junit.Assert.fail("equalsAndHashCodeTypeVariableNamenull59883 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableNamelitString59863_mg61484_failAssert153() throws Exception {
        try {
            TypeName o_equalsAndHashCodeTypeVariableNamelitString59863__1 = TypeVariableName.get(Object.class);
            TypeName o_equalsAndHashCodeTypeVariableNamelitString59863__2 = TypeVariableName.get(Object.class);
            TypeVariableName typeVar1 = TypeVariableName.get(":", Comparator.class, Serializable.class);
            TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
            o_equalsAndHashCodeTypeVariableNamelitString59863__2.unbox();
            org.junit.Assert.fail("equalsAndHashCodeTypeVariableNamelitString59863_mg61484 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox java.lang.Object", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59878null61860_failAssert147() throws Exception {
        try {
            List<AnnotationSpec> __DSPOT_annotations_10170 = Collections.<AnnotationSpec>emptyList();
            TypeName o_equalsAndHashCodeTypeVariableName_mg59878__3 = TypeVariableName.get(Object.class);
            TypeName o_equalsAndHashCodeTypeVariableName_mg59878__4 = TypeVariableName.get(Object.class);
            TypeVariableName typeVar1 = TypeVariableName.get(null, Comparator.class, Serializable.class);
            TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
            TypeVariableName o_equalsAndHashCodeTypeVariableName_mg59878__9 = typeVar2.annotated(__DSPOT_annotations_10170);
            org.junit.Assert.fail("equalsAndHashCodeTypeVariableName_mg59878null61860 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals("name == null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59877_add61040() throws Exception {
        TypeName o_equalsAndHashCodeTypeVariableName_mg59877__1 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__1)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59877__2 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__2)).isPrimitive());
        TypeVariableName o_equalsAndHashCodeTypeVariableName_mg59877_add61040__7 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59877_add61040__7)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59877_add61040__7)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59877_add61040__7)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59877_add61040__7)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59877_add61040__7)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59877__7 = typeVar1.withoutAnnotations();
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59877__7)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59877__7)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59877__7)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59877__7)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59877__7)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59877__2)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59877_add61040__7)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59877_add61040__7)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59877_add61040__7)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59877_add61040__7)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59877_add61040__7)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59879litNum60129_failAssert138() throws Exception {
        try {
            TypeName[] __DSPOT_bounds_10171 = new TypeName[1];
            TypeName o_equalsAndHashCodeTypeVariableName_mg59879__2 = TypeVariableName.get(Object.class);
            TypeName o_equalsAndHashCodeTypeVariableName_mg59879__3 = TypeVariableName.get(Object.class);
            TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
            TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
            TypeVariableName o_equalsAndHashCodeTypeVariableName_mg59879__8 = typeVar2.withBounds(__DSPOT_bounds_10171);
            org.junit.Assert.fail("equalsAndHashCodeTypeVariableName_mg59879litNum60129 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals(null, expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59879_add61125() throws Exception {
        TypeName[] __DSPOT_bounds_10171 = new TypeName[0];
        TypeName o_equalsAndHashCodeTypeVariableName_mg59879__2 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59879__3 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        TypeVariableName o_equalsAndHashCodeTypeVariableName_mg59879__8 = typeVar2.withBounds(__DSPOT_bounds_10171);
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59879__8)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59879__8)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59879__8)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59879__8)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59879__8)).isPrimitive());
        ((TypeVariableName) (typeVar2)).toString();
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59879__3)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59879__8)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59879__8)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59879__8)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59879__8)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59879__8)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableNamelitString59867_mg61510() throws Exception {
        Type[] __DSPOT_bounds_10378 = new Type[0];
        TypeName o_equalsAndHashCodeTypeVariableNamelitString59867__1 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableNamelitString59867__2 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("\n", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("\n", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(10, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        TypeVariableName o_equalsAndHashCodeTypeVariableNamelitString59867_mg61510__12 = typeVar1.withBounds(__DSPOT_bounds_10378);
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableNamelitString59867_mg61510__12)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableNamelitString59867_mg61510__12)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableNamelitString59867_mg61510__12)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableNamelitString59867_mg61510__12)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableNamelitString59867_mg61510__12)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59867__2)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("\n", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(10, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59882_mg61607() throws Exception {
        TypeName o_equalsAndHashCodeTypeVariableName_mg59882__1 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59882__2 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59882__7 = typeVar2.withoutAnnotations();
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59882_mg61607__14 = o_equalsAndHashCodeTypeVariableName_mg59882__2.box();
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882_mg61607__14)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882_mg61607__14)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882_mg61607__14)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882_mg61607__14)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882_mg61607__14)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59878litString60090() throws Exception {
        List<AnnotationSpec> __DSPOT_annotations_10170 = Collections.<AnnotationSpec>emptyList();
        TypeName o_equalsAndHashCodeTypeVariableName_mg59878__3 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59878__4 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("v", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("v", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(118, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        TypeVariableName o_equalsAndHashCodeTypeVariableName_mg59878__9 = typeVar2.annotated(__DSPOT_annotations_10170);
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59878__9)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59878__9)).isAnnotated());
        Assert.assertEquals("v", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59878__9)).toString());
        Assert.assertEquals(118, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59878__9)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59878__9)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("v", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(118, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableNamelitString59864_add60623() throws Exception {
        TypeName o_equalsAndHashCodeTypeVariableNamelitString59864__1 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableNamelitString59864__2 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        ((TypeVariableName) (typeVar1)).toString();
        TypeVariableName typeVar2 = TypeVariableName.get("java.lang", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("java.lang", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(-888658374, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59879_mg61715litNum63341_failAssert183() throws Exception {
        try {
            AnnotationSpec[] __DSPOT_annotations_10511 = new AnnotationSpec[]{  };
            TypeName[] __DSPOT_bounds_10171 = new TypeName[1];
            TypeName o_equalsAndHashCodeTypeVariableName_mg59879__2 = TypeVariableName.get(Object.class);
            TypeName o_equalsAndHashCodeTypeVariableName_mg59879__3 = TypeVariableName.get(Object.class);
            TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
            TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
            TypeVariableName o_equalsAndHashCodeTypeVariableName_mg59879__8 = typeVar2.withBounds(__DSPOT_bounds_10171);
            TypeName o_equalsAndHashCodeTypeVariableName_mg59879_mg61715__16 = o_equalsAndHashCodeTypeVariableName_mg59879__3.annotated(__DSPOT_annotations_10511);
            org.junit.Assert.fail("equalsAndHashCodeTypeVariableName_mg59879_mg61715litNum63341 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals(null, expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59882litString60069_mg70366() throws Exception {
        TypeName o_equalsAndHashCodeTypeVariableName_mg59882__1 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59882__2 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("testGenericIntInner", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("testGenericIntInner", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(-1180465236, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59882__7 = typeVar2.withoutAnnotations();
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).isAnnotated());
        Assert.assertEquals("testGenericIntInner", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).toString());
        Assert.assertEquals(-1180465236, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59882litString60069_mg70366__14 = o_equalsAndHashCodeTypeVariableName_mg59882__2.box();
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882litString60069_mg70366__14)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882litString60069_mg70366__14)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882litString60069_mg70366__14)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882litString60069_mg70366__14)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882litString60069_mg70366__14)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59882__2)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("testGenericIntInner", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(-1180465236, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).isAnnotated());
        Assert.assertEquals("testGenericIntInner", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).toString());
        Assert.assertEquals(-1180465236, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59882__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59881_add60959_mg69954() throws Exception {
        AnnotationSpec[] __DSPOT_annotations_10724 = new AnnotationSpec[]{  };
        List<? extends TypeName> __DSPOT_bounds_10173 = Collections.emptyList();
        TypeName o_equalsAndHashCodeTypeVariableName_mg59881__3 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59881__4 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        TypeVariableName o_equalsAndHashCodeTypeVariableName_mg59881__9 = typeVar2.withBounds(__DSPOT_bounds_10173);
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).isPrimitive());
        ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).toString();
        TypeName o_equalsAndHashCodeTypeVariableName_mg59881_add60959_mg69954__18 = o_equalsAndHashCodeTypeVariableName_mg59881__4.annotated(__DSPOT_annotations_10724);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881_add60959_mg69954__18)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881_add60959_mg69954__18)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881_add60959_mg69954__18)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881_add60959_mg69954__18)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881_add60959_mg69954__18)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableNamelitString59864_mg61465_add65314() throws Exception {
        TypeName[] __DSPOT_bounds_10349 = new TypeName[0];
        TypeName o_equalsAndHashCodeTypeVariableNamelitString59864__1 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableNamelitString59864__2 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("java.lang", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("java.lang", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(-888658374, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        TypeVariableName o_equalsAndHashCodeTypeVariableNamelitString59864_mg61465__12 = typeVar1.withBounds(__DSPOT_bounds_10349);
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableNamelitString59864_mg61465__12)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableNamelitString59864_mg61465__12)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableNamelitString59864_mg61465__12)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableNamelitString59864_mg61465__12)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableNamelitString59864_mg61465__12)).isPrimitive());
        ((TypeVariableName) (o_equalsAndHashCodeTypeVariableNamelitString59864_mg61465__12)).isAnnotated();
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableNamelitString59864__2)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("java.lang", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(-888658374, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableNamelitString59864_mg61465__12)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableNamelitString59864_mg61465__12)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableNamelitString59864_mg61465__12)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableNamelitString59864_mg61465__12)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableNamelitString59864_mg61465__12)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59882litString60069_mg70362_failAssert169() throws Exception {
        try {
            TypeName o_equalsAndHashCodeTypeVariableName_mg59882__1 = TypeVariableName.get(Object.class);
            TypeName o_equalsAndHashCodeTypeVariableName_mg59882__2 = TypeVariableName.get(Object.class);
            TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
            TypeVariableName typeVar2 = TypeVariableName.get("testGenericIntInner", Comparator.class, Serializable.class);
            TypeName o_equalsAndHashCodeTypeVariableName_mg59882__7 = typeVar2.withoutAnnotations();
            o_equalsAndHashCodeTypeVariableName_mg59882__1.unbox();
            org.junit.Assert.fail("equalsAndHashCodeTypeVariableName_mg59882litString60069_mg70362 should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException expected) {
            Assert.assertEquals("cannot unbox java.lang.Object", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_add59871_mg61216null74793_failAssert175() throws Exception {
        try {
            AnnotationSpec[] __DSPOT_annotations_10191 = new AnnotationSpec[]{  };
            TypeName o_equalsAndHashCodeTypeVariableName_add59871__1 = TypeVariableName.get(Object.class);
            TypeName o_equalsAndHashCodeTypeVariableName_add59871__2 = TypeVariableName.get(Object.class);
            TypeVariableName o_equalsAndHashCodeTypeVariableName_add59871__3 = TypeVariableName.get(null, Comparator.class, Serializable.class);
            TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
            TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
            TypeName o_equalsAndHashCodeTypeVariableName_add59871_mg61216__15 = o_equalsAndHashCodeTypeVariableName_add59871__1.annotated(__DSPOT_annotations_10191);
            org.junit.Assert.fail("equalsAndHashCodeTypeVariableName_add59871_mg61216null74793 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals("name == null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59878_add61019_remove69690() throws Exception {
        List<AnnotationSpec> __DSPOT_annotations_10170 = Collections.<AnnotationSpec>emptyList();
        TypeName o_equalsAndHashCodeTypeVariableName_mg59878__3 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59878__4 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        TypeVariableName o_equalsAndHashCodeTypeVariableName_mg59878__9 = typeVar2.annotated(__DSPOT_annotations_10170);
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59878__9)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59878__9)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59878__9)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59878__9)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59878__9)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59878__4)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59881_add60950litString62797() throws Exception {
        List<? extends TypeName> __DSPOT_bounds_10173 = Collections.emptyList();
        TypeName o_equalsAndHashCodeTypeVariableName_mg59881__3 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59881__4 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("\n", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("\n", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(10, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        ((TypeVariableName) (typeVar2)).isPrimitive();
        TypeVariableName o_equalsAndHashCodeTypeVariableName_mg59881__9 = typeVar2.withBounds(__DSPOT_bounds_10173);
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).isAnnotated());
        Assert.assertEquals("\n", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).toString());
        Assert.assertEquals(10, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("\n", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(10, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59880_add60833_remove69699() throws Exception {
        Type[] __DSPOT_bounds_10172 = new Type[]{  };
        TypeName o_equalsAndHashCodeTypeVariableName_mg59880__2 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59880__3 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        TypeVariableName o_equalsAndHashCodeTypeVariableName_mg59880__8 = typeVar2.withBounds(__DSPOT_bounds_10172);
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59880__8)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59880__8)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59880__8)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59880__8)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59880__8)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__2)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59880__3)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_mg59881_add60950_mg71517() throws Exception {
        List<? extends TypeName> __DSPOT_bounds_10173 = Collections.emptyList();
        TypeName o_equalsAndHashCodeTypeVariableName_mg59881__3 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59881__4 = TypeVariableName.get(Object.class);
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isPrimitive());
        TypeVariableName typeVar1 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        ((TypeVariableName) (typeVar2)).isPrimitive();
        TypeVariableName o_equalsAndHashCodeTypeVariableName_mg59881__9 = typeVar2.withBounds(__DSPOT_bounds_10173);
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).isPrimitive());
        TypeName o_equalsAndHashCodeTypeVariableName_mg59881_add60950_mg71517__17 = typeVar1.withoutAnnotations();
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881_add60950_mg71517__17)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881_add60950_mg71517__17)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881_add60950_mg71517__17)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881_add60950_mg71517__17)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881_add60950_mg71517__17)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__3)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).toString());
        Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_mg59881__4)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar1)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar1)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar1)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (typeVar2)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (typeVar2)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (typeVar2)).isPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).isBoxedPrimitive());
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).isAnnotated());
        Assert.assertEquals("T", ((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).toString());
        Assert.assertEquals(84, ((int) (((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).hashCode())));
        Assert.assertFalse(((TypeVariableName) (o_equalsAndHashCodeTypeVariableName_mg59881__9)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeTypeVariableName_add59871null61834_failAssert132null74839() throws Exception {
        try {
            TypeName o_equalsAndHashCodeTypeVariableName_add59871__1 = TypeVariableName.get(Object.class);
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_add59871__1)).isAnnotated());
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_add59871__1)).isBoxedPrimitive());
            Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_add59871__1)).toString());
            Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_add59871__1)).hashCode())));
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_add59871__1)).isPrimitive());
            TypeName o_equalsAndHashCodeTypeVariableName_add59871__2 = TypeVariableName.get(Object.class);
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_add59871__2)).isAnnotated());
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_add59871__2)).isBoxedPrimitive());
            Assert.assertEquals("java.lang.Object", ((ClassName) (o_equalsAndHashCodeTypeVariableName_add59871__2)).toString());
            Assert.assertEquals(1063877011, ((int) (((ClassName) (o_equalsAndHashCodeTypeVariableName_add59871__2)).hashCode())));
            Assert.assertFalse(((ClassName) (o_equalsAndHashCodeTypeVariableName_add59871__2)).isPrimitive());
            TypeVariableName o_equalsAndHashCodeTypeVariableName_add59871__3 = TypeVariableName.get(null, Comparator.class, Serializable.class);
            TypeVariableName typeVar1 = TypeVariableName.get(null, Comparator.class, Serializable.class);
            TypeVariableName typeVar2 = TypeVariableName.get("T", Comparator.class, Serializable.class);
            org.junit.Assert.fail("equalsAndHashCodeTypeVariableName_add59871null61834 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeWildcardTypeName() throws Exception {
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName__1 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__1)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__1)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__1)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__1)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__1)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName__2 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__2)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__2)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__2)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__2)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__2)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName__3 = WildcardTypeName.subtypeOf(Serializable.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__3)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__3)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__3)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__3)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__3)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName__4 = WildcardTypeName.subtypeOf(Serializable.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__4)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__4)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__4)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__4)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__4)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName__5 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__5)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__5)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__5)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__5)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__5)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName__6 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__6)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__6)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__6)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__6)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__6)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__1)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__1)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__1)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__1)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__1)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__2)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__2)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__2)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__2)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__2)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__3)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__3)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__3)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__3)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__3)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__4)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__4)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__4)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__4)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__4)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__5)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__5)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__5)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__5)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName__5)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeWildcardTypeName_add75432() throws Exception {
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75432__1 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__1)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__1)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__1)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__1)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__1)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75432__2 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__2)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__2)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__2)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__2)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__2)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75432__3 = WildcardTypeName.subtypeOf(Serializable.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__3)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__3)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__3)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__3)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__3)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75432__4 = WildcardTypeName.subtypeOf(Serializable.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__4)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__4)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__4)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__4)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__4)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75432__5 = WildcardTypeName.subtypeOf(Serializable.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__5)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__5)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__5)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__5)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__5)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75432__6 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__6)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__6)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__6)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__6)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__6)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75432__7 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__7)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__7)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__7)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__7)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__7)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__1)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__1)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__1)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__1)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__1)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__2)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__2)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__2)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__2)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__2)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__3)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__3)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__3)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__3)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__3)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__4)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__4)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__4)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__4)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__4)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__5)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__5)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__5)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__5)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__5)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__6)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__6)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__6)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__6)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75432__6)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeWildcardTypeName_add75430_mg75910() throws Exception {
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75430__1 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).isBoxedPrimitive());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75430__2 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).isBoxedPrimitive());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75430__3 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).isBoxedPrimitive());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75430__4 = WildcardTypeName.subtypeOf(Serializable.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).isBoxedPrimitive());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75430__5 = WildcardTypeName.subtypeOf(Serializable.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).isBoxedPrimitive());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75430__6 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).isBoxedPrimitive());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75430__7 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).isBoxedPrimitive());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).isPrimitive());
        TypeName o_equalsAndHashCodeWildcardTypeName_add75430_mg75910__22 = o_equalsAndHashCodeWildcardTypeName_add75430__6.withoutAnnotations();
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430_mg75910__22)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430_mg75910__22)).isBoxedPrimitive());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430_mg75910__22)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430_mg75910__22)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430_mg75910__22)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).isBoxedPrimitive());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).isBoxedPrimitive());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).isBoxedPrimitive());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).isBoxedPrimitive());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).isBoxedPrimitive());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).isBoxedPrimitive());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).isBoxedPrimitive());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeWildcardTypeName_add75433_add75482() throws Exception {
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__1 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isBoxedPrimitive());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__2 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isBoxedPrimitive());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__3 = WildcardTypeName.subtypeOf(Serializable.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isBoxedPrimitive());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__4 = WildcardTypeName.subtypeOf(Serializable.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isBoxedPrimitive());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__5 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isBoxedPrimitive());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isPrimitive());
        ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isPrimitive();
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__6 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isBoxedPrimitive());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__7 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).isBoxedPrimitive());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isBoxedPrimitive());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isBoxedPrimitive());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isBoxedPrimitive());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isBoxedPrimitive());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isBoxedPrimitive());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isBoxedPrimitive());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeWildcardTypeName_add75430_mg75901() throws Exception {
        List<AnnotationSpec> __DSPOT_annotations_13665 = Collections.<AnnotationSpec>emptyList();
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75430__1 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).isBoxedPrimitive());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75430__2 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).isBoxedPrimitive());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75430__3 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).isBoxedPrimitive());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75430__4 = WildcardTypeName.subtypeOf(Serializable.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).isBoxedPrimitive());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75430__5 = WildcardTypeName.subtypeOf(Serializable.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).isBoxedPrimitive());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75430__6 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).isBoxedPrimitive());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75430__7 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).isBoxedPrimitive());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75430_mg75901__24 = o_equalsAndHashCodeWildcardTypeName_add75430__2.annotated(__DSPOT_annotations_13665);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430_mg75901__24)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430_mg75901__24)).isBoxedPrimitive());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430_mg75901__24)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430_mg75901__24)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430_mg75901__24)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).isBoxedPrimitive());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__1)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).isBoxedPrimitive());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__2)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).isBoxedPrimitive());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__3)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).isBoxedPrimitive());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__4)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).isBoxedPrimitive());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__5)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).isBoxedPrimitive());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__6)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).isAnnotated());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).isBoxedPrimitive());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75430__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeWildcardTypeName_add75433_add75504_remove89573() throws Exception {
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__1 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__2 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__3 = WildcardTypeName.subtypeOf(Serializable.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__4 = WildcardTypeName.subtypeOf(Serializable.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__5 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__6 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__7 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeWildcardTypeName_add75433_add75519_mg90768() throws Exception {
        List<AnnotationSpec> __DSPOT_annotations_14278 = Collections.<AnnotationSpec>emptyList();
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__1 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__2 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__3 = WildcardTypeName.subtypeOf(Serializable.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__4 = WildcardTypeName.subtypeOf(Serializable.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__5 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__6 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433__7 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).isPrimitive());
        ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isPrimitive();
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75433_add75519_mg90768__25 = o_equalsAndHashCodeWildcardTypeName_add75433__6.annotated(__DSPOT_annotations_14278);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433_add75519_mg90768__25)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433_add75519_mg90768__25)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433_add75519_mg90768__25)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433_add75519_mg90768__25)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433_add75519_mg90768__25)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__1)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__2)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__3)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__4)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__5)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__6)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75433__7)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void equalsAndHashCodeWildcardTypeName_add75434_add75700_mg90361() throws Exception {
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75434__1 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__1)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__1)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__1)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__1)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__1)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75434__2 = WildcardTypeName.subtypeOf(Object.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__2)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__2)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__2)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__2)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__2)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75434__3 = WildcardTypeName.subtypeOf(Serializable.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__3)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__3)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__3)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__3)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__3)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75434__4 = WildcardTypeName.subtypeOf(Serializable.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__4)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__4)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__4)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__4)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__4)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75434__5 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__5)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__5)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__5)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__5)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__5)).isPrimitive());
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75434__6 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__6)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__6)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__6)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__6)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__6)).isPrimitive());
        ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__6)).isBoxedPrimitive();
        WildcardTypeName o_equalsAndHashCodeWildcardTypeName_add75434__7 = WildcardTypeName.supertypeOf(String.class);
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__7)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__7)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__7)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__7)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__7)).isPrimitive());
        TypeName o_equalsAndHashCodeWildcardTypeName_add75434_add75700_mg90361__23 = o_equalsAndHashCodeWildcardTypeName_add75434__5.withoutAnnotations();
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434_add75700_mg90361__23)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434_add75700_mg90361__23)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434_add75700_mg90361__23)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434_add75700_mg90361__23)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434_add75700_mg90361__23)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__1)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__1)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__1)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__1)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__1)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__2)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__2)).isAnnotated());
        Assert.assertEquals("?", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__2)).toString());
        Assert.assertEquals(63, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__2)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__2)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__3)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__3)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__3)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__3)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__3)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__4)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__4)).isAnnotated());
        Assert.assertEquals("? extends java.io.Serializable", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__4)).toString());
        Assert.assertEquals(-454279549, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__4)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__4)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__5)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__5)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__5)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__5)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__5)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__6)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__6)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__6)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__6)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__6)).isPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__7)).isBoxedPrimitive());
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__7)).isAnnotated());
        Assert.assertEquals("? super java.lang.String", ((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__7)).toString());
        Assert.assertEquals(-620274325, ((int) (((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__7)).hashCode())));
        Assert.assertFalse(((WildcardTypeName) (o_equalsAndHashCodeWildcardTypeName_add75434__7)).isPrimitive());
    }

    @Test
    public void isPrimitive() throws Exception {
        Truth.assertThat(TypeName.INT.isPrimitive()).isTrue();
        Truth.assertThat(ClassName.get("java.lang", "Integer").isPrimitive()).isFalse();
        Truth.assertThat(ClassName.get("java.lang", "String").isPrimitive()).isFalse();
        Truth.assertThat(TypeName.VOID.isPrimitive()).isFalse();
        Truth.assertThat(ClassName.get("java.lang", "Void").isPrimitive()).isFalse();
    }

    @Test(timeout = 10000)
    public void isPrimitive_add163662() throws Exception {
        ClassName o_isPrimitive_add163662__1 = ClassName.get("java.lang", "Void");
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((ClassName) (o_isPrimitive_add163662__1)).toString());
        Assert.assertEquals(399092968, ((int) (((ClassName) (o_isPrimitive_add163662__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isPrimitive_add163662_mg163945() throws Exception {
        String __DSPOT_name_25648 = ">Q:q*g_A/zD0Ax0MMGco";
        ClassName o_isPrimitive_add163662__1 = ClassName.get("java.lang", "Void");
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((ClassName) (o_isPrimitive_add163662__1)).toString());
        Assert.assertEquals(399092968, ((int) (((ClassName) (o_isPrimitive_add163662__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isPrimitive());
        ClassName o_isPrimitive_add163662_mg163945__5 = o_isPrimitive_add163662__1.peerClass(__DSPOT_name_25648);
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662_mg163945__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662_mg163945__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.>Q:q*g_A/zD0Ax0MMGco", ((ClassName) (o_isPrimitive_add163662_mg163945__5)).toString());
        Assert.assertEquals(-323810226, ((int) (((ClassName) (o_isPrimitive_add163662_mg163945__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662_mg163945__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((ClassName) (o_isPrimitive_add163662__1)).toString());
        Assert.assertEquals(399092968, ((int) (((ClassName) (o_isPrimitive_add163662__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isPrimitive_add163659litString163869() throws Exception {
        ClassName o_isPrimitive_add163659__1 = ClassName.get("java.lang", "\n");
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.\n", ((ClassName) (o_isPrimitive_add163659__1)).toString());
        Assert.assertEquals(697795926, ((int) (((ClassName) (o_isPrimitive_add163659__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isPrimitive_add163659_mg163930() throws Exception {
        ClassName o_isPrimitive_add163659__1 = ClassName.get("java.lang", "String");
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((ClassName) (o_isPrimitive_add163659__1)).toString());
        Assert.assertEquals(1195259493, ((int) (((ClassName) (o_isPrimitive_add163659__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isPrimitive());
        ClassName o_isPrimitive_add163659_mg163930__4 = o_isPrimitive_add163659__1.withoutAnnotations();
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659_mg163930__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659_mg163930__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((ClassName) (o_isPrimitive_add163659_mg163930__4)).toString());
        Assert.assertEquals(1195259493, ((int) (((ClassName) (o_isPrimitive_add163659_mg163930__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659_mg163930__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((ClassName) (o_isPrimitive_add163659__1)).toString());
        Assert.assertEquals(1195259493, ((int) (((ClassName) (o_isPrimitive_add163659__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isPrimitive_add163662_mg163946() throws Exception {
        ClassName o_isPrimitive_add163662__1 = ClassName.get("java.lang", "Void");
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((ClassName) (o_isPrimitive_add163662__1)).toString());
        Assert.assertEquals(399092968, ((int) (((ClassName) (o_isPrimitive_add163662__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isPrimitive());
        String o_isPrimitive_add163662_mg163946__4 = o_isPrimitive_add163662__1.reflectionName();
        Assert.assertEquals("java.lang.Void", o_isPrimitive_add163662_mg163946__4);
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((ClassName) (o_isPrimitive_add163662__1)).toString());
        Assert.assertEquals(399092968, ((int) (((ClassName) (o_isPrimitive_add163662__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isPrimitive_add163659litString163861() throws Exception {
        ClassName o_isPrimitive_add163659__1 = ClassName.get("\n", "String");
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive());
        Assert.assertEquals("\n.String", ((ClassName) (o_isPrimitive_add163659__1)).toString());
        Assert.assertEquals(610579093, ((int) (((ClassName) (o_isPrimitive_add163659__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isPrimitive_add163659litString163860() throws Exception {
        ClassName o_isPrimitive_add163659__1 = ClassName.get("", "String");
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive());
        Assert.assertEquals("String", ((ClassName) (o_isPrimitive_add163659__1)).toString());
        Assert.assertEquals(-1808118735, ((int) (((ClassName) (o_isPrimitive_add163659__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isPrimitive_add163662litString163901_mg166392() throws Exception {
        ClassName o_isPrimitive_add163662__1 = ClassName.get("java.lang", "\n");
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.\n", ((ClassName) (o_isPrimitive_add163662__1)).toString());
        Assert.assertEquals(697795926, ((int) (((ClassName) (o_isPrimitive_add163662__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isPrimitive());
        String o_isPrimitive_add163662litString163901_mg166392__4 = o_isPrimitive_add163662__1.simpleName();
        Assert.assertEquals("\n", o_isPrimitive_add163662litString163901_mg166392__4);
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.\n", ((ClassName) (o_isPrimitive_add163662__1)).toString());
        Assert.assertEquals(697795926, ((int) (((ClassName) (o_isPrimitive_add163662__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isPrimitive_add163659_add163905null167373() throws Exception {
        ClassName o_isPrimitive_add163659__1 = ClassName.get("java.lang", null);
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.null", ((ClassName) (o_isPrimitive_add163659__1)).toString());
        Assert.assertEquals(399813819, ((int) (((ClassName) (o_isPrimitive_add163659__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isPrimitive());
        ((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive();
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.null", ((ClassName) (o_isPrimitive_add163659__1)).toString());
        Assert.assertEquals(399813819, ((int) (((ClassName) (o_isPrimitive_add163659__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isPrimitive_add163659litString163861_mg167037() throws Exception {
        ClassName o_isPrimitive_add163659__1 = ClassName.get("\n", "String");
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive());
        Assert.assertEquals("\n.String", ((ClassName) (o_isPrimitive_add163659__1)).toString());
        Assert.assertEquals(610579093, ((int) (((ClassName) (o_isPrimitive_add163659__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isPrimitive());
        o_isPrimitive_add163659__1.enclosingClassName();
    }

    @Test(timeout = 10000)
    public void isPrimitive_add163659litString163863_mg166465() throws Exception {
        ClassName o_isPrimitive_add163659__1 = ClassName.get("java.lang", "String");
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((ClassName) (o_isPrimitive_add163659__1)).toString());
        Assert.assertEquals(1195259493, ((int) (((ClassName) (o_isPrimitive_add163659__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isPrimitive());
        ClassName o_isPrimitive_add163659litString163863_mg166465__4 = o_isPrimitive_add163659__1.withoutAnnotations();
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659litString163863_mg166465__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659litString163863_mg166465__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((ClassName) (o_isPrimitive_add163659litString163863_mg166465__4)).toString());
        Assert.assertEquals(1195259493, ((int) (((ClassName) (o_isPrimitive_add163659litString163863_mg166465__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659litString163863_mg166465__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((ClassName) (o_isPrimitive_add163659__1)).toString());
        Assert.assertEquals(1195259493, ((int) (((ClassName) (o_isPrimitive_add163659__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isPrimitive_add163659_add163908_mg166251() throws Exception {
        ClassName o_isPrimitive_add163659__1 = ClassName.get("java.lang", "String");
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((ClassName) (o_isPrimitive_add163659__1)).toString());
        Assert.assertEquals(1195259493, ((int) (((ClassName) (o_isPrimitive_add163659__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isPrimitive());
        ((ClassName) (o_isPrimitive_add163659__1)).isPrimitive();
        String o_isPrimitive_add163659_add163908_mg166251__5 = o_isPrimitive_add163659__1.reflectionName();
        Assert.assertEquals("java.lang.String", o_isPrimitive_add163659_add163908_mg166251__5);
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((ClassName) (o_isPrimitive_add163659__1)).toString());
        Assert.assertEquals(1195259493, ((int) (((ClassName) (o_isPrimitive_add163659__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isPrimitive_add163659litString163860null167394() throws Exception {
        ClassName o_isPrimitive_add163659__1 = ClassName.get("", null);
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive());
        Assert.assertEquals("null", ((ClassName) (o_isPrimitive_add163659__1)).toString());
        Assert.assertEquals(3392903, ((int) (((ClassName) (o_isPrimitive_add163659__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isPrimitive_add163659_mg163923null167419() throws Exception {
        String __DSPOT_name_25641 = null;
        ClassName o_isPrimitive_add163659__1 = ClassName.get("java.lang", "String");
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((ClassName) (o_isPrimitive_add163659__1)).toString());
        Assert.assertEquals(1195259493, ((int) (((ClassName) (o_isPrimitive_add163659__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isPrimitive());
        ClassName o_isPrimitive_add163659_mg163923__5 = o_isPrimitive_add163659__1.nestedClass(__DSPOT_name_25641);
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659_mg163923__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659_mg163923__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String.null", ((ClassName) (o_isPrimitive_add163659_mg163923__5)).toString());
        Assert.assertEquals(1682505584, ((int) (((ClassName) (o_isPrimitive_add163659_mg163923__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659_mg163923__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((ClassName) (o_isPrimitive_add163659__1)).toString());
        Assert.assertEquals(1195259493, ((int) (((ClassName) (o_isPrimitive_add163659__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isPrimitive_add163659_mg163927litString164871() throws Exception {
        ClassName o_isPrimitive_add163659__1 = ClassName.get("", "String");
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive());
        Assert.assertEquals("String", ((ClassName) (o_isPrimitive_add163659__1)).toString());
        Assert.assertEquals(-1808118735, ((int) (((ClassName) (o_isPrimitive_add163659__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isPrimitive());
        String o_isPrimitive_add163659_mg163927__4 = o_isPrimitive_add163659__1.simpleName();
        Assert.assertEquals("String", o_isPrimitive_add163659_mg163927__4);
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isBoxedPrimitive());
        Assert.assertEquals("String", ((ClassName) (o_isPrimitive_add163659__1)).toString());
        Assert.assertEquals(-1808118735, ((int) (((ClassName) (o_isPrimitive_add163659__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163659__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isPrimitive_add163662_mg163945null167469() throws Exception {
        String __DSPOT_name_25648 = ">Q:q*g_A/zD0Ax0MMGco";
        ClassName o_isPrimitive_add163662__1 = ClassName.get("java.lang", "Void");
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((ClassName) (o_isPrimitive_add163662__1)).toString());
        Assert.assertEquals(399092968, ((int) (((ClassName) (o_isPrimitive_add163662__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isPrimitive());
        ClassName o_isPrimitive_add163662_mg163945__5 = o_isPrimitive_add163662__1.peerClass(null);
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662_mg163945__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662_mg163945__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.null", ((ClassName) (o_isPrimitive_add163662_mg163945__5)).toString());
        Assert.assertEquals(399813819, ((int) (((ClassName) (o_isPrimitive_add163662_mg163945__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662_mg163945__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((ClassName) (o_isPrimitive_add163662__1)).toString());
        Assert.assertEquals(399092968, ((int) (((ClassName) (o_isPrimitive_add163662__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isPrimitive_add163662__1)).isPrimitive());
    }

    @Test
    public void isBoxedPrimitive() throws Exception {
        Truth.assertThat(TypeName.INT.isBoxedPrimitive()).isFalse();
        Truth.assertThat(ClassName.get("java.lang", "Integer").isBoxedPrimitive()).isTrue();
        Truth.assertThat(ClassName.get("java.lang", "String").isBoxedPrimitive()).isFalse();
        Truth.assertThat(TypeName.VOID.isBoxedPrimitive()).isFalse();
        Truth.assertThat(ClassName.get("java.lang", "Void").isBoxedPrimitive()).isFalse();
    }

    @Test(timeout = 10000)
    public void isBoxedPrimitive_add159294() throws Exception {
        ClassName o_isBoxedPrimitive_add159294__1 = ClassName.get("java.lang", "Void");
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((ClassName) (o_isBoxedPrimitive_add159294__1)).toString());
        Assert.assertEquals(399092968, ((int) (((ClassName) (o_isBoxedPrimitive_add159294__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isBoxedPrimitive_add159294litString159522() throws Exception {
        ClassName o_isBoxedPrimitive_add159294__1 = ClassName.get("\n", "Void");
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isBoxedPrimitive());
        Assert.assertEquals("\n.Void", ((ClassName) (o_isBoxedPrimitive_add159294__1)).toString());
        Assert.assertEquals(331445528, ((int) (((ClassName) (o_isBoxedPrimitive_add159294__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isBoxedPrimitive_add159294_mg159579() throws Exception {
        ClassName o_isBoxedPrimitive_add159294__1 = ClassName.get("java.lang", "Void");
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((ClassName) (o_isBoxedPrimitive_add159294__1)).toString());
        Assert.assertEquals(399092968, ((int) (((ClassName) (o_isBoxedPrimitive_add159294__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isPrimitive());
        ClassName o_isBoxedPrimitive_add159294_mg159579__4 = o_isBoxedPrimitive_add159294__1.withoutAnnotations();
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294_mg159579__4)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294_mg159579__4)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((ClassName) (o_isBoxedPrimitive_add159294_mg159579__4)).toString());
        Assert.assertEquals(399092968, ((int) (((ClassName) (o_isBoxedPrimitive_add159294_mg159579__4)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294_mg159579__4)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((ClassName) (o_isBoxedPrimitive_add159294__1)).toString());
        Assert.assertEquals(399092968, ((int) (((ClassName) (o_isBoxedPrimitive_add159294__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isBoxedPrimitive_add159291litString159489() throws Exception {
        ClassName o_isBoxedPrimitive_add159291__1 = ClassName.get("", "String");
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isBoxedPrimitive());
        Assert.assertEquals("String", ((ClassName) (o_isBoxedPrimitive_add159291__1)).toString());
        Assert.assertEquals(-1808118735, ((int) (((ClassName) (o_isBoxedPrimitive_add159291__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isBoxedPrimitive_add159294_add159547() throws Exception {
        ClassName o_isBoxedPrimitive_add159294__1 = ClassName.get("java.lang", "Void");
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((ClassName) (o_isBoxedPrimitive_add159294__1)).toString());
        Assert.assertEquals(399092968, ((int) (((ClassName) (o_isBoxedPrimitive_add159294__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isPrimitive());
        ((ClassName) (o_isBoxedPrimitive_add159294__1)).toString();
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((ClassName) (o_isBoxedPrimitive_add159294__1)).toString());
        Assert.assertEquals(399092968, ((int) (((ClassName) (o_isBoxedPrimitive_add159294__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isBoxedPrimitive_add159294litString159530() throws Exception {
        ClassName o_isBoxedPrimitive_add159294__1 = ClassName.get("java.lang", "\n");
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.\n", ((ClassName) (o_isBoxedPrimitive_add159294__1)).toString());
        Assert.assertEquals(697795926, ((int) (((ClassName) (o_isBoxedPrimitive_add159294__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isBoxedPrimitive_add159294_mg159575() throws Exception {
        ClassName o_isBoxedPrimitive_add159294__1 = ClassName.get("java.lang", "Void");
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((ClassName) (o_isBoxedPrimitive_add159294__1)).toString());
        Assert.assertEquals(399092968, ((int) (((ClassName) (o_isBoxedPrimitive_add159294__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isPrimitive());
        String o_isBoxedPrimitive_add159294_mg159575__4 = o_isBoxedPrimitive_add159294__1.reflectionName();
        Assert.assertEquals("java.lang.Void", o_isBoxedPrimitive_add159294_mg159575__4);
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((ClassName) (o_isBoxedPrimitive_add159294__1)).toString());
        Assert.assertEquals(399092968, ((int) (((ClassName) (o_isBoxedPrimitive_add159294__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isBoxedPrimitive_add159294_mg159574() throws Exception {
        String __DSPOT_name_25297 = "W,0OUDE{xBGO,@{VJUt]";
        ClassName o_isBoxedPrimitive_add159294__1 = ClassName.get("java.lang", "Void");
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((ClassName) (o_isBoxedPrimitive_add159294__1)).toString());
        Assert.assertEquals(399092968, ((int) (((ClassName) (o_isBoxedPrimitive_add159294__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isPrimitive());
        ClassName o_isBoxedPrimitive_add159294_mg159574__5 = o_isBoxedPrimitive_add159294__1.peerClass(__DSPOT_name_25297);
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294_mg159574__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294_mg159574__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.W,0OUDE{xBGO,@{VJUt]", ((ClassName) (o_isBoxedPrimitive_add159294_mg159574__5)).toString());
        Assert.assertEquals(-88959134, ((int) (((ClassName) (o_isBoxedPrimitive_add159294_mg159574__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294_mg159574__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.Void", ((ClassName) (o_isBoxedPrimitive_add159294__1)).toString());
        Assert.assertEquals(399092968, ((int) (((ClassName) (o_isBoxedPrimitive_add159294__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159294__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isBoxedPrimitive_add159291_mg159552null162997() throws Exception {
        String __DSPOT_name_25290 = "(3!/P!%&6v#|o*;2x`#o";
        ClassName o_isBoxedPrimitive_add159291__1 = ClassName.get("java.lang", "String");
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((ClassName) (o_isBoxedPrimitive_add159291__1)).toString());
        Assert.assertEquals(1195259493, ((int) (((ClassName) (o_isBoxedPrimitive_add159291__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isPrimitive());
        ClassName o_isBoxedPrimitive_add159291_mg159552__5 = o_isBoxedPrimitive_add159291__1.nestedClass(null);
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291_mg159552__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291_mg159552__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String.null", ((ClassName) (o_isBoxedPrimitive_add159291_mg159552__5)).toString());
        Assert.assertEquals(1682505584, ((int) (((ClassName) (o_isBoxedPrimitive_add159291_mg159552__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291_mg159552__5)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((ClassName) (o_isBoxedPrimitive_add159291__1)).toString());
        Assert.assertEquals(1195259493, ((int) (((ClassName) (o_isBoxedPrimitive_add159291__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isBoxedPrimitive_add159291_mg159555null163043() throws Exception {
        ClassName o_isBoxedPrimitive_add159291__1 = ClassName.get("java.lang", null);
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.null", ((ClassName) (o_isBoxedPrimitive_add159291__1)).toString());
        Assert.assertEquals(399813819, ((int) (((ClassName) (o_isBoxedPrimitive_add159291__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isPrimitive());
        String o_isBoxedPrimitive_add159291_mg159555__4 = o_isBoxedPrimitive_add159291__1.reflectionName();
        Assert.assertEquals("java.lang.null", o_isBoxedPrimitive_add159291_mg159555__4);
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.null", ((ClassName) (o_isBoxedPrimitive_add159291__1)).toString());
        Assert.assertEquals(399813819, ((int) (((ClassName) (o_isBoxedPrimitive_add159291__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isBoxedPrimitive_add159291_mg159551litString160449() throws Exception {
        ClassName o_isBoxedPrimitive_add159291__1 = ClassName.get("", "String");
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isBoxedPrimitive());
        Assert.assertEquals("String", ((ClassName) (o_isBoxedPrimitive_add159291__1)).toString());
        Assert.assertEquals(-1808118735, ((int) (((ClassName) (o_isBoxedPrimitive_add159291__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isPrimitive());
        o_isBoxedPrimitive_add159291__1.enclosingClassName();
    }

    @Test(timeout = 10000)
    public void isBoxedPrimitive_add159291_mg159557litString160370() throws Exception {
        ClassName o_isBoxedPrimitive_add159291__1 = ClassName.get("\n", "String");
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isBoxedPrimitive());
        Assert.assertEquals("\n.String", ((ClassName) (o_isBoxedPrimitive_add159291__1)).toString());
        Assert.assertEquals(610579093, ((int) (((ClassName) (o_isBoxedPrimitive_add159291__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isPrimitive());
        List<String> o_isBoxedPrimitive_add159291_mg159557__4 = o_isBoxedPrimitive_add159291__1.simpleNames();
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isBoxedPrimitive());
        Assert.assertEquals("\n.String", ((ClassName) (o_isBoxedPrimitive_add159291__1)).toString());
        Assert.assertEquals(610579093, ((int) (((ClassName) (o_isBoxedPrimitive_add159291__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isBoxedPrimitive_add159291_mg159557_mg162317() throws Exception {
        ClassName o_isBoxedPrimitive_add159291__1 = ClassName.get("java.lang", "String");
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((ClassName) (o_isBoxedPrimitive_add159291__1)).toString());
        Assert.assertEquals(1195259493, ((int) (((ClassName) (o_isBoxedPrimitive_add159291__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isPrimitive());
        List<String> o_isBoxedPrimitive_add159291_mg159557__4 = o_isBoxedPrimitive_add159291__1.simpleNames();
        ClassName o_isBoxedPrimitive_add159291_mg159557_mg162317__7 = o_isBoxedPrimitive_add159291__1.withoutAnnotations();
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291_mg159557_mg162317__7)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291_mg159557_mg162317__7)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((ClassName) (o_isBoxedPrimitive_add159291_mg159557_mg162317__7)).toString());
        Assert.assertEquals(1195259493, ((int) (((ClassName) (o_isBoxedPrimitive_add159291_mg159557_mg162317__7)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291_mg159557_mg162317__7)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((ClassName) (o_isBoxedPrimitive_add159291__1)).toString());
        Assert.assertEquals(1195259493, ((int) (((ClassName) (o_isBoxedPrimitive_add159291__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isBoxedPrimitive_add159291_mg159555litString160770() throws Exception {
        ClassName o_isBoxedPrimitive_add159291__1 = ClassName.get("java.lang", "\n");
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.\n", ((ClassName) (o_isBoxedPrimitive_add159291__1)).toString());
        Assert.assertEquals(697795926, ((int) (((ClassName) (o_isBoxedPrimitive_add159291__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isPrimitive());
        String o_isBoxedPrimitive_add159291_mg159555__4 = o_isBoxedPrimitive_add159291__1.reflectionName();
        Assert.assertEquals("java.lang.\n", o_isBoxedPrimitive_add159291_mg159555__4);
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.\n", ((ClassName) (o_isBoxedPrimitive_add159291__1)).toString());
        Assert.assertEquals(697795926, ((int) (((ClassName) (o_isBoxedPrimitive_add159291__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isBoxedPrimitive_add159291_mg159554_add161322() throws Exception {
        String __DSPOT_name_25291 = "5G;H5x,(nS{bkvk$a)em";
        ClassName o_isBoxedPrimitive_add159291__1 = ClassName.get("java.lang", "String");
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((ClassName) (o_isBoxedPrimitive_add159291__1)).toString());
        Assert.assertEquals(1195259493, ((int) (((ClassName) (o_isBoxedPrimitive_add159291__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isPrimitive());
        ClassName o_isBoxedPrimitive_add159291_mg159554__5 = o_isBoxedPrimitive_add159291__1.peerClass(__DSPOT_name_25291);
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291_mg159554__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291_mg159554__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.5G;H5x,(nS{bkvk$a)em", ((ClassName) (o_isBoxedPrimitive_add159291_mg159554__5)).toString());
        Assert.assertEquals(-1573718030, ((int) (((ClassName) (o_isBoxedPrimitive_add159291_mg159554__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291_mg159554__5)).isPrimitive());
        ((ClassName) (o_isBoxedPrimitive_add159291__1)).isPrimitive();
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.String", ((ClassName) (o_isBoxedPrimitive_add159291__1)).toString());
        Assert.assertEquals(1195259493, ((int) (((ClassName) (o_isBoxedPrimitive_add159291__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291__1)).isPrimitive());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291_mg159554__5)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291_mg159554__5)).isBoxedPrimitive());
        Assert.assertEquals("java.lang.5G;H5x,(nS{bkvk$a)em", ((ClassName) (o_isBoxedPrimitive_add159291_mg159554__5)).toString());
        Assert.assertEquals(-1573718030, ((int) (((ClassName) (o_isBoxedPrimitive_add159291_mg159554__5)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159291_mg159554__5)).isPrimitive());
    }

    @Test(timeout = 10000)
    public void isBoxedPrimitive_add159289litString159505null163024() throws Exception {
        ClassName o_isBoxedPrimitive_add159289__1 = ClassName.get("", null);
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159289__1)).isAnnotated());
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159289__1)).isBoxedPrimitive());
        Assert.assertEquals("null", ((ClassName) (o_isBoxedPrimitive_add159289__1)).toString());
        Assert.assertEquals(3392903, ((int) (((ClassName) (o_isBoxedPrimitive_add159289__1)).hashCode())));
        Assert.assertFalse(((ClassName) (o_isBoxedPrimitive_add159289__1)).isPrimitive());
    }

    private void assertEqualsHashCodeAndToString(TypeName a, TypeName b) {
        Assert.assertEquals(a.toString(), b.toString());
        Truth.assertThat(a.equals(b)).isTrue();
        Truth.assertThat(a.hashCode()).isEqualTo(b.hashCode());
        Assert.assertFalse(a.equals(null));
    }
}

