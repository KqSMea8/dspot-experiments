[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building JavaPoet 1.12.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ javapoet ---
[INFO] Deleting /tmp/dspot-experiments/dataset/javapoet/target
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0:enforce (enforce-maven) @ javapoet ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ javapoet ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /tmp/dspot-experiments/dataset/javapoet/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ javapoet ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 17 source files to /tmp/dspot-experiments/dataset/javapoet/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ javapoet ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /tmp/dspot-experiments/dataset/javapoet/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ javapoet ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 19 source files to /tmp/dspot-experiments/dataset/javapoet/target/test-classes
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ javapoet ---
[INFO] Tests are skipped.
[INFO] 
[INFO] --- pitest-maven:1.4.0:mutationCoverage (default-cli) @ javapoet ---
[INFO] Found plugin : Default csv report plugin
[INFO] Found plugin : Default xml report plugin
[INFO] Found plugin : Default html report plugin
[INFO] Found plugin : Static initializer code detector plugin
[INFO] Found plugin : Static initializer filter plugin
[INFO] Found plugin : Excluded annotations plugin
[INFO] Found plugin : Inlined finally block filter plugin
[INFO] Found plugin : Try with resources filter
[INFO] Found plugin : Implicit null check filter
[INFO] Found plugin : For each loop filter
[INFO] Found plugin : Logging calls filter
[INFO] Found plugin : Infinite for loop filter
[INFO] Found plugin : Long running iterator loop filter
[INFO] Found plugin : For loop counter filter
[INFO] Found plugin : Kotlin junk mutations filter
[INFO] Found plugin : Max mutations per class limit
[INFO] Found plugin : Equals shortcut equivalent mutant filter
[INFO] Found plugin : Trivial return vals equivalence filter
[INFO] Found plugin : Mutant export plugin
[INFO] Found shared classpath plugin : Default mutation engine
[INFO] Found shared classpath plugin : JUnit plugin
[INFO] Found shared classpath plugin : TestNG plugin
[INFO] Adding org.pitest:pitest to SUT classpath
[INFO] Mutating from /tmp/dspot-experiments/dataset/javapoet/target/classes
/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|/-\|//-\|/-stderr  : 1:52:37 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=simpleNames, methodDesc=()Ljava/util/List;], indexes=[17], mutator=org.pitest.mutationtest.engine.gregor.mutators.stderr  : NonVoidMethodCallMutator], filename=ClassName.java, block=28, lineNumber=113, description=removed call to com/squareup/javapoet/ClassName::simpleNames, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoestderr  : t.ClassNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingPstderr  : arentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squstderr  : areup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.Typstderr  : eSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTesstderr  : t.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squarestderr  : up.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
1:52:37 PM PIT >> WARNING : Mutation MutationDetails [id=Mutationstderr  : Identifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=emit, methodDesc=(Lcom/squareup/javapoet/CodeWriter;)Lcom/squareup/javapoet/CodeWriter;], indexes=[42], mutator=org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutstderr  : ator_EQUAL_ELSE], filename=ClassName.java, block=66, lineNumber=242, description=removed conditional - replaced equality check with false, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest)stderr  : , com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_dstderr  : efaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.stderr  : javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest),stderr  :  com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Typestderr  : NameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAnstderr  : dHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest)stderr  : , com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.jstderr  : avapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapstderr  : oet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentForstderr  : mats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), comstderr  : .squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypstderr  : eNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNamstderr  : eTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedstderr  : Type(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), cstderr  : om.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.stderr  : javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.JavaFileTest.defaultPacstderr  : kageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), cstderr  : om.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.confstderr  : lictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.stderr  : javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packastderr  : geClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(comstderr  : .squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.Annstderr  : otatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencestderr  : sSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareustderr  : p.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Tstderr  : ypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.jastderr  : vapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squarestderr  : up.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Typestderr  : sTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.sstderr  : quareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), cstderr  : om.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecstderr  : ursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typestderr  : FromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javastderr  : poet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSstderr  : pecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToStstderr  : ring(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTestderr  : st), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squastderr  : reup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.stderr  : multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTeststderr  : .overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.sstderr  : quareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotastderr  : tionsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareustderr  : p.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.stderr  : TypesTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squastderr  : reup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tystderr  : peSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGestderr  : nerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifierstderr  : (com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsstderr  : OthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(comstderr  : .squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrostderr  : fitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapostderr  : et.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.Annostderr  : tationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.jastderr  : vapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(costderr  : m.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javastderr  : poet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapstderr  : oet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclistderr  : pseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(cstderr  : om.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTstderr  : est.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), costderr  : m.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
1:52:37 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazstderr  : z=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[81], mutator=org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=39, lineNumber=1stderr  : 50, description=removed call to java/lang/Class::getName, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
1:52:37 PM PIT >> WARNING : Mutatiostderr  : n MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=topLevelClassName, methodDesc=()Lcom/squareup/javapoet/ClassName;], indexes=[15], mutator=org.pitest.mutationtest.engine.gregor.mutators.NullReturnVastderr  : lsMutator], filename=ClassName.java, block=21, lineNumber=100, description=replaced return value with null for com/squareup/javapoet/ClassName::topLevelClassName, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareupstderr  : .javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTstderr  : est.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.Classstderr  : NameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareupstderr  : .javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), costderr  : m.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapostderr  : et.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareupstderr  : .javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNstderr  : ameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeInstderr  : dexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCstderr  : anBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javstderr  : apoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squarestderr  : up.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.jstderr  : avapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypestderr  : NameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.jastderr  : vapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypestderr  : NameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoetstderr  : .JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.stderr  : squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFistderr  : leTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.Jastderr  : vaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.anstderr  : notationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.jastderr  : vapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.Typesstderr  : Test), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), cstderr  : om.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.Typestderr  : sTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.Typstderr  : esTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.stderr  : javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormstderr  : atsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javastderr  : poet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.sqstderr  : uareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.stderr  : TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToStringstderr  : (com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(comstderr  : .squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareupstderr  : .javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enstderr  : umImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTstderr  : est.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapostderr  : et.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTestderr  : st.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest),stderr  :  com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javastderr  : poet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstrastderr  : ctMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotationSpecTest.dynamstderr  : icArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnstderr  : otationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareupstderr  : .javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.Tstderr  : ypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapstderr  : oet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.stderr  : MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.sqstderr  : uareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRstderr  : ightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.stderr  : TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), comstderr  : .squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTestderr  : st.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.Annstderr  : otationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipstderr  : seTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapostderr  : et.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.Tstderr  : ypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTstderr  : est.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.Tystderr  : pesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapstderr  : oet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(cstderr  : om.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:37 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljavax/lang/model/element/TypeElement;)Lcom/squareup/javapoet/ClassName;], indexes=[18], mutator=stderr  : org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=61, lineNumber=210, description=removed call to javax/lang/model/element/TypeElement::getEnclosingElement, testsInOrder=[com.squareup.javapoet.ClassNamstderr  : eTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javastderr  : poet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTesstderr  : t), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squstderr  : areup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoestderr  : t.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTestderr  : st), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.Annotatstderr  : ionSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareustderr  : p.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapstderr  : oet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.sqstderr  : uareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), stderr  : com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnstderr  : notation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:37 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=enclosingClasses, methodDesc=()Ljava/util/List;], indexes=[19], mutator=org.pitest.mutationtest.engine.gregor.mutastderr  : tors.NonVoidMethodCallMutator], filename=ClassName.java, block=75, lineNumber=275, description=removed call to java/util/List::add, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.sstderr  : quareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPstderr  : ackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoestderr  : t.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), com.sqstderr  : uareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTesstderr  : t.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCostderr  : deArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.sstderr  : quareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoetstderr  : .TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.Codstderr  : eBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(costderr  : m.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squarestderr  : up.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTestderr  : st.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.astderr  : nnotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(costderr  : m.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), com.squastderr  : reup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoestderr  : t.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.JavaFileTest.defaultPackageTypstderr  : esAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squastderr  : reup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingstderr  : TypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoestderr  : t.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassstderr  : ConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squarestderr  : up.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTstderr  : ypeNameTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(cstderr  : om.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapstderr  : oet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTesstderr  : t.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.stderr  : TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javastderr  : poet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.gstderr  : etParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareupstderr  : .javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squastderr  : reup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(stderr  : com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypstderr  : eMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.Tystderr  : peSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTeststderr  : ), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(costderr  : m.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), costderr  : m.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilistderr  : neStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.Tstderr  : ypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javastderr  : poet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overristderr  : deDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapstderr  : oet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareupstderr  : .javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAnstderr  : dJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTestderr  : st), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTstderr  : est.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(stderr  : com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tystderr  : peSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.sqstderr  : uareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWstderr  : orksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), comstderr  : .squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squarestderr  : up.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStylstderr  : eInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.Annostderr  : tationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSstderr  : pecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.stderr  : TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squarstderr  : eup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.Tystderr  : pesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.Typstderr  : esEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTeststderr  : .wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squastderr  : reup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varstderr  : args(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squarstderr  : eup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:37 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[39], mutator=org.pitest.mutationtestderr  : st.engine.gregor.mutators.InlineConstantMutator], filename=ClassName.java, block=36, lineNumber=144, description=Substituted 0 with 1, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.jstderr  : avapoet.ClassNameTest.fromClassRejectionTypes(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest),stderr  :  com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.stderr  : danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.Astderr  : nnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Annotastderr  : tedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashstderr  : CodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squastderr  : reup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Codestderr  : BlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.stderr  : squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAnstderr  : dHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.jstderr  : avapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapstderr  : oet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNamestderr  : Test), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.jstderr  : avapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annostderr  : tatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTeststderr  : .nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFilstderr  : eTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.conflictingImportsstderr  : (com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest)stderr  : , com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squarestderr  : up.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.stderr  : JavaFileTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.Annostderr  : tatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapostderr  : et.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareustderr  : p.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(stderr  : com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpstderr  : ecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javstderr  : apoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squarstderr  : eup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Annostderr  : tatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.jastderr  : vapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multistderr  : pleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndestderr  : nt(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStstderr  : ringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), comstderr  : .squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToStrstderr  : ing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyAstderr  : rray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.Annotatistderr  : onSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classstderr  : ImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclstderr  : aration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.Tstderr  : ypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.sstderr  : quareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.stderr  : TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(comstderr  : .squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.jstderr  : avapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(comstderr  : .squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterstderr  : izedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareustderr  : p.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squstderr  : areup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.stderr  : TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:37 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[112], mutator=org.pitest.mustderr  : tationtest.engine.gregor.mutators.InlineConstantMutator], filename=ClassName.java, block=56, lineNumber=185, description=Substituted 0 with 1, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAscii(com.squareup.javapoet.ClassNameTest), com.squstderr  : areup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForStstderr  : ring_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTstderr  : est)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:37 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[22], mutator=org.pitest.mutstderr  : ationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=47, lineNumber=177, description=removed call to java/lang/String::indexOf, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAscii(com.squareup.javapoet.stderr  : ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.Classstderr  : NameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[120], mutator=org.pitest.mutationtstderr  : est.engine.gregor.mutators.ArgumentPropagationMutator], filename=ClassName.java, block=41, lineNumber=157, description=replaced call to java/lang/String::lastIndexOf with argument, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.sqstderr  : uareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnstderr  : otationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest), stderr  : com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNamstderr  : eTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosistderr  : ngType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.Typestderr  : NameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotatiostderr  : nsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapostderr  : et.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWistderr  : thDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.Typestderr  : NameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoestderr  : t.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Anstderr  : notatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.astderr  : nnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedstderr  : Type(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(cstderr  : om.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), stderr  : com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclasstderr  : sReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.jstderr  : avapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClastderr  : ss(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClassstderr  : es(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.unboxstderr  : (com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTestderr  : st.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVstderr  : ariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTestderr  : st.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.Typstderr  : eSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticstderr  : Twice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Jastderr  : vaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedTystderr  : pe(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecstderr  : Test.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpstderr  : ecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(costderr  : m.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squarstderr  : eup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), comstderr  : .squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopstderr  : yOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareustderr  : p.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elsestderr  : If(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Annotastderr  : tionSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squastderr  : reup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesstderr  : NotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpstderr  : ecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareupstderr  : .javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.stderr  : overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squstderr  : areup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.jstderr  : avapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), costderr  : m.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(cstderr  : om.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapstderr  : oet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTstderr  : est), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=withoutAnnotations, methodDesc=()Lcom/squareup/javapoet/ClassName;], indexes=[13], mutator=org.pitest.mutationteststderr  : .engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE], filename=ClassName.java, block=9, lineNumber=69, description=removed conditional - replaced equality check with false, testsInOrder=[com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationstderr  : sOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnstderr  : otationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.jstderr  : avapoet.TypeSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=emit, methodDesc=(Lcom/squareup/javapoet/CodeWriter;)Lcom/squareup/javapoet/CodeWriter;], indexes=[8], mutator=orgstderr  : .pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=63, lineNumber=235, description=removed call to com/squareup/javapoet/ClassName::enclosingClasses, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGstderr  : uessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTstderr  : est), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTstderr  : ypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Typestderr  : NameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(cstderr  : om.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.Annotstderr  : atedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Cstderr  : odeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedTypstderr  : e(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.jastderr  : vapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squastderr  : reup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHasstderr  : hCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapstderr  : oet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.stderr  : AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTeststderr  : ), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapstderr  : oet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtenstderr  : ds(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoetstderr  : .CodeBlockTest), com.squareup.javapoet.JavaFileTest.defaultPackageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classtderr  : sAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.jstderr  : avapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squstderr  : areup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.jastderr  : vapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squarestderr  : up.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.stderr  : annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFilstderr  : eTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalstderr  : ence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedstderr  : Type(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getArrstderr  : ayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annostderr  : tated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariablstderr  : e(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wilstderr  : dcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Typstderr  : esTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.jstderr  : avapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmestderr  : Example(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpestderr  : cTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squarstderr  : eup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumenstderr  : tOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareupstderr  : .javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipstderr  : leFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squstderr  : areup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), cstderr  : om.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typstderr  : eSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.Tstderr  : ypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.stderr  : AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.astderr  : nnotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.jstderr  : avapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), comstderr  : .squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSstderr  : pecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCallstderr  : (com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilinestderr  : StatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.stderr  : TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlinstderr  : eIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSstderr  : pecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSstderr  : pecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.Annstderr  : otationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squstderr  : areup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareustderr  : p.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.Typestderr  : sEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObjstderr  : ect(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.jastderr  : vapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squarestderr  : up.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.stderr  : javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squarstderr  : eup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclstderr  : ipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=emit, methodDesc=(Lcom/squareup/javapoet/CodeWriter;)Lcom/squareup/javapoet/CodeWriter;], indexes=[73], mutator=orstderr  : g.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=69, lineNumber=247, description=removed call to com/squareup/javapoet/CodeWriter::emitAndIndent, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGustderr  : essForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTestderr  : st), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTystderr  : peElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNstderr  : ameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(costderr  : m.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.Annotastderr  : tedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Costderr  : deBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedTypestderr  : (com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javstderr  : apoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squarstderr  : eup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashstderr  : CodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapostderr  : et.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.Astderr  : nnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest)stderr  : , com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapostderr  : et.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtendstderr  : s(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.stderr  : CodeBlockTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingstderr  : AnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoestderr  : t.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoetstderr  : .JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.jastderr  : vapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareustderr  : p.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Jastderr  : vaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), costderr  : m.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(comstderr  : .squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.jstderr  : avapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.stderr  : TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.stderr  : javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareupstderr  : .javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(stderr  : com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStatistderr  : cForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.stderr  : squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squarstderr  : eup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.stderr  : fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), comstderr  : .squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methostderr  : dToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpstderr  : ecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToStringstderr  : (com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tystderr  : peSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.jstderr  : avapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoetstderr  : .TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squstderr  : areup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTstderr  : ypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typstderr  : eSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.Typestderr  : SpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationIstderr  : nAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squastderr  : reup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.jstderr  : avapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapstderr  : oet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(costderr  : m.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlocstderr  : kInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapstderr  : oet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest),stderr  :  com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpstderr  : ecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoetstderr  : .AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEstderr  : clipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.jastderr  : vapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapostderr  : et.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclistderr  : pseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoestderr  : t.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.jstderr  : avapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.sstderr  : quareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotatistderr  : on(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=compareTo, methodDesc=(Lcom/squareup/javapoet/ClassName;)I], indexes=[8], mutator=org.pitest.mutationtest.engine.gstderr  : regor.mutators.ReturnValsMutator], filename=ClassName.java, block=62, lineNumber=230, description=replaced return of integer sized value with (x == 0 ? 1 : 0), testsInOrder=[com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(costderr  : m.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest),stderr  :  com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.jstderr  : avapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCstderr  : razyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.Javastderr  : FileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.sstderr  : quareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.stderr  : multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.sqstderr  : uareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpstderr  : ecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.Typstderr  : eSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedFstderr  : ield(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefstderr  : ineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTeststderr  : .classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotatistderr  : onDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), costderr  : m.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squastderr  : reup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squastderr  : reup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlocstderr  : k(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTesstderr  : t.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImstderr  : port(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareupstderr  : .javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[73], mutator=org.pitest.mutationtestderr  : st.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=39, lineNumber=149, description=removed call to java/lang/String::lastIndexOf, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.Clstderr  : assNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[29], mutator=org.pitest.mutstderr  : ationtest.engine.gregor.mutators.NegateConditionalsMutator], filename=ClassName.java, block=47, lineNumber=178, description=negated conditional, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAscii(com.squareup.javapoet.ClassNameTest), com.sstderr  : quareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForstderr  : String_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[47], mutator=org.pitest.mutationtestderr  : st.engine.gregor.mutators.InlineConstantMutator], filename=ClassName.java, block=37, lineNumber=145, description=Substituted 1 with 0, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.jstderr  : avapoet.ClassNameTest.fromClassRejectionTypes(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest),stderr  :  com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.stderr  : danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.Astderr  : nnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Annotastderr  : tedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashstderr  : CodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squastderr  : reup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Codestderr  : BlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.stderr  : squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAnstderr  : dHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.jstderr  : avapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapstderr  : oet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNamestderr  : Test), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.jstderr  : avapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annostderr  : tatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTeststderr  : .nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFilstderr  : eTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.conflictingImportsstderr  : (com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest)stderr  : , com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squarestderr  : up.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.stderr  : JavaFileTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.Annostderr  : tatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapostderr  : et.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareustderr  : p.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(stderr  : com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpstderr  : ecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javstderr  : apoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squarstderr  : eup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Annostderr  : tatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.jastderr  : vapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multistderr  : pleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndestderr  : nt(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStstderr  : ringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), comstderr  : .squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToStrstderr  : ing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyAstderr  : rray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.Annotatistderr  : onSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classstderr  : ImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclstderr  : aration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.Tstderr  : ypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.sstderr  : quareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.stderr  : TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(comstderr  : .squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.jstderr  : avapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(comstderr  : .squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterstderr  : izedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareustderr  : p.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squstderr  : areup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.stderr  : TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[14], mutator=org.pitest.mutstderr  : ationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=46, lineNumber=176, description=removed call to java/lang/String::codePointAt, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAscii(com.squareup.javapstderr  : oet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.Cstderr  : lassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.stderr  : squareup.javapoet.TypeNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=<init>, methodDesc=(Ljava/lang/String;Lcom/squareup/javapoet/ClassName;Ljava/lang/String;Ljava/util/List;)V], indestderr  : xes=[54], mutator=org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=5, lineNumber=59, description=removed call to java/lang/StringBuilder::append, testsInOrder=[com.squareup.javapoet.ClassNameTest.beststderr  : GuessNonAscii(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNastderr  : meTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForSstderr  : tring_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javstderr  : apoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.isPrimitive(com.squareup.javapoet.TypeNameTest), com.sstderr  : quareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.danglistderr  : ngNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Anstderr  : notatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodstderr  : eTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(costderr  : m.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.Tstderr  : ypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innestderr  : rClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.sstderr  : quareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoestderr  : t.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Annotastderr  : tedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosstderr  : ingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultistderr  : dimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoestderr  : t.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.Annostderr  : tatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNamstderr  : eTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.JavaFileTest.defaultPackageTypesAreNotImported(cstderr  : om.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.Javastderr  : FileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(stderr  : com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), cstderr  : om.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperstderr  : lass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFistderr  : leTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.astderr  : nnotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFilestderr  : Test), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.conflictingImports(stderr  : com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest),stderr  :  com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareustderr  : p.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.Jstderr  : avaFileTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTesstderr  : t), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoestderr  : t.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapostderr  : et.TypesTest), com.squareup.javapoet.TypeSpecTest.classNameFactories(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(stderr  : com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.namestderr  : FromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTestderr  : st.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.Tystderr  : pesTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToStstderr  : ring(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoetstderr  : .TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.Typestderr  : SpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Typestderr  : SpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), costderr  : m.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.jstderr  : avapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTeststderr  : .requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritinstderr  : gTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.Tstderr  : ypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMestderr  : mberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedCstderr  : lass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membstderr  : ersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareupstderr  : .javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(comstderr  : .squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumstderr  : Constants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImstderr  : plementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.sqstderr  : uareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclarstderr  : ation(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.Typstderr  : eSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest),stderr  :  com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTstderr  : est.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(comstderr  : .squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.stderr  : initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHstderr  : ashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTestderr  : st), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(costderr  : m.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipstderr  : seTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTestderr  : st), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMstderr  : irrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTesstderr  : t), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclistderr  : pseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.stderr  : ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.jstderr  : avapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[50], mutator=org.pitest.mutstderr  : ationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE], filename=ClassName.java, block=50, lineNumber=180, description=removed conditional - replaced equality check with false, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAsstderr  : cii(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), cstderr  : om.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAndstderr  : HashCodeClassName(com.squareup.javapoet.TypeNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[92], mutator=org.pitest.mutationtestderr  : st.engine.gregor.mutators.experimental.NakedReceiverMutator], filename=ClassName.java, block=39, lineNumber=151, description=replaced call to java/lang/Class::getEnclosingClass with receiver, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromCstderr  : lass(com.squareup.javapoet.ClassNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=reflectionName, methodDesc=()Ljava/lang/String;], indexes=[41], mutator=org.pitest.mutationtest.engine.gregor.mutastderr  : tors.experimental.NakedReceiverMutator], filename=ClassName.java, block=26, lineNumber=107, description=replaced call to java/lang/StringBuilder::append with receiver, testsInOrder=[com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.Cstderr  : lassNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[123], mutator=org.pitest.mustderr  : tationtest.engine.gregor.mutators.ConstructorCallMutator], filename=ClassName.java, block=56, lineNumber=187, description=removed call to com/squareup/javapoet/ClassName::<init>, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAscii(com.squarstderr  : eup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.jstderr  : avapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassstderr  : Name(com.squareup.javapoet.TypeNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=simpleNames, methodDesc=()Ljava/util/List;], indexes=[11], mutator=org.pitest.mutationtest.engine.gregor.mutators.stderr  : RemoveConditionalMutator_EQUAL_IF], filename=ClassName.java, block=27, lineNumber=112, description=removed conditional - replaced equality check with true, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javstderr  : apoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflistderr  : ctingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareupstderr  : .javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClastderr  : ssAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapostderr  : et.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingImports(costderr  : m.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.Javstderr  : aFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squstderr  : areup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTstderr  : est), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStstderr  : rings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoestderr  : t.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), stderr  : com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typstderr  : eSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatestderr  : mentWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSstderr  : pecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.jstderr  : avapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoestderr  : t.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationstderr  : WithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.Annotatstderr  : ionSpecTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.jstderr  : avapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[84], mutator=org.pitest.mutationtestderr  : st.engine.gregor.mutators.experimental.NakedReceiverMutator], filename=ClassName.java, block=39, lineNumber=150, description=replaced call to java/lang/StringBuilder::append with receiver, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClasstderr  : s(com.squareup.javapoet.ClassNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=emit, methodDesc=(Lcom/squareup/javapoet/CodeWriter;)Lcom/squareup/javapoet/CodeWriter;], indexes=[57], mutator=orstderr  : g.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=68, lineNumber=245, description=removed call to java/lang/String::lastIndexOf, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simplstderr  : eClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.stderr  : javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squastderr  : reup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPristderr  : mitive(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoestderr  : t.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), stderr  : com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNstderr  : ewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javastderr  : poet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTesstderr  : t.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBstderr  : lockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeNastderr  : me(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNastderr  : meTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTestderr  : st), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javstderr  : apoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.jstderr  : oin(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javstderr  : apoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), costderr  : m.squareup.javapoet.JavaFileTest.defaultPackageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassSharestderr  : Name(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTesstderr  : t), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Javastderr  : FileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTeststderr  : ), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFilstderr  : eTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeIstderr  : nVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareustderr  : p.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.jstderr  : avapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.jstderr  : avapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.sqstderr  : uareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.stderr  : javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javastderr  : poet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsTstderr  : ype(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtestderr  : ndsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTesstderr  : t), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareustderr  : p.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExcestderr  : ptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpstderr  : ecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedTypstderr  : e(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTstderr  : est.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpestderr  : cTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(comstderr  : .squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.Typestderr  : SpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoestderr  : t.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamstderr  : esConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.sstderr  : quareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest)stderr  : , com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.sstderr  : quareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTesstderr  : t.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.stderr  : TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapstderr  : oet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymstderr  : ousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Methodstderr  : SpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubstderr  : classing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.cstderr  : odeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defstderr  : aultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.Annostderr  : tationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclstderr  : ipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.stderr  : squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.jastderr  : vapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipsestderr  : Test.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEcstderr  : lipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipstderr  : seTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileRestderr  : adingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(stderr  : com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[31], mutator=org.pitest.mutationtestderr  : st.engine.gregor.mutators.InlineConstantMutator], filename=ClassName.java, block=35, lineNumber=144, description=Substituted 1 with 0, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.jstderr  : avapoet.ClassNameTest.fromClassRejectionTypes(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest),stderr  :  com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.stderr  : danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.Astderr  : nnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Annotastderr  : tedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashstderr  : CodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squastderr  : reup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Codestderr  : BlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.stderr  : squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAnstderr  : dHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.jstderr  : avapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapstderr  : oet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNamestderr  : Test), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.jstderr  : avapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annostderr  : tatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTeststderr  : .nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFilstderr  : eTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.conflictingImportsstderr  : (com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest)stderr  : , com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squarestderr  : up.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.stderr  : JavaFileTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.Annostderr  : tatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapostderr  : et.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareustderr  : p.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(stderr  : com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpstderr  : ecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javstderr  : apoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squarstderr  : eup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Annostderr  : tatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.jastderr  : vapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multistderr  : pleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndestderr  : nt(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStstderr  : ringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), comstderr  : .squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToStrstderr  : ing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyAstderr  : rray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.Annotatistderr  : onSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classstderr  : ImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclstderr  : aration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.Tstderr  : ypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.sstderr  : quareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.stderr  : TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(comstderr  : .squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.jstderr  : avapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(comstderr  : .squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterstderr  : izedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareustderr  : p.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squstderr  : areup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.stderr  : TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=<init>, methodDesc=(Ljava/lang/String;Lcom/squareup/javapoet/ClassName;Ljava/lang/String;Ljava/util/List;)V], indestderr  : xes=[38], mutator=org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=2, lineNumber=58, description=removed call to java/lang/StringBuilder::toString, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestderr  : stGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.Classtderr  : sNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(costderr  : m.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annostderr  : tatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNesstderr  : tedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squastderr  : reup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.Typestderr  : NameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annstderr  : otatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotastderr  : tedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.anstderr  : notatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squastderr  : reup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoestderr  : t.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest)stderr  : , com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.cstderr  : onflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTstderr  : est), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.Annotstderr  : atedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.sstderr  : quareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), costderr  : m.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberstderr  : Name(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.jstderr  : avapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.stderr  : javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.Metstderr  : hodSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecstderr  : Test.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squarestderr  : up.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNamestderr  : Test), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=withoutAnnotations, methodDesc=()Lcom/squareup/javapoet/ClassName;], indexes=[5], mutator=org.pitest.mutationtest.stderr  : engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE], filename=ClassName.java, block=7, lineNumber=68, description=removed conditional - replaced equality check with false, testsInOrder=[com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsstderr  : OnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnostderr  : tationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSupstderr  : erclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoetstderr  : .JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest)stderr  : , com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squarestderr  : up.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importstderr  : StaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.enumIstderr  : mplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTeststderr  : .enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tstderr  : ypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpestderr  : cTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapstderr  : oet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTeststderr  : .interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForIntstderr  : erfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTstderr  : est.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squarestderr  : up.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javastderr  : poet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareustderr  : p.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.FileReadingTest.compileJavaFilestderr  : (com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=Nstderr  : ORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=isAnnotated, methodDesc=()Z], indexes=[12], mutator=org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionstderr  : alMutator_EQUAL_IF], filename=ClassName.java, block=14, lineNumber=76, description=removed conditional - replaced equality check with true, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTeststderr  : ), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_stderr  : defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareupstderr  : .javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest)stderr  : , com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Typstderr  : eNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAstderr  : ndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTeststderr  : ), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.stderr  : javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javastderr  : poet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFostderr  : rmats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), costderr  : m.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTystderr  : peNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNastderr  : meTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestestderr  : dType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), stderr  : com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareupstderr  : .javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.JavaFileTest.defaultPastderr  : ckageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), stderr  : com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.constderr  : flictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareupstderr  : .javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packstderr  : ageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(costderr  : m.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.Anstderr  : notatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencstderr  : esSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squarestderr  : up.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.stderr  : TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.jstderr  : avapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squarstderr  : eup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Typstderr  : esTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.stderr  : squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), stderr  : com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRestderr  : cursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typstderr  : eFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javstderr  : apoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.Methodstderr  : SpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToSstderr  : tring(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTstderr  : est), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squstderr  : areup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTeststderr  : .multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squastderr  : reup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squarstderr  : eup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTesstderr  : t.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotstderr  : ationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squarestderr  : up.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoetstderr  : .TypesTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squstderr  : areup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tstderr  : ypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGstderr  : enerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifiestderr  : r(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendstderr  : sOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(costderr  : m.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrstderr  : ofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapstderr  : oet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.Annstderr  : otationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.jstderr  : avapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(cstderr  : om.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javstderr  : apoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javastderr  : poet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclstderr  : ipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(stderr  : com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecstderr  : Test.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), cstderr  : om.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=topLevelClassName, methodDesc=()Lcom/squareup/javapoet/ClassName;], indexes=[5], mutator=org.pitest.mutationtest.estderr  : ngine.gregor.mutators.NegateConditionalsMutator], filename=ClassName.java, block=19, lineNumber=100, description=negated conditional, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), comstderr  : .squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaulstderr  : tPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapstderr  : oet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), com.stderr  : squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTstderr  : est.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashstderr  : CodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), comstderr  : .squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapostderr  : et.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.Cstderr  : odeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(stderr  : com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squastderr  : reup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNamestderr  : Test.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTeststderr  : .annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(stderr  : com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), com.sqstderr  : uareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapstderr  : oet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.JavaFileTest.classAndSuperclstderr  : assShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTesstderr  : t), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoestderr  : t.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportstderr  : sWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squstderr  : areup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictistderr  : ngImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squastderr  : reup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.stderr  : JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTesstderr  : t.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoetstderr  : .TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoestderr  : t.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squastderr  : reup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoestderr  : t.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.defaultPackstderr  : age(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.stderr  : typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.jstderr  : avapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpstderr  : ecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTystderr  : peElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTesstderr  : t.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squarstderr  : eup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpstderr  : ecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.sqstderr  : uareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(stderr  : com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.stderr  : TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaulstderr  : tModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.sqstderr  : uareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareupstderr  : .javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBustderr  : ilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Annotationstderr  : SpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squastderr  : reup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareustderr  : p.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapstderr  : oet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterstderr  : izedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareustderr  : p.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(cstderr  : om.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareupstderr  : .javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypstderr  : es(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.clstderr  : assNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.Annotatistderr  : onSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[13], mutator=org.pitest.mutationtestderr  : st.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF], filename=ClassName.java, block=32, lineNumber=143, description=removed conditional - replaced equality check with true, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.sstderr  : quareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.fromClassRejectionTypes(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.stderr  : peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypestderr  : NameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotatiostderr  : nsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapstderr  : oet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), cstderr  : om.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericTypstderr  : e(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javstderr  : apoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.generistderr  : cType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTesstderr  : t), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annotatestderr  : dTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInstderr  : nerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatstderr  : edTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.stderr  : javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.Annstderr  : otatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTystderr  : peNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFilestderr  : Test.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.sqstderr  : uareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalenstderr  : ce(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.addAnnotationDisallowsNull(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Tstderr  : ypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), stderr  : com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javstderr  : apoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), comstderr  : .squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoetstderr  : .TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackstderr  : age(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.imstderr  : portStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.jastderr  : vapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFilestderr  : Test), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squarstderr  : eup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.stderr  : TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrinstderr  : gs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Astderr  : nnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javastderr  : poet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(costderr  : m.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest),stderr  :  com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.Typestderr  : SpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypesstderr  : (com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTestderr  : st.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javastderr  : poet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNostderr  : ConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squstderr  : areup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typstderr  : eSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(stderr  : com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTesstderr  : t.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTestderr  : st.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), stderr  : com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.sstderr  : quareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.stderr  : TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEcstderr  : lipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObjectstderr  : (com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapstderr  : oet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareustderr  : p.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesEclipseTest.arrayType(comstderr  : .squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=isAnnotated, methodDesc=()Z], indexes=[15], mutator=org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMstderr  : utator], filename=ClassName.java, block=15, lineNumber=76, description=Substituted 1 with 0, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuesstderr  : sForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTstderr  : est), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.stderr  : javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.wstderr  : ithoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(comstderr  : .squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.Tstderr  : ypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenestderr  : ricInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(cstderr  : om.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.Typestderr  : NameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), comstderr  : .squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotstderr  : atedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.stderr  : squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(stderr  : com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTestderr  : st), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annstderr  : otatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedstderr  : ParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.JavaFileTest.defaultPackageTypesAreNotImported(com.squareup.javapoet.stderr  : JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAstderr  : nnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoetstderr  : .JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.stderr  : JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javstderr  : apoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareupstderr  : .javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Javstderr  : aFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), comstderr  : .squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.jastderr  : vapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.Tstderr  : ypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.jstderr  : avapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.stderr  : javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(cstderr  : om.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticstderr  : ForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.sstderr  : quareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTstderr  : est), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fstderr  : ieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodstderr  : ToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpestderr  : cTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(stderr  : com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typstderr  : eSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapostderr  : et.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squstderr  : areup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoestderr  : t.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.jstderr  : avapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.Tystderr  : peSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.sstderr  : quareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMaystderr  : DefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotationSpstderr  : ecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapstderr  : oet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnstderr  : otationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), stderr  : com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.sqstderr  : uareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squarestderr  : up.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedEstderr  : lseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initialstderr  : izerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squarestderr  : up.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpstderr  : ecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.stderr  : MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.stderr  : javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoestderr  : t.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squstderr  : areup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareustderr  : p.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.Tstderr  : ypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareupstderr  : .javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.sqstderr  : uareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultstderr  : Annotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=<init>, methodDesc=(Ljava/lang/String;Lcom/squareup/javapoet/ClassName;Ljava/lang/String;Ljava/util/List;)V], indestderr  : xes=[58], mutator=org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator], filename=ClassName.java, block=5, lineNumber=59, description=replaced call to java/lang/StringBuilder::append with receiver, testsInOrder=[com.squareup.javstderr  : apoet.ClassNameTest.bestGuessNonAscii(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.sstderr  : quareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.Clastderr  : ssNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNamstderr  : eTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.isPrimitive(com.squareup.javapstderr  : oet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapstderr  : oet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), stderr  : com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNstderr  : ameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndstderr  : HashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest),stderr  :  com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.jastderr  : vapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapostderr  : et.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormstderr  : ats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.stderr  : squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypestderr  : NameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNamestderr  : Test.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedTstderr  : ype(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), costderr  : m.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.jstderr  : avapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.JavaFileTest.defaultPackstderr  : ageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), costderr  : m.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflstderr  : ictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.jstderr  : avapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packagstderr  : eClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.stderr  : squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.sqstderr  : uareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFilestderr  : Test.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoetstderr  : .AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoetstderr  : .TypesTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParamstderr  : (com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.sqstderr  : uareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayTstderr  : ype(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMistderr  : rror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.classNameFactories(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wistderr  : ldcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.jastderr  : vapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squastderr  : reup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(stderr  : com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypstderr  : eMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.Tystderr  : peSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTeststderr  : ), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(costderr  : m.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), costderr  : m.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilistderr  : neStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squastderr  : reup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrowsstderr  : (com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Annotationstderr  : SpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squastderr  : reup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.Typstderr  : eSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.sqstderr  : uareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDstderr  : efineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotationSpestderr  : cTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnostderr  : tationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), cstderr  : om.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareupstderr  : .javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareustderr  : p.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElstderr  : seIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initialistderr  : zerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareustderr  : p.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpestderr  : cTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.Mstderr  : ethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.jstderr  : avapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoetstderr  : .TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squastderr  : reup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareupstderr  : .javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.Tystderr  : pesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.stderr  : javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squstderr  : areup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAstderr  : nnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[72], mutator=org.pitest.mutstderr  : ationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=52, lineNumber=184, description=removed call to java/lang/String::substring, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAscii(com.squareup.javapoestderr  : t.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.Clastderr  : ssNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.sqstderr  : uareup.javapoet.TypeNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[114], mutator=org.pitest.mutationtstderr  : est.engine.gregor.mutators.NegateConditionalsMutator], filename=ClassName.java, block=40, lineNumber=155, description=negated conditional, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squarestderr  : up.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.Annotatstderr  : edTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStstderr  : aticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squarstderr  : eup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypestderr  : NameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockstderr  : Test.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.sqstderr  : uareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.Cstderr  : odeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.Cstderr  : odeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.Annotatedstderr  : TypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingstderr  : AndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimstderr  : ensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.Astderr  : nnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNastderr  : meTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTeststderr  : ), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTesstderr  : t.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.Javastderr  : FileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIstderr  : terableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), costderr  : m.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), costderr  : m.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squstderr  : areup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoetstderr  : .TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), stderr  : com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoetstderr  : .TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.sstderr  : quareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFilestderr  : Test.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest),stderr  :  com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.jstderr  : avapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNamestderr  : Test), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.sqstderr  : uareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTesstderr  : t.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.enumImplements(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnstderr  : notatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.stderr  : MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsstderr  : AndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), costderr  : m.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(cstderr  : om.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumstderr  : WithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.stderr  : javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWistderr  : thBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapostderr  : et.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActuastderr  : lTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.Mstderr  : ethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWistderr  : thDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.sqstderr  : uareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.stderr  : javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcstderr  : ardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), costderr  : m.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMistderr  : rror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesEclipseTestderr  : st.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=isAnnotated, methodDesc=()Z], indexes=[12], mutator=org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionstderr  : alMutator_EQUAL_ELSE], filename=ClassName.java, block=14, lineNumber=76, description=removed conditional - replaced equality check with false, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTstderr  : est), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForStristderr  : ng_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squarstderr  : eup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTestderr  : st), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.stderr  : TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equastderr  : lsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTstderr  : est), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squarestderr  : up.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.jstderr  : avapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferenstderr  : tFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest),stderr  :  com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annotatestderr  : dTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypstderr  : eNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestderr  : stedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTeststderr  : ), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squarstderr  : eup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.JavaFileTest.defaulstderr  : tPackageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTeststderr  : ), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.stderr  : conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squarstderr  : eup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.pstderr  : ackageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareNamestderr  : (com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoetstderr  : .AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferstderr  : encesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squstderr  : areup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapostderr  : et.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareustderr  : p.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.sqstderr  : uareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.stderr  : TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), cstderr  : om.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTeststderr  : ), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrostderr  : rRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.stderr  : typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.stderr  : javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.Metstderr  : hodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockstderr  : ToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNastderr  : meTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTstderr  : est.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.sstderr  : quareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareupstderr  : .javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.sqstderr  : uareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecstderr  : Test.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squstderr  : areup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.anstderr  : notationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapstderr  : oet.TypesTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoestderr  : t.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overristderr  : deGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.stderr  : javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModistderr  : fier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtstderr  : endsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpestderr  : cTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverythingstderr  : (com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.rstderr  : etrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.jastderr  : vapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.stderr  : AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareustderr  : p.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbostderr  : x(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.stderr  : javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.jstderr  : avapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.Typesstderr  : EclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursistderr  : ve(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSstderr  : pecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)stderr  : , com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=withoutAnnotations, methodDesc=()Lcom/squareup/javapoet/ClassName;], indexes=[36], mutator=org.pitest.mutationteststderr  : .engine.gregor.mutators.ConstructorCallMutator], filename=ClassName.java, block=11, lineNumber=72, description=removed call to com/squareup/javapoet/ClassName::<init>, testsInOrder=[com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNstderr  : estedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnstderr  : otatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSstderr  : pecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[155], mutator=org.pitest.mutationtstderr  : est.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=44, lineNumber=162, description=removed call to com/squareup/javapoet/ClassName::nestedClass, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squastderr  : reup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annotstderr  : atedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNeststderr  : edType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squarstderr  : eup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNstderr  : ameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annostderr  : tatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatstderr  : edInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annstderr  : otatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squarstderr  : eup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoetstderr  : .AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.Annotatstderr  : edTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), cstderr  : om.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFilestderr  : Test.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.Astderr  : nnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTesstderr  : t.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squarestderr  : up.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=emit, methodDesc=(Lcom/squareup/javapoet/CodeWriter;)Lcom/squareup/javapoet/CodeWriter;], indexes=[80], mutator=orstderr  : g.pitest.mutationtest.engine.gregor.mutators.MathMutator], filename=ClassName.java, block=69, lineNumber=248, description=Replaced integer addition with subtraction, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squarstderr  : eup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNastderr  : meTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.Clstderr  : assNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squarstderr  : eup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest),stderr  :  com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javstderr  : apoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squarstderr  : eup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTystderr  : peNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBstderr  : eIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndstderr  : exCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.stderr  : javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squstderr  : areup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareustderr  : p.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTstderr  : ypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareupstderr  : .javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTstderr  : ypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapstderr  : oet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squastderr  : reup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javastderr  : poet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfstderr  : Scope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareupstderr  : .javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLastderr  : ngImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClassstderr  : (com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.cstderr  : onflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), stderr  : com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.jstderr  : avapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.stderr  : TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.stderr  : javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareupstderr  : .javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), stderr  : com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareupstderr  : .javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.defstderr  : aultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSstderr  : pecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.sqstderr  : uareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoestderr  : t.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tystderr  : peFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.Tystderr  : peSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToStrstderr  : ing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typstderr  : eSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squastderr  : reup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedstderr  : Values(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareupstderr  : .javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAnstderr  : dJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTestderr  : st), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tstderr  : ypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultstderr  : ModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squstderr  : areup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.stderr  : javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest),stderr  :  com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoestderr  : t.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuistderr  : lder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSstderr  : pecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squarstderr  : eup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareupstderr  : .javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapostderr  : et.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameteristderr  : zedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareupstderr  : .javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(costderr  : m.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.stderr  : javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypestderr  : s(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.clastderr  : ssNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.Annotatiostderr  : nSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=enclosingClasses, methodDesc=()Ljava/util/List;], indexes=[5], mutator=org.pitest.mutationtest.engine.gregor.mutatstderr  : ors.ConstructorCallMutator], filename=ClassName.java, block=74, lineNumber=273, description=removed call to java/util/ArrayList::<init>, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), stderr  : com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defstderr  : aultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.jastderr  : vapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), cstderr  : om.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNastderr  : meTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHstderr  : ashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), stderr  : com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javstderr  : apoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoestderr  : t.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormastderr  : ts(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.sstderr  : quareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNstderr  : ameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTstderr  : est.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedTystderr  : pe(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), comstderr  : .squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.jastderr  : vapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.JavaFileTest.defaultPackastderr  : geTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), comstderr  : .squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflistderr  : ctingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.jastderr  : vapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packagestderr  : ClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.sstderr  : quareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.Annotstderr  : atedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSstderr  : elf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.stderr  : javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Typstderr  : esTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javastderr  : poet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareupstderr  : .javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTstderr  : est.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squstderr  : areup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), comstderr  : .squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecurstderr  : sive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFrstderr  : omTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapostderr  : et.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpestderr  : cTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToStristderr  : ng(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTeststderr  : ), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.mustderr  : ltilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareustderr  : p.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapstderr  : oet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareupstderr  : .javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.ostderr  : verrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squstderr  : areup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotatistderr  : onsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.stderr  : javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest),stderr  :  com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.Tystderr  : pesTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest),stderr  :  com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenestderr  : rics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapostderr  : et.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(cstderr  : om.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOtstderr  : hersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest),stderr  :  com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.sstderr  : quareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofistderr  : tStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoetstderr  : .AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.Annotastderr  : tionSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javastderr  : poet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.stderr  : squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapostderr  : et.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoestderr  : t.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipsstderr  : eTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(comstderr  : .squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTesstderr  : t.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.stderr  : squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexstderr  : es=[32], mutator=org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=59, lineNumber=200, description=removed call to com/squareup/javapoet/ClassName::nestedClass, testsInOrder=[com.squareup.javapoet.Classtderr  : sNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapstderr  : oet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.stderr  : squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTstderr  : est.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.Jastderr  : vaFileTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousstderr  : InnerClass(com.squareup.javapoet.TypeSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=simpleNames, methodDesc=()Ljava/util/List;], indexes=[16], mutator=org.pitest.mutationtest.engine.gregor.mutators.stderr  : NonVoidMethodCallMutator], filename=ClassName.java, block=28, lineNumber=113, description=removed call to com/squareup/javapoet/ClassName::enclosingClassName, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.stderr  : javapoet.ClassNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflstderr  : ictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), stderr  : com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapstderr  : oet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Annotationstderr  : SpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(comstderr  : .squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=nestedClass, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[10], mutator=org.pitest.mstderr  : utationtest.engine.gregor.mutators.NullReturnValsMutator], filename=ClassName.java, block=30, lineNumber=133, description=replaced return value with null for com/squareup/javapoet/ClassName::nestedClass, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestderr  : stGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.Classtderr  : sNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(costderr  : m.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annostderr  : tatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNesstderr  : tedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squastderr  : reup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.Typestderr  : NameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annstderr  : otatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotastderr  : tedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.anstderr  : notatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squastderr  : reup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoestderr  : t.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest)stderr  : , com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.cstderr  : onflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTstderr  : est), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.Annotstderr  : atedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.sstderr  : quareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), costderr  : m.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberstderr  : Name(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.jstderr  : avapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.stderr  : javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.Metstderr  : hodSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecstderr  : Test.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squarestderr  : up.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNamestderr  : Test), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[46], mutator=org.pitest.mutationtestderr  : st.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF], filename=ClassName.java, block=36, lineNumber=145, description=removed conditional - replaced equality check with true, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.sstderr  : quareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.fromClassRejectionTypes(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.stderr  : peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypestderr  : NameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotatiostderr  : nsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapstderr  : oet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), cstderr  : om.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericTypstderr  : e(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javstderr  : apoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.generistderr  : cType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTesstderr  : t), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annotatestderr  : dTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInstderr  : nerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatstderr  : edTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.stderr  : javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.Annstderr  : otatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTystderr  : peNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFilestderr  : Test.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.sqstderr  : uareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalenstderr  : ce(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedTystderr  : pe(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFilstderr  : eTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTystderr  : peNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Tstderr  : ypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.stderr  : TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), comstderr  : .squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapstderr  : oet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.sqstderr  : uareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codstderr  : eBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareustderr  : p.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAdditistderr  : on(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.jstderr  : avapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTstderr  : est), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberNamestderr  : (com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), stderr  : com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClassstderr  : (com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.estderr  : qualsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExstderr  : tends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapostderr  : et.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.jastderr  : vapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intestderr  : rsectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.sstderr  : quareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBstderr  : lock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecstderr  : Test.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.sstderr  : quareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.sqstderr  : uareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.jstderr  : avapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), cstderr  : om.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.sstderr  : quareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javastderr  : poet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.jastderr  : vapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=emit, methodDesc=(Lcom/squareup/javapoet/CodeWriter;)Lcom/squareup/javapoet/CodeWriter;], indexes=[72], mutator=orstderr  : g.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=69, lineNumber=247, description=removed call to java/lang/String::substring, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleCstderr  : lass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.jastderr  : vapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squarestderr  : up.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimistderr  : tive(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.stderr  : TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), costderr  : m.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewstderr  : line(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapostderr  : et.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.stderr  : typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlostderr  : ckTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeNamestderr  : (com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNamestderr  : Test), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTeststderr  : ), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapstderr  : oet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joistderr  : n(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapstderr  : oet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.stderr  : squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedstderr  : Class(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), comstderr  : .squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflistderr  : ctingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest)stderr  : , com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTstderr  : est.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotatiostderr  : nIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.stderr  : JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.Tstderr  : ypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), stderr  : com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squastderr  : reup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest),stderr  :  com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest)stderr  : , com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoestderr  : t.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorkstderr  : s(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Jastderr  : vaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.stderr  : javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpestderr  : cTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.sqstderr  : uareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tstderr  : ypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.astderr  : nnotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareustderr  : p.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplestderr  : ments(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enustderr  : mWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadostderr  : c(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTeststderr  : .annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSstderr  : pecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.jastderr  : vapoet.TypesTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplestderr  : mentsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squarstderr  : eup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaratistderr  : on(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpstderr  : ecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), costderr  : m.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTeststderr  : .basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest),stderr  :  com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.stderr  : TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.sqstderr  : uareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.inistderr  : tializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapostderr  : et.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashstderr  : Code(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest)stderr  : , com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.sstderr  : quareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTstderr  : est.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest)stderr  : , com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrstderr  : orSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest),stderr  :  com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipsestderr  : Test.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Clastderr  : ssNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javastderr  : poet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=emit, methodDesc=(Lcom/squareup/javapoet/CodeWriter;)Lcom/squareup/javapoet/CodeWriter;], indexes=[79], mutator=orstderr  : g.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator], filename=ClassName.java, block=69, lineNumber=248, description=Substituted 1 with 0, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoetstderr  : .ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGstderr  : uessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest)stderr  : , com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoetstderr  : .TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareustderr  : p.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNastderr  : meTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoetstderr  : .CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest),stderr  :  com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(comstderr  : .squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWstderr  : ithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.Typstderr  : eNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapostderr  : et.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Astderr  : nnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.stderr  : annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.Costderr  : deBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest)stderr  : , com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.JavaFilestderr  : Test.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoestderr  : t.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.Annotatstderr  : edTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.sqstderr  : uareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.Jastderr  : vaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWitstderr  : hConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareustderr  : p.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingImstderr  : ports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareupstderr  : .javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Javastderr  : FileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wistderr  : ldcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Typstderr  : esTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Tystderr  : pesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareupstderr  : .javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.Jastderr  : vaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.defaultPackage(stderr  : com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typestderr  : FromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElstderr  : ement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest),stderr  :  com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squastderr  : reup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.mustderr  : ltipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squastderr  : reup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoestderr  : t.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.sstderr  : quareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapostderr  : et.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.Tystderr  : peSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypstderr  : es(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecstderr  : Test.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squstderr  : areup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.stderr  : javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.stderr  : lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.Tstderr  : ypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForstderr  : InterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpstderr  : ecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.Typstderr  : eSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareustderr  : p.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTestderr  : st), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squstderr  : areup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflstderr  : ectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoetstderr  : .MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.Tystderr  : pesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclistderr  : pseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.stderr  : squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.Tystderr  : pesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.jstderr  : avapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.Typstderr  : esEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squarestderr  : up.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTystderr  : peElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)],stderr  :  isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=annotated, methodDesc=(Ljava/util/List;)Lcom/squareup/javapoet/ClassName;], indexes=[16], mutator=org.pitest.mutatstderr  : iontest.engine.gregor.mutators.ConstructorCallMutator], filename=ClassName.java, block=6, lineNumber=64, description=removed call to com/squareup/javapoet/ClassName::<init>, testsInOrder=[com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnostderr  : tatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterstderr  : izedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareupstderr  : .javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTesstderr  : t.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(costderr  : m.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTeststderr  : ), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareustderr  : p.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javastderr  : poet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.jastderr  : vapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.getParameterizstderr  : edTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squarestderr  : up.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classtderr  : sImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoetstderr  : .TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInstderr  : nerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclstderr  : ipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadinstderr  : gTest.compileJavaFile(com.squareup.javapoet.FileReadingTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[66], mutator=org.pitest.mutationtestderr  : st.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=38, lineNumber=148, description=removed call to java/lang/Class::isAnonymousClass, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoestderr  : t.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(cstderr  : om.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.jstderr  : avapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAnstderr  : dHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squstderr  : areup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), comstderr  : .squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEstderr  : nclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTestderr  : st), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentForstderr  : mats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), comstderr  : .squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypstderr  : eNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNamstderr  : eTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedstderr  : Type(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squarstderr  : eup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.jastderr  : vapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.jstderr  : avapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelstderr  : f(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpstderr  : ecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.stderr  : javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromParstderr  : ameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.sqstderr  : uareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSupstderr  : erType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTestderr  : st.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), costderr  : m.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squastderr  : reup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.impstderr  : ortStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareustderr  : p.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSstderr  : uperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.sstderr  : quareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.Tstderr  : ypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotstderr  : ation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typstderr  : eSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapstderr  : oet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.Typstderr  : eSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dstderr  : ynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareustderr  : p.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.stderr  : TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapstderr  : oet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultstderr  : Modifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overridstderr  : eExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.Typestderr  : SpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.Typstderr  : eSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverytstderr  : hing(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Annotationstderr  : SpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoetstderr  : .AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEstderr  : clipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javstderr  : apoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.jastderr  : vapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipstderr  : seTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squastderr  : reup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljavax/lang/model/element/TypeElement;)Lcom/squareup/javapoet/ClassName;], indexes=[25], mutator=stderr  : org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=61, lineNumber=210, description=removed call to javax/lang/model/element/Element::accept, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFrstderr  : omTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.gestderr  : tParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.stderr  : javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.Tystderr  : peSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypesTest.errorstderr  : Types(com.squareup.javapoet.TypesTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareupstderr  : .javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaustderr  : ltAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.Annotastderr  : tionSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTstderr  : est.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.Tstderr  : ypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javastderr  : poet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squastderr  : reup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[95], mutator=org.pitest.mutstderr  : ationtest.engine.gregor.mutators.NegateConditionalsMutator], filename=ClassName.java, block=53, lineNumber=185, description=negated conditional, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAscii(com.squareup.javapoet.ClassNameTest), com.sstderr  : quareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForstderr  : String_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNamstderr  : eTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=bestGuess, methodDesc=(Ljava/lang/String;)Lcom/squareup/javapoet/ClassName;], indexes=[15], mutator=org.pitest.mutstderr  : ationtest.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=46, lineNumber=176, description=removed call to java/lang/Character::isLowerCase, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessNonAscii(com.squareup.jastderr  : vapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_confusingInput(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoestderr  : t.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(cstderr  : om.squareup.javapoet.TypeNameTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[131], mutator=org.pitest.mutationtstderr  : est.engine.gregor.mutators.NonVoidMethodCallMutator], filename=ClassName.java, block=42, lineNumber=158, description=removed call to java/lang/String::substring, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.Clastderr  : ssNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.sqstderr  : uareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapostderr  : et.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashstderr  : CodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareupstderr  : .javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squastderr  : reup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosstderr  : ingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), stderr  : com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(stderr  : com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squastderr  : reup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNamestderr  : Test.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTeststderr  : .annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(stderr  : com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.jstderr  : avapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoestderr  : t.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapostderr  : et.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(comstderr  : .squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTesstderr  : t.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapstderr  : oet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromParametestderr  : r(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareustderr  : p.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperTypstderr  : e(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wistderr  : ldcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest)stderr  : , com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.stderr  : javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStstderr  : aticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javstderr  : apoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperistderr  : nterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squarestderr  : up.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoetstderr  : .TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpstderr  : ecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.stderr  : TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotationstderr  : (com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecstderr  : Test.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.Tstderr  : ypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamistderr  : cArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javstderr  : apoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSstderr  : pecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.Tstderr  : ypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifstderr  : ier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtestderr  : ndsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTstderr  : est), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(stderr  : com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTstderr  : est.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.Annostderr  : tationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipsstderr  : eTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoetstderr  : .TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoestderr  : t.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTesstderr  : t.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.stderr  : javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=reflectionName, methodDesc=()Ljava/lang/String;], indexes=[28], mutator=org.pitest.mutationtest.engine.gregor.mutastderr  : tors.NegateConditionalsMutator], filename=ClassName.java, block=24, lineNumber=107, description=negated conditional, testsInOrder=[com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest)], isInFinallyBlock=false, poison=NORMstderr  : AL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=emit, methodDesc=(Lcom/squareup/javapoet/CodeWriter;)Lcom/squareup/javapoet/CodeWriter;], indexes=[63], mutator=orstderr  : g.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator], filename=ClassName.java, block=68, lineNumber=246, description=negated conditional, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapstderr  : oet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestderr  : stGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTestderr  : st), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapstderr  : oet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squastderr  : reup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Typstderr  : eNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapstderr  : oet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTesstderr  : t), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(stderr  : com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsstderr  : edWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.stderr  : TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javstderr  : apoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoestderr  : t.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTestderr  : st.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoetstderr  : .CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTestderr  : st), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.JavaFstderr  : ileTest.defaultPackageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotation(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoestderr  : t.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoetstderr  : .JavaFileTest.conflictingTypeVariableBound(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.conflictingChildstderr  : Name(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.stderr  : JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperstderr  : classShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squstderr  : areup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.sstderr  : uperclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNamestderr  : Test), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.sstderr  : quareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTeststderr  : ), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNamstderr  : eTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squastderr  : reup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoetstderr  : .TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javastderr  : poet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVarstderr  : iableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoetstderr  : .TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest),stderr  :  com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareustderr  : p.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatemstderr  : entOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.Astderr  : nnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfacstderr  : eAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpstderr  : ecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.parameterToStrinstderr  : g(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringstderr  : Literal(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapstderr  : oet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPstderr  : ackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecstderr  : Test.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.Tstderr  : ypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.stderr  : squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTeststderr  : .tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.sqstderr  : uareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSstderr  : pecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest),stderr  :  com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCstderr  : opyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTestderr  : st.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overstderr  : rideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.stderr  : TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(cstderr  : om.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squastderr  : reup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirrstderr  : or(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEcstderr  : lipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest),stderr  :  com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(stderr  : com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.stderr  : javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypstderr  : eMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.stderr  : javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.Typstderr  : esEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[30], mutator=org.pitest.mutationtestderr  : st.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF], filename=ClassName.java, block=34, lineNumber=144, description=removed conditional - replaced equality check with true, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(com.sstderr  : quareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.fromClassRejectionTypes(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.stderr  : peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypestderr  : NameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotatiostderr  : nsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapstderr  : oet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), cstderr  : om.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericTypstderr  : e(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javstderr  : apoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.generistderr  : cType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTesstderr  : t), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annotatestderr  : dTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInstderr  : nerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatstderr  : edTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.stderr  : javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.Annstderr  : otatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTystderr  : peNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFilestderr  : Test.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.sqstderr  : uareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalenstderr  : ce(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedTystderr  : pe(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFilstderr  : eTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTystderr  : peNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.Tstderr  : ypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.stderr  : TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), comstderr  : .squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapstderr  : oet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.sqstderr  : uareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codstderr  : eBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareustderr  : p.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAdditistderr  : on(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.jstderr  : avapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTstderr  : est), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberNamestderr  : (com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), stderr  : com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClassstderr  : (com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.estderr  : qualsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExstderr  : tends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapostderr  : et.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.jastderr  : vapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intestderr  : rsectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.sstderr  : quareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBstderr  : lock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecstderr  : Test.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.sstderr  : quareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.sqstderr  : uareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.jstderr  : avapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), cstderr  : om.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.sstderr  : quareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javastderr  : poet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.jastderr  : vapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=packageName, methodDesc=()Ljava/lang/String;], indexes=[5], mutator=org.pitest.mutationtest.engine.gregor.mutatorsstderr  : .ReturnValsMutator], filename=ClassName.java, block=17, lineNumber=84, description=mutated return of Object value for com/squareup/javapoet/ClassName::packageName to ( if (x != null) null else throw new RuntimeException ), testsInOrder=[com.squareup.javapostderr  : et.ClassNameTest.bestGuessNonAscii(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_simpleClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_nestedClass(com.squareustderr  : p.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNstderr  : ameTest.createNestedClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.classNameFromTypeElement(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squarstderr  : eup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.isBoxedPrimitive(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedstderr  : Type(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), stderr  : com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoestderr  : t.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javastderr  : poet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest)stderr  : , com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.stderr  : javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.joining(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNastderr  : meTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.stderr  : javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNamstderr  : eTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypstderr  : eNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annotatstderr  : edTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.join(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squarestderr  : up.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javstderr  : apoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.joiningWithPrefixAndSuffix(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.JavaFileTest.defaultPackageTypesAreNotImported(com.squareup.javapoet.JavaFileTest), com.squareup.javapostderr  : et.JavaFileTest.classAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingTypeVariableBound(costderr  : m.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.Javastderr  : FileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.stderr  : JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.stderr  : annotationIsNestedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.stderr  : javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.jstderr  : avapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.Typstderr  : esTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.getArrayTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest),stderr  :  com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.Tystderr  : pesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.Tstderr  : ypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareustderr  : p.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFostderr  : rmatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesTest), com.squareup.jastderr  : vapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeMirror(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoestderr  : t.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToStristderr  : ng(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.jstderr  : avapoet.TypeSpecTest.typeFromTypeElement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSstderr  : pecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), costderr  : m.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.constructorToString(com.squarestderr  : up.javapoet.TypeSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.parameterToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.stderr  : enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javastderr  : poet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecstderr  : Test.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tystderr  : peSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.jastderr  : vapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbststderr  : ractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotationSpecTest.dynstderr  : amicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSstderr  : pecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpstderr  : ecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAstderr  : nnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squarestderr  : up.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoetstderr  : .TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javstderr  : apoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoestderr  : t.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockIstderr  : nRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoestderr  : t.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), cstderr  : om.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationToBuilder(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecstderr  : Test.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.Astderr  : nnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclstderr  : ipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getArrayTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javastderr  : poet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoetstderr  : .TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipsstderr  : eTest.wildcardMirrorSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorExtendsType(com.squareup.javapoet.stderr  : TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirrorRecursive(com.squareup.javapoet.TypesEclipseTest), com.squareup.javstderr  : apoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squstderr  : areup.javapoet.ClassNameTest.classNameFromTypeElementDoesntUseGetKind(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationstderr  : (com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=reflectionName, methodDesc=()Ljava/lang/String;], indexes=[13], mutator=org.pitest.mutationtest.engine.gregor.mutastderr  : tors.NonVoidMethodCallMutator], filename=ClassName.java, block=23, lineNumber=106, description=removed call to com/squareup/javapoet/ClassName::reflectionName, testsInOrder=[com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNamestderr  : Test)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[147], mutator=org.pitest.mutationtstderr  : est.engine.gregor.mutators.NullReturnValsMutator], filename=ClassName.java, block=43, lineNumber=159, description=replaced return value with null for com/squareup/javapoet/ClassName::get, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClassstderr  : (com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.stderr  : nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockstderr  : Test), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.stderr  : TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedstderr  : EnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapostderr  : et.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnstderr  : notationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareupstderr  : .javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBstderr  : eUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapostderr  : et.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.stderr  : javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javastderr  : poet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNamstderr  : eTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParamestderr  : terizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizestderr  : dType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.sustderr  : perclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squstderr  : areup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivalence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.invalidSstderr  : uperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidFstderr  : orClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTesstderr  : t.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Typstderr  : eSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTesstderr  : t.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.stderr  : TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squastderr  : reup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapstderr  : oet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squarstderr  : eup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.imporstderr  : tStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParametestderr  : rizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.Tstderr  : ypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoetstderr  : .TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddistderr  : tion(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), costderr  : m.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoestderr  : sNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.stderr  : squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTeststderr  : ), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTestderr  : st.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoetstderr  : .AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSstderr  : pecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), stderr  : com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembestderr  : rs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrstderr  : ideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Mstderr  : ethodSpecTest.overrideExtendsOthersWorksWithActualTypeParameters(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.sstderr  : quareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpstderr  : ecTest.overrideEverything(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareustderr  : p.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(stderr  : com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squstderr  : areup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTestderr  : st), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObject(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBstderr  : ounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareustderr  : p.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.Tystderr  : peSpecTest), com.squareup.javapoet.TypesEclipseTest.arrayType(com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=simpleNames, methodDesc=()Ljava/util/List;], indexes=[11], mutator=org.pitest.mutationtest.engine.gregor.mutators.stderr  : RemoveConditionalMutator_EQUAL_ELSE], filename=ClassName.java, block=27, lineNumber=112, description=removed conditional - replaced equality check with false, testsInOrder=[com.squareup.javapoet.ClassNameTest.bestGuessForString_defaultPackage(com.squareup.stderr  : javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.JavaFileTest.conflictingAnnotationReferencedClass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.constderr  : flictingChildName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingNameOutOfScope(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingParentName(com.squareup.javapoet.JavaFileTest), com.squarstderr  : eup.javapoet.JavaFileTest.packageClassConflictsWithSuperlass(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassFirst(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.nestedstderr  : ClassAndSuperclassShareName(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.skipJavaLangImportsWithConflictingClassLast(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotationIsNestedClass(com.squareup.javstderr  : apoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.conflictingImportsstderr  : (com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.stderr  : JavaFileTest.defaultPackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.stderr  : squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFistderr  : leTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilinstderr  : eStrings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javastderr  : poet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValues(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsInAnnotations(com.squstderr  : areup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.simpleNamesConflictInThisAndOtherPackage(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.stderr  : TypeSpecTest.annotatedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Tstderr  : ypeSpecTest.annotationsAndJavaLangTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javstderr  : apoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.errorTypes(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpestderr  : cTest), com.squareup.javapoet.TypeSpecTest.tryCatch(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersButNoConstructorCall(cstderr  : om.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStstderr  : atementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.squareup.javapoet.Tystderr  : peSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionTypstderr  : e(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.referencedAndDeclaredSimpleNamesConflict(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareupstderr  : .javapoet.TypeSpecTest.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareustderr  : p.javapoet.TypeSpecTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javastderr  : poet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.retrofitStyleInterface(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotatstderr  : ionWithDefaults(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotationWithImport(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.Annostderr  : tationSpecTest), com.squareup.javapoet.TypesEclipseTest.errorTypes(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareustderr  : p.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.defaultAnnotation(com.squareup.javapoet.AnnotationSpecTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
stderr  : 1:52:38 PM PIT >> WARNING : Mutation MutationDetails [id=MutationIdentifier [location=Location [clazz=com.squareup.javapoet.ClassName, method=get, methodDesc=(Ljava/lang/Class;)Lcom/squareup/javapoet/ClassName;], indexes=[13], mutator=org.pitest.mutationtestderr  : st.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE], filename=ClassName.java, block=32, lineNumber=143, description=removed conditional - replaced equality check with false, testsInOrder=[com.squareup.javapoet.ClassNameTest.classNameFromClass(costderr  : m.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.fromClassRejectionTypes(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTest.reflectionName(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.ClassNameTestderr  : st.peerClass(com.squareup.javapoet.ClassNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationArray(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.nullAnnotationList(com.squareup.javapoet.AnnotatedTstderr  : ypeNameTest), com.squareup.javapoet.CodeBlockTest.danglingNamed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerStaticInGenericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotastderr  : tionsOnAnnotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeClassName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeTypeVariableName(com.squareup.jastderr  : vapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeArrayTypeName(com.squareup.javapoet.TypeNameTest)stderr  : , com.squareup.javapoet.TypeNameTest.equalsAndHashCodeParameterizedTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.namedNewline(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.innerGenericInGenericstderr  : Type(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.withoutAnnotationsOnAnnotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeNameTest.innerClassInGenericType(com.squareup.stderr  : javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.multipleNamedArguments(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.CodeBlockTest.typeFormatCanBeIndexed(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.TypeNameTest.genstderr  : ericType(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.CodeBlockTest.sameIndexCanBeUsedWithDifferentFormats(com.squareup.javapoet.CodeBlockTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedType(com.squareup.javapoet.AnnotatedTypeNamestderr  : Test), com.squareup.javapoet.TypeNameTest.equalsAndHashCodeWildcardTypeName(com.squareup.javapoet.TypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayElementType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.Annotstderr  : atedTypeNameTest.annotatedArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEnclosingAndNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatestderr  : dInnerMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedOuterMultidimensionalArrayType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annostderr  : tatedTwice(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithSuper(com.squarestderr  : up.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedWildcardTypeNameWithExtends(com.squareup.javapoet.stderr  : AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedNestedParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeVarargsParameter(com.squareup.javapoet.Annotatestderr  : dTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArrayTypeInVarargsParameter(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.JavaFstderr  : ileTest.singleImport(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.superclassReferencesSelf(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.doubleFieldInitialization(com.squareup.javapoet.TypeSpecTest), comstderr  : .squareup.javapoet.JavaFileTest.conflictingImports(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nullInSuperinterfaceIterableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedEquivastderr  : lence(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.addAnnotationDisallowsNull(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.invalidSuperClass(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypesTest.box(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.parameterizedType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypeSpecTest.superClassOnlyValidForClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypesTest.wildcardExtendsObject(com.squareup.javapoet.TypesTest), com.squareup.javapoet.JavaFileTest.annotatedTypeParam(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypesTest.unbox(com.squareup.javapoet.TypesTest), com.squareup.javapoestderr  : t.TypesTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotated(com.squareup.javapoet.AnnotatedTypeNameTest), com.squareup.javapoet.TypeSpecTest.nameFromParameter(com.squareup.javapoet.TypeSpecTeststderr  : ), com.squareup.javapoet.TypesTest.arrayType(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getBasicTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.typeVariable(com.squareup.javapoet.TypesTest), com.squareup.stderr  : javapoet.TypesTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.getTypeVariableTypeMirror(com.squareup.javapoet.TypesTest), com.squareup.javapoet.TypesTest.wildcardSuperType(com.squareup.javapoet.TypesTest), stderr  : com.squareup.javapoet.JavaFileTest.importStaticUsingWildcards(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.nameFromMethod(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesTest.wildcardExtendsType(com.squareup.javapstderr  : oet.TypesTest), com.squareup.javapoet.JavaFileTest.importStaticForCrazyFormatsWorks(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromReflectType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.defaultPstderr  : ackage(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.JavaFileTest.importStaticNone(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.typeFromTypeName(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTeststderr  : .importStaticReadmeExample(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.codeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticTwice(com.squareup.javapoet.JavaFileTest), com.squareupstderr  : .javapoet.MethodSpecTest.duplicateExceptionsIgnored(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.fieldToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticOnce(com.squareup.javapoet.JavaFstderr  : ileTest), com.squareup.javapoet.TypeSpecTest.codeBlockAddStatementOfCodeBlockToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotatedTypeNameTest.annotatedArgumentOfParameterizedType(com.squareup.javapoet.AnnotatedTypeNameTest), com.sqstderr  : uareup.javapoet.TypeSpecTest.methodToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.JavaFileTest.importStaticMixed(com.squareup.javapoet.JavaFileTest), com.squareup.javapoet.TypeSpecTest.multipleSuperinterfaceAddition(com.squareup.javapostderr  : et.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotationToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleTypeVariableAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multilineStstderr  : rings(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleAnnotationAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.multipleFieldAddition(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoestderr  : t.AnnotationSpecTest.requiresValidMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.FileWritingTest.filerClassesWithTabIndent(com.squareup.javapoet.FileWritingTest), com.squareup.javapoet.TypeSpecTest.enumImplements(com.squareup.jstderr  : avapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.methodThrows(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nullStringLiteral(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithAnnotatedValuesstderr  : (com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.disallowsNullMemberName(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyOverrideAnnotation(com.squareup.javapoet.MethodSpecTesstderr  : t), com.squareup.javapoet.TypeSpecTest.multilineStatement(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousClassToString(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.javadoc(com.squareup.javapoet.Tstderr  : ypeSpecTest), com.squareup.javapoet.TypeSpecTest.membersOrdering(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.emptyArray(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.annotationsAndJavaLangTystderr  : pes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsNestedClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedField(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.interestingTypes(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.equalsAndHashCode(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.elseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.jastderr  : vapoet.TypeSpecTest.enumsMayDefineAbstractMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nestedClasses(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.dynamicArrayOfEnumConstants(com.squareup.jstderr  : avapoet.AnnotationSpecTest), com.squareup.javapoet.TypeSpecTest.doWhile(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.classImplementsExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithMembersBustderr  : tNoConstructorCall(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.interfaceExtends(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.lineWrapping(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.Typestderr  : SpecTest.multilineStatementWithAnonymousClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.innerAnnotationInAnnotationDeclaration(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariableWithBounds(com.stderr  : squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideGenerics(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.defaultModifiersForInterfaceMembers(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.stderr  : TypeSpecTest.inlineIndent(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.intersectionType(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideDoesNotCopyDefaultModifier(com.squareup.javapoet.MethodSpecstderr  : Test), com.squareup.javapoet.TypeSpecTest.basic(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.nativeMethods(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideExtendsOthersWorksWithActualTypeParametestderr  : rs(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.TypeSpecTest.annotatedParameters(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.enumWithSubclassing(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecstderr  : Test.indexedElseIf(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.staticCodeBlock(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.codeBlocks(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpestderr  : cTest.initializerBlockInRightPlace(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.anonymousInnerClass(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.MethodSpecTest.overrideEverything(com.squareup.javapoet.MethodSpecTeststderr  : ), com.squareup.javapoet.TypeSpecTest.initializersToBuilder(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypeSpecTest.typeVariables(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotationWithDefaults(costderr  : m.squareup.javapoet.AnnotationSpecTest), com.squareup.javapoet.MethodSpecTest.equalsAndHashCode(com.squareup.javapoet.MethodSpecTest), com.squareup.javapoet.AnnotationSpecTest.reflectAnnotation(com.squareup.javapoet.AnnotationSpecTest), com.squareup.javapostderr  : et.TypesEclipseTest.getParameterizedTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getBasicTypeMirror(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.box(com.squareup.javapoet.Typestderr  : sEclipseTest), com.squareup.javapoet.TypesEclipseTest.unbox(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.parameterizedType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardExtendsObjstderr  : ect(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.typeVariable(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardMirrorNoBounds(com.squareup.javapoet.TypesEclipseTest), com.squareup.jastderr  : vapoet.TypesEclipseTest.wildcardExtendsType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.wildcardSuperType(com.squareup.javapoet.TypesEclipseTest), com.squareup.javapoet.TypesEclipseTest.getTypeVariableTypeMirror(com.squastderr  : reup.javapoet.TypesEclipseTest), com.squareup.javapoet.FileReadingTest.compileJavaFile(com.squareup.javapoet.FileReadingTest), com.squareup.javapoet.TypeSpecTest.varargs(com.squareup.javapoet.TypeSpecTest), com.squareup.javapoet.TypesEclipseTest.arrayType(stderr  : com.squareup.javapoet.TypesEclipseTest)], isInFinallyBlock=false, poison=NORMAL] was not viable 
\|/-\|/-\|/-\|/-\|/-\|/-\================================================================================
- Timings
================================================================================
> scan classpath : < 1 second
> coverage and dependency analysis : 16 seconds
> build mutation tests : 4 seconds
> run mutation analysis : 34 minutes and 55 seconds
--------------------------------------------------------------------------------
> Total  : 35 minutes and 16 seconds
--------------------------------------------------------------------------------
================================================================================
- Statistics
================================================================================
>> Generated 5551 mutations Killed 4460 (80%)
>> Ran 48667 tests (8.77 tests per mutation)
================================================================================
- Mutators
================================================================================
> org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator
>> Generated 146 Killed 103 (71%)
> KILLED 102 SURVIVED 43 TIMED_OUT 1 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.SwitchMutator
>> Generated 6 Killed 6 (100%)
> KILLED 6 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE
>> Generated 385 Killed 313 (81%)
> KILLED 305 SURVIVED 63 TIMED_OUT 1 NON_VIABLE 7 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 9 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF
>> Generated 32 Killed 28 (88%)
> KILLED 26 SURVIVED 4 TIMED_OUT 2 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.MathMutator
>> Generated 45 Killed 41 (91%)
> KILLED 39 SURVIVED 4 TIMED_OUT 1 NON_VIABLE 1 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator
>> Generated 10 Killed 3 (30%)
> KILLED 3 SURVIVED 5 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 2 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_7
>> Generated 5 Killed 5 (100%)
> KILLED 5 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_6
>> Generated 5 Killed 4 (80%)
> KILLED 4 SURVIVED 1 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator
>> Generated 32 Killed 29 (91%)
> KILLED 29 SURVIVED 3 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator
>> Generated 17 Killed 17 (100%)
> KILLED 15 SURVIVED 0 TIMED_OUT 2 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveIncrementsMutator
>> Generated 13 Killed 13 (100%)
> KILLED 8 SURVIVED 0 TIMED_OUT 5 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_9
>> Generated 2 Killed 2 (100%)
> KILLED 2 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_8
>> Generated 3 Killed 3 (100%)
> KILLED 3 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator
>> Generated 318 Killed 217 (68%)
> KILLED 214 SURVIVED 59 TIMED_OUT 0 NON_VIABLE 3 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 42 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_3
>> Generated 5 Killed 4 (80%)
> KILLED 4 SURVIVED 1 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_2
>> Generated 6 Killed 6 (100%)
> KILLED 6 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator
>> Generated 672 Killed 473 (70%)
> KILLED 466 SURVIVED 195 TIMED_OUT 1 NON_VIABLE 6 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 4 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_5
>> Generated 5 Killed 3 (60%)
> KILLED 3 SURVIVED 2 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator
>> Generated 406 Killed 358 (88%)
> KILLED 352 SURVIVED 20 TIMED_OUT 2 NON_VIABLE 4 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 28 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_4
>> Generated 5 Killed 4 (80%)
> KILLED 4 SURVIVED 1 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator
>> Generated 426 Killed 292 (69%)
> KILLED 290 SURVIVED 84 TIMED_OUT 0 NON_VIABLE 2 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 50 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_1
>> Generated 6 Killed 5 (83%)
> KILLED 5 SURVIVED 1 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator
>> Generated 234 Killed 189 (81%)
> KILLED 185 SURVIVED 6 TIMED_OUT 0 NON_VIABLE 4 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 39 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_0
>> Generated 6 Killed 6 (100%)
> KILLED 6 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_10
>> Generated 2 Killed 2 (100%)
> KILLED 2 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF
>> Generated 393 Killed 312 (79%)
> KILLED 305 SURVIVED 71 TIMED_OUT 2 NON_VIABLE 5 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 10 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE
>> Generated 32 Killed 32 (100%)
> KILLED 32 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator
>> Generated 191 Killed 162 (85%)
> KILLED 162 SURVIVED 29 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator
>> Generated 425 Killed 409 (96%)
> KILLED 401 SURVIVED 6 TIMED_OUT 2 NON_VIABLE 6 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 10 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator
>> Generated 40 Killed 14 (35%)
> KILLED 14 SURVIVED 21 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 5 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator
>> Generated 48 Killed 48 (100%)
> KILLED 48 SURVIVED 0 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 0 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator
>> Generated 140 Killed 76 (54%)
> KILLED 75 SURVIVED 56 TIMED_OUT 0 NON_VIABLE 1 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 8 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator
>> Generated 30 Killed 20 (67%)
> KILLED 20 SURVIVED 6 TIMED_OUT 0 NON_VIABLE 0 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 4 
--------------------------------------------------------------------------------
> org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator
>> Generated 1460 Killed 1261 (86%)
> KILLED 1234 SURVIVED 111 TIMED_OUT 5 NON_VIABLE 22 
> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 
> NO_COVERAGE 88 
--------------------------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 35:35 min
[INFO] Finished at: 2018-08-09T14:03:31+02:00
[INFO] Final Memory: 39M/2138M
[INFO] ------------------------------------------------------------------------
