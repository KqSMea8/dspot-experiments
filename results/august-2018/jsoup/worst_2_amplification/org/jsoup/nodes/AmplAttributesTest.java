package org.jsoup.nodes;


import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.junit.Assert;
import org.junit.Test;


public class AmplAttributesTest {
    @Test(timeout = 10000)
    public void html_mg167() throws Exception {
        String __DSPOT_key_12 = "u)p]QM-k,I]-r8//GGUV";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_mg167__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg167__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg167__4)).hashCode())));
        Attributes o_html_mg167__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_mg167__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_mg167__5)).hashCode())));
        Attributes o_html_mg167__6 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg167__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg167__6)).hashCode())));
        int o_html_mg167__7 = a.size();
        Assert.assertEquals(3, ((int) (o_html_mg167__7)));
        boolean o_html_mg167__8 = a.hasKey("Tot");
        Assert.assertTrue(o_html_mg167__8);
        boolean o_html_mg167__9 = a.hasKey("Hello");
        Assert.assertTrue(o_html_mg167__9);
        boolean o_html_mg167__10 = a.hasKey("data-name");
        Assert.assertTrue(o_html_mg167__10);
        boolean o_html_mg167__11 = a.hasKey("tot");
        Assert.assertFalse(o_html_mg167__11);
        boolean o_html_mg167__12 = a.hasKeyIgnoreCase("tot");
        Assert.assertTrue(o_html_mg167__12);
        String o_html_mg167__13 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_mg167__13);
        Map<String, String> dataset = a.dataset();
        int o_html_mg167__16 = dataset.size();
        Assert.assertEquals(1, ((int) (o_html_mg167__16)));
        String o_html_mg167__17 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_mg167__17);
        String o_html_mg167__18 = a.get("tot");
        Assert.assertEquals("", o_html_mg167__18);
        String o_html_mg167__19 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_mg167__19);
        String o_html_mg167__20 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_mg167__20);
        String o_html_mg167__21 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg167__21);
        String o_html_mg167__22 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg167__22);
        a.toString();
        a.removeIgnoreCase(__DSPOT_key_12);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg167__4)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg167__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg167__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg167__5)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg167__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg167__6)).hashCode())));
        Assert.assertEquals(3, ((int) (o_html_mg167__7)));
        Assert.assertTrue(o_html_mg167__8);
        Assert.assertTrue(o_html_mg167__9);
        Assert.assertTrue(o_html_mg167__10);
        Assert.assertFalse(o_html_mg167__11);
        Assert.assertTrue(o_html_mg167__12);
        Assert.assertEquals("There", o_html_mg167__13);
        Assert.assertEquals(1, ((int) (o_html_mg167__16)));
        Assert.assertEquals("Jsoup", o_html_mg167__17);
        Assert.assertEquals("", o_html_mg167__18);
        Assert.assertEquals("a&p", o_html_mg167__19);
        Assert.assertEquals("a&p", o_html_mg167__20);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg167__21);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg167__22);
    }

    @Test(timeout = 10000)
    public void html_rv184() throws Exception {
        String __DSPOT_value_22 = " eShD9P/&h4]]s%=])JW";
        String __DSPOT_key_21 = "cRQHCH3r6EO;&FZRy/=u";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_html_rv184__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_rv184__8)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_rv184__8)).hashCode())));
        Attributes o_html_rv184__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv184__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv184__9)).hashCode())));
        int o_html_rv184__10 = a.size();
        Assert.assertEquals(3, ((int) (o_html_rv184__10)));
        boolean o_html_rv184__11 = a.hasKey("Tot");
        Assert.assertTrue(o_html_rv184__11);
        boolean o_html_rv184__12 = a.hasKey("Hello");
        Assert.assertTrue(o_html_rv184__12);
        boolean o_html_rv184__13 = a.hasKey("data-name");
        Assert.assertTrue(o_html_rv184__13);
        boolean o_html_rv184__14 = a.hasKey("tot");
        Assert.assertFalse(o_html_rv184__14);
        boolean o_html_rv184__15 = a.hasKeyIgnoreCase("tot");
        Assert.assertTrue(o_html_rv184__15);
        String o_html_rv184__16 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_rv184__16);
        Map<String, String> dataset = a.dataset();
        int o_html_rv184__19 = dataset.size();
        Assert.assertEquals(1, ((int) (o_html_rv184__19)));
        String o_html_rv184__20 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_rv184__20);
        String o_html_rv184__21 = a.get("tot");
        Assert.assertEquals("", o_html_rv184__21);
        String o_html_rv184__22 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_rv184__22);
        String o_html_rv184__23 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_rv184__23);
        String o_html_rv184__24 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv184__24);
        String o_html_rv184__25 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv184__25);
        a.toString();
        Attributes o_html_rv184__27 = __DSPOT_invoc_3.put(__DSPOT_key_21, __DSPOT_value_22);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" cRQHCH3r6EO;&FZRy/=u=\" eShD9P/&amp;h4]]s%=])JW\"", ((Attributes) (o_html_rv184__27)).toString());
        Assert.assertEquals(-113369466, ((int) (((Attributes) (o_html_rv184__27)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" cRQHCH3r6EO;&FZRy/=u=\" eShD9P/&amp;h4]]s%=])JW\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-113369466, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" cRQHCH3r6EO;&FZRy/=u=\" eShD9P/&amp;h4]]s%=])JW\"", ((Attributes) (o_html_rv184__8)).toString());
        Assert.assertEquals(-113369466, ((int) (((Attributes) (o_html_rv184__8)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" cRQHCH3r6EO;&FZRy/=u=\" eShD9P/&amp;h4]]s%=])JW\"", ((Attributes) (o_html_rv184__9)).toString());
        Assert.assertEquals(-113369466, ((int) (((Attributes) (o_html_rv184__9)).hashCode())));
        Assert.assertEquals(3, ((int) (o_html_rv184__10)));
        Assert.assertTrue(o_html_rv184__11);
        Assert.assertTrue(o_html_rv184__12);
        Assert.assertTrue(o_html_rv184__13);
        Assert.assertFalse(o_html_rv184__14);
        Assert.assertTrue(o_html_rv184__15);
        Assert.assertEquals("There", o_html_rv184__16);
        Assert.assertEquals(1, ((int) (o_html_rv184__19)));
        Assert.assertEquals("Jsoup", o_html_rv184__20);
        Assert.assertEquals("", o_html_rv184__21);
        Assert.assertEquals("a&p", o_html_rv184__22);
        Assert.assertEquals("a&p", o_html_rv184__23);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv184__24);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv184__25);
    }

    @Test(timeout = 10000)
    public void html_mg152() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_mg152__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg152__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg152__3)).hashCode())));
        Attributes o_html_mg152__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_mg152__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_mg152__4)).hashCode())));
        Attributes o_html_mg152__5 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg152__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg152__5)).hashCode())));
        int o_html_mg152__6 = a.size();
        Assert.assertEquals(3, ((int) (o_html_mg152__6)));
        boolean o_html_mg152__7 = a.hasKey("Tot");
        Assert.assertTrue(o_html_mg152__7);
        boolean o_html_mg152__8 = a.hasKey("Hello");
        Assert.assertTrue(o_html_mg152__8);
        boolean o_html_mg152__9 = a.hasKey("data-name");
        Assert.assertTrue(o_html_mg152__9);
        boolean o_html_mg152__10 = a.hasKey("tot");
        Assert.assertFalse(o_html_mg152__10);
        boolean o_html_mg152__11 = a.hasKeyIgnoreCase("tot");
        Assert.assertTrue(o_html_mg152__11);
        String o_html_mg152__12 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_mg152__12);
        Map<String, String> dataset = a.dataset();
        int o_html_mg152__15 = dataset.size();
        Assert.assertEquals(1, ((int) (o_html_mg152__15)));
        String o_html_mg152__16 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_mg152__16);
        String o_html_mg152__17 = a.get("tot");
        Assert.assertEquals("", o_html_mg152__17);
        String o_html_mg152__18 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_mg152__18);
        String o_html_mg152__19 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_mg152__19);
        String o_html_mg152__20 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg152__20);
        String o_html_mg152__21 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg152__21);
        a.toString();
        List<Attribute> o_html_mg152__23 = a.asList();
        Assert.assertFalse(o_html_mg152__23.isEmpty());
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg152__3)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg152__3)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg152__4)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg152__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg152__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg152__5)).hashCode())));
        Assert.assertEquals(3, ((int) (o_html_mg152__6)));
        Assert.assertTrue(o_html_mg152__7);
        Assert.assertTrue(o_html_mg152__8);
        Assert.assertTrue(o_html_mg152__9);
        Assert.assertFalse(o_html_mg152__10);
        Assert.assertTrue(o_html_mg152__11);
        Assert.assertEquals("There", o_html_mg152__12);
        Assert.assertEquals(1, ((int) (o_html_mg152__15)));
        Assert.assertEquals("Jsoup", o_html_mg152__16);
        Assert.assertEquals("", o_html_mg152__17);
        Assert.assertEquals("a&p", o_html_mg152__18);
        Assert.assertEquals("a&p", o_html_mg152__19);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg152__20);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg152__21);
    }

    @Test(timeout = 10000)
    public void htmllitString22_failAssert12() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put("Tot", "a&p");
            a.put("", "There");
            a.put("data-name", "Jsoup");
            a.size();
            a.hasKey("Tot");
            a.hasKey("Hello");
            a.hasKey("data-name");
            a.hasKey("tot");
            a.hasKeyIgnoreCase("tot");
            a.getIgnoreCase("hEllo");
            Map<String, String> dataset = a.dataset();
            dataset.size();
            dataset.get("name");
            a.get("tot");
            a.get("Tot");
            a.getIgnoreCase("tot");
            a.html();
            a.html();
            a.toString();
            org.junit.Assert.fail("htmllitString22 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("String must not be empty", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void html_mg163() throws Exception {
        boolean __DSPOT_value_7 = true;
        String __DSPOT_key_6 = "y4JV)d4}^w[&oDAIOw? ";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_mg163__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg163__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg163__5)).hashCode())));
        Attributes o_html_mg163__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_mg163__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_mg163__6)).hashCode())));
        Attributes o_html_mg163__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg163__7)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg163__7)).hashCode())));
        int o_html_mg163__8 = a.size();
        Assert.assertEquals(3, ((int) (o_html_mg163__8)));
        boolean o_html_mg163__9 = a.hasKey("Tot");
        Assert.assertTrue(o_html_mg163__9);
        boolean o_html_mg163__10 = a.hasKey("Hello");
        Assert.assertTrue(o_html_mg163__10);
        boolean o_html_mg163__11 = a.hasKey("data-name");
        Assert.assertTrue(o_html_mg163__11);
        boolean o_html_mg163__12 = a.hasKey("tot");
        Assert.assertFalse(o_html_mg163__12);
        boolean o_html_mg163__13 = a.hasKeyIgnoreCase("tot");
        Assert.assertTrue(o_html_mg163__13);
        String o_html_mg163__14 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_mg163__14);
        Map<String, String> dataset = a.dataset();
        int o_html_mg163__17 = dataset.size();
        Assert.assertEquals(1, ((int) (o_html_mg163__17)));
        String o_html_mg163__18 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_mg163__18);
        String o_html_mg163__19 = a.get("tot");
        Assert.assertEquals("", o_html_mg163__19);
        String o_html_mg163__20 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_mg163__20);
        String o_html_mg163__21 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_mg163__21);
        String o_html_mg163__22 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg163__22);
        String o_html_mg163__23 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg163__23);
        a.toString();
        Attributes o_html_mg163__25 = a.put(__DSPOT_key_6, __DSPOT_value_7);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" y4JV)d4}^w[&oDAIOw? ", ((Attributes) (o_html_mg163__25)).toString());
        Assert.assertEquals(-1077811844, ((int) (((Attributes) (o_html_mg163__25)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" y4JV)d4}^w[&oDAIOw? ", ((Attributes) (a)).toString());
        Assert.assertEquals(-1077811844, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" y4JV)d4}^w[&oDAIOw? ", ((Attributes) (o_html_mg163__5)).toString());
        Assert.assertEquals(-1077811844, ((int) (((Attributes) (o_html_mg163__5)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" y4JV)d4}^w[&oDAIOw? ", ((Attributes) (o_html_mg163__6)).toString());
        Assert.assertEquals(-1077811844, ((int) (((Attributes) (o_html_mg163__6)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" y4JV)d4}^w[&oDAIOw? ", ((Attributes) (o_html_mg163__7)).toString());
        Assert.assertEquals(-1077811844, ((int) (((Attributes) (o_html_mg163__7)).hashCode())));
        Assert.assertEquals(3, ((int) (o_html_mg163__8)));
        Assert.assertTrue(o_html_mg163__9);
        Assert.assertTrue(o_html_mg163__10);
        Assert.assertTrue(o_html_mg163__11);
        Assert.assertFalse(o_html_mg163__12);
        Assert.assertTrue(o_html_mg163__13);
        Assert.assertEquals("There", o_html_mg163__14);
        Assert.assertEquals(1, ((int) (o_html_mg163__17)));
        Assert.assertEquals("Jsoup", o_html_mg163__18);
        Assert.assertEquals("", o_html_mg163__19);
        Assert.assertEquals("a&p", o_html_mg163__20);
        Assert.assertEquals("a&p", o_html_mg163__21);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg163__22);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg163__23);
    }

    @Test(timeout = 10000)
    public void html_rv174() throws Exception {
        Attributes __DSPOT_o_14 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_html_rv174__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_rv174__8)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_rv174__8)).hashCode())));
        Attributes o_html_rv174__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv174__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv174__9)).hashCode())));
        int o_html_rv174__10 = a.size();
        Assert.assertEquals(3, ((int) (o_html_rv174__10)));
        boolean o_html_rv174__11 = a.hasKey("Tot");
        Assert.assertTrue(o_html_rv174__11);
        boolean o_html_rv174__12 = a.hasKey("Hello");
        Assert.assertTrue(o_html_rv174__12);
        boolean o_html_rv174__13 = a.hasKey("data-name");
        Assert.assertTrue(o_html_rv174__13);
        boolean o_html_rv174__14 = a.hasKey("tot");
        Assert.assertFalse(o_html_rv174__14);
        boolean o_html_rv174__15 = a.hasKeyIgnoreCase("tot");
        Assert.assertTrue(o_html_rv174__15);
        String o_html_rv174__16 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_rv174__16);
        Map<String, String> dataset = a.dataset();
        int o_html_rv174__19 = dataset.size();
        Assert.assertEquals(1, ((int) (o_html_rv174__19)));
        String o_html_rv174__20 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_rv174__20);
        String o_html_rv174__21 = a.get("tot");
        Assert.assertEquals("", o_html_rv174__21);
        String o_html_rv174__22 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_rv174__22);
        String o_html_rv174__23 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_rv174__23);
        String o_html_rv174__24 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv174__24);
        String o_html_rv174__25 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv174__25);
        a.toString();
        boolean o_html_rv174__27 = __DSPOT_invoc_3.equals(__DSPOT_o_14);
        Assert.assertFalse(o_html_rv174__27);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv174__8)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv174__8)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv174__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv174__9)).hashCode())));
        Assert.assertEquals(3, ((int) (o_html_rv174__10)));
        Assert.assertTrue(o_html_rv174__11);
        Assert.assertTrue(o_html_rv174__12);
        Assert.assertTrue(o_html_rv174__13);
        Assert.assertFalse(o_html_rv174__14);
        Assert.assertTrue(o_html_rv174__15);
        Assert.assertEquals("There", o_html_rv174__16);
        Assert.assertEquals(1, ((int) (o_html_rv174__19)));
        Assert.assertEquals("Jsoup", o_html_rv174__20);
        Assert.assertEquals("", o_html_rv174__21);
        Assert.assertEquals("a&p", o_html_rv174__22);
        Assert.assertEquals("a&p", o_html_rv174__23);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv174__24);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv174__25);
    }

    @Test(timeout = 10000)
    public void html_mg162() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_mg162__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg162__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg162__3)).hashCode())));
        Attributes o_html_mg162__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_mg162__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_mg162__4)).hashCode())));
        Attributes o_html_mg162__5 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg162__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg162__5)).hashCode())));
        int o_html_mg162__6 = a.size();
        Assert.assertEquals(3, ((int) (o_html_mg162__6)));
        boolean o_html_mg162__7 = a.hasKey("Tot");
        Assert.assertTrue(o_html_mg162__7);
        boolean o_html_mg162__8 = a.hasKey("Hello");
        Assert.assertTrue(o_html_mg162__8);
        boolean o_html_mg162__9 = a.hasKey("data-name");
        Assert.assertTrue(o_html_mg162__9);
        boolean o_html_mg162__10 = a.hasKey("tot");
        Assert.assertFalse(o_html_mg162__10);
        boolean o_html_mg162__11 = a.hasKeyIgnoreCase("tot");
        Assert.assertTrue(o_html_mg162__11);
        String o_html_mg162__12 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_mg162__12);
        Map<String, String> dataset = a.dataset();
        int o_html_mg162__15 = dataset.size();
        Assert.assertEquals(1, ((int) (o_html_mg162__15)));
        String o_html_mg162__16 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_mg162__16);
        String o_html_mg162__17 = a.get("tot");
        Assert.assertEquals("", o_html_mg162__17);
        String o_html_mg162__18 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_mg162__18);
        String o_html_mg162__19 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_mg162__19);
        String o_html_mg162__20 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg162__20);
        String o_html_mg162__21 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg162__21);
        a.toString();
        a.normalize();
        Assert.assertEquals(" tot=\"a&amp;p\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(541005968, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"a&amp;p\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg162__3)).toString());
        Assert.assertEquals(541005968, ((int) (((Attributes) (o_html_mg162__3)).hashCode())));
        Assert.assertEquals(" tot=\"a&amp;p\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg162__4)).toString());
        Assert.assertEquals(541005968, ((int) (((Attributes) (o_html_mg162__4)).hashCode())));
        Assert.assertEquals(" tot=\"a&amp;p\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg162__5)).toString());
        Assert.assertEquals(541005968, ((int) (((Attributes) (o_html_mg162__5)).hashCode())));
        Assert.assertEquals(3, ((int) (o_html_mg162__6)));
        Assert.assertTrue(o_html_mg162__7);
        Assert.assertTrue(o_html_mg162__8);
        Assert.assertTrue(o_html_mg162__9);
        Assert.assertFalse(o_html_mg162__10);
        Assert.assertTrue(o_html_mg162__11);
        Assert.assertEquals("There", o_html_mg162__12);
        Assert.assertEquals(1, ((int) (o_html_mg162__15)));
        Assert.assertEquals("Jsoup", o_html_mg162__16);
        Assert.assertEquals("", o_html_mg162__17);
        Assert.assertEquals("a&p", o_html_mg162__18);
        Assert.assertEquals("a&p", o_html_mg162__19);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg162__20);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg162__21);
    }

    @Test(timeout = 10000)
    public void html_rv183() throws Exception {
        boolean __DSPOT_value_20 = false;
        String __DSPOT_key_19 = "tV)2[gaNZ#S&Gu4*{9Gi";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_html_rv183__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_rv183__8)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_rv183__8)).hashCode())));
        Attributes o_html_rv183__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv183__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv183__9)).hashCode())));
        int o_html_rv183__10 = a.size();
        Assert.assertEquals(3, ((int) (o_html_rv183__10)));
        boolean o_html_rv183__11 = a.hasKey("Tot");
        Assert.assertTrue(o_html_rv183__11);
        boolean o_html_rv183__12 = a.hasKey("Hello");
        Assert.assertTrue(o_html_rv183__12);
        boolean o_html_rv183__13 = a.hasKey("data-name");
        Assert.assertTrue(o_html_rv183__13);
        boolean o_html_rv183__14 = a.hasKey("tot");
        Assert.assertFalse(o_html_rv183__14);
        boolean o_html_rv183__15 = a.hasKeyIgnoreCase("tot");
        Assert.assertTrue(o_html_rv183__15);
        String o_html_rv183__16 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_rv183__16);
        Map<String, String> dataset = a.dataset();
        int o_html_rv183__19 = dataset.size();
        Assert.assertEquals(1, ((int) (o_html_rv183__19)));
        String o_html_rv183__20 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_rv183__20);
        String o_html_rv183__21 = a.get("tot");
        Assert.assertEquals("", o_html_rv183__21);
        String o_html_rv183__22 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_rv183__22);
        String o_html_rv183__23 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_rv183__23);
        String o_html_rv183__24 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv183__24);
        String o_html_rv183__25 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv183__25);
        a.toString();
        Attributes o_html_rv183__27 = __DSPOT_invoc_3.put(__DSPOT_key_19, __DSPOT_value_20);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv183__27)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv183__27)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv183__8)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv183__8)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv183__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv183__9)).hashCode())));
        Assert.assertEquals(3, ((int) (o_html_rv183__10)));
        Assert.assertTrue(o_html_rv183__11);
        Assert.assertTrue(o_html_rv183__12);
        Assert.assertTrue(o_html_rv183__13);
        Assert.assertFalse(o_html_rv183__14);
        Assert.assertTrue(o_html_rv183__15);
        Assert.assertEquals("There", o_html_rv183__16);
        Assert.assertEquals(1, ((int) (o_html_rv183__19)));
        Assert.assertEquals("Jsoup", o_html_rv183__20);
        Assert.assertEquals("", o_html_rv183__21);
        Assert.assertEquals("a&p", o_html_rv183__22);
        Assert.assertEquals("a&p", o_html_rv183__23);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv183__24);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv183__25);
    }

    @Test(timeout = 10000)
    public void htmllitString128() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_htmllitString128__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_htmllitString128__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_htmllitString128__3)).hashCode())));
        Attributes o_htmllitString128__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_htmllitString128__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_htmllitString128__4)).hashCode())));
        Attributes o_htmllitString128__5 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_htmllitString128__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_htmllitString128__5)).hashCode())));
        int o_htmllitString128__6 = a.size();
        Assert.assertEquals(3, ((int) (o_htmllitString128__6)));
        boolean o_htmllitString128__7 = a.hasKey("Tot");
        Assert.assertTrue(o_htmllitString128__7);
        boolean o_htmllitString128__8 = a.hasKey("Hello");
        Assert.assertTrue(o_htmllitString128__8);
        boolean o_htmllitString128__9 = a.hasKey("data-name");
        Assert.assertTrue(o_htmllitString128__9);
        boolean o_htmllitString128__10 = a.hasKey("tot");
        Assert.assertFalse(o_htmllitString128__10);
        boolean o_htmllitString128__11 = a.hasKeyIgnoreCase("tot");
        Assert.assertTrue(o_htmllitString128__11);
        String o_htmllitString128__12 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_htmllitString128__12);
        Map<String, String> dataset = a.dataset();
        int o_htmllitString128__15 = dataset.size();
        Assert.assertEquals(1, ((int) (o_htmllitString128__15)));
        String o_htmllitString128__16 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_htmllitString128__16);
        String o_htmllitString128__17 = a.get("tot");
        Assert.assertEquals("", o_htmllitString128__17);
        String o_htmllitString128__18 = a.get("Tot");
        Assert.assertEquals("a&p", o_htmllitString128__18);
        String o_htmllitString128__19 = a.getIgnoreCase(":");
        Assert.assertEquals("", o_htmllitString128__19);
        String o_htmllitString128__20 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_htmllitString128__20);
        String o_htmllitString128__21 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_htmllitString128__21);
        a.toString();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_htmllitString128__3)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_htmllitString128__3)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_htmllitString128__4)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_htmllitString128__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_htmllitString128__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_htmllitString128__5)).hashCode())));
        Assert.assertEquals(3, ((int) (o_htmllitString128__6)));
        Assert.assertTrue(o_htmllitString128__7);
        Assert.assertTrue(o_htmllitString128__8);
        Assert.assertTrue(o_htmllitString128__9);
        Assert.assertFalse(o_htmllitString128__10);
        Assert.assertTrue(o_htmllitString128__11);
        Assert.assertEquals("There", o_htmllitString128__12);
        Assert.assertEquals(1, ((int) (o_htmllitString128__15)));
        Assert.assertEquals("Jsoup", o_htmllitString128__16);
        Assert.assertEquals("", o_htmllitString128__17);
        Assert.assertEquals("a&p", o_htmllitString128__18);
        Assert.assertEquals("", o_htmllitString128__19);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_htmllitString128__20);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_htmllitString128__21);
    }

    @Test(timeout = 10000)
    public void htmlnull233() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_htmlnull233__3 = a.put("Tot", null);
        Assert.assertEquals(" Tot", ((Attributes) (o_htmlnull233__3)).toString());
        Assert.assertEquals(555415706, ((int) (((Attributes) (o_htmlnull233__3)).hashCode())));
        Attributes o_htmlnull233__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot Hello=\"There\"", ((Attributes) (o_htmlnull233__4)).toString());
        Assert.assertEquals(142394285, ((int) (((Attributes) (o_htmlnull233__4)).hashCode())));
        Attributes o_htmlnull233__5 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_htmlnull233__5)).toString());
        Assert.assertEquals(-545154661, ((int) (((Attributes) (o_htmlnull233__5)).hashCode())));
        int o_htmlnull233__6 = a.size();
        Assert.assertEquals(3, ((int) (o_htmlnull233__6)));
        boolean o_htmlnull233__7 = a.hasKey("Tot");
        Assert.assertTrue(o_htmlnull233__7);
        boolean o_htmlnull233__8 = a.hasKey("Hello");
        Assert.assertTrue(o_htmlnull233__8);
        boolean o_htmlnull233__9 = a.hasKey("data-name");
        Assert.assertTrue(o_htmlnull233__9);
        boolean o_htmlnull233__10 = a.hasKey("tot");
        Assert.assertFalse(o_htmlnull233__10);
        boolean o_htmlnull233__11 = a.hasKeyIgnoreCase("tot");
        Assert.assertTrue(o_htmlnull233__11);
        String o_htmlnull233__12 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_htmlnull233__12);
        Map<String, String> dataset = a.dataset();
        int o_htmlnull233__15 = dataset.size();
        Assert.assertEquals(1, ((int) (o_htmlnull233__15)));
        String o_htmlnull233__16 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_htmlnull233__16);
        String o_htmlnull233__17 = a.get("tot");
        Assert.assertEquals("", o_htmlnull233__17);
        String o_htmlnull233__18 = a.get("Tot");
        Assert.assertEquals("", o_htmlnull233__18);
        String o_htmlnull233__19 = a.getIgnoreCase("tot");
        Assert.assertEquals("", o_htmlnull233__19);
        String o_htmlnull233__20 = a.html();
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", o_htmlnull233__20);
        String o_htmlnull233__21 = a.html();
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", o_htmlnull233__21);
        a.toString();
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-545154661, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_htmlnull233__3)).toString());
        Assert.assertEquals(-545154661, ((int) (((Attributes) (o_htmlnull233__3)).hashCode())));
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_htmlnull233__4)).toString());
        Assert.assertEquals(-545154661, ((int) (((Attributes) (o_htmlnull233__4)).hashCode())));
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_htmlnull233__5)).toString());
        Assert.assertEquals(-545154661, ((int) (((Attributes) (o_htmlnull233__5)).hashCode())));
        Assert.assertEquals(3, ((int) (o_htmlnull233__6)));
        Assert.assertTrue(o_htmlnull233__7);
        Assert.assertTrue(o_htmlnull233__8);
        Assert.assertTrue(o_htmlnull233__9);
        Assert.assertFalse(o_htmlnull233__10);
        Assert.assertTrue(o_htmlnull233__11);
        Assert.assertEquals("There", o_htmlnull233__12);
        Assert.assertEquals(1, ((int) (o_htmlnull233__15)));
        Assert.assertEquals("Jsoup", o_htmlnull233__16);
        Assert.assertEquals("", o_htmlnull233__17);
        Assert.assertEquals("", o_htmlnull233__18);
        Assert.assertEquals("", o_htmlnull233__19);
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", o_htmlnull233__20);
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", o_htmlnull233__21);
    }

    @Test(timeout = 10000)
    public void htmllitString3() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_htmllitString3__3 = a.put("T,ot", "a&p");
        Assert.assertEquals(" T,ot=\"a&amp;p\"", ((Attributes) (o_htmllitString3__3)).toString());
        Assert.assertEquals(-1697322349, ((int) (((Attributes) (o_htmllitString3__3)).hashCode())));
        Attributes o_htmllitString3__4 = a.put("Hello", "There");
        Assert.assertEquals(" T,ot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_htmllitString3__4)).toString());
        Assert.assertEquals(-2110343770, ((int) (((Attributes) (o_htmllitString3__4)).hashCode())));
        Attributes o_htmllitString3__5 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" T,ot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_htmllitString3__5)).toString());
        Assert.assertEquals(1497074580, ((int) (((Attributes) (o_htmllitString3__5)).hashCode())));
        int o_htmllitString3__6 = a.size();
        Assert.assertEquals(3, ((int) (o_htmllitString3__6)));
        boolean o_htmllitString3__7 = a.hasKey("Tot");
        Assert.assertFalse(o_htmllitString3__7);
        boolean o_htmllitString3__8 = a.hasKey("Hello");
        Assert.assertTrue(o_htmllitString3__8);
        boolean o_htmllitString3__9 = a.hasKey("data-name");
        Assert.assertTrue(o_htmllitString3__9);
        boolean o_htmllitString3__10 = a.hasKey("tot");
        Assert.assertFalse(o_htmllitString3__10);
        boolean o_htmllitString3__11 = a.hasKeyIgnoreCase("tot");
        Assert.assertFalse(o_htmllitString3__11);
        String o_htmllitString3__12 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_htmllitString3__12);
        Map<String, String> dataset = a.dataset();
        int o_htmllitString3__15 = dataset.size();
        Assert.assertEquals(1, ((int) (o_htmllitString3__15)));
        String o_htmllitString3__16 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_htmllitString3__16);
        String o_htmllitString3__17 = a.get("tot");
        Assert.assertEquals("", o_htmllitString3__17);
        String o_htmllitString3__18 = a.get("Tot");
        Assert.assertEquals("", o_htmllitString3__18);
        String o_htmllitString3__19 = a.getIgnoreCase("tot");
        Assert.assertEquals("", o_htmllitString3__19);
        String o_htmllitString3__20 = a.html();
        Assert.assertEquals(" T,ot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_htmllitString3__20);
        String o_htmllitString3__21 = a.html();
        Assert.assertEquals(" T,ot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_htmllitString3__21);
        a.toString();
        Assert.assertEquals(" T,ot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1497074580, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" T,ot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_htmllitString3__3)).toString());
        Assert.assertEquals(1497074580, ((int) (((Attributes) (o_htmllitString3__3)).hashCode())));
        Assert.assertEquals(" T,ot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_htmllitString3__4)).toString());
        Assert.assertEquals(1497074580, ((int) (((Attributes) (o_htmllitString3__4)).hashCode())));
        Assert.assertEquals(" T,ot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_htmllitString3__5)).toString());
        Assert.assertEquals(1497074580, ((int) (((Attributes) (o_htmllitString3__5)).hashCode())));
        Assert.assertEquals(3, ((int) (o_htmllitString3__6)));
        Assert.assertFalse(o_htmllitString3__7);
        Assert.assertTrue(o_htmllitString3__8);
        Assert.assertTrue(o_htmllitString3__9);
        Assert.assertFalse(o_htmllitString3__10);
        Assert.assertFalse(o_htmllitString3__11);
        Assert.assertEquals("There", o_htmllitString3__12);
        Assert.assertEquals(1, ((int) (o_htmllitString3__15)));
        Assert.assertEquals("Jsoup", o_htmllitString3__16);
        Assert.assertEquals("", o_htmllitString3__17);
        Assert.assertEquals("", o_htmllitString3__18);
        Assert.assertEquals("", o_htmllitString3__19);
        Assert.assertEquals(" T,ot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_htmllitString3__20);
        Assert.assertEquals(" T,ot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_htmllitString3__21);
    }

    @Test(timeout = 10000)
    public void html_rv214() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_rv214__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_rv214__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_rv214__3)).hashCode())));
        Attributes o_html_rv214__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_rv214__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_rv214__4)).hashCode())));
        Attributes __DSPOT_invoc_5 = a.put("data-name", "Jsoup");
        int o_html_rv214__8 = a.size();
        Assert.assertEquals(3, ((int) (o_html_rv214__8)));
        boolean o_html_rv214__9 = a.hasKey("Tot");
        Assert.assertTrue(o_html_rv214__9);
        boolean o_html_rv214__10 = a.hasKey("Hello");
        Assert.assertTrue(o_html_rv214__10);
        boolean o_html_rv214__11 = a.hasKey("data-name");
        Assert.assertTrue(o_html_rv214__11);
        boolean o_html_rv214__12 = a.hasKey("tot");
        Assert.assertFalse(o_html_rv214__12);
        boolean o_html_rv214__13 = a.hasKeyIgnoreCase("tot");
        Assert.assertTrue(o_html_rv214__13);
        String o_html_rv214__14 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_rv214__14);
        Map<String, String> dataset = a.dataset();
        int o_html_rv214__17 = dataset.size();
        Assert.assertEquals(1, ((int) (o_html_rv214__17)));
        String o_html_rv214__18 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_rv214__18);
        String o_html_rv214__19 = a.get("tot");
        Assert.assertEquals("", o_html_rv214__19);
        String o_html_rv214__20 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_rv214__20);
        String o_html_rv214__21 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_rv214__21);
        String o_html_rv214__22 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv214__22);
        String o_html_rv214__23 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv214__23);
        a.toString();
        Attributes o_html_rv214__25 = __DSPOT_invoc_5.clone();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv214__25)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv214__25)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-758045610, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv214__3)).toString());
        Assert.assertEquals(-758045610, ((int) (((Attributes) (o_html_rv214__3)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv214__4)).toString());
        Assert.assertEquals(-758045610, ((int) (((Attributes) (o_html_rv214__4)).hashCode())));
        Assert.assertEquals(3, ((int) (o_html_rv214__8)));
        Assert.assertTrue(o_html_rv214__9);
        Assert.assertTrue(o_html_rv214__10);
        Assert.assertTrue(o_html_rv214__11);
        Assert.assertFalse(o_html_rv214__12);
        Assert.assertTrue(o_html_rv214__13);
        Assert.assertEquals("There", o_html_rv214__14);
        Assert.assertEquals(1, ((int) (o_html_rv214__17)));
        Assert.assertEquals("Jsoup", o_html_rv214__18);
        Assert.assertEquals("", o_html_rv214__19);
        Assert.assertEquals("a&p", o_html_rv214__20);
        Assert.assertEquals("a&p", o_html_rv214__21);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv214__22);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv214__23);
    }

    @Test(timeout = 10000)
    public void html_rv207() throws Exception {
        String __DSPOT_key_37 = "1iXd&W_#*uaYP&<w$N`n";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_rv207__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_rv207__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_rv207__4)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("Hello", "There");
        Attributes o_html_rv207__8 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv207__8)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv207__8)).hashCode())));
        int o_html_rv207__9 = a.size();
        Assert.assertEquals(3, ((int) (o_html_rv207__9)));
        boolean o_html_rv207__10 = a.hasKey("Tot");
        Assert.assertTrue(o_html_rv207__10);
        boolean o_html_rv207__11 = a.hasKey("Hello");
        Assert.assertTrue(o_html_rv207__11);
        boolean o_html_rv207__12 = a.hasKey("data-name");
        Assert.assertTrue(o_html_rv207__12);
        boolean o_html_rv207__13 = a.hasKey("tot");
        Assert.assertFalse(o_html_rv207__13);
        boolean o_html_rv207__14 = a.hasKeyIgnoreCase("tot");
        Assert.assertTrue(o_html_rv207__14);
        String o_html_rv207__15 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_rv207__15);
        Map<String, String> dataset = a.dataset();
        int o_html_rv207__18 = dataset.size();
        Assert.assertEquals(1, ((int) (o_html_rv207__18)));
        String o_html_rv207__19 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_rv207__19);
        String o_html_rv207__20 = a.get("tot");
        Assert.assertEquals("", o_html_rv207__20);
        String o_html_rv207__21 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_rv207__21);
        String o_html_rv207__22 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_rv207__22);
        String o_html_rv207__23 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv207__23);
        String o_html_rv207__24 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv207__24);
        a.toString();
        __DSPOT_invoc_4.remove(__DSPOT_key_37);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv207__4)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv207__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv207__8)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv207__8)).hashCode())));
        Assert.assertEquals(3, ((int) (o_html_rv207__9)));
        Assert.assertTrue(o_html_rv207__10);
        Assert.assertTrue(o_html_rv207__11);
        Assert.assertTrue(o_html_rv207__12);
        Assert.assertFalse(o_html_rv207__13);
        Assert.assertTrue(o_html_rv207__14);
        Assert.assertEquals("There", o_html_rv207__15);
        Assert.assertEquals(1, ((int) (o_html_rv207__18)));
        Assert.assertEquals("Jsoup", o_html_rv207__19);
        Assert.assertEquals("", o_html_rv207__20);
        Assert.assertEquals("a&p", o_html_rv207__21);
        Assert.assertEquals("a&p", o_html_rv207__22);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv207__23);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv207__24);
    }

    @Test(timeout = 10000)
    public void htmllitString37() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_htmllitString37__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_htmllitString37__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_htmllitString37__3)).hashCode())));
        Attributes o_htmllitString37__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_htmllitString37__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_htmllitString37__4)).hashCode())));
        Attributes o_htmllitString37__5 = a.put("r6#-VtX(r", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" r6#-VtX(r=\"Jsoup\"", ((Attributes) (o_htmllitString37__5)).toString());
        Assert.assertEquals(580398872, ((int) (((Attributes) (o_htmllitString37__5)).hashCode())));
        int o_htmllitString37__6 = a.size();
        Assert.assertEquals(3, ((int) (o_htmllitString37__6)));
        boolean o_htmllitString37__7 = a.hasKey("Tot");
        Assert.assertTrue(o_htmllitString37__7);
        boolean o_htmllitString37__8 = a.hasKey("Hello");
        Assert.assertTrue(o_htmllitString37__8);
        boolean o_htmllitString37__9 = a.hasKey("data-name");
        Assert.assertFalse(o_htmllitString37__9);
        boolean o_htmllitString37__10 = a.hasKey("tot");
        Assert.assertFalse(o_htmllitString37__10);
        boolean o_htmllitString37__11 = a.hasKeyIgnoreCase("tot");
        Assert.assertTrue(o_htmllitString37__11);
        String o_htmllitString37__12 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_htmllitString37__12);
        Map<String, String> dataset = a.dataset();
        int o_htmllitString37__15 = dataset.size();
        Assert.assertEquals(0, ((int) (o_htmllitString37__15)));
        dataset.get("name");
        a.get("tot");
        a.get("Tot");
        a.getIgnoreCase("tot");
        a.html();
        a.html();
        a.toString();
    }

    @Test(timeout = 10000)
    public void html_rv205() throws Exception {
        String __DSPOT_value_35 = "(v6Iw9b>c1NAnIwcz&T&";
        String __DSPOT_key_34 = "lJH!D*A3(%|?=4=uV!aV";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_rv205__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_rv205__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_rv205__5)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("Hello", "There");
        Attributes o_html_rv205__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv205__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv205__9)).hashCode())));
        int o_html_rv205__10 = a.size();
        Assert.assertEquals(3, ((int) (o_html_rv205__10)));
        boolean o_html_rv205__11 = a.hasKey("Tot");
        Assert.assertTrue(o_html_rv205__11);
        boolean o_html_rv205__12 = a.hasKey("Hello");
        Assert.assertTrue(o_html_rv205__12);
        boolean o_html_rv205__13 = a.hasKey("data-name");
        Assert.assertTrue(o_html_rv205__13);
        boolean o_html_rv205__14 = a.hasKey("tot");
        Assert.assertFalse(o_html_rv205__14);
        boolean o_html_rv205__15 = a.hasKeyIgnoreCase("tot");
        Assert.assertTrue(o_html_rv205__15);
        String o_html_rv205__16 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_rv205__16);
        Map<String, String> dataset = a.dataset();
        int o_html_rv205__19 = dataset.size();
        Assert.assertEquals(1, ((int) (o_html_rv205__19)));
        String o_html_rv205__20 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_rv205__20);
        String o_html_rv205__21 = a.get("tot");
        Assert.assertEquals("", o_html_rv205__21);
        String o_html_rv205__22 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_rv205__22);
        String o_html_rv205__23 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_rv205__23);
        String o_html_rv205__24 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv205__24);
        String o_html_rv205__25 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv205__25);
        a.toString();
        Attributes o_html_rv205__27 = __DSPOT_invoc_4.put(__DSPOT_key_34, __DSPOT_value_35);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" lJH!D*A3(%|?=4=uV!aV=\"(v6Iw9b>c1NAnIwcz&amp;T&amp;\"", ((Attributes) (o_html_rv205__27)).toString());
        Assert.assertEquals(1348083448, ((int) (((Attributes) (o_html_rv205__27)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" lJH!D*A3(%|?=4=uV!aV=\"(v6Iw9b>c1NAnIwcz&amp;T&amp;\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1348083448, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" lJH!D*A3(%|?=4=uV!aV=\"(v6Iw9b>c1NAnIwcz&amp;T&amp;\"", ((Attributes) (o_html_rv205__5)).toString());
        Assert.assertEquals(1348083448, ((int) (((Attributes) (o_html_rv205__5)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" lJH!D*A3(%|?=4=uV!aV=\"(v6Iw9b>c1NAnIwcz&amp;T&amp;\"", ((Attributes) (o_html_rv205__9)).toString());
        Assert.assertEquals(1348083448, ((int) (((Attributes) (o_html_rv205__9)).hashCode())));
        Assert.assertEquals(3, ((int) (o_html_rv205__10)));
        Assert.assertTrue(o_html_rv205__11);
        Assert.assertTrue(o_html_rv205__12);
        Assert.assertTrue(o_html_rv205__13);
        Assert.assertFalse(o_html_rv205__14);
        Assert.assertTrue(o_html_rv205__15);
        Assert.assertEquals("There", o_html_rv205__16);
        Assert.assertEquals(1, ((int) (o_html_rv205__19)));
        Assert.assertEquals("Jsoup", o_html_rv205__20);
        Assert.assertEquals("", o_html_rv205__21);
        Assert.assertEquals("a&p", o_html_rv205__22);
        Assert.assertEquals("a&p", o_html_rv205__23);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv205__24);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv205__25);
    }

    @Test(timeout = 10000)
    public void html_rv227() throws Exception {
        Attribute __DSPOT_attribute_49 = new Attribute("AY^(qL7}kh?A:jNYySys", "P>6W.t0C-?9AC*$S oY.");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_rv227__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_rv227__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_rv227__5)).hashCode())));
        Attributes o_html_rv227__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_rv227__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_rv227__6)).hashCode())));
        Attributes __DSPOT_invoc_5 = a.put("data-name", "Jsoup");
        int o_html_rv227__10 = a.size();
        Assert.assertEquals(3, ((int) (o_html_rv227__10)));
        boolean o_html_rv227__11 = a.hasKey("Tot");
        Assert.assertTrue(o_html_rv227__11);
        boolean o_html_rv227__12 = a.hasKey("Hello");
        Assert.assertTrue(o_html_rv227__12);
        boolean o_html_rv227__13 = a.hasKey("data-name");
        Assert.assertTrue(o_html_rv227__13);
        boolean o_html_rv227__14 = a.hasKey("tot");
        Assert.assertFalse(o_html_rv227__14);
        boolean o_html_rv227__15 = a.hasKeyIgnoreCase("tot");
        Assert.assertTrue(o_html_rv227__15);
        String o_html_rv227__16 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_rv227__16);
        Map<String, String> dataset = a.dataset();
        int o_html_rv227__19 = dataset.size();
        Assert.assertEquals(1, ((int) (o_html_rv227__19)));
        String o_html_rv227__20 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_rv227__20);
        String o_html_rv227__21 = a.get("tot");
        Assert.assertEquals("", o_html_rv227__21);
        String o_html_rv227__22 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_rv227__22);
        String o_html_rv227__23 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_rv227__23);
        String o_html_rv227__24 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv227__24);
        String o_html_rv227__25 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv227__25);
        a.toString();
        Attributes o_html_rv227__27 = __DSPOT_invoc_5.put(__DSPOT_attribute_49);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" AY^(qL7}kh?A:jNYySys=\"P>6W.t0C-?9AC*$S oY.\"", ((Attributes) (o_html_rv227__27)).toString());
        Assert.assertEquals(-1177929732, ((int) (((Attributes) (o_html_rv227__27)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" AY^(qL7}kh?A:jNYySys=\"P>6W.t0C-?9AC*$S oY.\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1177929732, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" AY^(qL7}kh?A:jNYySys=\"P>6W.t0C-?9AC*$S oY.\"", ((Attributes) (o_html_rv227__5)).toString());
        Assert.assertEquals(-1177929732, ((int) (((Attributes) (o_html_rv227__5)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" AY^(qL7}kh?A:jNYySys=\"P>6W.t0C-?9AC*$S oY.\"", ((Attributes) (o_html_rv227__6)).toString());
        Assert.assertEquals(-1177929732, ((int) (((Attributes) (o_html_rv227__6)).hashCode())));
        Assert.assertEquals(3, ((int) (o_html_rv227__10)));
        Assert.assertTrue(o_html_rv227__11);
        Assert.assertTrue(o_html_rv227__12);
        Assert.assertTrue(o_html_rv227__13);
        Assert.assertFalse(o_html_rv227__14);
        Assert.assertTrue(o_html_rv227__15);
        Assert.assertEquals("There", o_html_rv227__16);
        Assert.assertEquals(1, ((int) (o_html_rv227__19)));
        Assert.assertEquals("Jsoup", o_html_rv227__20);
        Assert.assertEquals("", o_html_rv227__21);
        Assert.assertEquals("a&p", o_html_rv227__22);
        Assert.assertEquals("a&p", o_html_rv227__23);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv227__24);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv227__25);
    }

    @Test(timeout = 10000)
    public void htmlnull242_failAssert7() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put("Tot", "a&p");
            a.put("Hello", "There");
            a.put("data-name", "Jsoup");
            a.size();
            a.hasKey("Tot");
            a.hasKey("Hello");
            a.hasKey("data-name");
            a.hasKey("tot");
            a.hasKeyIgnoreCase(null);
            a.getIgnoreCase("hEllo");
            Map<String, String> dataset = a.dataset();
            dataset.size();
            dataset.get("name");
            a.get("tot");
            a.get("Tot");
            a.getIgnoreCase("tot");
            a.html();
            a.html();
            a.toString();
            org.junit.Assert.fail("htmlnull242 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void htmllitString46() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_htmllitString46__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_htmllitString46__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_htmllitString46__3)).hashCode())));
        Attributes o_htmllitString46__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_htmllitString46__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_htmllitString46__4)).hashCode())));
        Attributes o_htmllitString46__5 = a.put("data-name", "");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\"", ((Attributes) (o_htmllitString46__5)).toString());
        Assert.assertEquals(42118577, ((int) (((Attributes) (o_htmllitString46__5)).hashCode())));
        int o_htmllitString46__6 = a.size();
        Assert.assertEquals(3, ((int) (o_htmllitString46__6)));
        boolean o_htmllitString46__7 = a.hasKey("Tot");
        Assert.assertTrue(o_htmllitString46__7);
        boolean o_htmllitString46__8 = a.hasKey("Hello");
        Assert.assertTrue(o_htmllitString46__8);
        boolean o_htmllitString46__9 = a.hasKey("data-name");
        Assert.assertTrue(o_htmllitString46__9);
        boolean o_htmllitString46__10 = a.hasKey("tot");
        Assert.assertFalse(o_htmllitString46__10);
        boolean o_htmllitString46__11 = a.hasKeyIgnoreCase("tot");
        Assert.assertTrue(o_htmllitString46__11);
        String o_htmllitString46__12 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_htmllitString46__12);
        Map<String, String> dataset = a.dataset();
        int o_htmllitString46__15 = dataset.size();
        Assert.assertEquals(1, ((int) (o_htmllitString46__15)));
        String o_htmllitString46__16 = dataset.get("name");
        Assert.assertEquals("", o_htmllitString46__16);
        String o_htmllitString46__17 = a.get("tot");
        Assert.assertEquals("", o_htmllitString46__17);
        String o_htmllitString46__18 = a.get("Tot");
        Assert.assertEquals("a&p", o_htmllitString46__18);
        String o_htmllitString46__19 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_htmllitString46__19);
        String o_htmllitString46__20 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\"", o_htmllitString46__20);
        String o_htmllitString46__21 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\"", o_htmllitString46__21);
        a.toString();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\"", ((Attributes) (a)).toString());
        Assert.assertEquals(42118577, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\"", ((Attributes) (o_htmllitString46__3)).toString());
        Assert.assertEquals(42118577, ((int) (((Attributes) (o_htmllitString46__3)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\"", ((Attributes) (o_htmllitString46__4)).toString());
        Assert.assertEquals(42118577, ((int) (((Attributes) (o_htmllitString46__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\"", ((Attributes) (o_htmllitString46__5)).toString());
        Assert.assertEquals(42118577, ((int) (((Attributes) (o_htmllitString46__5)).hashCode())));
        Assert.assertEquals(3, ((int) (o_htmllitString46__6)));
        Assert.assertTrue(o_htmllitString46__7);
        Assert.assertTrue(o_htmllitString46__8);
        Assert.assertTrue(o_htmllitString46__9);
        Assert.assertFalse(o_htmllitString46__10);
        Assert.assertTrue(o_htmllitString46__11);
        Assert.assertEquals("There", o_htmllitString46__12);
        Assert.assertEquals(1, ((int) (o_htmllitString46__15)));
        Assert.assertEquals("", o_htmllitString46__16);
        Assert.assertEquals("", o_htmllitString46__17);
        Assert.assertEquals("a&p", o_htmllitString46__18);
        Assert.assertEquals("a&p", o_htmllitString46__19);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\"", o_htmllitString46__20);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\"", o_htmllitString46__21);
    }

    @Test(timeout = 10000)
    public void htmllitString17() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_htmllitString17__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_htmllitString17__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_htmllitString17__3)).hashCode())));
        Attributes o_htmllitString17__4 = a.put("Tot", "There");
        Assert.assertEquals(" Tot=\"There\"", ((Attributes) (o_htmllitString17__4)).toString());
        Assert.assertEquals(1733532630, ((int) (((Attributes) (o_htmllitString17__4)).hashCode())));
        Attributes o_htmllitString17__5 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_htmllitString17__5)).toString());
        Assert.assertEquals(1894322954, ((int) (((Attributes) (o_htmllitString17__5)).hashCode())));
        int o_htmllitString17__6 = a.size();
        Assert.assertEquals(2, ((int) (o_htmllitString17__6)));
        boolean o_htmllitString17__7 = a.hasKey("Tot");
        Assert.assertTrue(o_htmllitString17__7);
        boolean o_htmllitString17__8 = a.hasKey("Hello");
        Assert.assertFalse(o_htmllitString17__8);
        boolean o_htmllitString17__9 = a.hasKey("data-name");
        Assert.assertTrue(o_htmllitString17__9);
        boolean o_htmllitString17__10 = a.hasKey("tot");
        Assert.assertFalse(o_htmllitString17__10);
        boolean o_htmllitString17__11 = a.hasKeyIgnoreCase("tot");
        Assert.assertTrue(o_htmllitString17__11);
        String o_htmllitString17__12 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("", o_htmllitString17__12);
        Map<String, String> dataset = a.dataset();
        int o_htmllitString17__15 = dataset.size();
        Assert.assertEquals(1, ((int) (o_htmllitString17__15)));
        String o_htmllitString17__16 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_htmllitString17__16);
        String o_htmllitString17__17 = a.get("tot");
        Assert.assertEquals("", o_htmllitString17__17);
        String o_htmllitString17__18 = a.get("Tot");
        Assert.assertEquals("There", o_htmllitString17__18);
        String o_htmllitString17__19 = a.getIgnoreCase("tot");
        Assert.assertEquals("There", o_htmllitString17__19);
        String o_htmllitString17__20 = a.html();
        Assert.assertEquals(" Tot=\"There\" data-name=\"Jsoup\"", o_htmllitString17__20);
        String o_htmllitString17__21 = a.html();
        Assert.assertEquals(" Tot=\"There\" data-name=\"Jsoup\"", o_htmllitString17__21);
        a.toString();
        Assert.assertEquals(" Tot=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1894322954, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_htmllitString17__3)).toString());
        Assert.assertEquals(1894322954, ((int) (((Attributes) (o_htmllitString17__3)).hashCode())));
        Assert.assertEquals(" Tot=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_htmllitString17__4)).toString());
        Assert.assertEquals(1894322954, ((int) (((Attributes) (o_htmllitString17__4)).hashCode())));
        Assert.assertEquals(" Tot=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_htmllitString17__5)).toString());
        Assert.assertEquals(1894322954, ((int) (((Attributes) (o_htmllitString17__5)).hashCode())));
        Assert.assertEquals(2, ((int) (o_htmllitString17__6)));
        Assert.assertTrue(o_htmllitString17__7);
        Assert.assertFalse(o_htmllitString17__8);
        Assert.assertTrue(o_htmllitString17__9);
        Assert.assertFalse(o_htmllitString17__10);
        Assert.assertTrue(o_htmllitString17__11);
        Assert.assertEquals("", o_htmllitString17__12);
        Assert.assertEquals(1, ((int) (o_htmllitString17__15)));
        Assert.assertEquals("Jsoup", o_htmllitString17__16);
        Assert.assertEquals("", o_htmllitString17__17);
        Assert.assertEquals("There", o_htmllitString17__18);
        Assert.assertEquals("There", o_htmllitString17__19);
        Assert.assertEquals(" Tot=\"There\" data-name=\"Jsoup\"", o_htmllitString17__20);
        Assert.assertEquals(" Tot=\"There\" data-name=\"Jsoup\"", o_htmllitString17__21);
    }

    @Test(timeout = 10000)
    public void htmlnull232_failAssert11() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put(null, "a&p");
            a.put("Hello", "There");
            a.put("data-name", "Jsoup");
            a.size();
            a.hasKey("Tot");
            a.hasKey("Hello");
            a.hasKey("data-name");
            a.hasKey("tot");
            a.hasKeyIgnoreCase("tot");
            a.getIgnoreCase("hEllo");
            Map<String, String> dataset = a.dataset();
            dataset.size();
            dataset.get("name");
            a.get("tot");
            a.get("Tot");
            a.getIgnoreCase("tot");
            a.html();
            a.html();
            a.toString();
            org.junit.Assert.fail("htmlnull232 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void htmlnull236_failAssert0() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put("Tot", "a&p");
            a.put("Hello", "There");
            a.put(null, "Jsoup");
            a.size();
            a.hasKey("Tot");
            a.hasKey("Hello");
            a.hasKey("data-name");
            a.hasKey("tot");
            a.hasKeyIgnoreCase("tot");
            a.getIgnoreCase("hEllo");
            Map<String, String> dataset = a.dataset();
            dataset.size();
            dataset.get("name");
            a.get("tot");
            a.get("Tot");
            a.getIgnoreCase("tot");
            a.html();
            a.html();
            a.toString();
            org.junit.Assert.fail("htmlnull236 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void html_mg158null22353_failAssert16() throws Exception {
        try {
            String __DSPOT_key_4 = "W4JN-$nw<}7EGpwmm(EQ";
            Attributes a = new Attributes();
            Attributes o_html_mg158__4 = a.put("Tot", "a&p");
            Attributes o_html_mg158__5 = a.put("Hello", "There");
            Attributes o_html_mg158__6 = a.put("data-name", "Jsoup");
            int o_html_mg158__7 = a.size();
            boolean o_html_mg158__8 = a.hasKey("Tot");
            boolean o_html_mg158__9 = a.hasKey("Hello");
            boolean o_html_mg158__10 = a.hasKey("data-name");
            boolean o_html_mg158__11 = a.hasKey(null);
            boolean o_html_mg158__12 = a.hasKeyIgnoreCase("tot");
            String o_html_mg158__13 = a.getIgnoreCase("hEllo");
            Map<String, String> dataset = a.dataset();
            int o_html_mg158__16 = dataset.size();
            String o_html_mg158__17 = dataset.get("name");
            String o_html_mg158__18 = a.get("tot");
            String o_html_mg158__19 = a.get("Tot");
            String o_html_mg158__20 = a.getIgnoreCase("tot");
            String o_html_mg158__21 = a.html();
            String o_html_mg158__22 = a.html();
            a.toString();
            boolean o_html_mg158__24 = a.hasKey(__DSPOT_key_4);
            org.junit.Assert.fail("html_mg158null22353 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void html_rv170litString8096() throws Exception {
        Attributes __DSPOT_incoming_13 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "");
        Attributes o_html_rv170__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"\" Hello=\"There\"", ((Attributes) (o_html_rv170__8)).toString());
        Assert.assertEquals(142394285, ((int) (((Attributes) (o_html_rv170__8)).hashCode())));
        Attributes o_html_rv170__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__9)).toString());
        Assert.assertEquals(-545154661, ((int) (((Attributes) (o_html_rv170__9)).hashCode())));
        int o_html_rv170__10 = a.size();
        boolean o_html_rv170__11 = a.hasKey("Tot");
        boolean o_html_rv170__12 = a.hasKey("Hello");
        boolean o_html_rv170__13 = a.hasKey("data-name");
        boolean o_html_rv170__14 = a.hasKey("tot");
        boolean o_html_rv170__15 = a.hasKeyIgnoreCase("tot");
        String o_html_rv170__16 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_rv170__16);
        Map<String, String> dataset = a.dataset();
        int o_html_rv170__19 = dataset.size();
        String o_html_rv170__20 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_rv170__20);
        String o_html_rv170__21 = a.get("tot");
        Assert.assertEquals("", o_html_rv170__21);
        String o_html_rv170__22 = a.get("Tot");
        Assert.assertEquals("", o_html_rv170__22);
        String o_html_rv170__23 = a.getIgnoreCase("tot");
        Assert.assertEquals("", o_html_rv170__23);
        String o_html_rv170__24 = a.html();
        Assert.assertEquals(" Tot=\"\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv170__24);
        String o_html_rv170__25 = a.html();
        Assert.assertEquals(" Tot=\"\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv170__25);
        a.toString();
        __DSPOT_invoc_3.addAll(__DSPOT_incoming_13);
        Assert.assertEquals(" Tot=\"\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-545154661, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__8)).toString());
        Assert.assertEquals(-545154661, ((int) (((Attributes) (o_html_rv170__8)).hashCode())));
        Assert.assertEquals(" Tot=\"\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__9)).toString());
        Assert.assertEquals(-545154661, ((int) (((Attributes) (o_html_rv170__9)).hashCode())));
        Assert.assertEquals("There", o_html_rv170__16);
        Assert.assertEquals("Jsoup", o_html_rv170__20);
        Assert.assertEquals("", o_html_rv170__21);
        Assert.assertEquals("", o_html_rv170__22);
        Assert.assertEquals("", o_html_rv170__23);
        Assert.assertEquals(" Tot=\"\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv170__24);
        Assert.assertEquals(" Tot=\"\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv170__25);
    }

    @Test(timeout = 10000)
    public void htmlnull232_failAssert11_rv22086() throws Exception {
        try {
            String __DSPOT_value_5413 = "A!Sw(XM5Xz&?{;ca6D)x";
            String __DSPOT_key_5412 = "DNk!USccex$0lq;6W=i[";
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            a.put(null, "a&p");
            a.put("Hello", "There");
            Attributes __DSPOT_invoc_7 = a.put("data-name", "Jsoup");
            a.size();
            a.hasKey("Tot");
            a.hasKey("Hello");
            a.hasKey("data-name");
            a.hasKey("tot");
            a.hasKeyIgnoreCase("tot");
            a.getIgnoreCase("hEllo");
            Map<String, String> dataset = a.dataset();
            dataset.size();
            dataset.get("name");
            a.get("tot");
            a.get("Tot");
            a.getIgnoreCase("tot");
            a.html();
            a.html();
            a.toString();
            org.junit.Assert.fail("htmlnull232 should have thrown IllegalArgumentException");
            __DSPOT_invoc_7.put(__DSPOT_key_5412, __DSPOT_value_5413);
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void htmllitString22_failAssert12_rv22103() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes __DSPOT_invoc_5 = a.put("Tot", "a&p");
            Attributes o_htmllitString22_failAssert12_rv22103__8 = a.put("", "There");
            Assert.assertEquals(" Tot=\"a&amp;p\" =\"There\"", ((Attributes) (o_htmllitString22_failAssert12_rv22103__8)).toString());
            Assert.assertEquals(-608994156, ((int) (((Attributes) (o_htmllitString22_failAssert12_rv22103__8)).hashCode())));
            Attributes o_htmllitString22_failAssert12_rv22103__9 = a.put("data-name", "Jsoup");
            Assert.assertEquals(" Tot=\"a&amp;p\" =\"There\" data-name=\"Jsoup\"", ((Attributes) (o_htmllitString22_failAssert12_rv22103__9)).toString());
            Assert.assertEquals(-1296543102, ((int) (((Attributes) (o_htmllitString22_failAssert12_rv22103__9)).hashCode())));
            int o_htmllitString22_failAssert12_rv22103__10 = a.size();
            Assert.assertEquals(3, ((int) (o_htmllitString22_failAssert12_rv22103__10)));
            boolean o_htmllitString22_failAssert12_rv22103__11 = a.hasKey("Tot");
            Assert.assertTrue(o_htmllitString22_failAssert12_rv22103__11);
            boolean o_htmllitString22_failAssert12_rv22103__12 = a.hasKey("Hello");
            Assert.assertFalse(o_htmllitString22_failAssert12_rv22103__12);
            boolean o_htmllitString22_failAssert12_rv22103__13 = a.hasKey("data-name");
            Assert.assertTrue(o_htmllitString22_failAssert12_rv22103__13);
            boolean o_htmllitString22_failAssert12_rv22103__14 = a.hasKey("tot");
            Assert.assertFalse(o_htmllitString22_failAssert12_rv22103__14);
            boolean o_htmllitString22_failAssert12_rv22103__15 = a.hasKeyIgnoreCase("tot");
            Assert.assertTrue(o_htmllitString22_failAssert12_rv22103__15);
            String o_htmllitString22_failAssert12_rv22103__16 = a.getIgnoreCase("hEllo");
            Assert.assertEquals("", o_htmllitString22_failAssert12_rv22103__16);
            Map<String, String> dataset = a.dataset();
            dataset.size();
            dataset.get("name");
            a.get("tot");
            a.get("Tot");
            a.getIgnoreCase("tot");
            a.html();
            a.html();
            a.toString();
            org.junit.Assert.fail("htmllitString22 should have thrown IllegalArgumentException");
            __DSPOT_invoc_5.html();
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void html_mg158_add11570() throws Exception {
        String __DSPOT_key_4 = "W4JN-$nw<}7EGpwmm(EQ";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_mg158_add11570__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg158_add11570__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg158_add11570__4)).hashCode())));
        Attributes o_html_mg158__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg158__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg158__4)).hashCode())));
        Attributes o_html_mg158__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_mg158__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_mg158__5)).hashCode())));
        Attributes o_html_mg158__6 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg158__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg158__6)).hashCode())));
        int o_html_mg158__7 = a.size();
        boolean o_html_mg158__8 = a.hasKey("Tot");
        boolean o_html_mg158__9 = a.hasKey("Hello");
        boolean o_html_mg158__10 = a.hasKey("data-name");
        boolean o_html_mg158__11 = a.hasKey("tot");
        boolean o_html_mg158__12 = a.hasKeyIgnoreCase("tot");
        String o_html_mg158__13 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_mg158__13);
        Map<String, String> dataset = a.dataset();
        int o_html_mg158__16 = dataset.size();
        String o_html_mg158__17 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_mg158__17);
        String o_html_mg158__18 = a.get("tot");
        Assert.assertEquals("", o_html_mg158__18);
        String o_html_mg158__19 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_mg158__19);
        String o_html_mg158__20 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_mg158__20);
        String o_html_mg158__21 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg158__21);
        String o_html_mg158__22 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg158__22);
        a.toString();
        boolean o_html_mg158__24 = a.hasKey(__DSPOT_key_4);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg158_add11570__4)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg158_add11570__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg158__4)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg158__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg158__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg158__5)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg158__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg158__6)).hashCode())));
        Assert.assertEquals("There", o_html_mg158__13);
        Assert.assertEquals("Jsoup", o_html_mg158__17);
        Assert.assertEquals("", o_html_mg158__18);
        Assert.assertEquals("a&p", o_html_mg158__19);
        Assert.assertEquals("a&p", o_html_mg158__20);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg158__21);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg158__22);
    }

    @Test(timeout = 10000)
    public void html_mg163litBool11162() throws Exception {
        boolean __DSPOT_value_7 = false;
        String __DSPOT_key_6 = "y4JV)d4}^w[&oDAIOw? ";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_mg163__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg163__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg163__5)).hashCode())));
        Attributes o_html_mg163__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_mg163__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_mg163__6)).hashCode())));
        Attributes o_html_mg163__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg163__7)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg163__7)).hashCode())));
        int o_html_mg163__8 = a.size();
        boolean o_html_mg163__9 = a.hasKey("Tot");
        boolean o_html_mg163__10 = a.hasKey("Hello");
        boolean o_html_mg163__11 = a.hasKey("data-name");
        boolean o_html_mg163__12 = a.hasKey("tot");
        boolean o_html_mg163__13 = a.hasKeyIgnoreCase("tot");
        String o_html_mg163__14 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_mg163__14);
        Map<String, String> dataset = a.dataset();
        int o_html_mg163__17 = dataset.size();
        String o_html_mg163__18 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_mg163__18);
        String o_html_mg163__19 = a.get("tot");
        Assert.assertEquals("", o_html_mg163__19);
        String o_html_mg163__20 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_mg163__20);
        String o_html_mg163__21 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_mg163__21);
        String o_html_mg163__22 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg163__22);
        String o_html_mg163__23 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg163__23);
        a.toString();
        Attributes o_html_mg163__25 = a.put(__DSPOT_key_6, __DSPOT_value_7);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg163__25)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg163__25)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg163__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg163__5)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg163__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg163__6)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg163__7)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg163__7)).hashCode())));
        Assert.assertEquals("There", o_html_mg163__14);
        Assert.assertEquals("Jsoup", o_html_mg163__18);
        Assert.assertEquals("", o_html_mg163__19);
        Assert.assertEquals("a&p", o_html_mg163__20);
        Assert.assertEquals("a&p", o_html_mg163__21);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg163__22);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg163__23);
    }

    @Test(timeout = 10000)
    public void html_rv183litBool11163() throws Exception {
        boolean __DSPOT_value_20 = true;
        String __DSPOT_key_19 = "tV)2[gaNZ#S&Gu4*{9Gi";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_html_rv183__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_rv183__8)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_rv183__8)).hashCode())));
        Attributes o_html_rv183__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv183__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv183__9)).hashCode())));
        int o_html_rv183__10 = a.size();
        boolean o_html_rv183__11 = a.hasKey("Tot");
        boolean o_html_rv183__12 = a.hasKey("Hello");
        boolean o_html_rv183__13 = a.hasKey("data-name");
        boolean o_html_rv183__14 = a.hasKey("tot");
        boolean o_html_rv183__15 = a.hasKeyIgnoreCase("tot");
        String o_html_rv183__16 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_rv183__16);
        Map<String, String> dataset = a.dataset();
        int o_html_rv183__19 = dataset.size();
        String o_html_rv183__20 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_rv183__20);
        String o_html_rv183__21 = a.get("tot");
        Assert.assertEquals("", o_html_rv183__21);
        String o_html_rv183__22 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_rv183__22);
        String o_html_rv183__23 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_rv183__23);
        String o_html_rv183__24 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv183__24);
        String o_html_rv183__25 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv183__25);
        a.toString();
        Attributes o_html_rv183__27 = __DSPOT_invoc_3.put(__DSPOT_key_19, __DSPOT_value_20);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" tV)2[gaNZ#S&Gu4*{9Gi", ((Attributes) (o_html_rv183__27)).toString());
        Assert.assertEquals(-1003824339, ((int) (((Attributes) (o_html_rv183__27)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" tV)2[gaNZ#S&Gu4*{9Gi", ((Attributes) (a)).toString());
        Assert.assertEquals(-1003824339, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" tV)2[gaNZ#S&Gu4*{9Gi", ((Attributes) (o_html_rv183__8)).toString());
        Assert.assertEquals(-1003824339, ((int) (((Attributes) (o_html_rv183__8)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" tV)2[gaNZ#S&Gu4*{9Gi", ((Attributes) (o_html_rv183__9)).toString());
        Assert.assertEquals(-1003824339, ((int) (((Attributes) (o_html_rv183__9)).hashCode())));
        Assert.assertEquals("There", o_html_rv183__16);
        Assert.assertEquals("Jsoup", o_html_rv183__20);
        Assert.assertEquals("", o_html_rv183__21);
        Assert.assertEquals("a&p", o_html_rv183__22);
        Assert.assertEquals("a&p", o_html_rv183__23);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv183__24);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv183__25);
    }

    @Test(timeout = 10000)
    public void html_mg158_mg15484() throws Exception {
        String __DSPOT_key_723 = "Dv@(#6r&F1E8d-K{};jC";
        String __DSPOT_key_4 = "W4JN-$nw<}7EGpwmm(EQ";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_mg158__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg158__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg158__4)).hashCode())));
        Attributes o_html_mg158__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_mg158__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_mg158__5)).hashCode())));
        Attributes o_html_mg158__6 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg158__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg158__6)).hashCode())));
        int o_html_mg158__7 = a.size();
        boolean o_html_mg158__8 = a.hasKey("Tot");
        boolean o_html_mg158__9 = a.hasKey("Hello");
        boolean o_html_mg158__10 = a.hasKey("data-name");
        boolean o_html_mg158__11 = a.hasKey("tot");
        boolean o_html_mg158__12 = a.hasKeyIgnoreCase("tot");
        String o_html_mg158__13 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_mg158__13);
        Map<String, String> dataset = a.dataset();
        int o_html_mg158__16 = dataset.size();
        String o_html_mg158__17 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_mg158__17);
        String o_html_mg158__18 = a.get("tot");
        Assert.assertEquals("", o_html_mg158__18);
        String o_html_mg158__19 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_mg158__19);
        String o_html_mg158__20 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_mg158__20);
        String o_html_mg158__21 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg158__21);
        String o_html_mg158__22 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg158__22);
        a.toString();
        boolean o_html_mg158__24 = a.hasKey(__DSPOT_key_4);
        boolean o_html_mg158_mg15484__62 = o_html_mg158__6.hasKeyIgnoreCase(__DSPOT_key_723);
        Assert.assertFalse(o_html_mg158_mg15484__62);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg158__4)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg158__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg158__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg158__5)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg158__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg158__6)).hashCode())));
        Assert.assertEquals("There", o_html_mg158__13);
        Assert.assertEquals("Jsoup", o_html_mg158__17);
        Assert.assertEquals("", o_html_mg158__18);
        Assert.assertEquals("a&p", o_html_mg158__19);
        Assert.assertEquals("a&p", o_html_mg158__20);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg158__21);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg158__22);
    }

    @Test(timeout = 10000)
    public void html_rv214_remove14541() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_rv214__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_rv214__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_rv214__3)).hashCode())));
        Attributes o_html_rv214__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_rv214__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_rv214__4)).hashCode())));
        Attributes __DSPOT_invoc_5 = a.put("data-name", "Jsoup");
        int o_html_rv214__8 = a.size();
        boolean o_html_rv214__9 = a.hasKey("Tot");
        boolean o_html_rv214__10 = a.hasKey("Hello");
        boolean o_html_rv214__11 = a.hasKey("data-name");
        boolean o_html_rv214__12 = a.hasKey("tot");
        boolean o_html_rv214__13 = a.hasKeyIgnoreCase("tot");
        String o_html_rv214__14 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_rv214__14);
        Map<String, String> dataset = a.dataset();
        int o_html_rv214__17 = dataset.size();
        String o_html_rv214__18 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_rv214__18);
        String o_html_rv214__19 = a.get("tot");
        Assert.assertEquals("", o_html_rv214__19);
        String o_html_rv214__20 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_rv214__20);
        String o_html_rv214__21 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_rv214__21);
        String o_html_rv214__22 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv214__22);
        String o_html_rv214__23 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv214__23);
        Attributes o_html_rv214__25 = __DSPOT_invoc_5.clone();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv214__25)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv214__25)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-758045610, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv214__3)).toString());
        Assert.assertEquals(-758045610, ((int) (((Attributes) (o_html_rv214__3)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv214__4)).toString());
        Assert.assertEquals(-758045610, ((int) (((Attributes) (o_html_rv214__4)).hashCode())));
        Assert.assertEquals("There", o_html_rv214__14);
        Assert.assertEquals("Jsoup", o_html_rv214__18);
        Assert.assertEquals("", o_html_rv214__19);
        Assert.assertEquals("a&p", o_html_rv214__20);
        Assert.assertEquals("a&p", o_html_rv214__21);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv214__22);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv214__23);
    }

    @Test(timeout = 10000)
    public void html_mg158_mg15477() throws Exception {
        String __DSPOT_key_4 = "W4JN-$nw<}7EGpwmm(EQ";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_mg158__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg158__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg158__4)).hashCode())));
        Attributes o_html_mg158__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_mg158__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_mg158__5)).hashCode())));
        Attributes o_html_mg158__6 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg158__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg158__6)).hashCode())));
        int o_html_mg158__7 = a.size();
        boolean o_html_mg158__8 = a.hasKey("Tot");
        boolean o_html_mg158__9 = a.hasKey("Hello");
        boolean o_html_mg158__10 = a.hasKey("data-name");
        boolean o_html_mg158__11 = a.hasKey("tot");
        boolean o_html_mg158__12 = a.hasKeyIgnoreCase("tot");
        String o_html_mg158__13 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_mg158__13);
        Map<String, String> dataset = a.dataset();
        int o_html_mg158__16 = dataset.size();
        String o_html_mg158__17 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_mg158__17);
        String o_html_mg158__18 = a.get("tot");
        Assert.assertEquals("", o_html_mg158__18);
        String o_html_mg158__19 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_mg158__19);
        String o_html_mg158__20 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_mg158__20);
        String o_html_mg158__21 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg158__21);
        String o_html_mg158__22 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg158__22);
        a.toString();
        boolean o_html_mg158__24 = a.hasKey(__DSPOT_key_4);
        List<Attribute> o_html_mg158_mg15477__61 = o_html_mg158__6.asList();
        Assert.assertFalse(o_html_mg158_mg15477__61.isEmpty());
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg158__4)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg158__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg158__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg158__5)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg158__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg158__6)).hashCode())));
        Assert.assertEquals("There", o_html_mg158__13);
        Assert.assertEquals("Jsoup", o_html_mg158__17);
        Assert.assertEquals("", o_html_mg158__18);
        Assert.assertEquals("a&p", o_html_mg158__19);
        Assert.assertEquals("a&p", o_html_mg158__20);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg158__21);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg158__22);
    }

    @Test(timeout = 10000)
    public void html_mg155null22398() throws Exception {
        Attributes __DSPOT_o_1 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_mg155__5 = a.put("Tot", null);
        Assert.assertEquals(" Tot", ((Attributes) (o_html_mg155__5)).toString());
        Assert.assertEquals(555415706, ((int) (((Attributes) (o_html_mg155__5)).hashCode())));
        Attributes o_html_mg155__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot Hello=\"There\"", ((Attributes) (o_html_mg155__6)).toString());
        Assert.assertEquals(142394285, ((int) (((Attributes) (o_html_mg155__6)).hashCode())));
        Attributes o_html_mg155__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg155__7)).toString());
        Assert.assertEquals(-545154661, ((int) (((Attributes) (o_html_mg155__7)).hashCode())));
        int o_html_mg155__8 = a.size();
        boolean o_html_mg155__9 = a.hasKey("Tot");
        boolean o_html_mg155__10 = a.hasKey("Hello");
        boolean o_html_mg155__11 = a.hasKey("data-name");
        boolean o_html_mg155__12 = a.hasKey("tot");
        boolean o_html_mg155__13 = a.hasKeyIgnoreCase("tot");
        String o_html_mg155__14 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_mg155__14);
        Map<String, String> dataset = a.dataset();
        int o_html_mg155__17 = dataset.size();
        String o_html_mg155__18 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_mg155__18);
        String o_html_mg155__19 = a.get("tot");
        Assert.assertEquals("", o_html_mg155__19);
        String o_html_mg155__20 = a.get("Tot");
        Assert.assertEquals("", o_html_mg155__20);
        String o_html_mg155__21 = a.getIgnoreCase("tot");
        Assert.assertEquals("", o_html_mg155__21);
        String o_html_mg155__22 = a.html();
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", o_html_mg155__22);
        String o_html_mg155__23 = a.html();
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", o_html_mg155__23);
        a.toString();
        boolean o_html_mg155__25 = a.equals(__DSPOT_o_1);
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-545154661, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg155__5)).toString());
        Assert.assertEquals(-545154661, ((int) (((Attributes) (o_html_mg155__5)).hashCode())));
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg155__6)).toString());
        Assert.assertEquals(-545154661, ((int) (((Attributes) (o_html_mg155__6)).hashCode())));
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg155__7)).toString());
        Assert.assertEquals(-545154661, ((int) (((Attributes) (o_html_mg155__7)).hashCode())));
        Assert.assertEquals("There", o_html_mg155__14);
        Assert.assertEquals("Jsoup", o_html_mg155__18);
        Assert.assertEquals("", o_html_mg155__19);
        Assert.assertEquals("", o_html_mg155__20);
        Assert.assertEquals("", o_html_mg155__21);
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", o_html_mg155__22);
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", o_html_mg155__23);
    }

    @Test(timeout = 10000)
    public void html_mg152_mg14872() throws Exception {
        String __DSPOT_value_282 = "[0 5$k/4^,*qd9]!ul1R";
        String __DSPOT_key_281 = "fXId-(<0#O=2 6e>IcaE";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_mg152__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg152__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg152__3)).hashCode())));
        Attributes o_html_mg152__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_mg152__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_mg152__4)).hashCode())));
        Attributes o_html_mg152__5 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg152__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg152__5)).hashCode())));
        int o_html_mg152__6 = a.size();
        boolean o_html_mg152__7 = a.hasKey("Tot");
        boolean o_html_mg152__8 = a.hasKey("Hello");
        boolean o_html_mg152__9 = a.hasKey("data-name");
        boolean o_html_mg152__10 = a.hasKey("tot");
        boolean o_html_mg152__11 = a.hasKeyIgnoreCase("tot");
        String o_html_mg152__12 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_mg152__12);
        Map<String, String> dataset = a.dataset();
        int o_html_mg152__15 = dataset.size();
        String o_html_mg152__16 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_mg152__16);
        String o_html_mg152__17 = a.get("tot");
        Assert.assertEquals("", o_html_mg152__17);
        String o_html_mg152__18 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_mg152__18);
        String o_html_mg152__19 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_mg152__19);
        String o_html_mg152__20 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg152__20);
        String o_html_mg152__21 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg152__21);
        a.toString();
        List<Attribute> o_html_mg152__23 = a.asList();
        Attributes o_html_mg152_mg14872__62 = a.put(__DSPOT_key_281, __DSPOT_value_282);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" fXId-(<0#O=2 6e>IcaE=\"[0 5$k/4^,*qd9]!ul1R\"", ((Attributes) (o_html_mg152_mg14872__62)).toString());
        Assert.assertEquals(-1513940349, ((int) (((Attributes) (o_html_mg152_mg14872__62)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" fXId-(<0#O=2 6e>IcaE=\"[0 5$k/4^,*qd9]!ul1R\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1513940349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" fXId-(<0#O=2 6e>IcaE=\"[0 5$k/4^,*qd9]!ul1R\"", ((Attributes) (o_html_mg152__3)).toString());
        Assert.assertEquals(-1513940349, ((int) (((Attributes) (o_html_mg152__3)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" fXId-(<0#O=2 6e>IcaE=\"[0 5$k/4^,*qd9]!ul1R\"", ((Attributes) (o_html_mg152__4)).toString());
        Assert.assertEquals(-1513940349, ((int) (((Attributes) (o_html_mg152__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" fXId-(<0#O=2 6e>IcaE=\"[0 5$k/4^,*qd9]!ul1R\"", ((Attributes) (o_html_mg152__5)).toString());
        Assert.assertEquals(-1513940349, ((int) (((Attributes) (o_html_mg152__5)).hashCode())));
        Assert.assertEquals("There", o_html_mg152__12);
        Assert.assertEquals("Jsoup", o_html_mg152__16);
        Assert.assertEquals("", o_html_mg152__17);
        Assert.assertEquals("a&p", o_html_mg152__18);
        Assert.assertEquals("a&p", o_html_mg152__19);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg152__20);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg152__21);
    }

    @Test(timeout = 10000)
    public void html_mg156_mg18653() throws Exception {
        Attributes __DSPOT_o_3010 = new Attributes();
        String __DSPOT_key_2 = "9Flz5*yC=M]:bMoV#NG^";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_mg156__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg156__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg156__4)).hashCode())));
        Attributes o_html_mg156__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_mg156__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_mg156__5)).hashCode())));
        Attributes o_html_mg156__6 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg156__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg156__6)).hashCode())));
        int o_html_mg156__7 = a.size();
        boolean o_html_mg156__8 = a.hasKey("Tot");
        boolean o_html_mg156__9 = a.hasKey("Hello");
        boolean o_html_mg156__10 = a.hasKey("data-name");
        boolean o_html_mg156__11 = a.hasKey("tot");
        boolean o_html_mg156__12 = a.hasKeyIgnoreCase("tot");
        String o_html_mg156__13 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_mg156__13);
        Map<String, String> dataset = a.dataset();
        int o_html_mg156__16 = dataset.size();
        String o_html_mg156__17 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_mg156__17);
        String o_html_mg156__18 = a.get("tot");
        Assert.assertEquals("", o_html_mg156__18);
        String o_html_mg156__19 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_mg156__19);
        String o_html_mg156__20 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_mg156__20);
        String o_html_mg156__21 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg156__21);
        String o_html_mg156__22 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg156__22);
        a.toString();
        String o_html_mg156__24 = a.get(__DSPOT_key_2);
        Assert.assertEquals("", o_html_mg156__24);
        boolean o_html_mg156_mg18653__63 = o_html_mg156__5.equals(__DSPOT_o_3010);
        Assert.assertFalse(o_html_mg156_mg18653__63);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg156__4)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg156__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg156__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg156__5)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg156__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg156__6)).hashCode())));
        Assert.assertEquals("There", o_html_mg156__13);
        Assert.assertEquals("Jsoup", o_html_mg156__17);
        Assert.assertEquals("", o_html_mg156__18);
        Assert.assertEquals("a&p", o_html_mg156__19);
        Assert.assertEquals("a&p", o_html_mg156__20);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg156__21);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg156__22);
        Assert.assertEquals("", o_html_mg156__24);
    }

    @Test(timeout = 10000)
    public void html_rv170null23130() throws Exception {
        Attributes __DSPOT_incoming_13 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_html_rv170__8 = a.put("Hello", null);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello", ((Attributes) (o_html_rv170__8)).toString());
        Assert.assertEquals(-1652213410, ((int) (((Attributes) (o_html_rv170__8)).hashCode())));
        Attributes o_html_rv170__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__9)).toString());
        Assert.assertEquals(1955204940, ((int) (((Attributes) (o_html_rv170__9)).hashCode())));
        int o_html_rv170__10 = a.size();
        boolean o_html_rv170__11 = a.hasKey("Tot");
        boolean o_html_rv170__12 = a.hasKey("Hello");
        boolean o_html_rv170__13 = a.hasKey("data-name");
        boolean o_html_rv170__14 = a.hasKey("tot");
        boolean o_html_rv170__15 = a.hasKeyIgnoreCase("tot");
        String o_html_rv170__16 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("", o_html_rv170__16);
        Map<String, String> dataset = a.dataset();
        int o_html_rv170__19 = dataset.size();
        String o_html_rv170__20 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_rv170__20);
        String o_html_rv170__21 = a.get("tot");
        Assert.assertEquals("", o_html_rv170__21);
        String o_html_rv170__22 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_rv170__22);
        String o_html_rv170__23 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_rv170__23);
        String o_html_rv170__24 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", o_html_rv170__24);
        String o_html_rv170__25 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", o_html_rv170__25);
        a.toString();
        __DSPOT_invoc_3.addAll(__DSPOT_incoming_13);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1955204940, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__8)).toString());
        Assert.assertEquals(1955204940, ((int) (((Attributes) (o_html_rv170__8)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__9)).toString());
        Assert.assertEquals(1955204940, ((int) (((Attributes) (o_html_rv170__9)).hashCode())));
        Assert.assertEquals("", o_html_rv170__16);
        Assert.assertEquals("Jsoup", o_html_rv170__20);
        Assert.assertEquals("", o_html_rv170__21);
        Assert.assertEquals("a&p", o_html_rv170__22);
        Assert.assertEquals("a&p", o_html_rv170__23);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", o_html_rv170__24);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", o_html_rv170__25);
    }

    @Test(timeout = 10000)
    public void html_mg156_mg18624() throws Exception {
        String __DSPOT_key_2 = "9Flz5*yC=M]:bMoV#NG^";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_mg156__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg156__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg156__4)).hashCode())));
        Attributes o_html_mg156__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_mg156__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_mg156__5)).hashCode())));
        Attributes o_html_mg156__6 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg156__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg156__6)).hashCode())));
        int o_html_mg156__7 = a.size();
        boolean o_html_mg156__8 = a.hasKey("Tot");
        boolean o_html_mg156__9 = a.hasKey("Hello");
        boolean o_html_mg156__10 = a.hasKey("data-name");
        boolean o_html_mg156__11 = a.hasKey("tot");
        boolean o_html_mg156__12 = a.hasKeyIgnoreCase("tot");
        String o_html_mg156__13 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_mg156__13);
        Map<String, String> dataset = a.dataset();
        int o_html_mg156__16 = dataset.size();
        String o_html_mg156__17 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_mg156__17);
        String o_html_mg156__18 = a.get("tot");
        Assert.assertEquals("", o_html_mg156__18);
        String o_html_mg156__19 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_mg156__19);
        String o_html_mg156__20 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_mg156__20);
        String o_html_mg156__21 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg156__21);
        String o_html_mg156__22 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg156__22);
        a.toString();
        String o_html_mg156__24 = a.get(__DSPOT_key_2);
        Assert.assertEquals("", o_html_mg156__24);
        a.normalize();
        Assert.assertEquals(" tot=\"a&amp;p\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(541005968, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"a&amp;p\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg156__4)).toString());
        Assert.assertEquals(541005968, ((int) (((Attributes) (o_html_mg156__4)).hashCode())));
        Assert.assertEquals(" tot=\"a&amp;p\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg156__5)).toString());
        Assert.assertEquals(541005968, ((int) (((Attributes) (o_html_mg156__5)).hashCode())));
        Assert.assertEquals(" tot=\"a&amp;p\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg156__6)).toString());
        Assert.assertEquals(541005968, ((int) (((Attributes) (o_html_mg156__6)).hashCode())));
        Assert.assertEquals("There", o_html_mg156__13);
        Assert.assertEquals("Jsoup", o_html_mg156__17);
        Assert.assertEquals("", o_html_mg156__18);
        Assert.assertEquals("a&p", o_html_mg156__19);
        Assert.assertEquals("a&p", o_html_mg156__20);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg156__21);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg156__22);
        Assert.assertEquals("", o_html_mg156__24);
    }

    @Test(timeout = 10000)
    public void html_rv170_mg19372() throws Exception {
        String __DSPOT_key_3531 = "?!Hw[L8wA.kWror-!.y!";
        Attributes __DSPOT_incoming_13 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_html_rv170__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_rv170__8)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_rv170__8)).hashCode())));
        Attributes o_html_rv170__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv170__9)).hashCode())));
        int o_html_rv170__10 = a.size();
        boolean o_html_rv170__11 = a.hasKey("Tot");
        boolean o_html_rv170__12 = a.hasKey("Hello");
        boolean o_html_rv170__13 = a.hasKey("data-name");
        boolean o_html_rv170__14 = a.hasKey("tot");
        boolean o_html_rv170__15 = a.hasKeyIgnoreCase("tot");
        String o_html_rv170__16 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_rv170__16);
        Map<String, String> dataset = a.dataset();
        int o_html_rv170__19 = dataset.size();
        String o_html_rv170__20 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_rv170__20);
        String o_html_rv170__21 = a.get("tot");
        Assert.assertEquals("", o_html_rv170__21);
        String o_html_rv170__22 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_rv170__22);
        String o_html_rv170__23 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_rv170__23);
        String o_html_rv170__24 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv170__24);
        String o_html_rv170__25 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv170__25);
        a.toString();
        __DSPOT_invoc_3.addAll(__DSPOT_incoming_13);
        __DSPOT_incoming_13.removeIgnoreCase(__DSPOT_key_3531);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__8)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv170__8)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv170__9)).hashCode())));
        Assert.assertEquals("There", o_html_rv170__16);
        Assert.assertEquals("Jsoup", o_html_rv170__20);
        Assert.assertEquals("", o_html_rv170__21);
        Assert.assertEquals("a&p", o_html_rv170__22);
        Assert.assertEquals("a&p", o_html_rv170__23);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv170__24);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv170__25);
    }

    @Test(timeout = 10000)
    public void htmlnull236_failAssert0_rv21371() throws Exception {
        try {
            boolean __DSPOT_value_4969 = false;
            String __DSPOT_key_4968 = ";_Ll?7wOy}NAd8(4>*pI";
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_htmlnull236_failAssert0_rv21371__7 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_htmlnull236_failAssert0_rv21371__7)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_htmlnull236_failAssert0_rv21371__7)).hashCode())));
            Attributes __DSPOT_invoc_6 = a.put("Hello", "There");
            a.put(null, "Jsoup");
            a.size();
            a.hasKey("Tot");
            a.hasKey("Hello");
            a.hasKey("data-name");
            a.hasKey("tot");
            a.hasKeyIgnoreCase("tot");
            a.getIgnoreCase("hEllo");
            Map<String, String> dataset = a.dataset();
            dataset.size();
            dataset.get("name");
            a.get("tot");
            a.get("Tot");
            a.getIgnoreCase("tot");
            a.html();
            a.html();
            a.toString();
            org.junit.Assert.fail("htmlnull236 should have thrown IllegalArgumentException");
            __DSPOT_invoc_6.put(__DSPOT_key_4968, __DSPOT_value_4969);
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void html_mg156litString6941() throws Exception {
        String __DSPOT_key_2 = "9Flz5*yC=M]:bMoV#NG^";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_mg156__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg156__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg156__4)).hashCode())));
        Attributes o_html_mg156__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_mg156__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_mg156__5)).hashCode())));
        Attributes o_html_mg156__6 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg156__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg156__6)).hashCode())));
        int o_html_mg156__7 = a.size();
        boolean o_html_mg156__8 = a.hasKey("Tot");
        boolean o_html_mg156__9 = a.hasKey("Hello");
        boolean o_html_mg156__10 = a.hasKey("data-name");
        boolean o_html_mg156__11 = a.hasKey("tot");
        boolean o_html_mg156__12 = a.hasKeyIgnoreCase("tot");
        String o_html_mg156__13 = a.getIgnoreCase("\n");
        Assert.assertEquals("", o_html_mg156__13);
        Map<String, String> dataset = a.dataset();
        int o_html_mg156__16 = dataset.size();
        String o_html_mg156__17 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_mg156__17);
        String o_html_mg156__18 = a.get("tot");
        Assert.assertEquals("", o_html_mg156__18);
        String o_html_mg156__19 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_mg156__19);
        String o_html_mg156__20 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_mg156__20);
        String o_html_mg156__21 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg156__21);
        String o_html_mg156__22 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg156__22);
        a.toString();
        String o_html_mg156__24 = a.get(__DSPOT_key_2);
        Assert.assertEquals("", o_html_mg156__24);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg156__4)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg156__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg156__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg156__5)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg156__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg156__6)).hashCode())));
        Assert.assertEquals("", o_html_mg156__13);
        Assert.assertEquals("Jsoup", o_html_mg156__17);
        Assert.assertEquals("", o_html_mg156__18);
        Assert.assertEquals("a&p", o_html_mg156__19);
        Assert.assertEquals("a&p", o_html_mg156__20);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg156__21);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg156__22);
    }

    @Test(timeout = 10000)
    public void html_mg156null22973_failAssert13() throws Exception {
        try {
            String __DSPOT_key_2 = "9Flz5*yC=M]:bMoV#NG^";
            Attributes a = new Attributes();
            Attributes o_html_mg156__4 = a.put("Tot", "a&p");
            Attributes o_html_mg156__5 = a.put("Hello", "There");
            Attributes o_html_mg156__6 = a.put("data-name", "Jsoup");
            int o_html_mg156__7 = a.size();
            boolean o_html_mg156__8 = a.hasKey("Tot");
            boolean o_html_mg156__9 = a.hasKey("Hello");
            boolean o_html_mg156__10 = a.hasKey("data-name");
            boolean o_html_mg156__11 = a.hasKey("tot");
            boolean o_html_mg156__12 = a.hasKeyIgnoreCase(null);
            String o_html_mg156__13 = a.getIgnoreCase("hEllo");
            Map<String, String> dataset = a.dataset();
            int o_html_mg156__16 = dataset.size();
            String o_html_mg156__17 = dataset.get("name");
            String o_html_mg156__18 = a.get("tot");
            String o_html_mg156__19 = a.get("Tot");
            String o_html_mg156__20 = a.getIgnoreCase("tot");
            String o_html_mg156__21 = a.html();
            String o_html_mg156__22 = a.html();
            a.toString();
            String o_html_mg156__24 = a.get(__DSPOT_key_2);
            org.junit.Assert.fail("html_mg156null22973 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void htmlnull232_failAssert11_rv22075_rv44716() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes __DSPOT_invoc_11 = a.put(null, "a&p");
            a.put("Hello", "There");
            Attributes __DSPOT_invoc_7 = a.put("data-name", "Jsoup");
            a.size();
            a.hasKey("Tot");
            a.hasKey("Hello");
            a.hasKey("data-name");
            a.hasKey("tot");
            a.hasKeyIgnoreCase("tot");
            a.getIgnoreCase("hEllo");
            Map<String, String> dataset = a.dataset();
            dataset.size();
            dataset.get("name");
            a.get("tot");
            a.get("Tot");
            a.getIgnoreCase("tot");
            a.html();
            a.html();
            a.toString();
            org.junit.Assert.fail("htmlnull232 should have thrown IllegalArgumentException");
            __DSPOT_invoc_7.dataset();
            __DSPOT_invoc_11.hashCode();
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void html_rv170null23130_remove37029() throws Exception {
        Attributes __DSPOT_incoming_13 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_html_rv170__8 = a.put("Hello", null);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello", ((Attributes) (o_html_rv170__8)).toString());
        Assert.assertEquals(-1652213410, ((int) (((Attributes) (o_html_rv170__8)).hashCode())));
        Attributes o_html_rv170__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__9)).toString());
        Assert.assertEquals(1955204940, ((int) (((Attributes) (o_html_rv170__9)).hashCode())));
        int o_html_rv170__10 = a.size();
        boolean o_html_rv170__11 = a.hasKey("Tot");
        boolean o_html_rv170__12 = a.hasKey("Hello");
        boolean o_html_rv170__13 = a.hasKey("data-name");
        boolean o_html_rv170__14 = a.hasKey("tot");
        boolean o_html_rv170__15 = a.hasKeyIgnoreCase("tot");
        String o_html_rv170__16 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("", o_html_rv170__16);
        Map<String, String> dataset = a.dataset();
        int o_html_rv170__19 = dataset.size();
        String o_html_rv170__20 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_rv170__20);
        String o_html_rv170__21 = a.get("tot");
        Assert.assertEquals("", o_html_rv170__21);
        String o_html_rv170__22 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_rv170__22);
        String o_html_rv170__23 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_rv170__23);
        String o_html_rv170__24 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", o_html_rv170__24);
        String o_html_rv170__25 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", o_html_rv170__25);
        a.toString();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1955204940, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__8)).toString());
        Assert.assertEquals(1955204940, ((int) (((Attributes) (o_html_rv170__8)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__9)).toString());
        Assert.assertEquals(1955204940, ((int) (((Attributes) (o_html_rv170__9)).hashCode())));
        Assert.assertEquals("", o_html_rv170__16);
        Assert.assertEquals("Jsoup", o_html_rv170__20);
        Assert.assertEquals("", o_html_rv170__21);
        Assert.assertEquals("a&p", o_html_rv170__22);
        Assert.assertEquals("a&p", o_html_rv170__23);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", o_html_rv170__24);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", o_html_rv170__25);
    }

    @Test(timeout = 10000)
    public void html_mg151_remove14442litString29559() throws Exception {
        Attributes __DSPOT_incoming_0 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_mg151__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg151__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg151__5)).hashCode())));
        Attributes o_html_mg151__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_mg151__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_mg151__6)).hashCode())));
        Attributes o_html_mg151__7 = a.put("data-name", "\n");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\n\"", ((Attributes) (o_html_mg151__7)).toString());
        Assert.assertEquals(42118887, ((int) (((Attributes) (o_html_mg151__7)).hashCode())));
        int o_html_mg151__8 = a.size();
        boolean o_html_mg151__9 = a.hasKey("Tot");
        boolean o_html_mg151__10 = a.hasKey("Hello");
        boolean o_html_mg151__11 = a.hasKey("data-name");
        boolean o_html_mg151__12 = a.hasKey("tot");
        boolean o_html_mg151__13 = a.hasKeyIgnoreCase("tot");
        String o_html_mg151__14 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_mg151__14);
        Map<String, String> dataset = a.dataset();
        int o_html_mg151__17 = dataset.size();
        String o_html_mg151__18 = dataset.get("name");
        Assert.assertEquals("\n", o_html_mg151__18);
        String o_html_mg151__19 = a.get("tot");
        Assert.assertEquals("", o_html_mg151__19);
        String o_html_mg151__20 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_mg151__20);
        String o_html_mg151__21 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_mg151__21);
        String o_html_mg151__22 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\n\"", o_html_mg151__22);
        String o_html_mg151__23 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\n\"", o_html_mg151__23);
        a.addAll(__DSPOT_incoming_0);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\n\"", ((Attributes) (a)).toString());
        Assert.assertEquals(42118887, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\n\"", ((Attributes) (o_html_mg151__5)).toString());
        Assert.assertEquals(42118887, ((int) (((Attributes) (o_html_mg151__5)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\n\"", ((Attributes) (o_html_mg151__6)).toString());
        Assert.assertEquals(42118887, ((int) (((Attributes) (o_html_mg151__6)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\n\"", ((Attributes) (o_html_mg151__7)).toString());
        Assert.assertEquals(42118887, ((int) (((Attributes) (o_html_mg151__7)).hashCode())));
        Assert.assertEquals("There", o_html_mg151__14);
        Assert.assertEquals("\n", o_html_mg151__18);
        Assert.assertEquals("", o_html_mg151__19);
        Assert.assertEquals("a&p", o_html_mg151__20);
        Assert.assertEquals("a&p", o_html_mg151__21);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\n\"", o_html_mg151__22);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"\n\"", o_html_mg151__23);
    }

    @Test(timeout = 10000)
    public void html_rv170_add13397_mg40073() throws Exception {
        Attributes __DSPOT_incoming_13 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_html_rv170__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_rv170__8)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_rv170__8)).hashCode())));
        Attributes o_html_rv170__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv170__9)).hashCode())));
        int o_html_rv170__10 = a.size();
        boolean o_html_rv170__11 = a.hasKey("Tot");
        boolean o_html_rv170__12 = a.hasKey("Hello");
        boolean o_html_rv170__13 = a.hasKey("data-name");
        boolean o_html_rv170__14 = a.hasKey("tot");
        boolean o_html_rv170__15 = a.hasKeyIgnoreCase("tot");
        String o_html_rv170__16 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_rv170__16);
        Map<String, String> dataset = a.dataset();
        int o_html_rv170__19 = dataset.size();
        String o_html_rv170__20 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_rv170__20);
        String o_html_rv170__21 = a.get("tot");
        Assert.assertEquals("", o_html_rv170__21);
        String o_html_rv170__22 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_rv170__22);
        String o_html_rv170__23 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_rv170__23);
        String o_html_rv170__24 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv170__24);
        String o_html_rv170__25 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv170__25);
        a.toString();
        a.toString();
        __DSPOT_invoc_3.addAll(__DSPOT_incoming_13);
        o_html_rv170__8.normalize();
        Assert.assertEquals(" tot=\"a&amp;p\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(541005968, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"a&amp;p\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__8)).toString());
        Assert.assertEquals(541005968, ((int) (((Attributes) (o_html_rv170__8)).hashCode())));
        Assert.assertEquals(" tot=\"a&amp;p\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__9)).toString());
        Assert.assertEquals(541005968, ((int) (((Attributes) (o_html_rv170__9)).hashCode())));
        Assert.assertEquals("There", o_html_rv170__16);
        Assert.assertEquals("Jsoup", o_html_rv170__20);
        Assert.assertEquals("", o_html_rv170__21);
        Assert.assertEquals("a&p", o_html_rv170__22);
        Assert.assertEquals("a&p", o_html_rv170__23);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv170__24);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv170__25);
    }

    @Test(timeout = 10000)
    public void html_mg158null22355_failAssert24null46315() throws Exception {
        try {
            String __DSPOT_key_4 = "W4JN-$nw<}7EGpwmm(EQ";
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_html_mg158__4 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg158__4)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg158__4)).hashCode())));
            Attributes o_html_mg158__5 = a.put("Hello", "There");
            Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_mg158__5)).toString());
            Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_mg158__5)).hashCode())));
            Attributes o_html_mg158__6 = a.put(null, "Jsoup");
            int o_html_mg158__7 = a.size();
            boolean o_html_mg158__8 = a.hasKey("Tot");
            boolean o_html_mg158__9 = a.hasKey("Hello");
            boolean o_html_mg158__10 = a.hasKey("data-name");
            boolean o_html_mg158__11 = a.hasKey("tot");
            boolean o_html_mg158__12 = a.hasKeyIgnoreCase("tot");
            String o_html_mg158__13 = a.getIgnoreCase(null);
            Map<String, String> dataset = a.dataset();
            int o_html_mg158__16 = dataset.size();
            String o_html_mg158__17 = dataset.get("name");
            String o_html_mg158__18 = a.get("tot");
            String o_html_mg158__19 = a.get("Tot");
            String o_html_mg158__20 = a.getIgnoreCase("tot");
            String o_html_mg158__21 = a.html();
            String o_html_mg158__22 = a.html();
            a.toString();
            boolean o_html_mg158__24 = a.hasKey(__DSPOT_key_4);
            org.junit.Assert.fail("html_mg158null22355 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void html_rv210_remove14450_mg41048() throws Exception {
        Attribute __DSPOT_attribute_8339 = new Attribute(",$nW>)&)Vq[#oFh!H]W!", "/dKA8SB)5!D(/:fPa|DS");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_rv210__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_rv210__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_rv210__3)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("Hello", "There");
        Attributes o_html_rv210__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv210__7)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv210__7)).hashCode())));
        int o_html_rv210__8 = a.size();
        boolean o_html_rv210__9 = a.hasKey("Tot");
        boolean o_html_rv210__10 = a.hasKey("Hello");
        boolean o_html_rv210__11 = a.hasKey("data-name");
        boolean o_html_rv210__12 = a.hasKey("tot");
        boolean o_html_rv210__13 = a.hasKeyIgnoreCase("tot");
        String o_html_rv210__14 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_rv210__14);
        Map<String, String> dataset = a.dataset();
        int o_html_rv210__17 = dataset.size();
        String o_html_rv210__18 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_rv210__18);
        String o_html_rv210__19 = a.get("tot");
        Assert.assertEquals("", o_html_rv210__19);
        String o_html_rv210__20 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_rv210__20);
        String o_html_rv210__21 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_rv210__21);
        String o_html_rv210__22 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv210__22);
        String o_html_rv210__23 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv210__23);
        __DSPOT_invoc_4.toString();
        Attributes o_html_rv210_remove14450_mg41048__59 = a.put(__DSPOT_attribute_8339);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" ,$nW>)&)Vq[#oFh!H]W!=\"/dKA8SB)5!D(/:fPa|DS\"", ((Attributes) (o_html_rv210_remove14450_mg41048__59)).toString());
        Assert.assertEquals(1370456620, ((int) (((Attributes) (o_html_rv210_remove14450_mg41048__59)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" ,$nW>)&)Vq[#oFh!H]W!=\"/dKA8SB)5!D(/:fPa|DS\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1370456620, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" ,$nW>)&)Vq[#oFh!H]W!=\"/dKA8SB)5!D(/:fPa|DS\"", ((Attributes) (o_html_rv210__3)).toString());
        Assert.assertEquals(1370456620, ((int) (((Attributes) (o_html_rv210__3)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" ,$nW>)&)Vq[#oFh!H]W!=\"/dKA8SB)5!D(/:fPa|DS\"", ((Attributes) (o_html_rv210__7)).toString());
        Assert.assertEquals(1370456620, ((int) (((Attributes) (o_html_rv210__7)).hashCode())));
        Assert.assertEquals("There", o_html_rv210__14);
        Assert.assertEquals("Jsoup", o_html_rv210__18);
        Assert.assertEquals("", o_html_rv210__19);
        Assert.assertEquals("a&p", o_html_rv210__20);
        Assert.assertEquals("a&p", o_html_rv210__21);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv210__22);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv210__23);
    }

    @Test(timeout = 10000)
    public void html_mg153_add11398null45546_failAssert40() throws Exception {
        try {
            Attributes a = new Attributes();
            Attributes o_html_mg153__3 = a.put("Tot", "a&p");
            Attributes o_html_mg153__4 = a.put("Hello", "There");
            Attributes o_html_mg153__5 = a.put("data-name", "Jsoup");
            int o_html_mg153__6 = a.size();
            boolean o_html_mg153__7 = a.hasKey("Tot");
            boolean o_html_mg153__8 = a.hasKey("Hello");
            boolean o_html_mg153__9 = a.hasKey("data-name");
            boolean o_html_mg153_add11398__24 = a.hasKey("tot");
            boolean o_html_mg153__10 = a.hasKey("tot");
            boolean o_html_mg153__11 = a.hasKeyIgnoreCase(null);
            String o_html_mg153__12 = a.getIgnoreCase("hEllo");
            Map<String, String> dataset = a.dataset();
            int o_html_mg153__15 = dataset.size();
            String o_html_mg153__16 = dataset.get("name");
            String o_html_mg153__17 = a.get("tot");
            String o_html_mg153__18 = a.get("Tot");
            String o_html_mg153__19 = a.getIgnoreCase("tot");
            String o_html_mg153__20 = a.html();
            String o_html_mg153__21 = a.html();
            a.toString();
            Attributes o_html_mg153__23 = a.clone();
            org.junit.Assert.fail("html_mg153_add11398null45546 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void html_rv210_remove14450null45656_failAssert38() throws Exception {
        try {
            Attributes a = new Attributes();
            Attributes o_html_rv210__3 = a.put(null, "a&p");
            Attributes __DSPOT_invoc_4 = a.put("Hello", "There");
            Attributes o_html_rv210__7 = a.put("data-name", "Jsoup");
            int o_html_rv210__8 = a.size();
            boolean o_html_rv210__9 = a.hasKey("Tot");
            boolean o_html_rv210__10 = a.hasKey("Hello");
            boolean o_html_rv210__11 = a.hasKey("data-name");
            boolean o_html_rv210__12 = a.hasKey("tot");
            boolean o_html_rv210__13 = a.hasKeyIgnoreCase("tot");
            String o_html_rv210__14 = a.getIgnoreCase("hEllo");
            Map<String, String> dataset = a.dataset();
            int o_html_rv210__17 = dataset.size();
            String o_html_rv210__18 = dataset.get("name");
            String o_html_rv210__19 = a.get("tot");
            String o_html_rv210__20 = a.get("Tot");
            String o_html_rv210__21 = a.getIgnoreCase("tot");
            String o_html_rv210__22 = a.html();
            String o_html_rv210__23 = a.html();
            __DSPOT_invoc_4.toString();
            org.junit.Assert.fail("html_rv210_remove14450null45656 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void html_rv170_mg19372litString30390() throws Exception {
        String __DSPOT_key_3531 = "?!Hw[L8wA.kWror-!.y!";
        Attributes __DSPOT_incoming_13 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_html_rv170__8 = a.put(":", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" :=\"There\"", ((Attributes) (o_html_rv170__8)).toString());
        Assert.assertEquals(-607266278, ((int) (((Attributes) (o_html_rv170__8)).hashCode())));
        Attributes o_html_rv170__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" :=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__9)).toString());
        Assert.assertEquals(-1294815224, ((int) (((Attributes) (o_html_rv170__9)).hashCode())));
        int o_html_rv170__10 = a.size();
        boolean o_html_rv170__11 = a.hasKey("Tot");
        boolean o_html_rv170__12 = a.hasKey("Hello");
        boolean o_html_rv170__13 = a.hasKey("data-name");
        boolean o_html_rv170__14 = a.hasKey("tot");
        boolean o_html_rv170__15 = a.hasKeyIgnoreCase("tot");
        String o_html_rv170__16 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("", o_html_rv170__16);
        Map<String, String> dataset = a.dataset();
        int o_html_rv170__19 = dataset.size();
        String o_html_rv170__20 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_rv170__20);
        String o_html_rv170__21 = a.get("tot");
        Assert.assertEquals("", o_html_rv170__21);
        String o_html_rv170__22 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_rv170__22);
        String o_html_rv170__23 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_rv170__23);
        String o_html_rv170__24 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" :=\"There\" data-name=\"Jsoup\"", o_html_rv170__24);
        String o_html_rv170__25 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" :=\"There\" data-name=\"Jsoup\"", o_html_rv170__25);
        a.toString();
        __DSPOT_invoc_3.addAll(__DSPOT_incoming_13);
        __DSPOT_incoming_13.removeIgnoreCase(__DSPOT_key_3531);
        Assert.assertEquals(" Tot=\"a&amp;p\" :=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1294815224, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" :=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__8)).toString());
        Assert.assertEquals(-1294815224, ((int) (((Attributes) (o_html_rv170__8)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" :=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__9)).toString());
        Assert.assertEquals(-1294815224, ((int) (((Attributes) (o_html_rv170__9)).hashCode())));
        Assert.assertEquals("", o_html_rv170__16);
        Assert.assertEquals("Jsoup", o_html_rv170__20);
        Assert.assertEquals("", o_html_rv170__21);
        Assert.assertEquals("a&p", o_html_rv170__22);
        Assert.assertEquals("a&p", o_html_rv170__23);
        Assert.assertEquals(" Tot=\"a&amp;p\" :=\"There\" data-name=\"Jsoup\"", o_html_rv170__24);
        Assert.assertEquals(" Tot=\"a&amp;p\" :=\"There\" data-name=\"Jsoup\"", o_html_rv170__25);
    }

    @Test(timeout = 10000)
    public void html_rv210_remove14451null45068_failAssert37() throws Exception {
        try {
            Attributes a = new Attributes();
            Attributes o_html_rv210__3 = a.put("Tot", "a&p");
            Attributes __DSPOT_invoc_4 = a.put("Hello", "There");
            Attributes o_html_rv210__7 = a.put(null, "Jsoup");
            int o_html_rv210__8 = a.size();
            boolean o_html_rv210__9 = a.hasKey("Tot");
            boolean o_html_rv210__10 = a.hasKey("Hello");
            boolean o_html_rv210__11 = a.hasKey("data-name");
            boolean o_html_rv210__12 = a.hasKey("tot");
            boolean o_html_rv210__13 = a.hasKeyIgnoreCase("tot");
            String o_html_rv210__14 = a.getIgnoreCase("hEllo");
            Map<String, String> dataset = a.dataset();
            int o_html_rv210__17 = dataset.size();
            String o_html_rv210__18 = dataset.get("name");
            String o_html_rv210__19 = a.get("tot");
            String o_html_rv210__20 = a.get("Tot");
            String o_html_rv210__21 = a.getIgnoreCase("tot");
            String o_html_rv210__22 = a.html();
            String o_html_rv210__23 = a.html();
            a.toString();
            org.junit.Assert.fail("html_rv210_remove14451null45068 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void html_mg157_mg15535_mg41841() throws Exception {
        String __DSPOT_key_8912 = "Yplb04eRGg<]-.](E.tx";
        String __DSPOT_key_759 = "L7IN%ooCYexSOl5@6Fg!";
        String __DSPOT_key_3 = "1yAAF?5P&+YTN/#yO[*W";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_mg157__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg157__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg157__4)).hashCode())));
        Attributes o_html_mg157__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_mg157__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_mg157__5)).hashCode())));
        Attributes o_html_mg157__6 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg157__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg157__6)).hashCode())));
        int o_html_mg157__7 = a.size();
        boolean o_html_mg157__8 = a.hasKey("Tot");
        boolean o_html_mg157__9 = a.hasKey("Hello");
        boolean o_html_mg157__10 = a.hasKey("data-name");
        boolean o_html_mg157__11 = a.hasKey("tot");
        boolean o_html_mg157__12 = a.hasKeyIgnoreCase("tot");
        String o_html_mg157__13 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_mg157__13);
        Map<String, String> dataset = a.dataset();
        int o_html_mg157__16 = dataset.size();
        String o_html_mg157__17 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_mg157__17);
        String o_html_mg157__18 = a.get("tot");
        Assert.assertEquals("", o_html_mg157__18);
        String o_html_mg157__19 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_mg157__19);
        String o_html_mg157__20 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_mg157__20);
        String o_html_mg157__21 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg157__21);
        String o_html_mg157__22 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg157__22);
        a.toString();
        String o_html_mg157__24 = a.getIgnoreCase(__DSPOT_key_3);
        Assert.assertEquals("", o_html_mg157__24);
        String o_html_mg157_mg15535__62 = o_html_mg157__5.get(__DSPOT_key_759);
        Assert.assertEquals("", o_html_mg157_mg15535__62);
        a.remove(__DSPOT_key_8912);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg157__4)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg157__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg157__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg157__5)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg157__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg157__6)).hashCode())));
        Assert.assertEquals("There", o_html_mg157__13);
        Assert.assertEquals("Jsoup", o_html_mg157__17);
        Assert.assertEquals("", o_html_mg157__18);
        Assert.assertEquals("a&p", o_html_mg157__19);
        Assert.assertEquals("a&p", o_html_mg157__20);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg157__21);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg157__22);
        Assert.assertEquals("", o_html_mg157__24);
        Assert.assertEquals("", o_html_mg157_mg15535__62);
    }

    @Test(timeout = 10000)
    public void html_mg157litString2142litString27275() throws Exception {
        String __DSPOT_key_3 = "1yAAF?5P&+YTN/#yO[*W";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_mg157__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg157__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg157__4)).hashCode())));
        Attributes o_html_mg157__5 = a.put("Hello", ":");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\"", ((Attributes) (o_html_mg157__5)).toString());
        Assert.assertEquals(-1652157672, ((int) (((Attributes) (o_html_mg157__5)).hashCode())));
        Attributes o_html_mg157__6 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg157__6)).toString());
        Assert.assertEquals(1955260678, ((int) (((Attributes) (o_html_mg157__6)).hashCode())));
        int o_html_mg157__7 = a.size();
        boolean o_html_mg157__8 = a.hasKey("Tot");
        boolean o_html_mg157__9 = a.hasKey("Hello");
        boolean o_html_mg157__10 = a.hasKey("data-name");
        boolean o_html_mg157__11 = a.hasKey("tot");
        boolean o_html_mg157__12 = a.hasKeyIgnoreCase("tot");
        String o_html_mg157__13 = a.getIgnoreCase("hEllo");
        Assert.assertEquals(":", o_html_mg157__13);
        Map<String, String> dataset = a.dataset();
        int o_html_mg157__16 = dataset.size();
        String o_html_mg157__17 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_mg157__17);
        String o_html_mg157__18 = a.get("%ot");
        Assert.assertEquals("", o_html_mg157__18);
        String o_html_mg157__19 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_mg157__19);
        String o_html_mg157__20 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_mg157__20);
        String o_html_mg157__21 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\" data-name=\"Jsoup\"", o_html_mg157__21);
        String o_html_mg157__22 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\" data-name=\"Jsoup\"", o_html_mg157__22);
        a.toString();
        String o_html_mg157__24 = a.getIgnoreCase(__DSPOT_key_3);
        Assert.assertEquals("", o_html_mg157__24);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1955260678, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg157__4)).toString());
        Assert.assertEquals(1955260678, ((int) (((Attributes) (o_html_mg157__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg157__5)).toString());
        Assert.assertEquals(1955260678, ((int) (((Attributes) (o_html_mg157__5)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg157__6)).toString());
        Assert.assertEquals(1955260678, ((int) (((Attributes) (o_html_mg157__6)).hashCode())));
        Assert.assertEquals(":", o_html_mg157__13);
        Assert.assertEquals("Jsoup", o_html_mg157__17);
        Assert.assertEquals("", o_html_mg157__18);
        Assert.assertEquals("a&p", o_html_mg157__19);
        Assert.assertEquals("a&p", o_html_mg157__20);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\" data-name=\"Jsoup\"", o_html_mg157__21);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\" data-name=\"Jsoup\"", o_html_mg157__22);
    }

    @Test(timeout = 10000)
    public void html_mg153_add11398_remove37018() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_mg153__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_mg153__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_mg153__3)).hashCode())));
        Attributes o_html_mg153__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_mg153__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_mg153__4)).hashCode())));
        Attributes o_html_mg153__5 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg153__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg153__5)).hashCode())));
        int o_html_mg153__6 = a.size();
        boolean o_html_mg153__7 = a.hasKey("Tot");
        boolean o_html_mg153__8 = a.hasKey("Hello");
        boolean o_html_mg153__9 = a.hasKey("data-name");
        boolean o_html_mg153_add11398__24 = a.hasKey("tot");
        boolean o_html_mg153__10 = a.hasKey("tot");
        boolean o_html_mg153__11 = a.hasKeyIgnoreCase("tot");
        String o_html_mg153__12 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_mg153__12);
        Map<String, String> dataset = a.dataset();
        int o_html_mg153__15 = dataset.size();
        String o_html_mg153__16 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_mg153__16);
        String o_html_mg153__17 = a.get("tot");
        Assert.assertEquals("", o_html_mg153__17);
        String o_html_mg153__18 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_mg153__18);
        String o_html_mg153__19 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_mg153__19);
        String o_html_mg153__20 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg153__20);
        String o_html_mg153__21 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg153__21);
        Attributes o_html_mg153__23 = a.clone();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg153__23)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_mg153__23)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-758045610, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg153__3)).toString());
        Assert.assertEquals(-758045610, ((int) (((Attributes) (o_html_mg153__3)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg153__4)).toString());
        Assert.assertEquals(-758045610, ((int) (((Attributes) (o_html_mg153__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_mg153__5)).toString());
        Assert.assertEquals(-758045610, ((int) (((Attributes) (o_html_mg153__5)).hashCode())));
        Assert.assertEquals("There", o_html_mg153__12);
        Assert.assertEquals("Jsoup", o_html_mg153__16);
        Assert.assertEquals("", o_html_mg153__17);
        Assert.assertEquals("a&p", o_html_mg153__18);
        Assert.assertEquals("a&p", o_html_mg153__19);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg153__20);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_mg153__21);
    }

    @Test(timeout = 10000)
    public void html_rv210_remove14450_mg41071() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_rv210__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_rv210__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_rv210__3)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("Hello", "There");
        Attributes o_html_rv210__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv210__7)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv210__7)).hashCode())));
        int o_html_rv210__8 = a.size();
        boolean o_html_rv210__9 = a.hasKey("Tot");
        boolean o_html_rv210__10 = a.hasKey("Hello");
        boolean o_html_rv210__11 = a.hasKey("data-name");
        boolean o_html_rv210__12 = a.hasKey("tot");
        boolean o_html_rv210__13 = a.hasKeyIgnoreCase("tot");
        String o_html_rv210__14 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_rv210__14);
        Map<String, String> dataset = a.dataset();
        int o_html_rv210__17 = dataset.size();
        String o_html_rv210__18 = dataset.get("name");
        Assert.assertEquals("Jsoup", o_html_rv210__18);
        String o_html_rv210__19 = a.get("tot");
        Assert.assertEquals("", o_html_rv210__19);
        String o_html_rv210__20 = a.get("Tot");
        Assert.assertEquals("a&p", o_html_rv210__20);
        String o_html_rv210__21 = a.getIgnoreCase("tot");
        Assert.assertEquals("a&p", o_html_rv210__21);
        String o_html_rv210__22 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv210__22);
        String o_html_rv210__23 = a.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv210__23);
        __DSPOT_invoc_4.toString();
        List<Attribute> o_html_rv210_remove14450_mg41071__57 = __DSPOT_invoc_4.asList();
        Assert.assertFalse(o_html_rv210_remove14450_mg41071__57.isEmpty());
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv210__3)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv210__3)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv210__7)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv210__7)).hashCode())));
        Assert.assertEquals("There", o_html_rv210__14);
        Assert.assertEquals("Jsoup", o_html_rv210__18);
        Assert.assertEquals("", o_html_rv210__19);
        Assert.assertEquals("a&p", o_html_rv210__20);
        Assert.assertEquals("a&p", o_html_rv210__21);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv210__22);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_html_rv210__23);
    }

    @Test(timeout = 10000)
    public void html_rv170_add13375null46008() throws Exception {
        Attributes __DSPOT_incoming_13 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_html_rv170_add13375__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_html_rv170_add13375__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_html_rv170_add13375__5)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_html_rv170__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_html_rv170__8)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_html_rv170__8)).hashCode())));
        Attributes o_html_rv170__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_html_rv170__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_html_rv170__9)).hashCode())));
        int o_html_rv170__10 = a.size();
        boolean o_html_rv170__11 = a.hasKey("Tot");
        boolean o_html_rv170__12 = a.hasKey("Hello");
        boolean o_html_rv170__13 = a.hasKey("data-name");
        boolean o_html_rv170__14 = a.hasKey("tot");
        boolean o_html_rv170__15 = a.hasKeyIgnoreCase("tot");
        String o_html_rv170__16 = a.getIgnoreCase("hEllo");
        Assert.assertEquals("There", o_html_rv170__16);
        Map<String, String> dataset = a.dataset();
        int o_html_rv170__19 = dataset.size();
        String o_html_rv170__20 = dataset.get(null);
        String o_html_rv170__21 = a.get("tot");
        String o_html_rv170__22 = a.get("Tot");
        String o_html_rv170__23 = a.getIgnoreCase("tot");
        String o_html_rv170__24 = a.html();
        String o_html_rv170__25 = a.html();
        a.toString();
        __DSPOT_invoc_3.addAll(__DSPOT_incoming_13);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable__3)).hashCode())));
        Attributes o_testIteratorRemovable__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable__4)).hashCode())));
        Attributes o_testIteratorRemovable__5 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable__5)).hashCode())));
        boolean o_testIteratorRemovable__6 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable__6);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable__13 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable__13)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getValue();
        int o_testIteratorRemovable__18 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable__18)));
        String o_testIteratorRemovable__19 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable__19);
        boolean o_testIteratorRemovable__20 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable__20);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable__3)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable__3)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable__4)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable__4)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable__5)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable__5)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable__6);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable__13)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable__18)));
        Assert.assertEquals("There", o_testIteratorRemovable__19);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovablenull157047() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovablenull157047__3 = a.put("Tot", null);
        Assert.assertEquals(" Tot", ((Attributes) (o_testIteratorRemovablenull157047__3)).toString());
        Assert.assertEquals(555415706, ((int) (((Attributes) (o_testIteratorRemovablenull157047__3)).hashCode())));
        Attributes o_testIteratorRemovablenull157047__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot Hello=\"There\"", ((Attributes) (o_testIteratorRemovablenull157047__4)).toString());
        Assert.assertEquals(142394285, ((int) (((Attributes) (o_testIteratorRemovablenull157047__4)).hashCode())));
        Attributes o_testIteratorRemovablenull157047__5 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovablenull157047__5)).toString());
        Assert.assertEquals(-545154661, ((int) (((Attributes) (o_testIteratorRemovablenull157047__5)).hashCode())));
        boolean o_testIteratorRemovablenull157047__6 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovablenull157047__6);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot", ((Attribute) (attr)).toString());
        Assert.assertEquals(2612711, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertNull(((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovablenull157047__13 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovablenull157047__13)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovablenull157047__18 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovablenull157047__18)));
        String o_testIteratorRemovablenull157047__19 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovablenull157047__19);
        boolean o_testIteratorRemovablenull157047__20 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovablenull157047__20);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovablenull157047__3)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovablenull157047__3)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovablenull157047__4)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovablenull157047__4)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovablenull157047__5)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovablenull157047__5)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovablenull157047__6);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovablenull157047__13)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovablenull157047__18)));
        Assert.assertEquals("There", o_testIteratorRemovablenull157047__19);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovablenull157050_failAssert184() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put("Tot", "a&p");
            a.put("Hello", "There");
            a.put(null, "Jsoup");
            a.hasKey("Tot");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.getKey();
            iterator.remove();
            a.size();
            attr = iterator.next();
            attr.getKey();
            attr.getValue();
            a.size();
            a.get("Hello");
            a.hasKey("Tot");
            org.junit.Assert.fail("testIteratorRemovablenull157050 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorRemovablenull157049() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovablenull157049__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovablenull157049__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovablenull157049__3)).hashCode())));
        Attributes o_testIteratorRemovablenull157049__4 = a.put("Hello", null);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello", ((Attributes) (o_testIteratorRemovablenull157049__4)).toString());
        Assert.assertEquals(-1652213410, ((int) (((Attributes) (o_testIteratorRemovablenull157049__4)).hashCode())));
        Attributes o_testIteratorRemovablenull157049__5 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovablenull157049__5)).toString());
        Assert.assertEquals(1955204940, ((int) (((Attributes) (o_testIteratorRemovablenull157049__5)).hashCode())));
        boolean o_testIteratorRemovablenull157049__6 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovablenull157049__6);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovablenull157049__13 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovablenull157049__13)));
        attr = iterator.next();
        Assert.assertEquals("Hello", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068146, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertNull(((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovablenull157049__18 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovablenull157049__18)));
        String o_testIteratorRemovablenull157049__19 = a.get("Hello");
        Assert.assertEquals("", o_testIteratorRemovablenull157049__19);
        boolean o_testIteratorRemovablenull157049__20 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovablenull157049__20);
        Assert.assertEquals(" Hello data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-906564921, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovablenull157049__3)).toString());
        Assert.assertEquals(-906564921, ((int) (((Attributes) (o_testIteratorRemovablenull157049__3)).hashCode())));
        Assert.assertEquals(" Hello data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovablenull157049__4)).toString());
        Assert.assertEquals(-906564921, ((int) (((Attributes) (o_testIteratorRemovablenull157049__4)).hashCode())));
        Assert.assertEquals(" Hello data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovablenull157049__5)).toString());
        Assert.assertEquals(-906564921, ((int) (((Attributes) (o_testIteratorRemovablenull157049__5)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovablenull157049__6);
        Assert.assertEquals("Hello", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068146, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertNull(((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovablenull157049__13)));
        Assert.assertEquals("Hello", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068146, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertNull(((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovablenull157049__18)));
        Assert.assertEquals("", o_testIteratorRemovablenull157049__19);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156988() throws Exception {
        Object __DSPOT_o_46608 = new Object();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156988__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv156988__8)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__8)).hashCode())));
        Attributes o_testIteratorRemovable_rv156988__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156988__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__9)).hashCode())));
        boolean o_testIteratorRemovable_rv156988__10 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_rv156988__10);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv156988__17 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv156988__17)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv156988__22 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv156988__22)));
        String o_testIteratorRemovable_rv156988__23 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv156988__23);
        boolean o_testIteratorRemovable_rv156988__24 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable_rv156988__24);
        boolean o_testIteratorRemovable_rv156988__25 = __DSPOT_invoc_3.equals(__DSPOT_o_46608);
        Assert.assertFalse(o_testIteratorRemovable_rv156988__25);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156988__8)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__8)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156988__9)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__9)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_rv156988__10);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv156988__17)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv156988__22)));
        Assert.assertEquals("There", o_testIteratorRemovable_rv156988__23);
        Assert.assertFalse(o_testIteratorRemovable_rv156988__24);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_mg156978() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_mg156978__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_mg156978__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_mg156978__3)).hashCode())));
        Attributes o_testIteratorRemovable_mg156978__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_mg156978__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_mg156978__4)).hashCode())));
        Attributes o_testIteratorRemovable_mg156978__5 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156978__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_mg156978__5)).hashCode())));
        boolean o_testIteratorRemovable_mg156978__6 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_mg156978__6);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_mg156978__13 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156978__13)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_mg156978__18 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156978__18)));
        String o_testIteratorRemovable_mg156978__19 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_mg156978__19);
        boolean o_testIteratorRemovable_mg156978__20 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable_mg156978__20);
        Attribute o_testIteratorRemovable_mg156978__21 = attr.clone();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (o_testIteratorRemovable_mg156978__21)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (o_testIteratorRemovable_mg156978__21)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (o_testIteratorRemovable_mg156978__21)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (o_testIteratorRemovable_mg156978__21)).getKey());
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156978__3)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156978__3)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156978__4)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156978__4)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156978__5)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156978__5)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_mg156978__6);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156978__13)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156978__18)));
        Assert.assertEquals("There", o_testIteratorRemovable_mg156978__19);
        Assert.assertFalse(o_testIteratorRemovable_mg156978__20);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovablelitString156898() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovablelitString156898__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovablelitString156898__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovablelitString156898__3)).hashCode())));
        Attributes o_testIteratorRemovablelitString156898__4 = a.put("Hello", "");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"\"", ((Attributes) (o_testIteratorRemovablelitString156898__4)).toString());
        Assert.assertEquals(-1652213410, ((int) (((Attributes) (o_testIteratorRemovablelitString156898__4)).hashCode())));
        Attributes o_testIteratorRemovablelitString156898__5 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovablelitString156898__5)).toString());
        Assert.assertEquals(1955204940, ((int) (((Attributes) (o_testIteratorRemovablelitString156898__5)).hashCode())));
        boolean o_testIteratorRemovablelitString156898__6 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovablelitString156898__6);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovablelitString156898__13 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovablelitString156898__13)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068146, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovablelitString156898__18 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovablelitString156898__18)));
        String o_testIteratorRemovablelitString156898__19 = a.get("Hello");
        Assert.assertEquals("", o_testIteratorRemovablelitString156898__19);
        boolean o_testIteratorRemovablelitString156898__20 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovablelitString156898__20);
        Assert.assertEquals(" Hello=\"\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-906564921, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovablelitString156898__3)).toString());
        Assert.assertEquals(-906564921, ((int) (((Attributes) (o_testIteratorRemovablelitString156898__3)).hashCode())));
        Assert.assertEquals(" Hello=\"\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovablelitString156898__4)).toString());
        Assert.assertEquals(-906564921, ((int) (((Attributes) (o_testIteratorRemovablelitString156898__4)).hashCode())));
        Assert.assertEquals(" Hello=\"\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovablelitString156898__5)).toString());
        Assert.assertEquals(-906564921, ((int) (((Attributes) (o_testIteratorRemovablelitString156898__5)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovablelitString156898__6);
        Assert.assertEquals("Hello=\"\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068146, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovablelitString156898__13)));
        Assert.assertEquals("Hello=\"\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068146, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovablelitString156898__18)));
        Assert.assertEquals("", o_testIteratorRemovablelitString156898__19);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_mg156966() throws Exception {
        String __DSPOT_key_46594 = "ahA4j9Y-fX2)EZ]^85%:";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_mg156966__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_mg156966__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_mg156966__4)).hashCode())));
        Attributes o_testIteratorRemovable_mg156966__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_mg156966__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_mg156966__5)).hashCode())));
        Attributes o_testIteratorRemovable_mg156966__6 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156966__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_mg156966__6)).hashCode())));
        boolean o_testIteratorRemovable_mg156966__7 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_mg156966__7);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_mg156966__14 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156966__14)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_mg156966__19 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156966__19)));
        String o_testIteratorRemovable_mg156966__20 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_mg156966__20);
        boolean o_testIteratorRemovable_mg156966__21 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable_mg156966__21);
        String o_testIteratorRemovable_mg156966__22 = a.getIgnoreCase(__DSPOT_key_46594);
        Assert.assertEquals("", o_testIteratorRemovable_mg156966__22);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156966__4)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156966__4)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156966__5)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156966__5)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156966__6)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156966__6)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_mg156966__7);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156966__14)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156966__19)));
        Assert.assertEquals("There", o_testIteratorRemovable_mg156966__20);
        Assert.assertFalse(o_testIteratorRemovable_mg156966__21);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovablenull157046_failAssert182() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put(null, "a&p");
            a.put("Hello", "There");
            a.put("data-name", "Jsoup");
            a.hasKey("Tot");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.getKey();
            iterator.remove();
            a.size();
            attr = iterator.next();
            attr.getKey();
            attr.getValue();
            a.size();
            a.get("Hello");
            a.hasKey("Tot");
            org.junit.Assert.fail("testIteratorRemovablenull157046 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_mg156964() throws Exception {
        Attributes __DSPOT_o_46592 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_mg156964__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_mg156964__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_mg156964__5)).hashCode())));
        Attributes o_testIteratorRemovable_mg156964__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_mg156964__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_mg156964__6)).hashCode())));
        Attributes o_testIteratorRemovable_mg156964__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156964__7)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_mg156964__7)).hashCode())));
        boolean o_testIteratorRemovable_mg156964__8 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_mg156964__8);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_mg156964__15 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156964__15)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_mg156964__20 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156964__20)));
        String o_testIteratorRemovable_mg156964__21 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_mg156964__21);
        boolean o_testIteratorRemovable_mg156964__22 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable_mg156964__22);
        boolean o_testIteratorRemovable_mg156964__23 = a.equals(__DSPOT_o_46592);
        Assert.assertFalse(o_testIteratorRemovable_mg156964__23);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156964__5)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156964__5)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156964__6)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156964__6)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156964__7)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156964__7)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_mg156964__8);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156964__15)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156964__20)));
        Assert.assertEquals("There", o_testIteratorRemovable_mg156964__21);
        Assert.assertFalse(o_testIteratorRemovable_mg156964__22);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156986() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156986__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv156986__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv156986__6)).hashCode())));
        Attributes o_testIteratorRemovable_rv156986__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156986__7)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156986__7)).hashCode())));
        boolean o_testIteratorRemovable_rv156986__8 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_rv156986__8);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv156986__15 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv156986__15)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv156986__20 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv156986__20)));
        String o_testIteratorRemovable_rv156986__21 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv156986__21);
        boolean o_testIteratorRemovable_rv156986__22 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable_rv156986__22);
        Attributes o_testIteratorRemovable_rv156986__23 = __DSPOT_invoc_3.clone();
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156986__23)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv156986__23)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(934361667, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156986__6)).toString());
        Assert.assertEquals(934361667, ((int) (((Attributes) (o_testIteratorRemovable_rv156986__6)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156986__7)).toString());
        Assert.assertEquals(934361667, ((int) (((Attributes) (o_testIteratorRemovable_rv156986__7)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_rv156986__8);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv156986__15)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv156986__20)));
        Assert.assertEquals("There", o_testIteratorRemovable_rv156986__21);
        Assert.assertFalse(o_testIteratorRemovable_rv156986__22);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_mg156974() throws Exception {
        Attribute __DSPOT_attribute_46601 = new Attribute("k7/<i_q<0O<X7>XjaNMY", "FKXkVKko1|l_xBKt:#-R", new Attributes());
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_mg156974__6 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_mg156974__6)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_mg156974__6)).hashCode())));
        Attributes o_testIteratorRemovable_mg156974__7 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_mg156974__7)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_mg156974__7)).hashCode())));
        Attributes o_testIteratorRemovable_mg156974__8 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156974__8)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_mg156974__8)).hashCode())));
        boolean o_testIteratorRemovable_mg156974__9 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_mg156974__9);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_mg156974__16 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156974__16)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_mg156974__21 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156974__21)));
        String o_testIteratorRemovable_mg156974__22 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_mg156974__22);
        boolean o_testIteratorRemovable_mg156974__23 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable_mg156974__23);
        Attributes o_testIteratorRemovable_mg156974__24 = a.put(__DSPOT_attribute_46601);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" k7/<i_q<0O<X7>XjaNMY=\"FKXkVKko1|l_xBKt:#-R\"", ((Attributes) (o_testIteratorRemovable_mg156974__24)).toString());
        Assert.assertEquals(-995065029, ((int) (((Attributes) (o_testIteratorRemovable_mg156974__24)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" k7/<i_q<0O<X7>XjaNMY=\"FKXkVKko1|l_xBKt:#-R\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-995065029, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" k7/<i_q<0O<X7>XjaNMY=\"FKXkVKko1|l_xBKt:#-R\"", ((Attributes) (o_testIteratorRemovable_mg156974__6)).toString());
        Assert.assertEquals(-995065029, ((int) (((Attributes) (o_testIteratorRemovable_mg156974__6)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" k7/<i_q<0O<X7>XjaNMY=\"FKXkVKko1|l_xBKt:#-R\"", ((Attributes) (o_testIteratorRemovable_mg156974__7)).toString());
        Assert.assertEquals(-995065029, ((int) (((Attributes) (o_testIteratorRemovable_mg156974__7)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" k7/<i_q<0O<X7>XjaNMY=\"FKXkVKko1|l_xBKt:#-R\"", ((Attributes) (o_testIteratorRemovable_mg156974__8)).toString());
        Assert.assertEquals(-995065029, ((int) (((Attributes) (o_testIteratorRemovable_mg156974__8)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_mg156974__9);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156974__16)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156974__21)));
        Assert.assertEquals("There", o_testIteratorRemovable_mg156974__22);
        Assert.assertFalse(o_testIteratorRemovable_mg156974__23);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_mg156973() throws Exception {
        String __DSPOT_value_46600 = "ag/5hFeTY1*M]|^Z2<sv";
        String __DSPOT_key_46599 = "f2l[UHskw;Zy -$&/4VR";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_mg156973__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_mg156973__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_mg156973__5)).hashCode())));
        Attributes o_testIteratorRemovable_mg156973__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_mg156973__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_mg156973__6)).hashCode())));
        Attributes o_testIteratorRemovable_mg156973__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156973__7)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_mg156973__7)).hashCode())));
        boolean o_testIteratorRemovable_mg156973__8 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_mg156973__8);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_mg156973__15 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156973__15)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_mg156973__20 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156973__20)));
        String o_testIteratorRemovable_mg156973__21 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_mg156973__21);
        boolean o_testIteratorRemovable_mg156973__22 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable_mg156973__22);
        Attributes o_testIteratorRemovable_mg156973__23 = a.put(__DSPOT_key_46599, __DSPOT_value_46600);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" f2l[UHskw;Zy -$&/4VR=\"ag/5hFeTY1*M]|^Z2<sv\"", ((Attributes) (o_testIteratorRemovable_mg156973__23)).toString());
        Assert.assertEquals(714927137, ((int) (((Attributes) (o_testIteratorRemovable_mg156973__23)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" f2l[UHskw;Zy -$&/4VR=\"ag/5hFeTY1*M]|^Z2<sv\"", ((Attributes) (a)).toString());
        Assert.assertEquals(714927137, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" f2l[UHskw;Zy -$&/4VR=\"ag/5hFeTY1*M]|^Z2<sv\"", ((Attributes) (o_testIteratorRemovable_mg156973__5)).toString());
        Assert.assertEquals(714927137, ((int) (((Attributes) (o_testIteratorRemovable_mg156973__5)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" f2l[UHskw;Zy -$&/4VR=\"ag/5hFeTY1*M]|^Z2<sv\"", ((Attributes) (o_testIteratorRemovable_mg156973__6)).toString());
        Assert.assertEquals(714927137, ((int) (((Attributes) (o_testIteratorRemovable_mg156973__6)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" f2l[UHskw;Zy -$&/4VR=\"ag/5hFeTY1*M]|^Z2<sv\"", ((Attributes) (o_testIteratorRemovable_mg156973__7)).toString());
        Assert.assertEquals(714927137, ((int) (((Attributes) (o_testIteratorRemovable_mg156973__7)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_mg156973__8);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156973__15)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156973__20)));
        Assert.assertEquals("There", o_testIteratorRemovable_mg156973__21);
        Assert.assertFalse(o_testIteratorRemovable_mg156973__22);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_mg156972() throws Exception {
        boolean __DSPOT_value_46598 = false;
        String __DSPOT_key_46597 = "w;/4+Wy5]Ifz}x7o+Gng";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_mg156972__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_mg156972__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_mg156972__5)).hashCode())));
        Attributes o_testIteratorRemovable_mg156972__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_mg156972__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_mg156972__6)).hashCode())));
        Attributes o_testIteratorRemovable_mg156972__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156972__7)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_mg156972__7)).hashCode())));
        boolean o_testIteratorRemovable_mg156972__8 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_mg156972__8);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_mg156972__15 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156972__15)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_mg156972__20 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156972__20)));
        String o_testIteratorRemovable_mg156972__21 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_mg156972__21);
        boolean o_testIteratorRemovable_mg156972__22 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable_mg156972__22);
        Attributes o_testIteratorRemovable_mg156972__23 = a.put(__DSPOT_key_46597, __DSPOT_value_46598);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156972__23)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156972__23)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156972__5)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156972__5)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156972__6)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156972__6)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156972__7)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156972__7)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_mg156972__8);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156972__15)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156972__20)));
        Assert.assertEquals("There", o_testIteratorRemovable_mg156972__21);
        Assert.assertFalse(o_testIteratorRemovable_mg156972__22);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv157006() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_rv157006__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_rv157006__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_rv157006__3)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("Hello", "There");
        Attributes o_testIteratorRemovable_rv157006__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv157006__7)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv157006__7)).hashCode())));
        boolean o_testIteratorRemovable_rv157006__8 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_rv157006__8);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv157006__15 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv157006__15)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv157006__20 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv157006__20)));
        String o_testIteratorRemovable_rv157006__21 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv157006__21);
        boolean o_testIteratorRemovable_rv157006__22 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable_rv157006__22);
        List<Attribute> o_testIteratorRemovable_rv157006__23 = __DSPOT_invoc_4.asList();
        Assert.assertFalse(o_testIteratorRemovable_rv157006__23.isEmpty());
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv157006__3)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv157006__3)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv157006__7)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv157006__7)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_rv157006__8);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv157006__15)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv157006__20)));
        Assert.assertEquals("There", o_testIteratorRemovable_rv157006__21);
        Assert.assertFalse(o_testIteratorRemovable_rv157006__22);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovablelitString156899() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovablelitString156899__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovablelitString156899__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovablelitString156899__3)).hashCode())));
        Attributes o_testIteratorRemovablelitString156899__4 = a.put("Hello", "\n");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"\n\"", ((Attributes) (o_testIteratorRemovablelitString156899__4)).toString());
        Assert.assertEquals(-1652203800, ((int) (((Attributes) (o_testIteratorRemovablelitString156899__4)).hashCode())));
        Attributes o_testIteratorRemovablelitString156899__5 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"\n\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovablelitString156899__5)).toString());
        Assert.assertEquals(1955214550, ((int) (((Attributes) (o_testIteratorRemovablelitString156899__5)).hashCode())));
        boolean o_testIteratorRemovablelitString156899__6 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovablelitString156899__6);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovablelitString156899__13 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovablelitString156899__13)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"\n\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068136, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("\n", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovablelitString156899__18 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovablelitString156899__18)));
        String o_testIteratorRemovablelitString156899__19 = a.get("Hello");
        Assert.assertEquals("\n", o_testIteratorRemovablelitString156899__19);
        boolean o_testIteratorRemovablelitString156899__20 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovablelitString156899__20);
        Assert.assertEquals(" Hello=\"\n\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-906267011, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"\n\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovablelitString156899__3)).toString());
        Assert.assertEquals(-906267011, ((int) (((Attributes) (o_testIteratorRemovablelitString156899__3)).hashCode())));
        Assert.assertEquals(" Hello=\"\n\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovablelitString156899__4)).toString());
        Assert.assertEquals(-906267011, ((int) (((Attributes) (o_testIteratorRemovablelitString156899__4)).hashCode())));
        Assert.assertEquals(" Hello=\"\n\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovablelitString156899__5)).toString());
        Assert.assertEquals(-906267011, ((int) (((Attributes) (o_testIteratorRemovablelitString156899__5)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovablelitString156899__6);
        Assert.assertEquals("Hello=\"\n\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068136, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("\n", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovablelitString156899__13)));
        Assert.assertEquals("Hello=\"\n\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068136, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("\n", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovablelitString156899__18)));
        Assert.assertEquals("\n", o_testIteratorRemovablelitString156899__19);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_mg156971() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_mg156971__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_mg156971__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_mg156971__3)).hashCode())));
        Attributes o_testIteratorRemovable_mg156971__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_mg156971__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_mg156971__4)).hashCode())));
        Attributes o_testIteratorRemovable_mg156971__5 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156971__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_mg156971__5)).hashCode())));
        boolean o_testIteratorRemovable_mg156971__6 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_mg156971__6);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_mg156971__13 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156971__13)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_mg156971__18 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156971__18)));
        String o_testIteratorRemovable_mg156971__19 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_mg156971__19);
        boolean o_testIteratorRemovable_mg156971__20 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable_mg156971__20);
        a.normalize();
        Assert.assertEquals(" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1732415965, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156971__3)).toString());
        Assert.assertEquals(-1732415965, ((int) (((Attributes) (o_testIteratorRemovable_mg156971__3)).hashCode())));
        Assert.assertEquals(" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156971__4)).toString());
        Assert.assertEquals(-1732415965, ((int) (((Attributes) (o_testIteratorRemovable_mg156971__4)).hashCode())));
        Assert.assertEquals(" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156971__5)).toString());
        Assert.assertEquals(-1732415965, ((int) (((Attributes) (o_testIteratorRemovable_mg156971__5)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_mg156971__6);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156971__13)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156971__18)));
        Assert.assertEquals("There", o_testIteratorRemovable_mg156971__19);
        Assert.assertFalse(o_testIteratorRemovable_mg156971__20);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_mg156982() throws Exception {
        String __DSPOT_val_46606 = ":(V(R`UNo2W4f[fb2xN/";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_mg156982__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_mg156982__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_mg156982__4)).hashCode())));
        Attributes o_testIteratorRemovable_mg156982__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_mg156982__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_mg156982__5)).hashCode())));
        Attributes o_testIteratorRemovable_mg156982__6 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156982__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_mg156982__6)).hashCode())));
        boolean o_testIteratorRemovable_mg156982__7 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_mg156982__7);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_mg156982__14 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156982__14)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_mg156982__19 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156982__19)));
        String o_testIteratorRemovable_mg156982__20 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_mg156982__20);
        boolean o_testIteratorRemovable_mg156982__21 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable_mg156982__21);
        String o_testIteratorRemovable_mg156982__22 = attr.setValue(__DSPOT_val_46606);
        Assert.assertEquals("There", o_testIteratorRemovable_mg156982__22);
        Assert.assertEquals(" Hello=\":(V(R`UNo2W4f[fb2xN/\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-37360824, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\":(V(R`UNo2W4f[fb2xN/\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156982__4)).toString());
        Assert.assertEquals(-37360824, ((int) (((Attributes) (o_testIteratorRemovable_mg156982__4)).hashCode())));
        Assert.assertEquals(" Hello=\":(V(R`UNo2W4f[fb2xN/\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156982__5)).toString());
        Assert.assertEquals(-37360824, ((int) (((Attributes) (o_testIteratorRemovable_mg156982__5)).hashCode())));
        Assert.assertEquals(" Hello=\":(V(R`UNo2W4f[fb2xN/\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156982__6)).toString());
        Assert.assertEquals(-37360824, ((int) (((Attributes) (o_testIteratorRemovable_mg156982__6)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_mg156982__7);
        Assert.assertEquals("Hello=\":(V(R`UNo2W4f[fb2xN/\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-777083731, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals(":(V(R`UNo2W4f[fb2xN/", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156982__14)));
        Assert.assertEquals("Hello=\":(V(R`UNo2W4f[fb2xN/\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-777083731, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals(":(V(R`UNo2W4f[fb2xN/", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156982__19)));
        Assert.assertEquals("There", o_testIteratorRemovable_mg156982__20);
        Assert.assertFalse(o_testIteratorRemovable_mg156982__21);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_remove156959() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_remove156959__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_remove156959__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_remove156959__3)).hashCode())));
        Attributes o_testIteratorRemovable_remove156959__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_remove156959__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_remove156959__4)).hashCode())));
        Attributes o_testIteratorRemovable_remove156959__5 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_remove156959__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_remove156959__5)).hashCode())));
        boolean o_testIteratorRemovable_remove156959__6 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_remove156959__6);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        int o_testIteratorRemovable_remove156959__12 = a.size();
        Assert.assertEquals(3, ((int) (o_testIteratorRemovable_remove156959__12)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_remove156959__17 = a.size();
        Assert.assertEquals(3, ((int) (o_testIteratorRemovable_remove156959__17)));
        String o_testIteratorRemovable_remove156959__18 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_remove156959__18);
        boolean o_testIteratorRemovable_remove156959__19 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_remove156959__19);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_remove156959__3)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_remove156959__3)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_remove156959__4)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_remove156959__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_remove156959__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_remove156959__5)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_remove156959__6);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(3, ((int) (o_testIteratorRemovable_remove156959__12)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(3, ((int) (o_testIteratorRemovable_remove156959__17)));
        Assert.assertEquals("There", o_testIteratorRemovable_remove156959__18);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv157040() throws Exception {
        String __DSPOT_value_46642 = "|PHPSlk.t-VQ[X >_Nt!";
        String __DSPOT_key_46641 = "GIn().o`?,43>3]i#b8,";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_rv157040__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_rv157040__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_rv157040__5)).hashCode())));
        Attributes o_testIteratorRemovable_rv157040__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv157040__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv157040__6)).hashCode())));
        Attributes __DSPOT_invoc_5 = a.put("data-name", "Jsoup");
        boolean o_testIteratorRemovable_rv157040__10 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_rv157040__10);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv157040__17 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv157040__17)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv157040__22 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv157040__22)));
        String o_testIteratorRemovable_rv157040__23 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv157040__23);
        boolean o_testIteratorRemovable_rv157040__24 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable_rv157040__24);
        Attributes o_testIteratorRemovable_rv157040__25 = __DSPOT_invoc_5.put(__DSPOT_key_46641, __DSPOT_value_46642);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" GIn().o`?,43>3]i#b8,=\"|PHPSlk.t-VQ[X >_Nt!\"", ((Attributes) (o_testIteratorRemovable_rv157040__25)).toString());
        Assert.assertEquals(-1211666861, ((int) (((Attributes) (o_testIteratorRemovable_rv157040__25)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" GIn().o`?,43>3]i#b8,=\"|PHPSlk.t-VQ[X >_Nt!\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1211666861, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" GIn().o`?,43>3]i#b8,=\"|PHPSlk.t-VQ[X >_Nt!\"", ((Attributes) (o_testIteratorRemovable_rv157040__5)).toString());
        Assert.assertEquals(-1211666861, ((int) (((Attributes) (o_testIteratorRemovable_rv157040__5)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" GIn().o`?,43>3]i#b8,=\"|PHPSlk.t-VQ[X >_Nt!\"", ((Attributes) (o_testIteratorRemovable_rv157040__6)).toString());
        Assert.assertEquals(-1211666861, ((int) (((Attributes) (o_testIteratorRemovable_rv157040__6)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_rv157040__10);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv157040__17)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv157040__22)));
        Assert.assertEquals("There", o_testIteratorRemovable_rv157040__23);
        Assert.assertFalse(o_testIteratorRemovable_rv157040__24);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_add156943() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_add156943__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_add156943__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_add156943__3)).hashCode())));
        Attributes o_testIteratorRemovable_add156943__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_add156943__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_add156943__4)).hashCode())));
        Attributes o_testIteratorRemovable_add156943__5 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_add156943__5)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_add156943__5)).hashCode())));
        Attributes o_testIteratorRemovable_add156943__6 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_add156943__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_add156943__6)).hashCode())));
        boolean o_testIteratorRemovable_add156943__7 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_add156943__7);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_add156943__14 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_add156943__14)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_add156943__19 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_add156943__19)));
        String o_testIteratorRemovable_add156943__20 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_add156943__20);
        boolean o_testIteratorRemovable_add156943__21 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable_add156943__21);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_add156943__3)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_add156943__3)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_add156943__4)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_add156943__4)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_add156943__5)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_add156943__5)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_add156943__6)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_add156943__6)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_add156943__7);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_add156943__14)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_add156943__19)));
        Assert.assertEquals("There", o_testIteratorRemovable_add156943__20);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv157043() throws Exception {
        String __DSPOT_key_46645 = "UwGi]0^<It[6j6[ H[4!";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_rv157043__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_rv157043__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_rv157043__4)).hashCode())));
        Attributes o_testIteratorRemovable_rv157043__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv157043__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv157043__5)).hashCode())));
        Attributes __DSPOT_invoc_5 = a.put("data-name", "Jsoup");
        boolean o_testIteratorRemovable_rv157043__9 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_rv157043__9);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv157043__16 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv157043__16)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv157043__21 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv157043__21)));
        String o_testIteratorRemovable_rv157043__22 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv157043__22);
        boolean o_testIteratorRemovable_rv157043__23 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable_rv157043__23);
        __DSPOT_invoc_5.removeIgnoreCase(__DSPOT_key_46645);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv157043__4)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv157043__4)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv157043__5)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv157043__5)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_rv157043__9);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv157043__16)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv157043__21)));
        Assert.assertEquals("There", o_testIteratorRemovable_rv157043__22);
        Assert.assertFalse(o_testIteratorRemovable_rv157043__23);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_mg156968() throws Exception {
        String __DSPOT_key_46596 = "^1dWI^BJH.rD{vPULaEo";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_mg156968__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_mg156968__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_mg156968__4)).hashCode())));
        Attributes o_testIteratorRemovable_mg156968__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_mg156968__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_mg156968__5)).hashCode())));
        Attributes o_testIteratorRemovable_mg156968__6 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156968__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_mg156968__6)).hashCode())));
        boolean o_testIteratorRemovable_mg156968__7 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_mg156968__7);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_mg156968__14 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156968__14)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_mg156968__19 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156968__19)));
        String o_testIteratorRemovable_mg156968__20 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_mg156968__20);
        boolean o_testIteratorRemovable_mg156968__21 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable_mg156968__21);
        boolean o_testIteratorRemovable_mg156968__22 = a.hasKeyIgnoreCase(__DSPOT_key_46596);
        Assert.assertFalse(o_testIteratorRemovable_mg156968__22);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156968__4)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156968__4)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156968__5)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156968__5)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156968__6)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156968__6)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_mg156968__7);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156968__14)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156968__19)));
        Assert.assertEquals("There", o_testIteratorRemovable_mg156968__20);
        Assert.assertFalse(o_testIteratorRemovable_mg156968__21);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv157042() throws Exception {
        String __DSPOT_key_46644 = "EQbTyHgU]U`[&2@zv`ww";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_rv157042__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_rv157042__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_rv157042__4)).hashCode())));
        Attributes o_testIteratorRemovable_rv157042__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv157042__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv157042__5)).hashCode())));
        Attributes __DSPOT_invoc_5 = a.put("data-name", "Jsoup");
        boolean o_testIteratorRemovable_rv157042__9 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_rv157042__9);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv157042__16 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv157042__16)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv157042__21 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv157042__21)));
        String o_testIteratorRemovable_rv157042__22 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv157042__22);
        boolean o_testIteratorRemovable_rv157042__23 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable_rv157042__23);
        __DSPOT_invoc_5.remove(__DSPOT_key_46644);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv157042__4)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv157042__4)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv157042__5)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv157042__5)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_rv157042__9);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv157042__16)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_rv157042__21)));
        Assert.assertEquals("There", o_testIteratorRemovable_rv157042__22);
        Assert.assertFalse(o_testIteratorRemovable_rv157042__23);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_mg156979() throws Exception {
        Attribute __DSPOT_o_46604 = new Attribute("iu!&o-G2:7pd=u]%w;se", "4j[p7x!yq)[!63p3L8]W", new Attributes());
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_mg156979__6 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_mg156979__6)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_mg156979__6)).hashCode())));
        Attributes o_testIteratorRemovable_mg156979__7 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_mg156979__7)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_mg156979__7)).hashCode())));
        Attributes o_testIteratorRemovable_mg156979__8 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156979__8)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_mg156979__8)).hashCode())));
        boolean o_testIteratorRemovable_mg156979__9 = a.hasKey("Tot");
        Assert.assertTrue(o_testIteratorRemovable_mg156979__9);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_mg156979__16 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156979__16)));
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_mg156979__21 = a.size();
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156979__21)));
        String o_testIteratorRemovable_mg156979__22 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_mg156979__22);
        boolean o_testIteratorRemovable_mg156979__23 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorRemovable_mg156979__23);
        boolean o_testIteratorRemovable_mg156979__24 = attr.equals(__DSPOT_o_46604);
        Assert.assertFalse(o_testIteratorRemovable_mg156979__24);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156979__6)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156979__6)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156979__7)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156979__7)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_mg156979__8)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_mg156979__8)).hashCode())));
        Assert.assertTrue(o_testIteratorRemovable_mg156979__9);
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156979__16)));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(2, ((int) (o_testIteratorRemovable_mg156979__21)));
        Assert.assertEquals("There", o_testIteratorRemovable_mg156979__22);
        Assert.assertFalse(o_testIteratorRemovable_mg156979__23);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv157042_mg173726() throws Exception {
        String __DSPOT_key_46644 = "EQbTyHgU]U`[&2@zv`ww";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_rv157042__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_rv157042__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_rv157042__4)).hashCode())));
        Attributes o_testIteratorRemovable_rv157042__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv157042__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv157042__5)).hashCode())));
        Attributes __DSPOT_invoc_5 = a.put("data-name", "Jsoup");
        boolean o_testIteratorRemovable_rv157042__9 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv157042__16 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv157042__21 = a.size();
        String o_testIteratorRemovable_rv157042__22 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv157042__22);
        boolean o_testIteratorRemovable_rv157042__23 = a.hasKey("Tot");
        __DSPOT_invoc_5.remove(__DSPOT_key_46644);
        Attributes o_testIteratorRemovable_rv157042_mg173726__39 = __DSPOT_invoc_5.clone();
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv157042_mg173726__39)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv157042_mg173726__39)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(934361667, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv157042__4)).toString());
        Assert.assertEquals(934361667, ((int) (((Attributes) (o_testIteratorRemovable_rv157042__4)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv157042__5)).toString());
        Assert.assertEquals(934361667, ((int) (((Attributes) (o_testIteratorRemovable_rv157042__5)).hashCode())));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorRemovable_rv157042__22);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156993_mg170306() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156993__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv156993__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv156993__6)).hashCode())));
        Attributes o_testIteratorRemovable_rv156993__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156993__7)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156993__7)).hashCode())));
        boolean o_testIteratorRemovable_rv156993__8 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv156993__15 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv156993__20 = a.size();
        String o_testIteratorRemovable_rv156993__21 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv156993__21);
        boolean o_testIteratorRemovable_rv156993__22 = a.hasKey("Tot");
        __DSPOT_invoc_3.hashCode();
        o_testIteratorRemovable_rv156993__6.normalize();
        Assert.assertEquals(" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1732415965, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156993__6)).toString());
        Assert.assertEquals(-1732415965, ((int) (((Attributes) (o_testIteratorRemovable_rv156993__6)).hashCode())));
        Assert.assertEquals(" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156993__7)).toString());
        Assert.assertEquals(-1732415965, ((int) (((Attributes) (o_testIteratorRemovable_rv156993__7)).hashCode())));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorRemovable_rv156993__21);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156999_mg170579() throws Exception {
        boolean __DSPOT_value_48254 = true;
        String __DSPOT_key_48253 = "sRt-&P^Q+SszWiGZ{$F$";
        Attribute __DSPOT_attribute_46617 = new Attribute("v|BfIq$vf&v|$s526aYI", ":c5J,Eu47NAzlbJ_K1V.");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156999__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv156999__8)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__8)).hashCode())));
        Attributes o_testIteratorRemovable_rv156999__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156999__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__9)).hashCode())));
        boolean o_testIteratorRemovable_rv156999__10 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv156999__17 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv156999__22 = a.size();
        String o_testIteratorRemovable_rv156999__23 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv156999__23);
        boolean o_testIteratorRemovable_rv156999__24 = a.hasKey("Tot");
        Attributes o_testIteratorRemovable_rv156999__25 = __DSPOT_invoc_3.put(__DSPOT_attribute_46617);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__25)).toString());
        Assert.assertEquals(1633411846, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__25)).hashCode())));
        Attributes o_testIteratorRemovable_rv156999_mg170579__44 = o_testIteratorRemovable_rv156999__9.put(__DSPOT_key_48253, __DSPOT_value_48254);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\" sRt-&P^Q+SszWiGZ{$F$", ((Attributes) (o_testIteratorRemovable_rv156999_mg170579__44)).toString());
        Assert.assertEquals(243618871, ((int) (((Attributes) (o_testIteratorRemovable_rv156999_mg170579__44)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\" sRt-&P^Q+SszWiGZ{$F$", ((Attributes) (a)).toString());
        Assert.assertEquals(243618871, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\" sRt-&P^Q+SszWiGZ{$F$", ((Attributes) (o_testIteratorRemovable_rv156999__8)).toString());
        Assert.assertEquals(243618871, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__8)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\" sRt-&P^Q+SszWiGZ{$F$", ((Attributes) (o_testIteratorRemovable_rv156999__9)).toString());
        Assert.assertEquals(243618871, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__9)).hashCode())));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorRemovable_rv156999__23);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\" sRt-&P^Q+SszWiGZ{$F$", ((Attributes) (o_testIteratorRemovable_rv156999__25)).toString());
        Assert.assertEquals(243618871, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__25)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorRemovablenull157052_failAssert185_rv176225() throws Exception {
        try {
            String __DSPOT_key_52254 = "K?F|=5SzJ1+^t+p!C`[V";
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes __DSPOT_invoc_5 = a.put("Tot", "a&p");
            Attributes o_testIteratorRemovablenull157052_failAssert185_rv176225__9 = a.put("Hello", "There");
            Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovablenull157052_failAssert185_rv176225__9)).toString());
            Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovablenull157052_failAssert185_rv176225__9)).hashCode())));
            Attributes o_testIteratorRemovablenull157052_failAssert185_rv176225__10 = a.put("data-name", "Jsoup");
            Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovablenull157052_failAssert185_rv176225__10)).toString());
            Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovablenull157052_failAssert185_rv176225__10)).hashCode())));
            a.hasKey(null);
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.getKey();
            iterator.remove();
            a.size();
            attr = iterator.next();
            attr.getKey();
            attr.getValue();
            a.size();
            a.get("Hello");
            a.hasKey("Tot");
            org.junit.Assert.fail("testIteratorRemovablenull157052 should have thrown IllegalArgumentException");
            __DSPOT_invoc_5.removeIgnoreCase(__DSPOT_key_52254);
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156988_add164542() throws Exception {
        Object __DSPOT_o_46608 = new Object();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156988__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv156988__8)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__8)).hashCode())));
        Attributes o_testIteratorRemovable_rv156988__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156988__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__9)).hashCode())));
        boolean o_testIteratorRemovable_rv156988__10 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv156988__17 = a.size();
        Attribute o_testIteratorRemovable_rv156988_add164542__26 = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (o_testIteratorRemovable_rv156988_add164542__26)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (o_testIteratorRemovable_rv156988_add164542__26)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (o_testIteratorRemovable_rv156988_add164542__26)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (o_testIteratorRemovable_rv156988_add164542__26)).getKey());
        attr = iterator.next();
        Assert.assertEquals("data-name=\"Jsoup\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(254915635, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Jsoup", ((Attribute) (attr)).getValue());
        Assert.assertEquals("data-name", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv156988__22 = a.size();
        String o_testIteratorRemovable_rv156988__23 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv156988__23);
        boolean o_testIteratorRemovable_rv156988__24 = a.hasKey("Tot");
        boolean o_testIteratorRemovable_rv156988__25 = __DSPOT_invoc_3.equals(__DSPOT_o_46608);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156988__8)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__8)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156988__9)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__9)).hashCode())));
        Assert.assertEquals("data-name=\"Jsoup\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(254915635, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Jsoup", ((Attribute) (attr)).getValue());
        Assert.assertEquals("data-name", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (o_testIteratorRemovable_rv156988_add164542__26)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (o_testIteratorRemovable_rv156988_add164542__26)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (o_testIteratorRemovable_rv156988_add164542__26)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (o_testIteratorRemovable_rv156988_add164542__26)).getKey());
        Assert.assertEquals("data-name=\"Jsoup\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(254915635, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Jsoup", ((Attribute) (attr)).getValue());
        Assert.assertEquals("data-name", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorRemovable_rv156988__23);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv157042null176944_failAssert194() throws Exception {
        try {
            String __DSPOT_key_46644 = "EQbTyHgU]U`[&2@zv`ww";
            Attributes a = new Attributes();
            Attributes o_testIteratorRemovable_rv157042__4 = a.put("Tot", "a&p");
            Attributes o_testIteratorRemovable_rv157042__5 = a.put("Hello", "There");
            Attributes __DSPOT_invoc_5 = a.put("data-name", "Jsoup");
            boolean o_testIteratorRemovable_rv157042__9 = a.hasKey("Tot");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.getKey();
            attr.getKey();
            iterator.remove();
            int o_testIteratorRemovable_rv157042__16 = a.size();
            attr = iterator.next();
            attr.getValue();
            int o_testIteratorRemovable_rv157042__21 = a.size();
            String o_testIteratorRemovable_rv157042__22 = a.get("Hello");
            boolean o_testIteratorRemovable_rv157042__23 = a.hasKey("Tot");
            __DSPOT_invoc_5.remove(null);
            org.junit.Assert.fail("testIteratorRemovable_rv157042null176944 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156990_mg173669() throws Exception {
        String __DSPOT_val_50462 = "P>&.oHdy2!qI^%57Mbs&";
        String __DSPOT_key_46610 = "am4EMu+tETHG;xjP_]}p";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156990__7 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv156990__7)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv156990__7)).hashCode())));
        Attributes o_testIteratorRemovable_rv156990__8 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156990__8)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156990__8)).hashCode())));
        boolean o_testIteratorRemovable_rv156990__9 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv156990__16 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv156990__21 = a.size();
        String o_testIteratorRemovable_rv156990__22 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv156990__22);
        boolean o_testIteratorRemovable_rv156990__23 = a.hasKey("Tot");
        String o_testIteratorRemovable_rv156990__24 = __DSPOT_invoc_3.getIgnoreCase(__DSPOT_key_46610);
        Assert.assertEquals("", o_testIteratorRemovable_rv156990__24);
        String o_testIteratorRemovable_rv156990_mg173669__42 = attr.setValue(__DSPOT_val_50462);
        Assert.assertEquals("There", o_testIteratorRemovable_rv156990_mg173669__42);
        Assert.assertEquals(" Hello=\"P>&amp;.oHdy2!qI^%57Mbs&amp;\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1523220267, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"P>&amp;.oHdy2!qI^%57Mbs&amp;\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156990__7)).toString());
        Assert.assertEquals(1523220267, ((int) (((Attributes) (o_testIteratorRemovable_rv156990__7)).hashCode())));
        Assert.assertEquals(" Hello=\"P>&amp;.oHdy2!qI^%57Mbs&amp;\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156990__8)).toString());
        Assert.assertEquals(1523220267, ((int) (((Attributes) (o_testIteratorRemovable_rv156990__8)).hashCode())));
        Assert.assertEquals("Hello=\"P>&amp;.oHdy2!qI^%57Mbs&amp;\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(1591104426, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("P>&.oHdy2!qI^%57Mbs&", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"P>&amp;.oHdy2!qI^%57Mbs&amp;\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(1591104426, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("P>&.oHdy2!qI^%57Mbs&", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorRemovable_rv156990__22);
        Assert.assertEquals("", o_testIteratorRemovable_rv156990__24);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156994_remove168188() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156994__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv156994__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv156994__6)).hashCode())));
        Attributes o_testIteratorRemovable_rv156994__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156994__7)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156994__7)).hashCode())));
        boolean o_testIteratorRemovable_rv156994__8 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        int o_testIteratorRemovable_rv156994__15 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv156994__20 = a.size();
        String o_testIteratorRemovable_rv156994__21 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv156994__21);
        boolean o_testIteratorRemovable_rv156994__22 = a.hasKey("Tot");
        String o_testIteratorRemovable_rv156994__23 = __DSPOT_invoc_3.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_testIteratorRemovable_rv156994__23);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156994__6)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156994__6)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156994__7)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156994__7)).hashCode())));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorRemovable_rv156994__21);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156999_mg170541() throws Exception {
        Attribute __DSPOT_attribute_46617 = new Attribute("v|BfIq$vf&v|$s526aYI", ":c5J,Eu47NAzlbJ_K1V.");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156999__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv156999__8)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__8)).hashCode())));
        Attributes o_testIteratorRemovable_rv156999__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156999__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__9)).hashCode())));
        boolean o_testIteratorRemovable_rv156999__10 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv156999__17 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv156999__22 = a.size();
        String o_testIteratorRemovable_rv156999__23 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv156999__23);
        boolean o_testIteratorRemovable_rv156999__24 = a.hasKey("Tot");
        Attributes o_testIteratorRemovable_rv156999__25 = __DSPOT_invoc_3.put(__DSPOT_attribute_46617);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__25)).toString());
        Assert.assertEquals(1633411846, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__25)).hashCode())));
        __DSPOT_invoc_3.iterator();
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1633411846, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__8)).toString());
        Assert.assertEquals(1633411846, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__8)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__9)).toString());
        Assert.assertEquals(1633411846, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__9)).hashCode())));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorRemovable_rv156999__23);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__25)).toString());
        Assert.assertEquals(1633411846, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__25)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156994_mg173239() throws Exception {
        String __DSPOT_value_50155 = ">yB8^z3J$k{y!$A!a}(A";
        String __DSPOT_key_50154 = "JcoI*_W7=m<5`h7{YM@O";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156994__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv156994__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv156994__6)).hashCode())));
        Attributes o_testIteratorRemovable_rv156994__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156994__7)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156994__7)).hashCode())));
        boolean o_testIteratorRemovable_rv156994__8 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv156994__15 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv156994__20 = a.size();
        String o_testIteratorRemovable_rv156994__21 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv156994__21);
        boolean o_testIteratorRemovable_rv156994__22 = a.hasKey("Tot");
        String o_testIteratorRemovable_rv156994__23 = __DSPOT_invoc_3.html();
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", o_testIteratorRemovable_rv156994__23);
        Attributes o_testIteratorRemovable_rv156994_mg173239__42 = __DSPOT_invoc_3.put(__DSPOT_key_50154, __DSPOT_value_50155);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" JcoI*_W7=m<5`h7{YM@O=\">yB8^z3J$k{y!$A!a}(A\"", ((Attributes) (o_testIteratorRemovable_rv156994_mg173239__42)).toString());
        Assert.assertEquals(1087130595, ((int) (((Attributes) (o_testIteratorRemovable_rv156994_mg173239__42)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" JcoI*_W7=m<5`h7{YM@O=\">yB8^z3J$k{y!$A!a}(A\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1087130595, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" JcoI*_W7=m<5`h7{YM@O=\">yB8^z3J$k{y!$A!a}(A\"", ((Attributes) (o_testIteratorRemovable_rv156994__6)).toString());
        Assert.assertEquals(1087130595, ((int) (((Attributes) (o_testIteratorRemovable_rv156994__6)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" JcoI*_W7=m<5`h7{YM@O=\">yB8^z3J$k{y!$A!a}(A\"", ((Attributes) (o_testIteratorRemovable_rv156994__7)).toString());
        Assert.assertEquals(1087130595, ((int) (((Attributes) (o_testIteratorRemovable_rv156994__7)).hashCode())));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorRemovable_rv156994__21);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", o_testIteratorRemovable_rv156994__23);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156999_add164748() throws Exception {
        Attribute __DSPOT_attribute_46617 = new Attribute("v|BfIq$vf&v|$s526aYI", ":c5J,Eu47NAzlbJ_K1V.");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156999_add164748__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv156999_add164748__8)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv156999_add164748__8)).hashCode())));
        Attributes o_testIteratorRemovable_rv156999__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv156999__8)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__8)).hashCode())));
        Attributes o_testIteratorRemovable_rv156999__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156999__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__9)).hashCode())));
        boolean o_testIteratorRemovable_rv156999__10 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv156999__17 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv156999__22 = a.size();
        String o_testIteratorRemovable_rv156999__23 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv156999__23);
        boolean o_testIteratorRemovable_rv156999__24 = a.hasKey("Tot");
        Attributes o_testIteratorRemovable_rv156999__25 = __DSPOT_invoc_3.put(__DSPOT_attribute_46617);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__25)).toString());
        Assert.assertEquals(1633411846, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__25)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1633411846, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999_add164748__8)).toString());
        Assert.assertEquals(1633411846, ((int) (((Attributes) (o_testIteratorRemovable_rv156999_add164748__8)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__8)).toString());
        Assert.assertEquals(1633411846, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__8)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__9)).toString());
        Assert.assertEquals(1633411846, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__9)).hashCode())));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorRemovable_rv156999__23);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156993null176571_failAssert188() throws Exception {
        try {
            Attributes a = new Attributes();
            Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
            Attributes o_testIteratorRemovable_rv156993__6 = a.put("Hello", "There");
            Attributes o_testIteratorRemovable_rv156993__7 = a.put("data-name", "Jsoup");
            boolean o_testIteratorRemovable_rv156993__8 = a.hasKey(null);
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.getKey();
            attr.getKey();
            iterator.remove();
            int o_testIteratorRemovable_rv156993__15 = a.size();
            attr = iterator.next();
            attr.getValue();
            int o_testIteratorRemovable_rv156993__20 = a.size();
            String o_testIteratorRemovable_rv156993__21 = a.get("Hello");
            boolean o_testIteratorRemovable_rv156993__22 = a.hasKey("Tot");
            __DSPOT_invoc_3.hashCode();
            org.junit.Assert.fail("testIteratorRemovable_rv156993null176571 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv157043_mg173396() throws Exception {
        String __DSPOT_key_50268 = "y#%=/%(9ADXC$Niv@.8Q";
        String __DSPOT_key_46645 = "UwGi]0^<It[6j6[ H[4!";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_rv157043__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_rv157043__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_rv157043__4)).hashCode())));
        Attributes o_testIteratorRemovable_rv157043__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv157043__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv157043__5)).hashCode())));
        Attributes __DSPOT_invoc_5 = a.put("data-name", "Jsoup");
        boolean o_testIteratorRemovable_rv157043__9 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv157043__16 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv157043__21 = a.size();
        String o_testIteratorRemovable_rv157043__22 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv157043__22);
        boolean o_testIteratorRemovable_rv157043__23 = a.hasKey("Tot");
        __DSPOT_invoc_5.removeIgnoreCase(__DSPOT_key_46645);
        o_testIteratorRemovable_rv157043__4.removeIgnoreCase(__DSPOT_key_50268);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv157043__4)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv157043__4)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv157043__5)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv157043__5)).hashCode())));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorRemovable_rv157043__22);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv157042_remove168213() throws Exception {
        String __DSPOT_key_46644 = "EQbTyHgU]U`[&2@zv`ww";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_rv157042__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_rv157042__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_rv157042__4)).hashCode())));
        Attributes o_testIteratorRemovable_rv157042__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv157042__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv157042__5)).hashCode())));
        Attributes __DSPOT_invoc_5 = a.put("data-name", "Jsoup");
        boolean o_testIteratorRemovable_rv157042__9 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        iterator.remove();
        int o_testIteratorRemovable_rv157042__16 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getValue();
        int o_testIteratorRemovable_rv157042__21 = a.size();
        String o_testIteratorRemovable_rv157042__22 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv157042__22);
        boolean o_testIteratorRemovable_rv157042__23 = a.hasKey("Tot");
        __DSPOT_invoc_5.remove(__DSPOT_key_46644);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv157042__4)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv157042__4)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv157042__5)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv157042__5)).hashCode())));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorRemovable_rv157042__22);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovablenull157046_failAssert182_add167856() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            a.put(null, "a&p");
            a.put("Hello", "There");
            a.put("data-name", "Jsoup");
            a.hasKey("Tot");
            a.hasKey("Tot");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.getKey();
            iterator.remove();
            a.size();
            attr = iterator.next();
            attr.getKey();
            attr.getValue();
            a.size();
            a.get("Hello");
            a.hasKey("Tot");
            org.junit.Assert.fail("testIteratorRemovablenull157046 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156993null176568() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156993__6 = a.put("Hello", null);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello", ((Attributes) (o_testIteratorRemovable_rv156993__6)).toString());
        Assert.assertEquals(-1652213410, ((int) (((Attributes) (o_testIteratorRemovable_rv156993__6)).hashCode())));
        Attributes o_testIteratorRemovable_rv156993__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156993__7)).toString());
        Assert.assertEquals(1955204940, ((int) (((Attributes) (o_testIteratorRemovable_rv156993__7)).hashCode())));
        boolean o_testIteratorRemovable_rv156993__8 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv156993__15 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068146, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertNull(((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv156993__20 = a.size();
        String o_testIteratorRemovable_rv156993__21 = a.get("Hello");
        Assert.assertEquals("", o_testIteratorRemovable_rv156993__21);
        boolean o_testIteratorRemovable_rv156993__22 = a.hasKey("Tot");
        __DSPOT_invoc_3.hashCode();
        Assert.assertEquals(" Hello data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-906564921, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156993__6)).toString());
        Assert.assertEquals(-906564921, ((int) (((Attributes) (o_testIteratorRemovable_rv156993__6)).hashCode())));
        Assert.assertEquals(" Hello data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156993__7)).toString());
        Assert.assertEquals(-906564921, ((int) (((Attributes) (o_testIteratorRemovable_rv156993__7)).hashCode())));
        Assert.assertEquals("Hello", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068146, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertNull(((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068146, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertNull(((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("", o_testIteratorRemovable_rv156993__21);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156990_remove168209() throws Exception {
        String __DSPOT_key_46610 = "am4EMu+tETHG;xjP_]}p";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156990__7 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv156990__7)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv156990__7)).hashCode())));
        Attributes o_testIteratorRemovable_rv156990__8 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156990__8)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156990__8)).hashCode())));
        boolean o_testIteratorRemovable_rv156990__9 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        iterator.remove();
        int o_testIteratorRemovable_rv156990__16 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getValue();
        int o_testIteratorRemovable_rv156990__21 = a.size();
        String o_testIteratorRemovable_rv156990__22 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv156990__22);
        boolean o_testIteratorRemovable_rv156990__23 = a.hasKey("Tot");
        String o_testIteratorRemovable_rv156990__24 = __DSPOT_invoc_3.getIgnoreCase(__DSPOT_key_46610);
        Assert.assertEquals("", o_testIteratorRemovable_rv156990__24);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156990__7)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv156990__7)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156990__8)).toString());
        Assert.assertEquals(271552003, ((int) (((Attributes) (o_testIteratorRemovable_rv156990__8)).hashCode())));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorRemovable_rv156990__22);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156990null176924_failAssert192() throws Exception {
        try {
            String __DSPOT_key_46610 = "am4EMu+tETHG;xjP_]}p";
            Attributes a = new Attributes();
            Attributes __DSPOT_invoc_3 = a.put(null, "a&p");
            Attributes o_testIteratorRemovable_rv156990__7 = a.put("Hello", "There");
            Attributes o_testIteratorRemovable_rv156990__8 = a.put("data-name", "Jsoup");
            boolean o_testIteratorRemovable_rv156990__9 = a.hasKey("Tot");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.getKey();
            attr.getKey();
            iterator.remove();
            int o_testIteratorRemovable_rv156990__16 = a.size();
            attr = iterator.next();
            attr.getValue();
            int o_testIteratorRemovable_rv156990__21 = a.size();
            String o_testIteratorRemovable_rv156990__22 = a.get("Hello");
            boolean o_testIteratorRemovable_rv156990__23 = a.hasKey("Tot");
            String o_testIteratorRemovable_rv156990__24 = __DSPOT_invoc_3.getIgnoreCase(__DSPOT_key_46610);
            org.junit.Assert.fail("testIteratorRemovable_rv156990null176924 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorRemovablenull157048_failAssert183_rv176131() throws Exception {
        try {
            String __DSPOT_key_52194 = "Q89fx0>j&e7dO(aV5#bK";
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorRemovablenull157048_failAssert183_rv176131__6 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovablenull157048_failAssert183_rv176131__6)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovablenull157048_failAssert183_rv176131__6)).hashCode())));
            a.put(null, "There");
            Attributes __DSPOT_invoc_7 = a.put("data-name", "Jsoup");
            a.hasKey("Tot");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.getKey();
            iterator.remove();
            a.size();
            attr = iterator.next();
            attr.getKey();
            attr.getValue();
            a.size();
            a.get("Hello");
            a.hasKey("Tot");
            org.junit.Assert.fail("testIteratorRemovablenull157048 should have thrown IllegalArgumentException");
            __DSPOT_invoc_7.hasKey(__DSPOT_key_52194);
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorRemovablenull157046_failAssert182_mg175793_rv194369() throws Exception {
        try {
            String __DSPOT_key_57744 = "yLO:$qrrb7(2Xd!i].QJ";
            String __DSPOT_key_51979 = "I$$f]pp<zU}cMhZ`Ad8m";
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            a.put(null, "a&p");
            a.put("Hello", "There");
            Attributes __DSPOT_invoc_14 = a.put("data-name", "Jsoup");
            a.hasKey("Tot");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.getKey();
            iterator.remove();
            a.size();
            attr = iterator.next();
            attr.getKey();
            attr.getValue();
            a.size();
            a.get("Hello");
            a.hasKey("Tot");
            org.junit.Assert.fail("testIteratorRemovablenull157046 should have thrown IllegalArgumentException");
            a.removeIgnoreCase(__DSPOT_key_51979);
            __DSPOT_invoc_14.get(__DSPOT_key_57744);
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv157044null176521_failAssert191null195824() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorRemovable_rv157044__3 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_rv157044__3)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_rv157044__3)).hashCode())));
            Attributes o_testIteratorRemovable_rv157044__4 = a.put("Hello", null);
            Assert.assertEquals(" Tot=\"a&amp;p\" Hello", ((Attributes) (o_testIteratorRemovable_rv157044__4)).toString());
            Assert.assertEquals(-1652213410, ((int) (((Attributes) (o_testIteratorRemovable_rv157044__4)).hashCode())));
            Attributes __DSPOT_invoc_5 = a.put(null, "Jsoup");
            boolean o_testIteratorRemovable_rv157044__8 = a.hasKey("Tot");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.getKey();
            attr.getKey();
            iterator.remove();
            int o_testIteratorRemovable_rv157044__15 = a.size();
            attr = iterator.next();
            attr.getValue();
            int o_testIteratorRemovable_rv157044__20 = a.size();
            String o_testIteratorRemovable_rv157044__21 = a.get("Hello");
            boolean o_testIteratorRemovable_rv157044__22 = a.hasKey("Tot");
            int o_testIteratorRemovable_rv157044__23 = __DSPOT_invoc_5.size();
            org.junit.Assert.fail("testIteratorRemovable_rv157044null176521 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv157044null176521_failAssert191_add186334() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorRemovable_rv157044__3 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_rv157044__3)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_rv157044__3)).hashCode())));
            Attributes o_testIteratorRemovable_rv157044__4 = a.put("Hello", "There");
            Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv157044__4)).toString());
            Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv157044__4)).hashCode())));
            a.put(null, "Jsoup");
            Attributes __DSPOT_invoc_5 = a.put(null, "Jsoup");
            boolean o_testIteratorRemovable_rv157044__8 = a.hasKey("Tot");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.getKey();
            attr.getKey();
            iterator.remove();
            int o_testIteratorRemovable_rv157044__15 = a.size();
            attr = iterator.next();
            attr.getValue();
            int o_testIteratorRemovable_rv157044__20 = a.size();
            String o_testIteratorRemovable_rv157044__21 = a.get("Hello");
            boolean o_testIteratorRemovable_rv157044__22 = a.hasKey("Tot");
            int o_testIteratorRemovable_rv157044__23 = __DSPOT_invoc_5.size();
            org.junit.Assert.fail("testIteratorRemovable_rv157044null176521 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv157040litString159179null195683_failAssert203() throws Exception {
        try {
            String __DSPOT_value_46642 = "|PHPSlk.t-VQ[X >_Nt!";
            String __DSPOT_key_46641 = "GIn().o`?,43>3]i#b8,";
            Attributes a = new Attributes();
            Attributes o_testIteratorRemovable_rv157040__5 = a.put("Tot", "a&p");
            Attributes o_testIteratorRemovable_rv157040__6 = a.put("Hello", "Thre");
            Attributes __DSPOT_invoc_5 = a.put("data-name", "Jsoup");
            boolean o_testIteratorRemovable_rv157040__10 = a.hasKey("Tot");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.getKey();
            attr.getKey();
            iterator.remove();
            int o_testIteratorRemovable_rv157040__17 = a.size();
            attr = iterator.next();
            attr.getValue();
            int o_testIteratorRemovable_rv157040__22 = a.size();
            String o_testIteratorRemovable_rv157040__23 = a.get("Hello");
            boolean o_testIteratorRemovable_rv157040__24 = a.hasKey("Tot");
            Attributes o_testIteratorRemovable_rv157040__25 = __DSPOT_invoc_5.put(null, __DSPOT_value_46642);
            org.junit.Assert.fail("testIteratorRemovable_rv157040litString159179null195683 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156988litString158952_add184404() throws Exception {
        Object __DSPOT_o_46608 = new Object();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156988litString158952_add184404__8 = a.put("Hello", ":");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\"", ((Attributes) (o_testIteratorRemovable_rv156988litString158952_add184404__8)).toString());
        Assert.assertEquals(-1652157672, ((int) (((Attributes) (o_testIteratorRemovable_rv156988litString158952_add184404__8)).hashCode())));
        Attributes o_testIteratorRemovable_rv156988__8 = a.put("Hello", ":");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\"", ((Attributes) (o_testIteratorRemovable_rv156988__8)).toString());
        Assert.assertEquals(-1652157672, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__8)).hashCode())));
        Attributes o_testIteratorRemovable_rv156988__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156988__9)).toString());
        Assert.assertEquals(1955260678, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__9)).hashCode())));
        boolean o_testIteratorRemovable_rv156988__10 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv156988__17 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\":\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068088, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals(":", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getValue();
        int o_testIteratorRemovable_rv156988__22 = a.size();
        String o_testIteratorRemovable_rv156988__23 = a.get("Hello");
        Assert.assertEquals(":", o_testIteratorRemovable_rv156988__23);
        boolean o_testIteratorRemovable_rv156988__24 = a.hasKey("Tot");
        boolean o_testIteratorRemovable_rv156988__25 = __DSPOT_invoc_3.equals(__DSPOT_o_46608);
        Assert.assertEquals(" Hello=\":\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-904837043, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\":\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156988litString158952_add184404__8)).toString());
        Assert.assertEquals(-904837043, ((int) (((Attributes) (o_testIteratorRemovable_rv156988litString158952_add184404__8)).hashCode())));
        Assert.assertEquals(" Hello=\":\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156988__8)).toString());
        Assert.assertEquals(-904837043, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__8)).hashCode())));
        Assert.assertEquals(" Hello=\":\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156988__9)).toString());
        Assert.assertEquals(-904837043, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__9)).hashCode())));
        Assert.assertEquals("Hello=\":\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068088, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals(":", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\":\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068088, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals(":", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(":", o_testIteratorRemovable_rv156988__23);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156999_mg170579litBool183050() throws Exception {
        boolean __DSPOT_value_48254 = false;
        String __DSPOT_key_48253 = "sRt-&P^Q+SszWiGZ{$F$";
        Attribute __DSPOT_attribute_46617 = new Attribute("v|BfIq$vf&v|$s526aYI", ":c5J,Eu47NAzlbJ_K1V.");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156999__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv156999__8)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__8)).hashCode())));
        Attributes o_testIteratorRemovable_rv156999__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156999__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__9)).hashCode())));
        boolean o_testIteratorRemovable_rv156999__10 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv156999__17 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv156999__22 = a.size();
        String o_testIteratorRemovable_rv156999__23 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv156999__23);
        boolean o_testIteratorRemovable_rv156999__24 = a.hasKey("Tot");
        Attributes o_testIteratorRemovable_rv156999__25 = __DSPOT_invoc_3.put(__DSPOT_attribute_46617);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__25)).toString());
        Assert.assertEquals(1633411846, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__25)).hashCode())));
        Attributes o_testIteratorRemovable_rv156999_mg170579__44 = o_testIteratorRemovable_rv156999__9.put(__DSPOT_key_48253, __DSPOT_value_48254);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999_mg170579__44)).toString());
        Assert.assertEquals(1633411846, ((int) (((Attributes) (o_testIteratorRemovable_rv156999_mg170579__44)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1633411846, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__8)).toString());
        Assert.assertEquals(1633411846, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__8)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__9)).toString());
        Assert.assertEquals(1633411846, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__9)).hashCode())));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorRemovable_rv156999__23);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" v|BfIq$vf&v|$s526aYI=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__25)).toString());
        Assert.assertEquals(1633411846, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__25)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv157040null176578_failAssert198_add186463() throws Exception {
        try {
            String __DSPOT_value_46642 = "|PHPSlk.t-VQ[X >_Nt!";
            String __DSPOT_key_46641 = "GIn().o`?,43>3]i#b8,";
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorRemovable_rv157040__5 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_rv157040__5)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_rv157040__5)).hashCode())));
            Attributes o_testIteratorRemovable_rv157040__6 = a.put(null, "There");
            Attributes __DSPOT_invoc_5 = a.put("data-name", "Jsoup");
            boolean o_testIteratorRemovable_rv157040__10 = a.hasKey("Tot");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.getKey();
            attr.getKey();
            iterator.remove();
            int o_testIteratorRemovable_rv157040__17 = a.size();
            attr = iterator.next();
            attr.getValue();
            attr.getValue();
            int o_testIteratorRemovable_rv157040__22 = a.size();
            String o_testIteratorRemovable_rv157040__23 = a.get("Hello");
            boolean o_testIteratorRemovable_rv157040__24 = a.hasKey("Tot");
            Attributes o_testIteratorRemovable_rv157040__25 = __DSPOT_invoc_5.put(__DSPOT_key_46641, __DSPOT_value_46642);
            org.junit.Assert.fail("testIteratorRemovable_rv157040null176578 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156988litString158952_mg189443() throws Exception {
        Object __DSPOT_o_46608 = new Object();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156988__8 = a.put("Hello", ":");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\"", ((Attributes) (o_testIteratorRemovable_rv156988__8)).toString());
        Assert.assertEquals(-1652157672, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__8)).hashCode())));
        Attributes o_testIteratorRemovable_rv156988__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156988__9)).toString());
        Assert.assertEquals(1955260678, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__9)).hashCode())));
        boolean o_testIteratorRemovable_rv156988__10 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv156988__17 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\":\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068088, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals(":", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv156988__22 = a.size();
        String o_testIteratorRemovable_rv156988__23 = a.get("Hello");
        Assert.assertEquals(":", o_testIteratorRemovable_rv156988__23);
        boolean o_testIteratorRemovable_rv156988__24 = a.hasKey("Tot");
        boolean o_testIteratorRemovable_rv156988__25 = __DSPOT_invoc_3.equals(__DSPOT_o_46608);
        o_testIteratorRemovable_rv156988__9.normalize();
        Assert.assertEquals(" hello=\":\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1386162285, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" hello=\":\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156988__8)).toString());
        Assert.assertEquals(1386162285, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__8)).hashCode())));
        Assert.assertEquals(" hello=\":\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156988__9)).toString());
        Assert.assertEquals(1386162285, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__9)).hashCode())));
        Assert.assertEquals("Hello=\":\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068088, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals(":", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\":\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068088, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals(":", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(":", o_testIteratorRemovable_rv156988__23);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_add156948_failAssert186_add167923litString182148() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorRemovable_add156948_failAssert186_add167923__5 = a.put("Tot", "");
            Assert.assertEquals(" Tot=\"\"", ((Attributes) (o_testIteratorRemovable_add156948_failAssert186_add167923__5)).toString());
            Assert.assertEquals(555415706, ((int) (((Attributes) (o_testIteratorRemovable_add156948_failAssert186_add167923__5)).hashCode())));
            Attributes o_testIteratorRemovable_add156948_failAssert186_add167923__6 = a.put("Hello", "There");
            Assert.assertEquals(" Tot=\"\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_add156948_failAssert186_add167923__6)).toString());
            Assert.assertEquals(142394285, ((int) (((Attributes) (o_testIteratorRemovable_add156948_failAssert186_add167923__6)).hashCode())));
            Attributes o_testIteratorRemovable_add156948_failAssert186_add167923__7 = a.put("data-name", "Jsoup");
            Assert.assertEquals(" Tot=\"\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_add156948_failAssert186_add167923__7)).toString());
            Assert.assertEquals(-545154661, ((int) (((Attributes) (o_testIteratorRemovable_add156948_failAssert186_add167923__7)).hashCode())));
            boolean o_testIteratorRemovable_add156948_failAssert186_add167923__8 = a.hasKey("Tot");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            Assert.assertEquals("Tot=\"\"", ((Attribute) (attr)).toString());
            Assert.assertEquals(2612711, ((int) (((Attribute) (attr)).hashCode())));
            Assert.assertEquals("", ((Attribute) (attr)).getValue());
            Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
            attr.getKey();
            attr.getKey();
            iterator.remove();
            iterator.remove();
            a.size();
            attr = iterator.next();
            attr.getKey();
            attr.getValue();
            a.size();
            a.get("Hello");
            a.hasKey("Tot");
            org.junit.Assert.fail("testIteratorRemovable_add156948 should have thrown ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156999litString159311litString181645() throws Exception {
        Attribute __DSPOT_attribute_46617 = new Attribute(":", ":c5J,Eu47NAzlbJ_K1V.");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156999__8 = a.put("Hello", "\n");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"\n\"", ((Attributes) (o_testIteratorRemovable_rv156999__8)).toString());
        Assert.assertEquals(-1652203800, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__8)).hashCode())));
        Attributes o_testIteratorRemovable_rv156999__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"\n\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156999__9)).toString());
        Assert.assertEquals(1955214550, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__9)).hashCode())));
        boolean o_testIteratorRemovable_rv156999__10 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv156999__17 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"\n\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068136, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("\n", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getValue();
        int o_testIteratorRemovable_rv156999__22 = a.size();
        String o_testIteratorRemovable_rv156999__23 = a.get("Hello");
        Assert.assertEquals("\n", o_testIteratorRemovable_rv156999__23);
        boolean o_testIteratorRemovable_rv156999__24 = a.hasKey("Tot");
        Attributes o_testIteratorRemovable_rv156999__25 = __DSPOT_invoc_3.put(__DSPOT_attribute_46617);
        Assert.assertEquals(" Hello=\"\n\" data-name=\"Jsoup\" :=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__25)).toString());
        Assert.assertEquals(1271855241, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__25)).hashCode())));
        Assert.assertEquals(" Hello=\"\n\" data-name=\"Jsoup\" :=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1271855241, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"\n\" data-name=\"Jsoup\" :=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__8)).toString());
        Assert.assertEquals(1271855241, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__8)).hashCode())));
        Assert.assertEquals(" Hello=\"\n\" data-name=\"Jsoup\" :=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__9)).toString());
        Assert.assertEquals(1271855241, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__9)).hashCode())));
        Assert.assertEquals("Hello=\"\n\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068136, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("\n", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"\n\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068136, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("\n", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("\n", o_testIteratorRemovable_rv156999__23);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156990_mg173669_remove186556() throws Exception {
        String __DSPOT_val_50462 = "P>&.oHdy2!qI^%57Mbs&";
        String __DSPOT_key_46610 = "am4EMu+tETHG;xjP_]}p";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156990__7 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv156990__7)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv156990__7)).hashCode())));
        Attributes o_testIteratorRemovable_rv156990__8 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156990__8)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156990__8)).hashCode())));
        boolean o_testIteratorRemovable_rv156990__9 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv156990__16 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv156990__21 = a.size();
        String o_testIteratorRemovable_rv156990__22 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv156990__22);
        boolean o_testIteratorRemovable_rv156990__23 = a.hasKey("Tot");
        String o_testIteratorRemovable_rv156990__24 = __DSPOT_invoc_3.getIgnoreCase(__DSPOT_key_46610);
        Assert.assertEquals("", o_testIteratorRemovable_rv156990__24);
        String o_testIteratorRemovable_rv156990_mg173669__42 = attr.setValue(__DSPOT_val_50462);
        Assert.assertEquals("There", o_testIteratorRemovable_rv156990_mg173669__42);
        Assert.assertEquals(" Hello=\"P>&amp;.oHdy2!qI^%57Mbs&amp;\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1523220267, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"P>&amp;.oHdy2!qI^%57Mbs&amp;\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156990__7)).toString());
        Assert.assertEquals(1523220267, ((int) (((Attributes) (o_testIteratorRemovable_rv156990__7)).hashCode())));
        Assert.assertEquals(" Hello=\"P>&amp;.oHdy2!qI^%57Mbs&amp;\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156990__8)).toString());
        Assert.assertEquals(1523220267, ((int) (((Attributes) (o_testIteratorRemovable_rv156990__8)).hashCode())));
        Assert.assertEquals("Hello=\"P>&amp;.oHdy2!qI^%57Mbs&amp;\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(1591104426, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("P>&.oHdy2!qI^%57Mbs&", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"P>&amp;.oHdy2!qI^%57Mbs&amp;\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(1591104426, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("P>&.oHdy2!qI^%57Mbs&", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorRemovable_rv156990__22);
        Assert.assertEquals("", o_testIteratorRemovable_rv156990__24);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156994_mg173239null195189_failAssert201() throws Exception {
        try {
            String __DSPOT_value_50155 = ">yB8^z3J$k{y!$A!a}(A";
            String __DSPOT_key_50154 = "JcoI*_W7=m<5`h7{YM@O";
            Attributes a = new Attributes();
            Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
            Attributes o_testIteratorRemovable_rv156994__6 = a.put(null, "There");
            Attributes o_testIteratorRemovable_rv156994__7 = a.put("data-name", "Jsoup");
            boolean o_testIteratorRemovable_rv156994__8 = a.hasKey("Tot");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.getKey();
            attr.getKey();
            iterator.remove();
            int o_testIteratorRemovable_rv156994__15 = a.size();
            attr = iterator.next();
            attr.getValue();
            int o_testIteratorRemovable_rv156994__20 = a.size();
            String o_testIteratorRemovable_rv156994__21 = a.get("Hello");
            boolean o_testIteratorRemovable_rv156994__22 = a.hasKey("Tot");
            String o_testIteratorRemovable_rv156994__23 = __DSPOT_invoc_3.html();
            Attributes o_testIteratorRemovable_rv156994_mg173239__42 = __DSPOT_invoc_3.put(__DSPOT_key_50154, __DSPOT_value_50155);
            org.junit.Assert.fail("testIteratorRemovable_rv156994_mg173239null195189 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156999litString159311_mg191874() throws Exception {
        Attribute __DSPOT_attribute_46617 = new Attribute(":", ":c5J,Eu47NAzlbJ_K1V.");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156999__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv156999__8)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__8)).hashCode())));
        Attributes o_testIteratorRemovable_rv156999__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156999__9)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__9)).hashCode())));
        boolean o_testIteratorRemovable_rv156999__10 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv156999__17 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv156999__22 = a.size();
        String o_testIteratorRemovable_rv156999__23 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv156999__23);
        boolean o_testIteratorRemovable_rv156999__24 = a.hasKey("Tot");
        Attributes o_testIteratorRemovable_rv156999__25 = __DSPOT_invoc_3.put(__DSPOT_attribute_46617);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" :=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__25)).toString());
        Assert.assertEquals(-1845293041, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__25)).hashCode())));
        Attributes o_testIteratorRemovable_rv156999litString159311_mg191874__42 = __DSPOT_invoc_3.clone();
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" :=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999litString159311_mg191874__42)).toString());
        Assert.assertEquals(-1845293041, ((int) (((Attributes) (o_testIteratorRemovable_rv156999litString159311_mg191874__42)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" :=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1167901449, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" :=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__8)).toString());
        Assert.assertEquals(-1167901449, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__8)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" :=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__9)).toString());
        Assert.assertEquals(-1167901449, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__9)).hashCode())));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorRemovable_rv156999__23);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" :=\":c5J,Eu47NAzlbJ_K1V.\"", ((Attributes) (o_testIteratorRemovable_rv156999__25)).toString());
        Assert.assertEquals(-1167901449, ((int) (((Attributes) (o_testIteratorRemovable_rv156999__25)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156988litString158952_remove186612() throws Exception {
        Object __DSPOT_o_46608 = new Object();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156988__8 = a.put("Hello", ":");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\"", ((Attributes) (o_testIteratorRemovable_rv156988__8)).toString());
        Assert.assertEquals(-1652157672, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__8)).hashCode())));
        Attributes o_testIteratorRemovable_rv156988__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156988__9)).toString());
        Assert.assertEquals(1955260678, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__9)).hashCode())));
        boolean o_testIteratorRemovable_rv156988__10 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        int o_testIteratorRemovable_rv156988__17 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\":\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068088, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals(":", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getValue();
        int o_testIteratorRemovable_rv156988__22 = a.size();
        String o_testIteratorRemovable_rv156988__23 = a.get("Hello");
        Assert.assertEquals(":", o_testIteratorRemovable_rv156988__23);
        boolean o_testIteratorRemovable_rv156988__24 = a.hasKey("Tot");
        boolean o_testIteratorRemovable_rv156988__25 = __DSPOT_invoc_3.equals(__DSPOT_o_46608);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1955260678, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156988__8)).toString());
        Assert.assertEquals(1955260678, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__8)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\":\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156988__9)).toString());
        Assert.assertEquals(1955260678, ((int) (((Attributes) (o_testIteratorRemovable_rv156988__9)).hashCode())));
        Assert.assertEquals("Hello=\":\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068088, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals(":", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\":\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2137068088, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals(":", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals(":", o_testIteratorRemovable_rv156988__23);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156994_mg173239_mg187855() throws Exception {
        Attributes __DSPOT_o_53110 = new Attributes();
        String __DSPOT_value_50155 = ">yB8^z3J$k{y!$A!a}(A";
        String __DSPOT_key_50154 = "JcoI*_W7=m<5`h7{YM@O";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156994__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv156994__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv156994__6)).hashCode())));
        Attributes o_testIteratorRemovable_rv156994__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156994__7)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156994__7)).hashCode())));
        boolean o_testIteratorRemovable_rv156994__8 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv156994__15 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv156994__20 = a.size();
        String o_testIteratorRemovable_rv156994__21 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv156994__21);
        boolean o_testIteratorRemovable_rv156994__22 = a.hasKey("Tot");
        String o_testIteratorRemovable_rv156994__23 = __DSPOT_invoc_3.html();
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", o_testIteratorRemovable_rv156994__23);
        Attributes o_testIteratorRemovable_rv156994_mg173239__42 = __DSPOT_invoc_3.put(__DSPOT_key_50154, __DSPOT_value_50155);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" JcoI*_W7=m<5`h7{YM@O=\">yB8^z3J$k{y!$A!a}(A\"", ((Attributes) (o_testIteratorRemovable_rv156994_mg173239__42)).toString());
        Assert.assertEquals(1087130595, ((int) (((Attributes) (o_testIteratorRemovable_rv156994_mg173239__42)).hashCode())));
        boolean o_testIteratorRemovable_rv156994_mg173239_mg187855__47 = o_testIteratorRemovable_rv156994_mg173239__42.equals(__DSPOT_o_53110);
        Assert.assertFalse(o_testIteratorRemovable_rv156994_mg173239_mg187855__47);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" JcoI*_W7=m<5`h7{YM@O=\">yB8^z3J$k{y!$A!a}(A\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1087130595, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" JcoI*_W7=m<5`h7{YM@O=\">yB8^z3J$k{y!$A!a}(A\"", ((Attributes) (o_testIteratorRemovable_rv156994__6)).toString());
        Assert.assertEquals(1087130595, ((int) (((Attributes) (o_testIteratorRemovable_rv156994__6)).hashCode())));
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" JcoI*_W7=m<5`h7{YM@O=\">yB8^z3J$k{y!$A!a}(A\"", ((Attributes) (o_testIteratorRemovable_rv156994__7)).toString());
        Assert.assertEquals(1087130595, ((int) (((Attributes) (o_testIteratorRemovable_rv156994__7)).hashCode())));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorRemovable_rv156994__21);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\"", o_testIteratorRemovable_rv156994__23);
        Assert.assertEquals(" Hello=\"There\" data-name=\"Jsoup\" JcoI*_W7=m<5`h7{YM@O=\">yB8^z3J$k{y!$A!a}(A\"", ((Attributes) (o_testIteratorRemovable_rv156994_mg173239__42)).toString());
        Assert.assertEquals(1087130595, ((int) (((Attributes) (o_testIteratorRemovable_rv156994_mg173239__42)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv156994_mg173239_remove186545() throws Exception {
        String __DSPOT_value_50155 = ">yB8^z3J$k{y!$A!a}(A";
        String __DSPOT_key_50154 = "JcoI*_W7=m<5`h7{YM@O";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorRemovable_rv156994__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorRemovable_rv156994__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorRemovable_rv156994__6)).hashCode())));
        Attributes o_testIteratorRemovable_rv156994__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_testIteratorRemovable_rv156994__7)).toString());
        Assert.assertEquals(-2024663920, ((int) (((Attributes) (o_testIteratorRemovable_rv156994__7)).hashCode())));
        boolean o_testIteratorRemovable_rv156994__8 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        int o_testIteratorRemovable_rv156994__15 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv156994__20 = a.size();
        String o_testIteratorRemovable_rv156994__21 = a.get("Hello");
        Assert.assertEquals("There", o_testIteratorRemovable_rv156994__21);
        boolean o_testIteratorRemovable_rv156994__22 = a.hasKey("Tot");
        String o_testIteratorRemovable_rv156994__23 = __DSPOT_invoc_3.html();
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_testIteratorRemovable_rv156994__23);
        Attributes o_testIteratorRemovable_rv156994_mg173239__42 = __DSPOT_invoc_3.put(__DSPOT_key_50154, __DSPOT_value_50155);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" JcoI*_W7=m<5`h7{YM@O=\">yB8^z3J$k{y!$A!a}(A\"", ((Attributes) (o_testIteratorRemovable_rv156994_mg173239__42)).toString());
        Assert.assertEquals(-751428014, ((int) (((Attributes) (o_testIteratorRemovable_rv156994_mg173239__42)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" JcoI*_W7=m<5`h7{YM@O=\">yB8^z3J$k{y!$A!a}(A\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-751428014, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" JcoI*_W7=m<5`h7{YM@O=\">yB8^z3J$k{y!$A!a}(A\"", ((Attributes) (o_testIteratorRemovable_rv156994__6)).toString());
        Assert.assertEquals(-751428014, ((int) (((Attributes) (o_testIteratorRemovable_rv156994__6)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\" JcoI*_W7=m<5`h7{YM@O=\">yB8^z3J$k{y!$A!a}(A\"", ((Attributes) (o_testIteratorRemovable_rv156994__7)).toString());
        Assert.assertEquals(-751428014, ((int) (((Attributes) (o_testIteratorRemovable_rv156994__7)).hashCode())));
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorRemovable_rv156994__21);
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", o_testIteratorRemovable_rv156994__23);
    }

    @Test(timeout = 10000)
    public void testIteratorRemovable_rv157040litString159179_mg192199() throws Exception {
        Attribute __DSPOT_o_56210 = new Attribute("w,7q|0M%Bu97SVnvkf`1", "a[07 wNN_$k]kb-^@/r;", new Attributes());
        String __DSPOT_value_46642 = "|PHPSlk.t-VQ[X >_Nt!";
        String __DSPOT_key_46641 = "GIn().o`?,43>3]i#b8,";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorRemovable_rv157040__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorRemovable_rv157040__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorRemovable_rv157040__5)).hashCode())));
        Attributes o_testIteratorRemovable_rv157040__6 = a.put("Hello", "Thre");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"Thre\"", ((Attributes) (o_testIteratorRemovable_rv157040__6)).toString());
        Assert.assertEquals(852174693, ((int) (((Attributes) (o_testIteratorRemovable_rv157040__6)).hashCode())));
        Attributes __DSPOT_invoc_5 = a.put("data-name", "Jsoup");
        boolean o_testIteratorRemovable_rv157040__10 = a.hasKey("Tot");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.getKey();
        attr.getKey();
        iterator.remove();
        int o_testIteratorRemovable_rv157040__17 = a.size();
        attr = iterator.next();
        Assert.assertEquals("Hello=\"Thre\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2134462123, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Thre", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.getValue();
        int o_testIteratorRemovable_rv157040__22 = a.size();
        String o_testIteratorRemovable_rv157040__23 = a.get("Hello");
        Assert.assertEquals("Thre", o_testIteratorRemovable_rv157040__23);
        boolean o_testIteratorRemovable_rv157040__24 = a.hasKey("Tot");
        Attributes o_testIteratorRemovable_rv157040__25 = __DSPOT_invoc_5.put(__DSPOT_key_46641, __DSPOT_value_46642);
        Assert.assertEquals(" Hello=\"Thre\" data-name=\"Jsoup\" GIn().o`?,43>3]i#b8,=\"|PHPSlk.t-VQ[X >_Nt!\"", ((Attributes) (o_testIteratorRemovable_rv157040__25)).toString());
        Assert.assertEquals(-2063163920, ((int) (((Attributes) (o_testIteratorRemovable_rv157040__25)).hashCode())));
        boolean o_testIteratorRemovable_rv157040litString159179_mg192199__45 = attr.equals(__DSPOT_o_56210);
        Assert.assertFalse(o_testIteratorRemovable_rv157040litString159179_mg192199__45);
        Assert.assertEquals(" Hello=\"Thre\" data-name=\"Jsoup\" GIn().o`?,43>3]i#b8,=\"|PHPSlk.t-VQ[X >_Nt!\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2063163920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Hello=\"Thre\" data-name=\"Jsoup\" GIn().o`?,43>3]i#b8,=\"|PHPSlk.t-VQ[X >_Nt!\"", ((Attributes) (o_testIteratorRemovable_rv157040__5)).toString());
        Assert.assertEquals(-2063163920, ((int) (((Attributes) (o_testIteratorRemovable_rv157040__5)).hashCode())));
        Assert.assertEquals(" Hello=\"Thre\" data-name=\"Jsoup\" GIn().o`?,43>3]i#b8,=\"|PHPSlk.t-VQ[X >_Nt!\"", ((Attributes) (o_testIteratorRemovable_rv157040__6)).toString());
        Assert.assertEquals(-2063163920, ((int) (((Attributes) (o_testIteratorRemovable_rv157040__6)).hashCode())));
        Assert.assertEquals("Hello=\"Thre\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2134462123, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Thre", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"Thre\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2134462123, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Thre", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Thre", o_testIteratorRemovable_rv157040__23);
        Assert.assertEquals(" Hello=\"Thre\" data-name=\"Jsoup\" GIn().o`?,43>3]i#b8,=\"|PHPSlk.t-VQ[X >_Nt!\"", ((Attributes) (o_testIteratorRemovable_rv157040__25)).toString());
        Assert.assertEquals(-2063163920, ((int) (((Attributes) (o_testIteratorRemovable_rv157040__25)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateable__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateable__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateable__3)).hashCode())));
        Attributes o_testIteratorUpdateable__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateable__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateable__4)).hashCode())));
        boolean o_testIteratorUpdateable__5 = a.hasKey("Foo");
        Assert.assertFalse(o_testIteratorUpdateable__5);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable__14 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable__14);
        String o_testIteratorUpdateable__15 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable__15);
        String o_testIteratorUpdateable__16 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable__16);
        boolean o_testIteratorUpdateable__17 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorUpdateable__17);
        boolean o_testIteratorUpdateable__18 = a.hasKey("Hello");
        Assert.assertFalse(o_testIteratorUpdateable__18);
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable__3)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable__3)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable__4)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable__4)).hashCode())));
        Assert.assertFalse(o_testIteratorUpdateable__5);
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable__14);
        Assert.assertEquals("a&p", o_testIteratorUpdateable__15);
        Assert.assertEquals("Qux", o_testIteratorUpdateable__16);
        Assert.assertFalse(o_testIteratorUpdateable__17);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_rv196355() throws Exception {
        Attribute __DSPOT_attribute_58197 = new Attribute("^FS-<:MlLXWa6(!D#U3i", "Z[d/8(y`IeTMCFl>KB;n");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorUpdateable_rv196355__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateable_rv196355__8)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateable_rv196355__8)).hashCode())));
        boolean o_testIteratorUpdateable_rv196355__9 = a.hasKey("Foo");
        Assert.assertFalse(o_testIteratorUpdateable_rv196355__9);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_rv196355__18 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable_rv196355__18);
        String o_testIteratorUpdateable_rv196355__19 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196355__19);
        String o_testIteratorUpdateable_rv196355__20 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196355__20);
        boolean o_testIteratorUpdateable_rv196355__21 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorUpdateable_rv196355__21);
        boolean o_testIteratorUpdateable_rv196355__22 = a.hasKey("Hello");
        Assert.assertFalse(o_testIteratorUpdateable_rv196355__22);
        Attributes o_testIteratorUpdateable_rv196355__23 = __DSPOT_invoc_3.put(__DSPOT_attribute_58197);
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\" ^FS-<:MlLXWa6(!D#U3i=\"Z[d/8(y`IeTMCFl>KB;n\"", ((Attributes) (o_testIteratorUpdateable_rv196355__23)).toString());
        Assert.assertEquals(-1629980838, ((int) (((Attributes) (o_testIteratorUpdateable_rv196355__23)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\" ^FS-<:MlLXWa6(!D#U3i=\"Z[d/8(y`IeTMCFl>KB;n\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1629980838, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\" ^FS-<:MlLXWa6(!D#U3i=\"Z[d/8(y`IeTMCFl>KB;n\"", ((Attributes) (o_testIteratorUpdateable_rv196355__8)).toString());
        Assert.assertEquals(-1629980838, ((int) (((Attributes) (o_testIteratorUpdateable_rv196355__8)).hashCode())));
        Assert.assertFalse(o_testIteratorUpdateable_rv196355__9);
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable_rv196355__18);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196355__19);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196355__20);
        Assert.assertFalse(o_testIteratorUpdateable_rv196355__21);
        Assert.assertFalse(o_testIteratorUpdateable_rv196355__22);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_mg196317() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateable_mg196317__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateable_mg196317__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateable_mg196317__3)).hashCode())));
        Attributes o_testIteratorUpdateable_mg196317__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateable_mg196317__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateable_mg196317__4)).hashCode())));
        boolean o_testIteratorUpdateable_mg196317__5 = a.hasKey("Foo");
        Assert.assertFalse(o_testIteratorUpdateable_mg196317__5);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_mg196317__14 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable_mg196317__14);
        String o_testIteratorUpdateable_mg196317__15 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_mg196317__15);
        String o_testIteratorUpdateable_mg196317__16 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196317__16);
        boolean o_testIteratorUpdateable_mg196317__17 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorUpdateable_mg196317__17);
        boolean o_testIteratorUpdateable_mg196317__18 = a.hasKey("Hello");
        Assert.assertFalse(o_testIteratorUpdateable_mg196317__18);
        List<Attribute> o_testIteratorUpdateable_mg196317__19 = a.asList();
        Assert.assertFalse(o_testIteratorUpdateable_mg196317__19.isEmpty());
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_mg196317__3)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_mg196317__3)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_mg196317__4)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_mg196317__4)).hashCode())));
        Assert.assertFalse(o_testIteratorUpdateable_mg196317__5);
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable_mg196317__14);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_mg196317__15);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196317__16);
        Assert.assertFalse(o_testIteratorUpdateable_mg196317__17);
        Assert.assertFalse(o_testIteratorUpdateable_mg196317__18);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_mg196328() throws Exception {
        boolean __DSPOT_value_58178 = false;
        String __DSPOT_key_58177 = "]s|JJnJ&gsXG]m^VTQ}z";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateable_mg196328__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateable_mg196328__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateable_mg196328__5)).hashCode())));
        Attributes o_testIteratorUpdateable_mg196328__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateable_mg196328__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateable_mg196328__6)).hashCode())));
        boolean o_testIteratorUpdateable_mg196328__7 = a.hasKey("Foo");
        Assert.assertFalse(o_testIteratorUpdateable_mg196328__7);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_mg196328__16 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable_mg196328__16);
        String o_testIteratorUpdateable_mg196328__17 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_mg196328__17);
        String o_testIteratorUpdateable_mg196328__18 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196328__18);
        boolean o_testIteratorUpdateable_mg196328__19 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorUpdateable_mg196328__19);
        boolean o_testIteratorUpdateable_mg196328__20 = a.hasKey("Hello");
        Assert.assertFalse(o_testIteratorUpdateable_mg196328__20);
        Attributes o_testIteratorUpdateable_mg196328__21 = a.put(__DSPOT_key_58177, __DSPOT_value_58178);
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_mg196328__21)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_mg196328__21)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_mg196328__5)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_mg196328__5)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_mg196328__6)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_mg196328__6)).hashCode())));
        Assert.assertFalse(o_testIteratorUpdateable_mg196328__7);
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable_mg196328__16);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_mg196328__17);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196328__18);
        Assert.assertFalse(o_testIteratorUpdateable_mg196328__19);
        Assert.assertFalse(o_testIteratorUpdateable_mg196328__20);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_rv196356() throws Exception {
        String __DSPOT_key_58198 = "*26!J?=BIeIGz&u5fk(g";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorUpdateable_rv196356__7 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateable_rv196356__7)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateable_rv196356__7)).hashCode())));
        boolean o_testIteratorUpdateable_rv196356__8 = a.hasKey("Foo");
        Assert.assertFalse(o_testIteratorUpdateable_rv196356__8);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_rv196356__17 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable_rv196356__17);
        String o_testIteratorUpdateable_rv196356__18 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196356__18);
        String o_testIteratorUpdateable_rv196356__19 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196356__19);
        boolean o_testIteratorUpdateable_rv196356__20 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorUpdateable_rv196356__20);
        boolean o_testIteratorUpdateable_rv196356__21 = a.hasKey("Hello");
        Assert.assertFalse(o_testIteratorUpdateable_rv196356__21);
        __DSPOT_invoc_3.remove(__DSPOT_key_58198);
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_rv196356__7)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_rv196356__7)).hashCode())));
        Assert.assertFalse(o_testIteratorUpdateable_rv196356__8);
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable_rv196356__17);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196356__18);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196356__19);
        Assert.assertFalse(o_testIteratorUpdateable_rv196356__20);
        Assert.assertFalse(o_testIteratorUpdateable_rv196356__21);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_rv196342() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorUpdateable_rv196342__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateable_rv196342__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateable_rv196342__6)).hashCode())));
        boolean o_testIteratorUpdateable_rv196342__7 = a.hasKey("Foo");
        Assert.assertFalse(o_testIteratorUpdateable_rv196342__7);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_rv196342__16 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable_rv196342__16);
        String o_testIteratorUpdateable_rv196342__17 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196342__17);
        String o_testIteratorUpdateable_rv196342__18 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196342__18);
        boolean o_testIteratorUpdateable_rv196342__19 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorUpdateable_rv196342__19);
        boolean o_testIteratorUpdateable_rv196342__20 = a.hasKey("Hello");
        Assert.assertFalse(o_testIteratorUpdateable_rv196342__20);
        Attributes o_testIteratorUpdateable_rv196342__21 = __DSPOT_invoc_3.clone();
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_rv196342__21)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_rv196342__21)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(73166878, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_rv196342__6)).toString());
        Assert.assertEquals(73166878, ((int) (((Attributes) (o_testIteratorUpdateable_rv196342__6)).hashCode())));
        Assert.assertFalse(o_testIteratorUpdateable_rv196342__7);
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable_rv196342__16);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196342__17);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196342__18);
        Assert.assertFalse(o_testIteratorUpdateable_rv196342__19);
        Assert.assertFalse(o_testIteratorUpdateable_rv196342__20);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_mg196327() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateable_mg196327__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateable_mg196327__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateable_mg196327__3)).hashCode())));
        Attributes o_testIteratorUpdateable_mg196327__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateable_mg196327__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateable_mg196327__4)).hashCode())));
        boolean o_testIteratorUpdateable_mg196327__5 = a.hasKey("Foo");
        Assert.assertFalse(o_testIteratorUpdateable_mg196327__5);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_mg196327__14 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable_mg196327__14);
        String o_testIteratorUpdateable_mg196327__15 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_mg196327__15);
        String o_testIteratorUpdateable_mg196327__16 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196327__16);
        boolean o_testIteratorUpdateable_mg196327__17 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorUpdateable_mg196327__17);
        boolean o_testIteratorUpdateable_mg196327__18 = a.hasKey("Hello");
        Assert.assertFalse(o_testIteratorUpdateable_mg196327__18);
        a.normalize();
        Assert.assertEquals(" foo=\"a&amp;p\" bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(843527454, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" foo=\"a&amp;p\" bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_mg196327__3)).toString());
        Assert.assertEquals(843527454, ((int) (((Attributes) (o_testIteratorUpdateable_mg196327__3)).hashCode())));
        Assert.assertEquals(" foo=\"a&amp;p\" bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_mg196327__4)).toString());
        Assert.assertEquals(843527454, ((int) (((Attributes) (o_testIteratorUpdateable_mg196327__4)).hashCode())));
        Assert.assertFalse(o_testIteratorUpdateable_mg196327__5);
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable_mg196327__14);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_mg196327__15);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196327__16);
        Assert.assertFalse(o_testIteratorUpdateable_mg196327__17);
        Assert.assertFalse(o_testIteratorUpdateable_mg196327__18);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_add196299() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateable_add196299__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateable_add196299__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateable_add196299__3)).hashCode())));
        Attributes o_testIteratorUpdateable_add196299__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateable_add196299__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateable_add196299__4)).hashCode())));
        Attributes o_testIteratorUpdateable_add196299__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateable_add196299__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateable_add196299__5)).hashCode())));
        boolean o_testIteratorUpdateable_add196299__6 = a.hasKey("Foo");
        Assert.assertFalse(o_testIteratorUpdateable_add196299__6);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_add196299__15 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable_add196299__15);
        String o_testIteratorUpdateable_add196299__16 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_add196299__16);
        String o_testIteratorUpdateable_add196299__17 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_add196299__17);
        boolean o_testIteratorUpdateable_add196299__18 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorUpdateable_add196299__18);
        boolean o_testIteratorUpdateable_add196299__19 = a.hasKey("Hello");
        Assert.assertFalse(o_testIteratorUpdateable_add196299__19);
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_add196299__3)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_add196299__3)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_add196299__4)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_add196299__4)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_add196299__5)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_add196299__5)).hashCode())));
        Assert.assertFalse(o_testIteratorUpdateable_add196299__6);
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable_add196299__15);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_add196299__16);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_add196299__17);
        Assert.assertFalse(o_testIteratorUpdateable_add196299__18);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablelitString196217() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196217__3 = a.put("Tot", "\n");
        Assert.assertEquals(" Tot=\"\n\"", ((Attributes) (o_testIteratorUpdateablelitString196217__3)).toString());
        Assert.assertEquals(555713616, ((int) (((Attributes) (o_testIteratorUpdateablelitString196217__3)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196217__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"\n\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateablelitString196217__4)).toString());
        Assert.assertEquals(142692195, ((int) (((Attributes) (o_testIteratorUpdateablelitString196217__4)).hashCode())));
        boolean o_testIteratorUpdateablelitString196217__5 = a.hasKey("Foo");
        Assert.assertFalse(o_testIteratorUpdateablelitString196217__5);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"\n\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2612721, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("\n", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateablelitString196217__14 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196217__14);
        String o_testIteratorUpdateablelitString196217__15 = a.get("Foo");
        Assert.assertEquals("\n", o_testIteratorUpdateablelitString196217__15);
        String o_testIteratorUpdateablelitString196217__16 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateablelitString196217__16);
        boolean o_testIteratorUpdateablelitString196217__17 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorUpdateablelitString196217__17);
        boolean o_testIteratorUpdateablelitString196217__18 = a.hasKey("Hello");
        Assert.assertFalse(o_testIteratorUpdateablelitString196217__18);
        Assert.assertEquals(" Foo=\"\n\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1223112225, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"\n\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196217__3)).toString());
        Assert.assertEquals(-1223112225, ((int) (((Attributes) (o_testIteratorUpdateablelitString196217__3)).hashCode())));
        Assert.assertEquals(" Foo=\"\n\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196217__4)).toString());
        Assert.assertEquals(-1223112225, ((int) (((Attributes) (o_testIteratorUpdateablelitString196217__4)).hashCode())));
        Assert.assertFalse(o_testIteratorUpdateablelitString196217__5);
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196217__14);
        Assert.assertEquals("\n", o_testIteratorUpdateablelitString196217__15);
        Assert.assertEquals("Qux", o_testIteratorUpdateablelitString196217__16);
        Assert.assertFalse(o_testIteratorUpdateablelitString196217__17);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablenull196381_failAssert216() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put(null, "a&p");
            a.put("Hello", "There");
            a.hasKey("Foo");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.setKey("Foo");
            attr = iterator.next();
            attr.setKey("Bar");
            attr.setValue("Qux");
            a.get("Foo");
            a.get("Bar");
            a.hasKey("Tot");
            a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateablenull196381 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablenull196383_failAssert220() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put("Tot", "a&p");
            a.put(null, "There");
            a.hasKey("Foo");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.setKey("Foo");
            attr = iterator.next();
            attr.setKey("Bar");
            attr.setValue("Qux");
            a.get("Foo");
            a.get("Bar");
            a.hasKey("Tot");
            a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateablenull196383 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_rv196346() throws Exception {
        String __DSPOT_key_58190 = "(q7rig2z5e[-n#4WpXUz";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorUpdateable_rv196346__7 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateable_rv196346__7)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateable_rv196346__7)).hashCode())));
        boolean o_testIteratorUpdateable_rv196346__8 = a.hasKey("Foo");
        Assert.assertFalse(o_testIteratorUpdateable_rv196346__8);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_rv196346__17 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable_rv196346__17);
        String o_testIteratorUpdateable_rv196346__18 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196346__18);
        String o_testIteratorUpdateable_rv196346__19 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196346__19);
        boolean o_testIteratorUpdateable_rv196346__20 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorUpdateable_rv196346__20);
        boolean o_testIteratorUpdateable_rv196346__21 = a.hasKey("Hello");
        Assert.assertFalse(o_testIteratorUpdateable_rv196346__21);
        String o_testIteratorUpdateable_rv196346__22 = __DSPOT_invoc_3.getIgnoreCase(__DSPOT_key_58190);
        Assert.assertEquals("", o_testIteratorUpdateable_rv196346__22);
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_rv196346__7)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_rv196346__7)).hashCode())));
        Assert.assertFalse(o_testIteratorUpdateable_rv196346__8);
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable_rv196346__17);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196346__18);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196346__19);
        Assert.assertFalse(o_testIteratorUpdateable_rv196346__20);
        Assert.assertFalse(o_testIteratorUpdateable_rv196346__21);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_rv196357() throws Exception {
        String __DSPOT_key_58199 = "TOJ>#6.+]NecV$WH]:*d";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorUpdateable_rv196357__7 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateable_rv196357__7)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateable_rv196357__7)).hashCode())));
        boolean o_testIteratorUpdateable_rv196357__8 = a.hasKey("Foo");
        Assert.assertFalse(o_testIteratorUpdateable_rv196357__8);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_rv196357__17 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable_rv196357__17);
        String o_testIteratorUpdateable_rv196357__18 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196357__18);
        String o_testIteratorUpdateable_rv196357__19 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196357__19);
        boolean o_testIteratorUpdateable_rv196357__20 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorUpdateable_rv196357__20);
        boolean o_testIteratorUpdateable_rv196357__21 = a.hasKey("Hello");
        Assert.assertFalse(o_testIteratorUpdateable_rv196357__21);
        __DSPOT_invoc_3.removeIgnoreCase(__DSPOT_key_58199);
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_rv196357__7)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_rv196357__7)).hashCode())));
        Assert.assertFalse(o_testIteratorUpdateable_rv196357__8);
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable_rv196357__17);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196357__18);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196357__19);
        Assert.assertFalse(o_testIteratorUpdateable_rv196357__20);
        Assert.assertFalse(o_testIteratorUpdateable_rv196357__21);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_rv196369() throws Exception {
        String __DSPOT_key_58205 = "9)UwHE>Ynzs?j]3t_7Qc";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateable_rv196369__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateable_rv196369__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateable_rv196369__4)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("Hello", "There");
        boolean o_testIteratorUpdateable_rv196369__8 = a.hasKey("Foo");
        Assert.assertFalse(o_testIteratorUpdateable_rv196369__8);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_rv196369__17 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable_rv196369__17);
        String o_testIteratorUpdateable_rv196369__18 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196369__18);
        String o_testIteratorUpdateable_rv196369__19 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196369__19);
        boolean o_testIteratorUpdateable_rv196369__20 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorUpdateable_rv196369__20);
        boolean o_testIteratorUpdateable_rv196369__21 = a.hasKey("Hello");
        Assert.assertFalse(o_testIteratorUpdateable_rv196369__21);
        boolean o_testIteratorUpdateable_rv196369__22 = __DSPOT_invoc_4.hasKeyIgnoreCase(__DSPOT_key_58205);
        Assert.assertFalse(o_testIteratorUpdateable_rv196369__22);
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_rv196369__4)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_rv196369__4)).hashCode())));
        Assert.assertFalse(o_testIteratorUpdateable_rv196369__8);
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable_rv196369__17);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196369__18);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196369__19);
        Assert.assertFalse(o_testIteratorUpdateable_rv196369__20);
        Assert.assertFalse(o_testIteratorUpdateable_rv196369__21);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablelitString196243_failAssert222() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put("Tot", "a&p");
            a.put("Hello", "There");
            a.hasKey("Foo");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.setKey("");
            attr = iterator.next();
            attr.setKey("Bar");
            attr.setValue("Qux");
            a.get("Foo");
            a.get("Bar");
            a.hasKey("Tot");
            a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateablelitString196243 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("String must not be empty", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablelitString196256_failAssert221() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put("Tot", "a&p");
            a.put("Hello", "There");
            a.hasKey("Foo");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.setKey("Foo");
            attr = iterator.next();
            attr.setKey("\n");
            attr.setValue("Qux");
            a.get("Foo");
            a.get("Bar");
            a.hasKey("Tot");
            a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateablelitString196256 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("String must not be empty", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_remove196311_failAssert208() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put("Hello", "There");
            a.hasKey("Foo");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.setKey("Foo");
            attr = iterator.next();
            attr.setKey("Bar");
            attr.setValue("Qux");
            a.get("Foo");
            a.get("Bar");
            a.hasKey("Tot");
            a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateable_remove196311 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_add196302_failAssert218() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put("Tot", "a&p");
            a.put("Hello", "There");
            a.hasKey("Foo");
            Iterator<Attribute> iterator = a.iterator();
            iterator.next();
            Attribute attr = iterator.next();
            attr.setKey("Foo");
            attr = iterator.next();
            attr.setKey("Bar");
            attr.setValue("Qux");
            a.get("Foo");
            a.get("Bar");
            a.hasKey("Tot");
            a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateable_add196302 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_mg196320() throws Exception {
        Object __DSPOT_o_58172 = new Object();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateable_mg196320__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateable_mg196320__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateable_mg196320__5)).hashCode())));
        Attributes o_testIteratorUpdateable_mg196320__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateable_mg196320__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateable_mg196320__6)).hashCode())));
        boolean o_testIteratorUpdateable_mg196320__7 = a.hasKey("Foo");
        Assert.assertFalse(o_testIteratorUpdateable_mg196320__7);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_mg196320__16 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable_mg196320__16);
        String o_testIteratorUpdateable_mg196320__17 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_mg196320__17);
        String o_testIteratorUpdateable_mg196320__18 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196320__18);
        boolean o_testIteratorUpdateable_mg196320__19 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorUpdateable_mg196320__19);
        boolean o_testIteratorUpdateable_mg196320__20 = a.hasKey("Hello");
        Assert.assertFalse(o_testIteratorUpdateable_mg196320__20);
        boolean o_testIteratorUpdateable_mg196320__21 = a.equals(__DSPOT_o_58172);
        Assert.assertFalse(o_testIteratorUpdateable_mg196320__21);
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_mg196320__5)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_mg196320__5)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_mg196320__6)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_mg196320__6)).hashCode())));
        Assert.assertFalse(o_testIteratorUpdateable_mg196320__7);
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable_mg196320__16);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_mg196320__17);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196320__18);
        Assert.assertFalse(o_testIteratorUpdateable_mg196320__19);
        Assert.assertFalse(o_testIteratorUpdateable_mg196320__20);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablenull196382() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateablenull196382__3 = a.put("Tot", null);
        Assert.assertEquals(" Tot", ((Attributes) (o_testIteratorUpdateablenull196382__3)).toString());
        Assert.assertEquals(555415706, ((int) (((Attributes) (o_testIteratorUpdateablenull196382__3)).hashCode())));
        Attributes o_testIteratorUpdateablenull196382__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot Hello=\"There\"", ((Attributes) (o_testIteratorUpdateablenull196382__4)).toString());
        Assert.assertEquals(142394285, ((int) (((Attributes) (o_testIteratorUpdateablenull196382__4)).hashCode())));
        boolean o_testIteratorUpdateablenull196382__5 = a.hasKey("Foo");
        Assert.assertFalse(o_testIteratorUpdateablenull196382__5);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot", ((Attribute) (attr)).toString());
        Assert.assertEquals(2612711, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertNull(((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateablenull196382__14 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateablenull196382__14);
        String o_testIteratorUpdateablenull196382__15 = a.get("Foo");
        Assert.assertEquals("", o_testIteratorUpdateablenull196382__15);
        String o_testIteratorUpdateablenull196382__16 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateablenull196382__16);
        boolean o_testIteratorUpdateablenull196382__17 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorUpdateablenull196382__17);
        boolean o_testIteratorUpdateablenull196382__18 = a.hasKey("Hello");
        Assert.assertFalse(o_testIteratorUpdateablenull196382__18);
        Assert.assertEquals(" Foo Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1223410135, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateablenull196382__3)).toString());
        Assert.assertEquals(-1223410135, ((int) (((Attributes) (o_testIteratorUpdateablenull196382__3)).hashCode())));
        Assert.assertEquals(" Foo Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateablenull196382__4)).toString());
        Assert.assertEquals(-1223410135, ((int) (((Attributes) (o_testIteratorUpdateablenull196382__4)).hashCode())));
        Assert.assertFalse(o_testIteratorUpdateablenull196382__5);
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateablenull196382__14);
        Assert.assertEquals("", o_testIteratorUpdateablenull196382__15);
        Assert.assertEquals("Qux", o_testIteratorUpdateablenull196382__16);
        Assert.assertFalse(o_testIteratorUpdateablenull196382__17);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablenull196386_failAssert213() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put("Tot", "a&p");
            a.put("Hello", "There");
            a.hasKey("Foo");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.setKey(null);
            attr = iterator.next();
            attr.setKey("Bar");
            attr.setValue("Qux");
            a.get("Foo");
            a.get("Bar");
            a.hasKey("Tot");
            a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateablenull196386 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_mg196335() throws Exception {
        Object __DSPOT_o_58184 = new Object();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateable_mg196335__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateable_mg196335__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateable_mg196335__5)).hashCode())));
        Attributes o_testIteratorUpdateable_mg196335__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateable_mg196335__6)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateable_mg196335__6)).hashCode())));
        boolean o_testIteratorUpdateable_mg196335__7 = a.hasKey("Foo");
        Assert.assertFalse(o_testIteratorUpdateable_mg196335__7);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_mg196335__16 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable_mg196335__16);
        String o_testIteratorUpdateable_mg196335__17 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_mg196335__17);
        String o_testIteratorUpdateable_mg196335__18 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196335__18);
        boolean o_testIteratorUpdateable_mg196335__19 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorUpdateable_mg196335__19);
        boolean o_testIteratorUpdateable_mg196335__20 = a.hasKey("Hello");
        Assert.assertFalse(o_testIteratorUpdateable_mg196335__20);
        boolean o_testIteratorUpdateable_mg196335__21 = attr.equals(__DSPOT_o_58184);
        Assert.assertFalse(o_testIteratorUpdateable_mg196335__21);
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_mg196335__5)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_mg196335__5)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_mg196335__6)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_mg196335__6)).hashCode())));
        Assert.assertFalse(o_testIteratorUpdateable_mg196335__7);
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable_mg196335__16);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_mg196335__17);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196335__18);
        Assert.assertFalse(o_testIteratorUpdateable_mg196335__19);
        Assert.assertFalse(o_testIteratorUpdateable_mg196335__20);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_mg196334() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateable_mg196334__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateable_mg196334__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateable_mg196334__3)).hashCode())));
        Attributes o_testIteratorUpdateable_mg196334__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateable_mg196334__4)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateable_mg196334__4)).hashCode())));
        boolean o_testIteratorUpdateable_mg196334__5 = a.hasKey("Foo");
        Assert.assertFalse(o_testIteratorUpdateable_mg196334__5);
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_mg196334__14 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable_mg196334__14);
        String o_testIteratorUpdateable_mg196334__15 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_mg196334__15);
        String o_testIteratorUpdateable_mg196334__16 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196334__16);
        boolean o_testIteratorUpdateable_mg196334__17 = a.hasKey("Tot");
        Assert.assertFalse(o_testIteratorUpdateable_mg196334__17);
        boolean o_testIteratorUpdateable_mg196334__18 = a.hasKey("Hello");
        Assert.assertFalse(o_testIteratorUpdateable_mg196334__18);
        Attribute o_testIteratorUpdateable_mg196334__19 = attr.clone();
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (o_testIteratorUpdateable_mg196334__19)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (o_testIteratorUpdateable_mg196334__19)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (o_testIteratorUpdateable_mg196334__19)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (o_testIteratorUpdateable_mg196334__19)).getKey());
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_mg196334__3)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_mg196334__3)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateable_mg196334__4)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateable_mg196334__4)).hashCode())));
        Assert.assertFalse(o_testIteratorUpdateable_mg196334__5);
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable_mg196334__14);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_mg196334__15);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196334__16);
        Assert.assertFalse(o_testIteratorUpdateable_mg196334__17);
        Assert.assertFalse(o_testIteratorUpdateable_mg196334__18);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablenull196390_failAssert211null215770() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorUpdateablenull196390_failAssert211null215770__5 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateablenull196390_failAssert211null215770__5)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateablenull196390_failAssert211null215770__5)).hashCode())));
            Attributes o_testIteratorUpdateablenull196390_failAssert211null215770__6 = a.put("Hello", "There");
            Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateablenull196390_failAssert211null215770__6)).toString());
            Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateablenull196390_failAssert211null215770__6)).hashCode())));
            a.hasKey(null);
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.setKey("Foo");
            attr = iterator.next();
            attr.setKey("Bar");
            attr.setValue("Qux");
            a.get("Foo");
            a.get(null);
            a.hasKey("Tot");
            a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateablenull196390 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablelitString196217_add206254() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196217__3 = a.put("Tot", "\n");
        Assert.assertEquals(" Tot=\"\n\"", ((Attributes) (o_testIteratorUpdateablelitString196217__3)).toString());
        Assert.assertEquals(555713616, ((int) (((Attributes) (o_testIteratorUpdateablelitString196217__3)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196217__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"\n\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateablelitString196217__4)).toString());
        Assert.assertEquals(142692195, ((int) (((Attributes) (o_testIteratorUpdateablelitString196217__4)).hashCode())));
        boolean o_testIteratorUpdateablelitString196217__5 = a.hasKey("Foo");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"\n\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2612721, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("\n", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateablelitString196217__14 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196217__14);
        String o_testIteratorUpdateablelitString196217__15 = a.get("Foo");
        Assert.assertEquals("\n", o_testIteratorUpdateablelitString196217__15);
        String o_testIteratorUpdateablelitString196217__16 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateablelitString196217__16);
        boolean o_testIteratorUpdateablelitString196217__17 = a.hasKey("Tot");
        boolean o_testIteratorUpdateablelitString196217__18 = a.hasKey("Hello");
        Assert.assertEquals(" Foo=\"\n\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1223112225, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"\n\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196217__3)).toString());
        Assert.assertEquals(-1223112225, ((int) (((Attributes) (o_testIteratorUpdateablelitString196217__3)).hashCode())));
        Assert.assertEquals(" Foo=\"\n\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196217__4)).toString());
        Assert.assertEquals(-1223112225, ((int) (((Attributes) (o_testIteratorUpdateablelitString196217__4)).hashCode())));
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196217__14);
        Assert.assertEquals("\n", o_testIteratorUpdateablelitString196217__15);
        Assert.assertEquals("Qux", o_testIteratorUpdateablelitString196217__16);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablelitString196243_failAssert222_rv214793() throws Exception {
        try {
            String __DSPOT_key_62573 = "tQ!sH?b!olqf61uBM B]";
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorUpdateablelitString196243_failAssert222_rv214793__6 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateablelitString196243_failAssert222_rv214793__6)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateablelitString196243_failAssert222_rv214793__6)).hashCode())));
            Attributes __DSPOT_invoc_6 = a.put("Hello", "There");
            boolean o_testIteratorUpdateablelitString196243_failAssert222_rv214793__10 = a.hasKey("Foo");
            Assert.assertFalse(o_testIteratorUpdateablelitString196243_failAssert222_rv214793__10);
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
            Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
            Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
            Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
            attr.setKey("");
            attr = iterator.next();
            attr.setKey("Bar");
            attr.setValue("Qux");
            a.get("Foo");
            a.get("Bar");
            a.hasKey("Tot");
            a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateablelitString196243 should have thrown IllegalArgumentException");
            __DSPOT_invoc_6.removeIgnoreCase(__DSPOT_key_62573);
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_mg196337null214927_failAssert225() throws Exception {
        try {
            String __DSPOT_key_58185 = null;
            Attributes a = new Attributes();
            Attributes o_testIteratorUpdateable_mg196337__4 = a.put("Tot", "a&p");
            Attributes o_testIteratorUpdateable_mg196337__5 = a.put("Hello", "There");
            boolean o_testIteratorUpdateable_mg196337__6 = a.hasKey("Foo");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.setKey("Foo");
            attr = iterator.next();
            attr.setKey("Bar");
            String o_testIteratorUpdateable_mg196337__15 = attr.setValue("Qux");
            String o_testIteratorUpdateable_mg196337__16 = a.get("Foo");
            String o_testIteratorUpdateable_mg196337__17 = a.get("Bar");
            boolean o_testIteratorUpdateable_mg196337__18 = a.hasKey("Tot");
            boolean o_testIteratorUpdateable_mg196337__19 = a.hasKey("Hello");
            attr.setKey(__DSPOT_key_58185);
            org.junit.Assert.fail("testIteratorUpdateable_mg196337null214927 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_mg196338_mg211739() throws Exception {
        String __DSPOT_val_58186 = "ugU 4{|tMnOi2:!N$)d#";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateable_mg196338__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateable_mg196338__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateable_mg196338__4)).hashCode())));
        Attributes o_testIteratorUpdateable_mg196338__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateable_mg196338__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateable_mg196338__5)).hashCode())));
        boolean o_testIteratorUpdateable_mg196338__6 = a.hasKey("Foo");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_mg196338__15 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable_mg196338__15);
        String o_testIteratorUpdateable_mg196338__16 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_mg196338__16);
        String o_testIteratorUpdateable_mg196338__17 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196338__17);
        boolean o_testIteratorUpdateable_mg196338__18 = a.hasKey("Tot");
        boolean o_testIteratorUpdateable_mg196338__19 = a.hasKey("Hello");
        String o_testIteratorUpdateable_mg196338__20 = attr.setValue(__DSPOT_val_58186);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196338__20);
        Attributes o_testIteratorUpdateable_mg196338_mg211739__39 = a.clone();
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"ugU 4{|tMnOi2:!N$)d#\"", ((Attributes) (o_testIteratorUpdateable_mg196338_mg211739__39)).toString());
        Assert.assertEquals(465769978, ((int) (((Attributes) (o_testIteratorUpdateable_mg196338_mg211739__39)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"ugU 4{|tMnOi2:!N$)d#\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1940149242, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"ugU 4{|tMnOi2:!N$)d#\"", ((Attributes) (o_testIteratorUpdateable_mg196338__4)).toString());
        Assert.assertEquals(1940149242, ((int) (((Attributes) (o_testIteratorUpdateable_mg196338__4)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"ugU 4{|tMnOi2:!N$)d#\"", ((Attributes) (o_testIteratorUpdateable_mg196338__5)).toString());
        Assert.assertEquals(1940149242, ((int) (((Attributes) (o_testIteratorUpdateable_mg196338__5)).hashCode())));
        Assert.assertEquals("Bar=\"ugU 4{|tMnOi2:!N$)d#\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(1869126909, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("ugU 4{|tMnOi2:!N$)d#", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"ugU 4{|tMnOi2:!N$)d#\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(1869126909, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("ugU 4{|tMnOi2:!N$)d#", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable_mg196338__15);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_mg196338__16);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196338__17);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196338__20);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablelitString196226null215703() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196226__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateablelitString196226__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__3)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196226__4 = a.put(":", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" :=\"There\"", ((Attributes) (o_testIteratorUpdateablelitString196226__4)).toString());
        Assert.assertEquals(-607266278, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__4)).hashCode())));
        boolean o_testIteratorUpdateablelitString196226__5 = a.hasKey("Foo");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals(":=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(80776522, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals(":", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateablelitString196226__14 = attr.setValue(null);
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196226__14);
        String o_testIteratorUpdateablelitString196226__15 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateablelitString196226__15);
        String o_testIteratorUpdateablelitString196226__16 = a.get("Bar");
        Assert.assertEquals("", o_testIteratorUpdateablelitString196226__16);
        boolean o_testIteratorUpdateablelitString196226__17 = a.hasKey("Tot");
        boolean o_testIteratorUpdateablelitString196226__18 = a.hasKey("Hello");
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar", ((Attributes) (a)).toString());
        Assert.assertEquals(1513641834, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar", ((Attributes) (o_testIteratorUpdateablelitString196226__3)).toString());
        Assert.assertEquals(1513641834, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__3)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar", ((Attributes) (o_testIteratorUpdateablelitString196226__4)).toString());
        Assert.assertEquals(1513641834, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__4)).hashCode())));
        Assert.assertEquals("Bar", ((Attribute) (attr)).toString());
        Assert.assertEquals(2062957, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertNull(((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar", ((Attribute) (attr)).toString());
        Assert.assertEquals(2062957, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertNull(((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196226__14);
        Assert.assertEquals("a&p", o_testIteratorUpdateablelitString196226__15);
        Assert.assertEquals("", o_testIteratorUpdateablelitString196226__16);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablelitString196217null215200_failAssert227() throws Exception {
        try {
            Attributes a = new Attributes();
            Attributes o_testIteratorUpdateablelitString196217__3 = a.put("Tot", "\n");
            Attributes o_testIteratorUpdateablelitString196217__4 = a.put("Hello", "There");
            boolean o_testIteratorUpdateablelitString196217__5 = a.hasKey(null);
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.setKey("Foo");
            attr = iterator.next();
            attr.setKey("Bar");
            String o_testIteratorUpdateablelitString196217__14 = attr.setValue("Qux");
            String o_testIteratorUpdateablelitString196217__15 = a.get("Foo");
            String o_testIteratorUpdateablelitString196217__16 = a.get("Bar");
            boolean o_testIteratorUpdateablelitString196217__17 = a.hasKey("Tot");
            boolean o_testIteratorUpdateablelitString196217__18 = a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateablelitString196217null215200 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablelitString196218_mg213696() throws Exception {
        boolean __DSPOT_value_61858 = false;
        String __DSPOT_key_61857 = "VP;Fogxi!]}$NE,ThxN`";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196218__3 = a.put("Tot", ":");
        Assert.assertEquals(" Tot=\":\"", ((Attributes) (o_testIteratorUpdateablelitString196218__3)).toString());
        Assert.assertEquals(557143584, ((int) (((Attributes) (o_testIteratorUpdateablelitString196218__3)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196218__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\":\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateablelitString196218__4)).toString());
        Assert.assertEquals(144122163, ((int) (((Attributes) (o_testIteratorUpdateablelitString196218__4)).hashCode())));
        boolean o_testIteratorUpdateablelitString196218__5 = a.hasKey("Foo");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\":\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2612769, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals(":", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateablelitString196218__14 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196218__14);
        String o_testIteratorUpdateablelitString196218__15 = a.get("Foo");
        Assert.assertEquals(":", o_testIteratorUpdateablelitString196218__15);
        String o_testIteratorUpdateablelitString196218__16 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateablelitString196218__16);
        boolean o_testIteratorUpdateablelitString196218__17 = a.hasKey("Tot");
        boolean o_testIteratorUpdateablelitString196218__18 = a.hasKey("Hello");
        Attributes o_testIteratorUpdateablelitString196218_mg213696__37 = o_testIteratorUpdateablelitString196218__3.put(__DSPOT_key_61857, __DSPOT_value_61858);
        Assert.assertEquals(" Foo=\":\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196218_mg213696__37)).toString());
        Assert.assertEquals(-1221682257, ((int) (((Attributes) (o_testIteratorUpdateablelitString196218_mg213696__37)).hashCode())));
        Assert.assertEquals(" Foo=\":\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1221682257, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\":\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196218__3)).toString());
        Assert.assertEquals(-1221682257, ((int) (((Attributes) (o_testIteratorUpdateablelitString196218__3)).hashCode())));
        Assert.assertEquals(" Foo=\":\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196218__4)).toString());
        Assert.assertEquals(-1221682257, ((int) (((Attributes) (o_testIteratorUpdateablelitString196218__4)).hashCode())));
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196218__14);
        Assert.assertEquals(":", o_testIteratorUpdateablelitString196218__15);
        Assert.assertEquals("Qux", o_testIteratorUpdateablelitString196218__16);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_remove196312_failAssert209_add208194() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorUpdateable_remove196312_failAssert209_add208194__5 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateable_remove196312_failAssert209_add208194__5)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateable_remove196312_failAssert209_add208194__5)).hashCode())));
            boolean o_testIteratorUpdateable_remove196312_failAssert209_add208194__6 = a.hasKey("Foo");
            Assert.assertFalse(o_testIteratorUpdateable_remove196312_failAssert209_add208194__6);
            a.iterator();
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
            Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
            Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
            Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
            attr.setKey("Foo");
            attr = iterator.next();
            attr.setKey("Bar");
            attr.setValue("Qux");
            a.get("Foo");
            a.get("Bar");
            a.hasKey("Tot");
            a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateable_remove196312 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablelitString196226_mg213626() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196226__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateablelitString196226__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__3)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196226__4 = a.put(":", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" :=\"There\"", ((Attributes) (o_testIteratorUpdateablelitString196226__4)).toString());
        Assert.assertEquals(-607266278, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__4)).hashCode())));
        boolean o_testIteratorUpdateablelitString196226__5 = a.hasKey("Foo");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals(":=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(80776522, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals(":", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateablelitString196226__14 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196226__14);
        String o_testIteratorUpdateablelitString196226__15 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateablelitString196226__15);
        String o_testIteratorUpdateablelitString196226__16 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateablelitString196226__16);
        boolean o_testIteratorUpdateablelitString196226__17 = a.hasKey("Tot");
        boolean o_testIteratorUpdateablelitString196226__18 = a.hasKey("Hello");
        List<Attribute> o_testIteratorUpdateablelitString196226_mg213626__35 = o_testIteratorUpdateablelitString196226__3.asList();
        Assert.assertFalse(o_testIteratorUpdateablelitString196226_mg213626__35.isEmpty());
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196226__3)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__3)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196226__4)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__4)).hashCode())));
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196226__14);
        Assert.assertEquals("a&p", o_testIteratorUpdateablelitString196226__15);
        Assert.assertEquals("Qux", o_testIteratorUpdateablelitString196226__16);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablelitString196223_remove208536() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196223__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateablelitString196223__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateablelitString196223__3)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196223__4 = a.put("T;{w(", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" T;{w(=\"There\"", ((Attributes) (o_testIteratorUpdateablelitString196223__4)).toString());
        Assert.assertEquals(-81195537, ((int) (((Attributes) (o_testIteratorUpdateablelitString196223__4)).hashCode())));
        boolean o_testIteratorUpdateablelitString196223__5 = a.hasKey("Foo");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("T;{w(=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-1751076257, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("T;{w(", ((Attribute) (attr)).getKey());
        String o_testIteratorUpdateablelitString196223__14 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196223__14);
        String o_testIteratorUpdateablelitString196223__15 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateablelitString196223__15);
        String o_testIteratorUpdateablelitString196223__16 = a.get("Bar");
        Assert.assertEquals("", o_testIteratorUpdateablelitString196223__16);
        boolean o_testIteratorUpdateablelitString196223__17 = a.hasKey("Tot");
        boolean o_testIteratorUpdateablelitString196223__18 = a.hasKey("Hello");
        Assert.assertEquals(" Foo=\"a&amp;p\" T;{w(=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(137344844, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" T;{w(=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196223__3)).toString());
        Assert.assertEquals(137344844, ((int) (((Attributes) (o_testIteratorUpdateablelitString196223__3)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" T;{w(=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196223__4)).toString());
        Assert.assertEquals(137344844, ((int) (((Attributes) (o_testIteratorUpdateablelitString196223__4)).hashCode())));
        Assert.assertEquals("T;{w(=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-1831769393, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("T;{w(", ((Attribute) (attr)).getKey());
        Assert.assertEquals("T;{w(=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-1831769393, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("T;{w(", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196223__14);
        Assert.assertEquals("a&p", o_testIteratorUpdateablelitString196223__15);
        Assert.assertEquals("", o_testIteratorUpdateablelitString196223__16);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablelitString196223_mg212744() throws Exception {
        Attributes __DSPOT_o_61180 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196223__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateablelitString196223__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateablelitString196223__3)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196223__4 = a.put("T;{w(", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" T;{w(=\"There\"", ((Attributes) (o_testIteratorUpdateablelitString196223__4)).toString());
        Assert.assertEquals(-81195537, ((int) (((Attributes) (o_testIteratorUpdateablelitString196223__4)).hashCode())));
        boolean o_testIteratorUpdateablelitString196223__5 = a.hasKey("Foo");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("T;{w(=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-1751076257, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("T;{w(", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateablelitString196223__14 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196223__14);
        String o_testIteratorUpdateablelitString196223__15 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateablelitString196223__15);
        String o_testIteratorUpdateablelitString196223__16 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateablelitString196223__16);
        boolean o_testIteratorUpdateablelitString196223__17 = a.hasKey("Tot");
        boolean o_testIteratorUpdateablelitString196223__18 = a.hasKey("Hello");
        boolean o_testIteratorUpdateablelitString196223_mg212744__37 = o_testIteratorUpdateablelitString196223__4.equals(__DSPOT_o_61180);
        Assert.assertFalse(o_testIteratorUpdateablelitString196223_mg212744__37);
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196223__3)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateablelitString196223__3)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196223__4)).toString());
        Assert.assertEquals(1592047902, ((int) (((Attributes) (o_testIteratorUpdateablelitString196223__4)).hashCode())));
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196223__14);
        Assert.assertEquals("a&p", o_testIteratorUpdateablelitString196223__15);
        Assert.assertEquals("Qux", o_testIteratorUpdateablelitString196223__16);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablenull196383_failAssert220_add208348() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorUpdateablenull196383_failAssert220_add208348__5 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateablenull196383_failAssert220_add208348__5)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateablenull196383_failAssert220_add208348__5)).hashCode())));
            a.put(null, "There");
            a.put(null, "There");
            a.hasKey("Foo");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.setKey("Foo");
            attr = iterator.next();
            attr.setKey("Bar");
            attr.setValue("Qux");
            a.get("Foo");
            a.get("Bar");
            a.hasKey("Tot");
            a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateablenull196383 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_rv196353litBool204694() throws Exception {
        boolean __DSPOT_value_58194 = true;
        String __DSPOT_key_58193 = "%f*w,OP|(@^S lC%GKdH";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_testIteratorUpdateable_rv196353__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateable_rv196353__8)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateable_rv196353__8)).hashCode())));
        boolean o_testIteratorUpdateable_rv196353__9 = a.hasKey("Foo");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_rv196353__18 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable_rv196353__18);
        String o_testIteratorUpdateable_rv196353__19 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196353__19);
        String o_testIteratorUpdateable_rv196353__20 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196353__20);
        boolean o_testIteratorUpdateable_rv196353__21 = a.hasKey("Tot");
        boolean o_testIteratorUpdateable_rv196353__22 = a.hasKey("Hello");
        Attributes o_testIteratorUpdateable_rv196353__23 = __DSPOT_invoc_3.put(__DSPOT_key_58193, __DSPOT_value_58194);
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\" %f*w,OP|(@^S lC%GKdH", ((Attributes) (o_testIteratorUpdateable_rv196353__23)).toString());
        Assert.assertEquals(-1899372481, ((int) (((Attributes) (o_testIteratorUpdateable_rv196353__23)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\" %f*w,OP|(@^S lC%GKdH", ((Attributes) (a)).toString());
        Assert.assertEquals(-1899372481, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\" %f*w,OP|(@^S lC%GKdH", ((Attributes) (o_testIteratorUpdateable_rv196353__8)).toString());
        Assert.assertEquals(-1899372481, ((int) (((Attributes) (o_testIteratorUpdateable_rv196353__8)).hashCode())));
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable_rv196353__18);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196353__19);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196353__20);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablenull196390_failAssert211_mg213917null231813() throws Exception {
        try {
            String __DSPOT_key_62014 = "+YB,R![S_KOY|x+^ou/_";
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorUpdateablenull196390_failAssert211_mg213917__6 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateablenull196390_failAssert211_mg213917__6)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateablenull196390_failAssert211_mg213917__6)).hashCode())));
            Attributes o_testIteratorUpdateablenull196390_failAssert211_mg213917__7 = a.put("Hello", "There");
            Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateablenull196390_failAssert211_mg213917__7)).toString());
            Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateablenull196390_failAssert211_mg213917__7)).hashCode())));
            boolean o_testIteratorUpdateablenull196390_failAssert211_mg213917__8 = a.hasKey(null);
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.setKey("Foo");
            attr = iterator.next();
            attr.setKey("Bar");
            String o_testIteratorUpdateablenull196390_failAssert211_mg213917__17 = attr.setValue("Qux");
            String o_testIteratorUpdateablenull196390_failAssert211_mg213917__18 = a.get("Foo");
            a.get(null);
            a.hasKey("Tot");
            a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateablenull196390 should have thrown IllegalArgumentException");
            a.get(__DSPOT_key_62014);
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_rv196374litBool204695litString219339() throws Exception {
        boolean __DSPOT_value_58207 = true;
        String __DSPOT_key_58206 = "P<g-y%=*A&#Y |]0avO]";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateable_rv196374__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateable_rv196374__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateable_rv196374__5)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("\n", "There");
        boolean o_testIteratorUpdateable_rv196374__9 = a.hasKey("Foo");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(80774724, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_rv196374__18 = attr.setValue("Qux");
        Assert.assertEquals("", o_testIteratorUpdateable_rv196374__18);
        String o_testIteratorUpdateable_rv196374__19 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196374__19);
        String o_testIteratorUpdateable_rv196374__20 = a.get("Bar");
        Assert.assertEquals("", o_testIteratorUpdateable_rv196374__20);
        boolean o_testIteratorUpdateable_rv196374__21 = a.hasKey("Tot");
        boolean o_testIteratorUpdateable_rv196374__22 = a.hasKey("Hello");
        Attributes o_testIteratorUpdateable_rv196374__23 = __DSPOT_invoc_4.put(__DSPOT_key_58206, __DSPOT_value_58207);
        Assert.assertEquals(" Foo=\"a&amp;p\" \n=\"There\" P<g-y%=*A&#Y |]0avO]", ((Attributes) (o_testIteratorUpdateable_rv196374__23)).toString());
        Assert.assertEquals(-1663675664, ((int) (((Attributes) (o_testIteratorUpdateable_rv196374__23)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" \n=\"There\" P<g-y%=*A&#Y |]0avO]", ((Attributes) (a)).toString());
        Assert.assertEquals(-1663675664, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" \n=\"There\" P<g-y%=*A&#Y |]0avO]", ((Attributes) (o_testIteratorUpdateable_rv196374__5)).toString());
        Assert.assertEquals(-1663675664, ((int) (((Attributes) (o_testIteratorUpdateable_rv196374__5)).hashCode())));
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("", o_testIteratorUpdateable_rv196374__18);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196374__19);
        Assert.assertEquals("", o_testIteratorUpdateable_rv196374__20);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablelitString196226_remove208567_mg228071() throws Exception {
        Attribute __DSPOT_attribute_64773 = new Attribute(" *Y*Uo|g8[7TPsB$l{PX", "_xR>7ud:4gjourap9jIX", new Attributes());
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196226__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateablelitString196226__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__3)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196226__4 = a.put(":", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" :=\"There\"", ((Attributes) (o_testIteratorUpdateablelitString196226__4)).toString());
        Assert.assertEquals(-607266278, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__4)).hashCode())));
        boolean o_testIteratorUpdateablelitString196226__5 = a.hasKey("Foo");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals(":=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(80776522, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals(":", ((Attribute) (attr)).getKey());
        String o_testIteratorUpdateablelitString196226__14 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196226__14);
        String o_testIteratorUpdateablelitString196226__15 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateablelitString196226__15);
        String o_testIteratorUpdateablelitString196226__16 = a.get("Bar");
        Assert.assertEquals("", o_testIteratorUpdateablelitString196226__16);
        boolean o_testIteratorUpdateablelitString196226__17 = a.hasKey("Tot");
        boolean o_testIteratorUpdateablelitString196226__18 = a.hasKey("Hello");
        Attributes o_testIteratorUpdateablelitString196226_remove208567_mg228071__37 = o_testIteratorUpdateablelitString196226__4.put(__DSPOT_attribute_64773);
        Assert.assertEquals(" Foo=\"a&amp;p\" :=\"Qux\" *Y*Uo|g8[7TPsB$l{PX=\"_xR>7ud:4gjourap9jIX\"", ((Attributes) (o_testIteratorUpdateablelitString196226_remove208567_mg228071__37)).toString());
        Assert.assertEquals(-481275401, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226_remove208567_mg228071__37)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" :=\"Qux\" *Y*Uo|g8[7TPsB$l{PX=\"_xR>7ud:4gjourap9jIX\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-481275401, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" :=\"Qux\" *Y*Uo|g8[7TPsB$l{PX=\"_xR>7ud:4gjourap9jIX\"", ((Attributes) (o_testIteratorUpdateablelitString196226__3)).toString());
        Assert.assertEquals(-481275401, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__3)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" :=\"Qux\" *Y*Uo|g8[7TPsB$l{PX=\"_xR>7ud:4gjourap9jIX\"", ((Attributes) (o_testIteratorUpdateablelitString196226__4)).toString());
        Assert.assertEquals(-481275401, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__4)).hashCode())));
        Assert.assertEquals(":=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(83386, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals(":", ((Attribute) (attr)).getKey());
        Assert.assertEquals(":=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(83386, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals(":", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196226__14);
        Assert.assertEquals("a&p", o_testIteratorUpdateablelitString196226__15);
        Assert.assertEquals("", o_testIteratorUpdateablelitString196226__16);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablelitString196226_remove208567_mg228073() throws Exception {
        String __DSPOT_key_64775 = "S+wTu|n*y>&JH1l(r(J$";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196226__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateablelitString196226__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__3)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196226__4 = a.put(":", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" :=\"There\"", ((Attributes) (o_testIteratorUpdateablelitString196226__4)).toString());
        Assert.assertEquals(-607266278, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__4)).hashCode())));
        boolean o_testIteratorUpdateablelitString196226__5 = a.hasKey("Foo");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals(":=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(80776522, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals(":", ((Attribute) (attr)).getKey());
        String o_testIteratorUpdateablelitString196226__14 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196226__14);
        String o_testIteratorUpdateablelitString196226__15 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateablelitString196226__15);
        String o_testIteratorUpdateablelitString196226__16 = a.get("Bar");
        Assert.assertEquals("", o_testIteratorUpdateablelitString196226__16);
        boolean o_testIteratorUpdateablelitString196226__17 = a.hasKey("Tot");
        boolean o_testIteratorUpdateablelitString196226__18 = a.hasKey("Hello");
        o_testIteratorUpdateablelitString196226__4.removeIgnoreCase(__DSPOT_key_64775);
        Assert.assertEquals(" Foo=\"a&amp;p\" :=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-388725897, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" :=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196226__3)).toString());
        Assert.assertEquals(-388725897, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__3)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" :=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196226__4)).toString());
        Assert.assertEquals(-388725897, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__4)).hashCode())));
        Assert.assertEquals(":=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(83386, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals(":", ((Attribute) (attr)).getKey());
        Assert.assertEquals(":=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(83386, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals(":", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196226__14);
        Assert.assertEquals("a&p", o_testIteratorUpdateablelitString196226__15);
        Assert.assertEquals("", o_testIteratorUpdateablelitString196226__16);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablelitString196226_remove208566_mg224996() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196226__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateablelitString196226__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__3)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196226__4 = a.put(":", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" :=\"There\"", ((Attributes) (o_testIteratorUpdateablelitString196226__4)).toString());
        Assert.assertEquals(-607266278, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__4)).hashCode())));
        boolean o_testIteratorUpdateablelitString196226__5 = a.hasKey("Foo");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr = iterator.next();
        Assert.assertEquals(":=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(80776522, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals(":", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateablelitString196226__14 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196226__14);
        String o_testIteratorUpdateablelitString196226__15 = a.get("Foo");
        Assert.assertEquals("", o_testIteratorUpdateablelitString196226__15);
        String o_testIteratorUpdateablelitString196226__16 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateablelitString196226__16);
        boolean o_testIteratorUpdateablelitString196226__17 = a.hasKey("Tot");
        boolean o_testIteratorUpdateablelitString196226__18 = a.hasKey("Hello");
        List<Attribute> o_testIteratorUpdateablelitString196226_remove208566_mg224996__34 = o_testIteratorUpdateablelitString196226__3.asList();
        Assert.assertFalse(o_testIteratorUpdateablelitString196226_remove208566_mg224996__34.isEmpty());
        Assert.assertEquals(" Tot=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1136815153, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196226__3)).toString());
        Assert.assertEquals(1136815153, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__3)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Bar=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196226__4)).toString());
        Assert.assertEquals(1136815153, ((int) (((Attributes) (o_testIteratorUpdateablelitString196226__4)).hashCode())));
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196226__14);
        Assert.assertEquals("", o_testIteratorUpdateablelitString196226__15);
        Assert.assertEquals("Qux", o_testIteratorUpdateablelitString196226__16);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablelitString196218_mg213696_remove224923() throws Exception {
        boolean __DSPOT_value_61858 = false;
        String __DSPOT_key_61857 = "VP;Fogxi!]}$NE,ThxN`";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196218__3 = a.put("Tot", ":");
        Assert.assertEquals(" Tot=\":\"", ((Attributes) (o_testIteratorUpdateablelitString196218__3)).toString());
        Assert.assertEquals(557143584, ((int) (((Attributes) (o_testIteratorUpdateablelitString196218__3)).hashCode())));
        Attributes o_testIteratorUpdateablelitString196218__4 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\":\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateablelitString196218__4)).toString());
        Assert.assertEquals(144122163, ((int) (((Attributes) (o_testIteratorUpdateablelitString196218__4)).hashCode())));
        boolean o_testIteratorUpdateablelitString196218__5 = a.hasKey("Foo");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\":\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2612769, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals(":", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        String o_testIteratorUpdateablelitString196218__14 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196218__14);
        String o_testIteratorUpdateablelitString196218__15 = a.get("Foo");
        Assert.assertEquals(":", o_testIteratorUpdateablelitString196218__15);
        String o_testIteratorUpdateablelitString196218__16 = a.get("Bar");
        Assert.assertEquals("", o_testIteratorUpdateablelitString196218__16);
        boolean o_testIteratorUpdateablelitString196218__17 = a.hasKey("Tot");
        boolean o_testIteratorUpdateablelitString196218__18 = a.hasKey("Hello");
        Attributes o_testIteratorUpdateablelitString196218_mg213696__37 = o_testIteratorUpdateablelitString196218__3.put(__DSPOT_key_61857, __DSPOT_value_61858);
        Assert.assertEquals(" Foo=\":\" Hello=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196218_mg213696__37)).toString());
        Assert.assertEquals(362662544, ((int) (((Attributes) (o_testIteratorUpdateablelitString196218_mg213696__37)).hashCode())));
        Assert.assertEquals(" Foo=\":\" Hello=\"Qux\"", ((Attributes) (a)).toString());
        Assert.assertEquals(362662544, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\":\" Hello=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196218__3)).toString());
        Assert.assertEquals(362662544, ((int) (((Attributes) (o_testIteratorUpdateablelitString196218__3)).hashCode())));
        Assert.assertEquals(" Foo=\":\" Hello=\"Qux\"", ((Attributes) (o_testIteratorUpdateablelitString196218__4)).toString());
        Assert.assertEquals(362662544, ((int) (((Attributes) (o_testIteratorUpdateablelitString196218__4)).hashCode())));
        Assert.assertEquals("Hello=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2136986558, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2136986558, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateablelitString196218__14);
        Assert.assertEquals(":", o_testIteratorUpdateablelitString196218__15);
        Assert.assertEquals("", o_testIteratorUpdateablelitString196218__16);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_rv196374litBool204695_mg227889() throws Exception {
        Attributes __DSPOT_o_64641 = new Attributes();
        boolean __DSPOT_value_58207 = true;
        String __DSPOT_key_58206 = "P<g-y%=*A&#Y |]0avO]";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateable_rv196374__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateable_rv196374__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateable_rv196374__5)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("Hello", "There");
        boolean o_testIteratorUpdateable_rv196374__9 = a.hasKey("Foo");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_rv196374__18 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable_rv196374__18);
        String o_testIteratorUpdateable_rv196374__19 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196374__19);
        String o_testIteratorUpdateable_rv196374__20 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196374__20);
        boolean o_testIteratorUpdateable_rv196374__21 = a.hasKey("Tot");
        boolean o_testIteratorUpdateable_rv196374__22 = a.hasKey("Hello");
        Attributes o_testIteratorUpdateable_rv196374__23 = __DSPOT_invoc_4.put(__DSPOT_key_58206, __DSPOT_value_58207);
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\" P<g-y%=*A&#Y |]0avO]", ((Attributes) (o_testIteratorUpdateable_rv196374__23)).toString());
        Assert.assertEquals(81835735, ((int) (((Attributes) (o_testIteratorUpdateable_rv196374__23)).hashCode())));
        boolean o_testIteratorUpdateable_rv196374litBool204695_mg227889__42 = o_testIteratorUpdateable_rv196374__5.equals(__DSPOT_o_64641);
        Assert.assertFalse(o_testIteratorUpdateable_rv196374litBool204695_mg227889__42);
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\" P<g-y%=*A&#Y |]0avO]", ((Attributes) (a)).toString());
        Assert.assertEquals(81835735, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\" P<g-y%=*A&#Y |]0avO]", ((Attributes) (o_testIteratorUpdateable_rv196374__5)).toString());
        Assert.assertEquals(81835735, ((int) (((Attributes) (o_testIteratorUpdateable_rv196374__5)).hashCode())));
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable_rv196374__18);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196374__19);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196374__20);
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\" P<g-y%=*A&#Y |]0avO]", ((Attributes) (o_testIteratorUpdateable_rv196374__23)).toString());
        Assert.assertEquals(81835735, ((int) (((Attributes) (o_testIteratorUpdateable_rv196374__23)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_rv196374litBool204695litString219341() throws Exception {
        boolean __DSPOT_value_58207 = true;
        String __DSPOT_key_58206 = "P<g-y%=*A&#Y |]0avO]";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateable_rv196374__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateable_rv196374__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateable_rv196374__5)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("Hello", "Hello");
        boolean o_testIteratorUpdateable_rv196374__9 = a.hasKey("Foo");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr.setKey("Foo");
        attr = iterator.next();
        Assert.assertEquals("Hello=\"Hello\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2067458496, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Hello", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_rv196374__18 = attr.setValue("Qux");
        Assert.assertEquals("Hello", o_testIteratorUpdateable_rv196374__18);
        String o_testIteratorUpdateable_rv196374__19 = a.get("Foo");
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196374__19);
        String o_testIteratorUpdateable_rv196374__20 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196374__20);
        boolean o_testIteratorUpdateable_rv196374__21 = a.hasKey("Tot");
        boolean o_testIteratorUpdateable_rv196374__22 = a.hasKey("Hello");
        Attributes o_testIteratorUpdateable_rv196374__23 = __DSPOT_invoc_4.put(__DSPOT_key_58206, __DSPOT_value_58207);
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\" P<g-y%=*A&#Y |]0avO]", ((Attributes) (o_testIteratorUpdateable_rv196374__23)).toString());
        Assert.assertEquals(81835735, ((int) (((Attributes) (o_testIteratorUpdateable_rv196374__23)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\" P<g-y%=*A&#Y |]0avO]", ((Attributes) (a)).toString());
        Assert.assertEquals(81835735, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Foo=\"a&amp;p\" Bar=\"Qux\" P<g-y%=*A&#Y |]0avO]", ((Attributes) (o_testIteratorUpdateable_rv196374__5)).toString());
        Assert.assertEquals(81835735, ((int) (((Attributes) (o_testIteratorUpdateable_rv196374__5)).hashCode())));
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"Qux\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2144545, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("Qux", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Hello", o_testIteratorUpdateable_rv196374__18);
        Assert.assertEquals("a&p", o_testIteratorUpdateable_rv196374__19);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_rv196374__20);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_remove196312_failAssert209_mg213869null231102() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorUpdateable_remove196312_failAssert209_mg213869__5 = a.put("Tot", null);
            Assert.assertEquals(" Tot", ((Attributes) (o_testIteratorUpdateable_remove196312_failAssert209_mg213869__5)).toString());
            Assert.assertEquals(555415706, ((int) (((Attributes) (o_testIteratorUpdateable_remove196312_failAssert209_mg213869__5)).hashCode())));
            boolean o_testIteratorUpdateable_remove196312_failAssert209_mg213869__6 = a.hasKey("Foo");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            Assert.assertEquals("Tot", ((Attribute) (attr)).toString());
            Assert.assertEquals(2612711, ((int) (((Attribute) (attr)).hashCode())));
            Assert.assertNull(((Attribute) (attr)).getValue());
            Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
            attr.setKey("Foo");
            attr = iterator.next();
            attr.setKey("Bar");
            attr.setValue("Qux");
            a.get("Foo");
            a.get("Bar");
            a.hasKey("Tot");
            a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateable_remove196312 should have thrown IllegalArgumentException");
            a.dataset();
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_mg196338_mg211739_remove224916() throws Exception {
        String __DSPOT_val_58186 = "ugU 4{|tMnOi2:!N$)d#";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorUpdateable_mg196338__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateable_mg196338__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateable_mg196338__4)).hashCode())));
        Attributes o_testIteratorUpdateable_mg196338__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateable_mg196338__5)).toString());
        Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateable_mg196338__5)).hashCode())));
        boolean o_testIteratorUpdateable_mg196338__6 = a.hasKey("Foo");
        Iterator<Attribute> iterator = a.iterator();
        Attribute attr = iterator.next();
        Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
        attr = iterator.next();
        Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("There", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
        attr.setKey("Bar");
        String o_testIteratorUpdateable_mg196338__15 = attr.setValue("Qux");
        Assert.assertEquals("There", o_testIteratorUpdateable_mg196338__15);
        String o_testIteratorUpdateable_mg196338__16 = a.get("Foo");
        Assert.assertEquals("", o_testIteratorUpdateable_mg196338__16);
        String o_testIteratorUpdateable_mg196338__17 = a.get("Bar");
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196338__17);
        boolean o_testIteratorUpdateable_mg196338__18 = a.hasKey("Tot");
        boolean o_testIteratorUpdateable_mg196338__19 = a.hasKey("Hello");
        String o_testIteratorUpdateable_mg196338__20 = attr.setValue(__DSPOT_val_58186);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196338__20);
        Attributes o_testIteratorUpdateable_mg196338_mg211739__39 = a.clone();
        Assert.assertEquals(" Tot=\"a&amp;p\" Bar=\"ugU 4{|tMnOi2:!N$)d#\"", ((Attributes) (o_testIteratorUpdateable_mg196338_mg211739__39)).toString());
        Assert.assertEquals(10537229, ((int) (((Attributes) (o_testIteratorUpdateable_mg196338_mg211739__39)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Bar=\"ugU 4{|tMnOi2:!N$)d#\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1953083341, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Bar=\"ugU 4{|tMnOi2:!N$)d#\"", ((Attributes) (o_testIteratorUpdateable_mg196338__4)).toString());
        Assert.assertEquals(1953083341, ((int) (((Attributes) (o_testIteratorUpdateable_mg196338__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" Bar=\"ugU 4{|tMnOi2:!N$)d#\"", ((Attributes) (o_testIteratorUpdateable_mg196338__5)).toString());
        Assert.assertEquals(1953083341, ((int) (((Attributes) (o_testIteratorUpdateable_mg196338__5)).hashCode())));
        Assert.assertEquals("Bar=\"ugU 4{|tMnOi2:!N$)d#\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(1869126909, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("ugU 4{|tMnOi2:!N$)d#", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("Bar=\"ugU 4{|tMnOi2:!N$)d#\"", ((Attribute) (attr)).toString());
        Assert.assertEquals(1869126909, ((int) (((Attribute) (attr)).hashCode())));
        Assert.assertEquals("ugU 4{|tMnOi2:!N$)d#", ((Attribute) (attr)).getValue());
        Assert.assertEquals("Bar", ((Attribute) (attr)).getKey());
        Assert.assertEquals("There", o_testIteratorUpdateable_mg196338__15);
        Assert.assertEquals("", o_testIteratorUpdateable_mg196338__16);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196338__17);
        Assert.assertEquals("Qux", o_testIteratorUpdateable_mg196338__20);
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateable_rv196374litBool204695null231428_failAssert232() throws Exception {
        try {
            boolean __DSPOT_value_58207 = true;
            String __DSPOT_key_58206 = null;
            Attributes a = new Attributes();
            Attributes o_testIteratorUpdateable_rv196374__5 = a.put("Tot", "a&p");
            Attributes __DSPOT_invoc_4 = a.put("Hello", "There");
            boolean o_testIteratorUpdateable_rv196374__9 = a.hasKey("Foo");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.setKey("Foo");
            attr = iterator.next();
            attr.setKey("Bar");
            String o_testIteratorUpdateable_rv196374__18 = attr.setValue("Qux");
            String o_testIteratorUpdateable_rv196374__19 = a.get("Foo");
            String o_testIteratorUpdateable_rv196374__20 = a.get("Bar");
            boolean o_testIteratorUpdateable_rv196374__21 = a.hasKey("Tot");
            boolean o_testIteratorUpdateable_rv196374__22 = a.hasKey("Hello");
            Attributes o_testIteratorUpdateable_rv196374__23 = __DSPOT_invoc_4.put(__DSPOT_key_58206, __DSPOT_value_58207);
            org.junit.Assert.fail("testIteratorUpdateable_rv196374litBool204695null231428 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablenull196383_failAssert220_rv214694_rv230712() throws Exception {
        try {
            String __DSPOT_key_66644 = "D[TOvO#3q/|;,(.RQZ*(";
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorUpdateablenull196383_failAssert220_rv214694__5 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateablenull196383_failAssert220_rv214694__5)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateablenull196383_failAssert220_rv214694__5)).hashCode())));
            Attributes __DSPOT_invoc_6 = a.put(null, "There");
            a.hasKey("Foo");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.setKey("Foo");
            attr = iterator.next();
            attr.setKey("Bar");
            attr.setValue("Qux");
            a.get("Foo");
            a.get("Bar");
            a.hasKey("Tot");
            a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateablenull196383 should have thrown IllegalArgumentException");
            Attributes __DSPOT_invoc_38 = __DSPOT_invoc_6.clone();
            __DSPOT_invoc_38.removeIgnoreCase(__DSPOT_key_66644);
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablenull196390_failAssert211_add208230_add224800() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorUpdateablenull196390_failAssert211_add208230__5 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateablenull196390_failAssert211_add208230__5)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateablenull196390_failAssert211_add208230__5)).hashCode())));
            Attributes o_testIteratorUpdateablenull196390_failAssert211_add208230__6 = a.put("Hello", "There");
            Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateablenull196390_failAssert211_add208230__6)).toString());
            Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateablenull196390_failAssert211_add208230__6)).hashCode())));
            boolean o_testIteratorUpdateablenull196390_failAssert211_add208230__7 = a.hasKey("Foo");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
            Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
            Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
            Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
            ((Attribute) (attr)).toString();
            attr.setKey("Foo");
            attr = iterator.next();
            Assert.assertEquals("Hello=\"There\"", ((Attribute) (attr)).toString());
            Assert.assertEquals(-2056293422, ((int) (((Attribute) (attr)).hashCode())));
            Assert.assertEquals("There", ((Attribute) (attr)).getValue());
            Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
            attr.setKey("Bar");
            String o_testIteratorUpdateablenull196390_failAssert211_add208230__16 = attr.setValue("Qux");
            Assert.assertEquals("There", o_testIteratorUpdateablenull196390_failAssert211_add208230__16);
            String o_testIteratorUpdateablenull196390_failAssert211_add208230__17 = a.get("Foo");
            Assert.assertEquals("a&p", o_testIteratorUpdateablenull196390_failAssert211_add208230__17);
            a.get(null);
            a.hasKey("Tot");
            a.hasKey("Tot");
            a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateablenull196390 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablenull196390_failAssert211_add208230null231837() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorUpdateablenull196390_failAssert211_add208230__5 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_testIteratorUpdateablenull196390_failAssert211_add208230__5)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_testIteratorUpdateablenull196390_failAssert211_add208230__5)).hashCode())));
            Attributes o_testIteratorUpdateablenull196390_failAssert211_add208230__6 = a.put("Hello", null);
            Assert.assertEquals(" Tot=\"a&amp;p\" Hello", ((Attributes) (o_testIteratorUpdateablenull196390_failAssert211_add208230__6)).toString());
            Assert.assertEquals(-1652213410, ((int) (((Attributes) (o_testIteratorUpdateablenull196390_failAssert211_add208230__6)).hashCode())));
            boolean o_testIteratorUpdateablenull196390_failAssert211_add208230__7 = a.hasKey("Foo");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
            Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
            Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
            Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
            attr.setKey("Foo");
            attr = iterator.next();
            Assert.assertEquals("Hello", ((Attribute) (attr)).toString());
            Assert.assertEquals(-2137068146, ((int) (((Attribute) (attr)).hashCode())));
            Assert.assertNull(((Attribute) (attr)).getValue());
            Assert.assertEquals("Hello", ((Attribute) (attr)).getKey());
            attr.setKey("Bar");
            String o_testIteratorUpdateablenull196390_failAssert211_add208230__16 = attr.setValue("Qux");
            Assert.assertEquals("", o_testIteratorUpdateablenull196390_failAssert211_add208230__16);
            String o_testIteratorUpdateablenull196390_failAssert211_add208230__17 = a.get("Foo");
            Assert.assertEquals("a&p", o_testIteratorUpdateablenull196390_failAssert211_add208230__17);
            a.get(null);
            a.hasKey("Tot");
            a.hasKey("Tot");
            a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateablenull196390 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablenull196386_failAssert213_rv214376null231689() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes __DSPOT_invoc_5 = a.put("Tot", "a&p");
            Attributes o_testIteratorUpdateablenull196386_failAssert213_rv214376__8 = a.put("Hello", "There");
            Assert.assertEquals(" Tot=\"a&amp;p\" Hello=\"There\"", ((Attributes) (o_testIteratorUpdateablenull196386_failAssert213_rv214376__8)).toString());
            Assert.assertEquals(-1337114974, ((int) (((Attributes) (o_testIteratorUpdateablenull196386_failAssert213_rv214376__8)).hashCode())));
            boolean o_testIteratorUpdateablenull196386_failAssert213_rv214376__9 = a.hasKey("Foo");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            Assert.assertEquals("Tot=\"a&amp;p\"", ((Attribute) (attr)).toString());
            Assert.assertEquals(2707218, ((int) (((Attribute) (attr)).hashCode())));
            Assert.assertEquals("a&p", ((Attribute) (attr)).getValue());
            Assert.assertEquals("Tot", ((Attribute) (attr)).getKey());
            attr.setKey(null);
            attr = iterator.next();
            attr.setKey("Bar");
            attr.setValue(null);
            a.get("Foo");
            a.get("Bar");
            a.hasKey("Tot");
            a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateablenull196386 should have thrown IllegalArgumentException");
            __DSPOT_invoc_5.toString();
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablelitString196226_remove208567null231457_failAssert233() throws Exception {
        try {
            Attributes a = new Attributes();
            Attributes o_testIteratorUpdateablelitString196226__3 = a.put("Tot", "a&p");
            Attributes o_testIteratorUpdateablelitString196226__4 = a.put(":", "There");
            boolean o_testIteratorUpdateablelitString196226__5 = a.hasKey(null);
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr.setKey("Foo");
            attr = iterator.next();
            String o_testIteratorUpdateablelitString196226__14 = attr.setValue("Qux");
            String o_testIteratorUpdateablelitString196226__15 = a.get("Foo");
            String o_testIteratorUpdateablelitString196226__16 = a.get("Bar");
            boolean o_testIteratorUpdateablelitString196226__17 = a.hasKey("Tot");
            boolean o_testIteratorUpdateablelitString196226__18 = a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateablelitString196226_remove208567null231457 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorUpdateablelitString196226_remove208566null230947_failAssert230() throws Exception {
        try {
            Attributes a = new Attributes();
            Attributes o_testIteratorUpdateablelitString196226__3 = a.put("Tot", "a&p");
            Attributes o_testIteratorUpdateablelitString196226__4 = a.put(":", "There");
            boolean o_testIteratorUpdateablelitString196226__5 = a.hasKey("Foo");
            Iterator<Attribute> iterator = a.iterator();
            Attribute attr = iterator.next();
            attr = iterator.next();
            attr.setKey(null);
            String o_testIteratorUpdateablelitString196226__14 = attr.setValue("Qux");
            String o_testIteratorUpdateablelitString196226__15 = a.get("Foo");
            String o_testIteratorUpdateablelitString196226__16 = a.get("Bar");
            boolean o_testIteratorUpdateablelitString196226__17 = a.hasKey("Tot");
            boolean o_testIteratorUpdateablelitString196226__18 = a.hasKey("Hello");
            org.junit.Assert.fail("testIteratorUpdateablelitString196226_remove208566null230947 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext__3)).hashCode())));
        Attributes o_testIteratorHasNext__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext__4)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext__4)).hashCode())));
        Attributes o_testIteratorHasNext__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext__5)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext__3)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext__3)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext__4)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext__5)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNextnull127044_failAssert158() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put("Tot", "1");
            a.put(null, "2");
            a.put("data-name", "3");
            int seen = 0;
            for (Attribute attribute : a) {
                seen++;
                String.valueOf(seen);
                attribute.getValue();
            }
            org.junit.Assert.fail("testIteratorHasNextnull127044 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorHasNextlitString126927() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNextlitString126927__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNextlitString126927__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNextlitString126927__3)).hashCode())));
        Attributes o_testIteratorHasNextlitString126927__4 = a.put("Hello", "\n");
        Assert.assertEquals(" Tot=\"1\" Hello=\"\n\"", ((Attributes) (o_testIteratorHasNextlitString126927__4)).toString());
        Assert.assertEquals(-171234782, ((int) (((Attributes) (o_testIteratorHasNextlitString126927__4)).hashCode())));
        Attributes o_testIteratorHasNextlitString126927__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"\n\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNextlitString126927__5)).toString());
        Assert.assertEquals(1208000350, ((int) (((Attributes) (o_testIteratorHasNextlitString126927__5)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Assert.assertEquals(" Tot=\"1\" Hello=\"\n\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208000350, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"\n\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNextlitString126927__3)).toString());
        Assert.assertEquals(1208000350, ((int) (((Attributes) (o_testIteratorHasNextlitString126927__3)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"\n\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNextlitString126927__4)).toString());
        Assert.assertEquals(1208000350, ((int) (((Attributes) (o_testIteratorHasNextlitString126927__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"\n\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNextlitString126927__5)).toString());
        Assert.assertEquals(1208000350, ((int) (((Attributes) (o_testIteratorHasNextlitString126927__5)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126968() throws Exception {
        boolean __DSPOT_value_35300 = true;
        String __DSPOT_key_35299 = "D|3#2X}R<{:`A&SwYK7b";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__5 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126968__5)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__6 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126968__6)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__6)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__7 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126968__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__7)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Attributes o_testIteratorHasNext_mg126968__15 = a.put(__DSPOT_key_35299, __DSPOT_value_35300);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__15)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__15)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (a)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__5)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__6)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__6)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__7)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__7)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_rv127013() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_rv127013__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_rv127013__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_rv127013__3)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("Hello", "2");
        Attributes o_testIteratorHasNext_rv127013__7 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv127013__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv127013__7)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        __DSPOT_invoc_4.normalize();
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-521258618, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv127013__3)).toString());
        Assert.assertEquals(-521258618, ((int) (((Attributes) (o_testIteratorHasNext_rv127013__3)).hashCode())));
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv127013__7)).toString());
        Assert.assertEquals(-521258618, ((int) (((Attributes) (o_testIteratorHasNext_rv127013__7)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_rv126981() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "1");
        Attributes o_testIteratorHasNext_rv126981__6 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_rv126981__6)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_rv126981__6)).hashCode())));
        Attributes o_testIteratorHasNext_rv126981__7 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv126981__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv126981__7)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        List<Attribute> o_testIteratorHasNext_rv126981__15 = __DSPOT_invoc_3.asList();
        Assert.assertFalse(o_testIteratorHasNext_rv126981__15.isEmpty());
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv126981__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv126981__6)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv126981__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv126981__7)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_rv127036() throws Exception {
        String __DSPOT_value_35344 = "H/|yAiQA1PB|6(CK>cBC";
        String __DSPOT_key_35343 = "/e?Bd&Ng7(3uS}HQ]@vx";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_rv127036__5 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_rv127036__5)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_rv127036__5)).hashCode())));
        Attributes o_testIteratorHasNext_rv127036__6 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_rv127036__6)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_rv127036__6)).hashCode())));
        Attributes __DSPOT_invoc_5 = a.put("data-name", "3");
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Attributes o_testIteratorHasNext_rv127036__17 = __DSPOT_invoc_5.put(__DSPOT_key_35343, __DSPOT_value_35344);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" /e?Bd&Ng7(3uS}HQ]@vx=\"H/|yAiQA1PB|6(CK>cBC\"", ((Attributes) (o_testIteratorHasNext_rv127036__17)).toString());
        Assert.assertEquals(1472654269, ((int) (((Attributes) (o_testIteratorHasNext_rv127036__17)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" /e?Bd&Ng7(3uS}HQ]@vx=\"H/|yAiQA1PB|6(CK>cBC\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1472654269, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" /e?Bd&Ng7(3uS}HQ]@vx=\"H/|yAiQA1PB|6(CK>cBC\"", ((Attributes) (o_testIteratorHasNext_rv127036__5)).toString());
        Assert.assertEquals(1472654269, ((int) (((Attributes) (o_testIteratorHasNext_rv127036__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" /e?Bd&Ng7(3uS}HQ]@vx=\"H/|yAiQA1PB|6(CK>cBC\"", ((Attributes) (o_testIteratorHasNext_rv127036__6)).toString());
        Assert.assertEquals(1472654269, ((int) (((Attributes) (o_testIteratorHasNext_rv127036__6)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_rv127015() throws Exception {
        String __DSPOT_value_35331 = "2]oANkU.mzb.zcsJ2Y@G";
        String __DSPOT_key_35330 = ",$K/Vl[*=C<yD-gI%rLp";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_rv127015__5 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_rv127015__5)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_rv127015__5)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("Hello", "2");
        Attributes o_testIteratorHasNext_rv127015__9 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv127015__9)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv127015__9)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Attributes o_testIteratorHasNext_rv127015__17 = __DSPOT_invoc_4.put(__DSPOT_key_35330, __DSPOT_value_35331);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" ,$K/Vl[*=C<yD-gI%rLp=\"2]oANkU.mzb.zcsJ2Y@G\"", ((Attributes) (o_testIteratorHasNext_rv127015__17)).toString());
        Assert.assertEquals(821857441, ((int) (((Attributes) (o_testIteratorHasNext_rv127015__17)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" ,$K/Vl[*=C<yD-gI%rLp=\"2]oANkU.mzb.zcsJ2Y@G\"", ((Attributes) (a)).toString());
        Assert.assertEquals(821857441, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" ,$K/Vl[*=C<yD-gI%rLp=\"2]oANkU.mzb.zcsJ2Y@G\"", ((Attributes) (o_testIteratorHasNext_rv127015__5)).toString());
        Assert.assertEquals(821857441, ((int) (((Attributes) (o_testIteratorHasNext_rv127015__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" ,$K/Vl[*=C<yD-gI%rLp=\"2]oANkU.mzb.zcsJ2Y@G\"", ((Attributes) (o_testIteratorHasNext_rv127015__9)).toString());
        Assert.assertEquals(821857441, ((int) (((Attributes) (o_testIteratorHasNext_rv127015__9)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_rv126982() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "1");
        Attributes o_testIteratorHasNext_rv126982__6 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_rv126982__6)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_rv126982__6)).hashCode())));
        Attributes o_testIteratorHasNext_rv126982__7 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv126982__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv126982__7)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Attributes o_testIteratorHasNext_rv126982__15 = __DSPOT_invoc_3.clone();
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv126982__15)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv126982__15)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(870255776, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv126982__6)).toString());
        Assert.assertEquals(870255776, ((int) (((Attributes) (o_testIteratorHasNext_rv126982__6)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv126982__7)).toString());
        Assert.assertEquals(870255776, ((int) (((Attributes) (o_testIteratorHasNext_rv126982__7)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_rv127037() throws Exception {
        Attribute __DSPOT_attribute_35345 = new Attribute("S@ogwxc0!38]>&|;T[VR", "q g>zd4i#W:7VKZZb:oK");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_rv127037__5 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_rv127037__5)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_rv127037__5)).hashCode())));
        Attributes o_testIteratorHasNext_rv127037__6 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_rv127037__6)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_rv127037__6)).hashCode())));
        Attributes __DSPOT_invoc_5 = a.put("data-name", "3");
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Attributes o_testIteratorHasNext_rv127037__17 = __DSPOT_invoc_5.put(__DSPOT_attribute_35345);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" S@ogwxc0!38]>&|;T[VR=\"q g>zd4i#W:7VKZZb:oK\"", ((Attributes) (o_testIteratorHasNext_rv127037__17)).toString());
        Assert.assertEquals(-1826751022, ((int) (((Attributes) (o_testIteratorHasNext_rv127037__17)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" S@ogwxc0!38]>&|;T[VR=\"q g>zd4i#W:7VKZZb:oK\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1826751022, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" S@ogwxc0!38]>&|;T[VR=\"q g>zd4i#W:7VKZZb:oK\"", ((Attributes) (o_testIteratorHasNext_rv127037__5)).toString());
        Assert.assertEquals(-1826751022, ((int) (((Attributes) (o_testIteratorHasNext_rv127037__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" S@ogwxc0!38]>&|;T[VR=\"q g>zd4i#W:7VKZZb:oK\"", ((Attributes) (o_testIteratorHasNext_rv127037__6)).toString());
        Assert.assertEquals(-1826751022, ((int) (((Attributes) (o_testIteratorHasNext_rv127037__6)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNextnull127045() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNextnull127045__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNextnull127045__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNextnull127045__3)).hashCode())));
        Attributes o_testIteratorHasNextnull127045__4 = a.put("Hello", null);
        Assert.assertEquals(" Tot=\"1\" Hello", ((Attributes) (o_testIteratorHasNextnull127045__4)).toString());
        Assert.assertEquals(-171244392, ((int) (((Attributes) (o_testIteratorHasNextnull127045__4)).hashCode())));
        Attributes o_testIteratorHasNextnull127045__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello data-name=\"3\"", ((Attributes) (o_testIteratorHasNextnull127045__5)).toString());
        Assert.assertEquals(1207990740, ((int) (((Attributes) (o_testIteratorHasNextnull127045__5)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Assert.assertEquals(" Tot=\"1\" Hello data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1207990740, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello data-name=\"3\"", ((Attributes) (o_testIteratorHasNextnull127045__3)).toString());
        Assert.assertEquals(1207990740, ((int) (((Attributes) (o_testIteratorHasNextnull127045__3)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello data-name=\"3\"", ((Attributes) (o_testIteratorHasNextnull127045__4)).toString());
        Assert.assertEquals(1207990740, ((int) (((Attributes) (o_testIteratorHasNextnull127045__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello data-name=\"3\"", ((Attributes) (o_testIteratorHasNextnull127045__5)).toString());
        Assert.assertEquals(1207990740, ((int) (((Attributes) (o_testIteratorHasNextnull127045__5)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_rv126984() throws Exception {
        Attributes __DSPOT_o_35310 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "1");
        Attributes o_testIteratorHasNext_rv126984__8 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_rv126984__8)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_rv126984__8)).hashCode())));
        Attributes o_testIteratorHasNext_rv126984__9 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv126984__9)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv126984__9)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        boolean o_testIteratorHasNext_rv126984__17 = __DSPOT_invoc_3.equals(__DSPOT_o_35310);
        Assert.assertFalse(o_testIteratorHasNext_rv126984__17);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv126984__8)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv126984__8)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv126984__9)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv126984__9)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_add126950() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_add126950__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_add126950__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_add126950__3)).hashCode())));
        Attributes o_testIteratorHasNext_add126950__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_add126950__4)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_add126950__4)).hashCode())));
        Attributes o_testIteratorHasNext_add126950__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_add126950__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_add126950__5)).hashCode())));
        Attributes o_testIteratorHasNext_add126950__6 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_add126950__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_add126950__6)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_add126950__3)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_add126950__3)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_add126950__4)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_add126950__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_add126950__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_add126950__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_add126950__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_add126950__6)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126962() throws Exception {
        String __DSPOT_key_35296 = "muDbH8FPnihE+,iMZC= ";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126962__4 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126962__4)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126962__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126962__5 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126962__5)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126962__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126962__6 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126962__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126962__6)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        String o_testIteratorHasNext_mg126962__14 = a.getIgnoreCase(__DSPOT_key_35296);
        Assert.assertEquals("", o_testIteratorHasNext_mg126962__14);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126962__4)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126962__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126962__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126962__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126962__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126962__6)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_rv126996() throws Exception {
        String __DSPOT_key_35320 = "Awj4Dm},G/5:Kl A{[nW";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "1");
        Attributes o_testIteratorHasNext_rv126996__7 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_rv126996__7)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_rv126996__7)).hashCode())));
        Attributes o_testIteratorHasNext_rv126996__8 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv126996__8)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv126996__8)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        __DSPOT_invoc_3.remove(__DSPOT_key_35320);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv126996__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv126996__7)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv126996__8)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv126996__8)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_rv127009() throws Exception {
        String __DSPOT_key_35327 = "xrc b&Y|]V{9s[NnLo61";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_rv127009__4 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_rv127009__4)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_rv127009__4)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("Hello", "2");
        Attributes o_testIteratorHasNext_rv127009__8 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv127009__8)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv127009__8)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        boolean o_testIteratorHasNext_rv127009__16 = __DSPOT_invoc_4.hasKeyIgnoreCase(__DSPOT_key_35327);
        Assert.assertFalse(o_testIteratorHasNext_rv127009__16);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv127009__4)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv127009__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv127009__8)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv127009__8)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNextlitString126913() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNextlitString126913__3 = a.put("Tot", "");
        Assert.assertEquals(" Tot=\"\"", ((Attributes) (o_testIteratorHasNextlitString126913__3)).toString());
        Assert.assertEquals(555415706, ((int) (((Attributes) (o_testIteratorHasNextlitString126913__3)).hashCode())));
        Attributes o_testIteratorHasNextlitString126913__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNextlitString126913__4)).toString());
        Assert.assertEquals(-172656101, ((int) (((Attributes) (o_testIteratorHasNextlitString126913__4)).hashCode())));
        Attributes o_testIteratorHasNextlitString126913__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNextlitString126913__5)).toString());
        Assert.assertEquals(1206579031, ((int) (((Attributes) (o_testIteratorHasNextlitString126913__5)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Assert.assertEquals(" Tot=\"\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1206579031, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNextlitString126913__3)).toString());
        Assert.assertEquals(1206579031, ((int) (((Attributes) (o_testIteratorHasNextlitString126913__3)).hashCode())));
        Assert.assertEquals(" Tot=\"\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNextlitString126913__4)).toString());
        Assert.assertEquals(1206579031, ((int) (((Attributes) (o_testIteratorHasNextlitString126913__4)).hashCode())));
        Assert.assertEquals(" Tot=\"\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNextlitString126913__5)).toString());
        Assert.assertEquals(1206579031, ((int) (((Attributes) (o_testIteratorHasNextlitString126913__5)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_rv126999() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "1");
        Attributes o_testIteratorHasNext_rv126999__6 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_rv126999__6)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_rv126999__6)).hashCode())));
        Attributes o_testIteratorHasNext_rv126999__7 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv126999__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv126999__7)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        __DSPOT_invoc_3.toString();
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv126999__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv126999__6)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv126999__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv126999__7)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126976() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126976__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126976__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126976__3)).hashCode())));
        Attributes o_testIteratorHasNext_mg126976__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126976__4)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126976__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126976__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126976__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126976__5)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
            attribute.html();
        }
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126976__3)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126976__3)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126976__4)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126976__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126976__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126976__5)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126978() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126978__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126978__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126978__3)).hashCode())));
        Attributes o_testIteratorHasNext_mg126978__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126978__4)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126978__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126978__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126978__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126978__5)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            String __DSPOT_val_35308 = "XV(`,qwM;]G;q@bi**}V";
            seen++;
            String.valueOf(seen);
            attribute.getValue();
            attribute.setValue(__DSPOT_val_35308);
        }
        Assert.assertEquals(-737341054, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(-737341054, ((int) (((Attributes) (o_testIteratorHasNext_mg126978__3)).hashCode())));
        Assert.assertEquals(-737341054, ((int) (((Attributes) (o_testIteratorHasNext_mg126978__4)).hashCode())));
        Assert.assertEquals(-737341054, ((int) (((Attributes) (o_testIteratorHasNext_mg126978__5)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_rv127005() throws Exception {
        Object __DSPOT_o_35323 = new Object();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_rv127005__5 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_rv127005__5)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_rv127005__5)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("Hello", "2");
        Attributes o_testIteratorHasNext_rv127005__9 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv127005__9)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv127005__9)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        boolean o_testIteratorHasNext_rv127005__17 = __DSPOT_invoc_4.equals(__DSPOT_o_35323);
        Assert.assertFalse(o_testIteratorHasNext_rv127005__17);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv127005__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv127005__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv127005__9)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv127005__9)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNextnull127042_failAssert159() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put(null, "1");
            a.put("Hello", "2");
            a.put("data-name", "3");
            int seen = 0;
            for (Attribute attribute : a) {
                seen++;
                String.valueOf(seen);
                attribute.getValue();
            }
            org.junit.Assert.fail("testIteratorHasNextnull127042 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126972() throws Exception {
        String __DSPOT_key_35305 = "an!C8nEmIBF5FO3N/P#z";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126972__4 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126972__4)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126972__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126972__5 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126972__5)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126972__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126972__6 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126972__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126972__6)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        a.removeIgnoreCase(__DSPOT_key_35305);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126972__4)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126972__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126972__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126972__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126972__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126972__6)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNextlitString126908_failAssert162() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put("", "1");
            a.put("Hello", "2");
            a.put("data-name", "3");
            int seen = 0;
            for (Attribute attribute : a) {
                seen++;
                String.valueOf(seen);
                attribute.getValue();
            }
            org.junit.Assert.fail("testIteratorHasNextlitString126908 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("String must not be empty", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126975() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126975__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126975__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126975__3)).hashCode())));
        Attributes o_testIteratorHasNext_mg126975__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126975__4)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126975__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126975__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126975__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126975__5)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            Object __DSPOT_o_35306 = new Object();
            seen++;
            String.valueOf(seen);
            attribute.getValue();
            attribute.equals(__DSPOT_o_35306);
        }
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126975__3)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126975__3)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126975__4)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126975__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126975__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126975__5)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126970() throws Exception {
        Attribute __DSPOT_attribute_35303 = new Attribute("B[_ek=[*-!#vp(n1GPh4", "$j1BY{*&#<J@;$>Bt{r%");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126970__5 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126970__5)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126970__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126970__6 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126970__6)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126970__6)).hashCode())));
        Attributes o_testIteratorHasNext_mg126970__7 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126970__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126970__7)).hashCode())));
        int seen = 0;
        Assert.assertEquals(0, ((int) (seen)));
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Attributes o_testIteratorHasNext_mg126970__15 = a.put(__DSPOT_attribute_35303);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" B[_ek=[*-!#vp(n1GPh4=\"$j1BY{*&amp;#<J@;$>Bt{r%\"", ((Attributes) (o_testIteratorHasNext_mg126970__15)).toString());
        Assert.assertEquals(-456340421, ((int) (((Attributes) (o_testIteratorHasNext_mg126970__15)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" B[_ek=[*-!#vp(n1GPh4=\"$j1BY{*&amp;#<J@;$>Bt{r%\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-456340421, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" B[_ek=[*-!#vp(n1GPh4=\"$j1BY{*&amp;#<J@;$>Bt{r%\"", ((Attributes) (o_testIteratorHasNext_mg126970__5)).toString());
        Assert.assertEquals(-456340421, ((int) (((Attributes) (o_testIteratorHasNext_mg126970__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" B[_ek=[*-!#vp(n1GPh4=\"$j1BY{*&amp;#<J@;$>Bt{r%\"", ((Attributes) (o_testIteratorHasNext_mg126970__6)).toString());
        Assert.assertEquals(-456340421, ((int) (((Attributes) (o_testIteratorHasNext_mg126970__6)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" B[_ek=[*-!#vp(n1GPh4=\"$j1BY{*&amp;#<J@;$>Bt{r%\"", ((Attributes) (o_testIteratorHasNext_mg126970__7)).toString());
        Assert.assertEquals(-456340421, ((int) (((Attributes) (o_testIteratorHasNext_mg126970__7)).hashCode())));
        Assert.assertEquals(3, ((int) (seen)));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126968_remove133280() throws Exception {
        boolean __DSPOT_value_35300 = true;
        String __DSPOT_key_35299 = "D|3#2X}R<{:`A&SwYK7b";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__5 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126968__5)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__6 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126968__6)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__6)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__7 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126968__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__7)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
        }
        Attributes o_testIteratorHasNext_mg126968__15 = a.put(__DSPOT_key_35299, __DSPOT_value_35300);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__15)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__15)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (a)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__5)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__6)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__6)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__7)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__7)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126969litString127805_failAssert168() throws Exception {
        try {
            String __DSPOT_value_35302 = "!LRY9;nOI&%`vZ5;N9#4";
            String __DSPOT_key_35301 = "0 #`4rM<(>!r8GeXDDXU";
            Attributes a = new Attributes();
            Attributes o_testIteratorHasNext_mg126969__5 = a.put("Tot", "1");
            Attributes o_testIteratorHasNext_mg126969__6 = a.put("", "2");
            Attributes o_testIteratorHasNext_mg126969__7 = a.put("data-name", "3");
            int seen = 0;
            for (Attribute attribute : a) {
                seen++;
                String.valueOf(seen);
                attribute.getValue();
            }
            Attributes o_testIteratorHasNext_mg126969__15 = a.put(__DSPOT_key_35301, __DSPOT_value_35302);
            org.junit.Assert.fail("testIteratorHasNext_mg126969litString127805 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("String must not be empty", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126968_mg134743() throws Exception {
        String __DSPOT_key_36266 = "]t94(023(DCwUSir$&L=";
        boolean __DSPOT_value_35300 = true;
        String __DSPOT_key_35299 = "D|3#2X}R<{:`A&SwYK7b";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__5 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126968__5)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__6 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126968__6)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__6)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__7 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126968__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__7)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Attributes o_testIteratorHasNext_mg126968__15 = a.put(__DSPOT_key_35299, __DSPOT_value_35300);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__15)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__15)).hashCode())));
        o_testIteratorHasNext_mg126968__7.removeIgnoreCase(__DSPOT_key_36266);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (a)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__5)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__6)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__6)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__7)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__7)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__15)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__15)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126969_add131549() throws Exception {
        String __DSPOT_value_35302 = "!LRY9;nOI&%`vZ5;N9#4";
        String __DSPOT_key_35301 = "0 #`4rM<(>!r8GeXDDXU";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126969__5 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126969__5)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126969__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126969_add131549__8 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126969_add131549__8)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126969_add131549__8)).hashCode())));
        Attributes o_testIteratorHasNext_mg126969__6 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126969__6)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126969__6)).hashCode())));
        Attributes o_testIteratorHasNext_mg126969__7 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126969__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126969__7)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Attributes o_testIteratorHasNext_mg126969__15 = a.put(__DSPOT_key_35301, __DSPOT_value_35302);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" 0 #`4rM<(>!r8GeXDDXU=\"!LRY9;nOI&amp;%`vZ5;N9#4\"", ((Attributes) (o_testIteratorHasNext_mg126969__15)).toString());
        Assert.assertEquals(-1664718630, ((int) (((Attributes) (o_testIteratorHasNext_mg126969__15)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" 0 #`4rM<(>!r8GeXDDXU=\"!LRY9;nOI&amp;%`vZ5;N9#4\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1664718630, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" 0 #`4rM<(>!r8GeXDDXU=\"!LRY9;nOI&amp;%`vZ5;N9#4\"", ((Attributes) (o_testIteratorHasNext_mg126969__5)).toString());
        Assert.assertEquals(-1664718630, ((int) (((Attributes) (o_testIteratorHasNext_mg126969__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" 0 #`4rM<(>!r8GeXDDXU=\"!LRY9;nOI&amp;%`vZ5;N9#4\"", ((Attributes) (o_testIteratorHasNext_mg126969_add131549__8)).toString());
        Assert.assertEquals(-1664718630, ((int) (((Attributes) (o_testIteratorHasNext_mg126969_add131549__8)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" 0 #`4rM<(>!r8GeXDDXU=\"!LRY9;nOI&amp;%`vZ5;N9#4\"", ((Attributes) (o_testIteratorHasNext_mg126969__6)).toString());
        Assert.assertEquals(-1664718630, ((int) (((Attributes) (o_testIteratorHasNext_mg126969__6)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" 0 #`4rM<(>!r8GeXDDXU=\"!LRY9;nOI&amp;%`vZ5;N9#4\"", ((Attributes) (o_testIteratorHasNext_mg126969__7)).toString());
        Assert.assertEquals(-1664718630, ((int) (((Attributes) (o_testIteratorHasNext_mg126969__7)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126965_mg135051() throws Exception {
        String __DSPOT_key_36486 = "e_nG{4#K$Ls.BYRCiLHn";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126965__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126965__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__3)).hashCode())));
        Attributes o_testIteratorHasNext_mg126965__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126965__4)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126965__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126965__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__5)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        String o_testIteratorHasNext_mg126965__13 = a.html();
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", o_testIteratorHasNext_mg126965__13);
        o_testIteratorHasNext_mg126965__4.removeIgnoreCase(__DSPOT_key_36486);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126965__3)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__3)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126965__4)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126965__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", o_testIteratorHasNext_mg126965__13);
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126966null141612() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126966__3 = a.put("Tot", null);
        Assert.assertEquals(" Tot", ((Attributes) (o_testIteratorHasNext_mg126966__3)).toString());
        Assert.assertEquals(555415706, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__3)).hashCode())));
        Attributes o_testIteratorHasNext_mg126966__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126966__4)).toString());
        Assert.assertEquals(-172656101, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126966__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126966__5)).toString());
        Assert.assertEquals(1206579031, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__5)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        a.iterator();
        Assert.assertEquals(" Tot Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1206579031, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126966__3)).toString());
        Assert.assertEquals(1206579031, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__3)).hashCode())));
        Assert.assertEquals(" Tot Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126966__4)).toString());
        Assert.assertEquals(1206579031, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__4)).hashCode())));
        Assert.assertEquals(" Tot Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126966__5)).toString());
        Assert.assertEquals(1206579031, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_remove126954null141508_failAssert167() throws Exception {
        try {
            Attributes a = new Attributes();
            Attributes o_testIteratorHasNext_remove126954__3 = a.put(null, "1");
            Attributes o_testIteratorHasNext_remove126954__4 = a.put("data-name", "3");
            int seen = 0;
            for (Attribute attribute : a) {
                seen++;
                String.valueOf(seen);
                attribute.getValue();
            }
            org.junit.Assert.fail("testIteratorHasNext_remove126954null141508 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126969null141584_failAssert163() throws Exception {
        try {
            String __DSPOT_value_35302 = "!LRY9;nOI&%`vZ5;N9#4";
            String __DSPOT_key_35301 = "0 #`4rM<(>!r8GeXDDXU";
            Attributes a = new Attributes();
            Attributes o_testIteratorHasNext_mg126969__5 = a.put("Tot", "1");
            Attributes o_testIteratorHasNext_mg126969__6 = a.put(null, "2");
            Attributes o_testIteratorHasNext_mg126969__7 = a.put("data-name", "3");
            int seen = 0;
            for (Attribute attribute : a) {
                seen++;
                String.valueOf(seen);
                attribute.getValue();
            }
            Attributes o_testIteratorHasNext_mg126969__15 = a.put(__DSPOT_key_35301, __DSPOT_value_35302);
            org.junit.Assert.fail("testIteratorHasNext_mg126969null141584 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_rv127016_mg136105() throws Exception {
        Attributes __DSPOT_incoming_37237 = new Attributes();
        Attribute __DSPOT_attribute_35332 = new Attribute("Sh;G6{/IA-({{B[ag)(T", "27(7hZ&k=-^{v&er WO-");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_rv127016__5 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_rv127016__5)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_rv127016__5)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("Hello", "2");
        Attributes o_testIteratorHasNext_rv127016__9 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_rv127016__9)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_rv127016__9)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Attributes o_testIteratorHasNext_rv127016__17 = __DSPOT_invoc_4.put(__DSPOT_attribute_35332);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" Sh;G6{/IA-({{B[ag)(T=\"27(7hZ&amp;k=-^{v&amp;er WO-\"", ((Attributes) (o_testIteratorHasNext_rv127016__17)).toString());
        Assert.assertEquals(61889015, ((int) (((Attributes) (o_testIteratorHasNext_rv127016__17)).hashCode())));
        o_testIteratorHasNext_rv127016__5.addAll(__DSPOT_incoming_37237);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" Sh;G6{/IA-({{B[ag)(T=\"27(7hZ&amp;k=-^{v&amp;er WO-\"", ((Attributes) (a)).toString());
        Assert.assertEquals(61889015, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" Sh;G6{/IA-({{B[ag)(T=\"27(7hZ&amp;k=-^{v&amp;er WO-\"", ((Attributes) (o_testIteratorHasNext_rv127016__5)).toString());
        Assert.assertEquals(61889015, ((int) (((Attributes) (o_testIteratorHasNext_rv127016__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" Sh;G6{/IA-({{B[ag)(T=\"27(7hZ&amp;k=-^{v&amp;er WO-\"", ((Attributes) (o_testIteratorHasNext_rv127016__9)).toString());
        Assert.assertEquals(61889015, ((int) (((Attributes) (o_testIteratorHasNext_rv127016__9)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" Sh;G6{/IA-({{B[ag)(T=\"27(7hZ&amp;k=-^{v&amp;er WO-\"", ((Attributes) (o_testIteratorHasNext_rv127016__17)).toString());
        Assert.assertEquals(61889015, ((int) (((Attributes) (o_testIteratorHasNext_rv127016__17)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNextnull127042_failAssert159_rv141295() throws Exception {
        try {
            Attributes __DSPOT_incoming_40928 = new Attributes();
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            a.put(null, "1");
            a.put("Hello", "2");
            Attributes __DSPOT_invoc_7 = a.put("data-name", "3");
            int seen = 0;
            for (Attribute attribute : a) {
                seen++;
                String.valueOf(seen);
                attribute.getValue();
            }
            org.junit.Assert.fail("testIteratorHasNextnull127042 should have thrown IllegalArgumentException");
            __DSPOT_invoc_7.addAll(__DSPOT_incoming_40928);
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorHasNextlitString126903_mg139643() throws Exception {
        String __DSPOT_key_39764 = "*r/^^V<.Tu*+6wf`62kT";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNextlitString126903__3 = a.put("There", "1");
        Assert.assertEquals(" There=\"1\"", ((Attributes) (o_testIteratorHasNextlitString126903__3)).toString());
        Assert.assertEquals(-2102067628, ((int) (((Attributes) (o_testIteratorHasNextlitString126903__3)).hashCode())));
        Attributes o_testIteratorHasNextlitString126903__4 = a.put("Hello", "2");
        Assert.assertEquals(" There=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNextlitString126903__4)).toString());
        Assert.assertEquals(1464827861, ((int) (((Attributes) (o_testIteratorHasNextlitString126903__4)).hashCode())));
        Attributes o_testIteratorHasNextlitString126903__5 = a.put("data-name", "3");
        Assert.assertEquals(" There=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNextlitString126903__5)).toString());
        Assert.assertEquals(-1450904303, ((int) (((Attributes) (o_testIteratorHasNextlitString126903__5)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        String o_testIteratorHasNextlitString126903_mg139643__20 = o_testIteratorHasNextlitString126903__5.getIgnoreCase(__DSPOT_key_39764);
        Assert.assertEquals("", o_testIteratorHasNextlitString126903_mg139643__20);
        Assert.assertEquals(" There=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1450904303, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" There=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNextlitString126903__3)).toString());
        Assert.assertEquals(-1450904303, ((int) (((Attributes) (o_testIteratorHasNextlitString126903__3)).hashCode())));
        Assert.assertEquals(" There=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNextlitString126903__4)).toString());
        Assert.assertEquals(-1450904303, ((int) (((Attributes) (o_testIteratorHasNextlitString126903__4)).hashCode())));
        Assert.assertEquals(" There=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNextlitString126903__5)).toString());
        Assert.assertEquals(-1450904303, ((int) (((Attributes) (o_testIteratorHasNextlitString126903__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126966_remove133284() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126966__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126966__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__3)).hashCode())));
        Attributes o_testIteratorHasNext_mg126966__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126966__4)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126966__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126966__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__5)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
        }
        a.iterator();
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126966__3)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__3)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126966__4)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126966__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126974_rv141184() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126974__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126974__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126974__3)).hashCode())));
        Attributes o_testIteratorHasNext_mg126974__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126974__4)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126974__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126974__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126974__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126974__5)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
            Attribute __DSPOT_invoc_45 = attribute.clone();
            __DSPOT_invoc_45.hashCode();
        }
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126974__3)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126974__3)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126974__4)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126974__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126974__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126974__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNextnull127046_failAssert160_rv141346() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorHasNextnull127046_failAssert160_rv141346__5 = a.put("Tot", "1");
            Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNextnull127046_failAssert160_rv141346__5)).toString());
            Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNextnull127046_failAssert160_rv141346__5)).hashCode())));
            Attributes __DSPOT_invoc_6 = a.put("Hello", "2");
            a.put(null, "3");
            int seen = 0;
            for (Attribute attribute : a) {
                seen++;
                String.valueOf(seen);
                attribute.getValue();
            }
            org.junit.Assert.fail("testIteratorHasNextnull127046 should have thrown IllegalArgumentException");
            __DSPOT_invoc_6.hashCode();
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126963_mg135116() throws Exception {
        Attributes __DSPOT_o_36530 = new Attributes();
        String __DSPOT_key_35297 = "5)|akt)^N[#w]o!d/%gv";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126963__4 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126963__4)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126963__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126963__5 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126963__5)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126963__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126963__6 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126963__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126963__6)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        boolean o_testIteratorHasNext_mg126963__14 = a.hasKey(__DSPOT_key_35297);
        boolean o_testIteratorHasNext_mg126963_mg135116__25 = o_testIteratorHasNext_mg126963__5.equals(__DSPOT_o_36530);
        Assert.assertFalse(o_testIteratorHasNext_mg126963_mg135116__25);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126963__4)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126963__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126963__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126963__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126963__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126963__6)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126968litBool131261() throws Exception {
        boolean __DSPOT_value_35300 = false;
        String __DSPOT_key_35299 = "D|3#2X}R<{:`A&SwYK7b";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__5 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126968__5)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__6 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126968__6)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__6)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__7 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126968__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__7)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Attributes o_testIteratorHasNext_mg126968__15 = a.put(__DSPOT_key_35299, __DSPOT_value_35300);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126968__15)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__15)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126968__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126968__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__6)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126968__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__7)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126970_mg137854() throws Exception {
        Attribute __DSPOT_attribute_35303 = new Attribute("B[_ek=[*-!#vp(n1GPh4", "$j1BY{*&#<J@;$>Bt{r%");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126970__5 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126970__5)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126970__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126970__6 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126970__6)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126970__6)).hashCode())));
        Attributes o_testIteratorHasNext_mg126970__7 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126970__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126970__7)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Attributes o_testIteratorHasNext_mg126970__15 = a.put(__DSPOT_attribute_35303);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" B[_ek=[*-!#vp(n1GPh4=\"$j1BY{*&amp;#<J@;$>Bt{r%\"", ((Attributes) (o_testIteratorHasNext_mg126970__15)).toString());
        Assert.assertEquals(-456340421, ((int) (((Attributes) (o_testIteratorHasNext_mg126970__15)).hashCode())));
        List<Attribute> o_testIteratorHasNext_mg126970_mg137854__24 = o_testIteratorHasNext_mg126970__7.asList();
        Assert.assertFalse(o_testIteratorHasNext_mg126970_mg137854__24.isEmpty());
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" B[_ek=[*-!#vp(n1GPh4=\"$j1BY{*&amp;#<J@;$>Bt{r%\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-456340421, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" B[_ek=[*-!#vp(n1GPh4=\"$j1BY{*&amp;#<J@;$>Bt{r%\"", ((Attributes) (o_testIteratorHasNext_mg126970__5)).toString());
        Assert.assertEquals(-456340421, ((int) (((Attributes) (o_testIteratorHasNext_mg126970__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" B[_ek=[*-!#vp(n1GPh4=\"$j1BY{*&amp;#<J@;$>Bt{r%\"", ((Attributes) (o_testIteratorHasNext_mg126970__6)).toString());
        Assert.assertEquals(-456340421, ((int) (((Attributes) (o_testIteratorHasNext_mg126970__6)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" B[_ek=[*-!#vp(n1GPh4=\"$j1BY{*&amp;#<J@;$>Bt{r%\"", ((Attributes) (o_testIteratorHasNext_mg126970__7)).toString());
        Assert.assertEquals(-456340421, ((int) (((Attributes) (o_testIteratorHasNext_mg126970__7)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" B[_ek=[*-!#vp(n1GPh4=\"$j1BY{*&amp;#<J@;$>Bt{r%\"", ((Attributes) (o_testIteratorHasNext_mg126970__15)).toString());
        Assert.assertEquals(-456340421, ((int) (((Attributes) (o_testIteratorHasNext_mg126970__15)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126960litNum130768() throws Exception {
        Object __DSPOT_o_35294 = new Object();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126960__5 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126960__5)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126960__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126960__6 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126960__6)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126960__6)).hashCode())));
        Attributes o_testIteratorHasNext_mg126960__7 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126960__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126960__7)).hashCode())));
        int seen = 1644737263;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        boolean o_testIteratorHasNext_mg126960__15 = a.equals(__DSPOT_o_35294);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126960__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126960__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126960__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126960__6)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126960__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126960__7)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126967_mg137501() throws Exception {
        String __DSPOT_key_38235 = ">+>!CyeCTLc?C<7Aq./l";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126967__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126967__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__3)).hashCode())));
        Attributes o_testIteratorHasNext_mg126967__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126967__4)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126967__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126967__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__5)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        a.normalize();
        a.remove(__DSPOT_key_38235);
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-521258618, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126967__3)).toString());
        Assert.assertEquals(-521258618, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__3)).hashCode())));
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126967__4)).toString());
        Assert.assertEquals(-521258618, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__4)).hashCode())));
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126967__5)).toString());
        Assert.assertEquals(-521258618, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126964litString129608() throws Exception {
        String __DSPOT_key_35298 = "R P-w1?{ !.PTq?Cs.zD";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126964__4 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126964__4)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126964__5 = a.put("Hello", "");
        Assert.assertEquals(" Tot=\"1\" Hello=\"\"", ((Attributes) (o_testIteratorHasNext_mg126964__5)).toString());
        Assert.assertEquals(-171244392, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126964__6 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126964__6)).toString());
        Assert.assertEquals(1207990740, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__6)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        boolean o_testIteratorHasNext_mg126964__14 = a.hasKeyIgnoreCase(__DSPOT_key_35298);
        Assert.assertEquals(" Tot=\"1\" Hello=\"\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1207990740, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126964__4)).toString());
        Assert.assertEquals(1207990740, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126964__5)).toString());
        Assert.assertEquals(1207990740, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126964__6)).toString());
        Assert.assertEquals(1207990740, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__6)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126969_remove133275() throws Exception {
        String __DSPOT_value_35302 = "!LRY9;nOI&%`vZ5;N9#4";
        String __DSPOT_key_35301 = "0 #`4rM<(>!r8GeXDDXU";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126969__5 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126969__5)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126969__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126969__6 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126969__6)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126969__6)).hashCode())));
        Attributes o_testIteratorHasNext_mg126969__7 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126969__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126969__7)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            attribute.getValue();
        }
        Attributes o_testIteratorHasNext_mg126969__15 = a.put(__DSPOT_key_35301, __DSPOT_value_35302);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" 0 #`4rM<(>!r8GeXDDXU=\"!LRY9;nOI&amp;%`vZ5;N9#4\"", ((Attributes) (o_testIteratorHasNext_mg126969__15)).toString());
        Assert.assertEquals(-1664718630, ((int) (((Attributes) (o_testIteratorHasNext_mg126969__15)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" 0 #`4rM<(>!r8GeXDDXU=\"!LRY9;nOI&amp;%`vZ5;N9#4\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1664718630, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" 0 #`4rM<(>!r8GeXDDXU=\"!LRY9;nOI&amp;%`vZ5;N9#4\"", ((Attributes) (o_testIteratorHasNext_mg126969__5)).toString());
        Assert.assertEquals(-1664718630, ((int) (((Attributes) (o_testIteratorHasNext_mg126969__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" 0 #`4rM<(>!r8GeXDDXU=\"!LRY9;nOI&amp;%`vZ5;N9#4\"", ((Attributes) (o_testIteratorHasNext_mg126969__6)).toString());
        Assert.assertEquals(-1664718630, ((int) (((Attributes) (o_testIteratorHasNext_mg126969__6)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" 0 #`4rM<(>!r8GeXDDXU=\"!LRY9;nOI&amp;%`vZ5;N9#4\"", ((Attributes) (o_testIteratorHasNext_mg126969__7)).toString());
        Assert.assertEquals(-1664718630, ((int) (((Attributes) (o_testIteratorHasNext_mg126969__7)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126962_mg138133() throws Exception {
        String __DSPOT_key_38685 = "O]p!;A5i!y008J05?c1*";
        String __DSPOT_key_35296 = "muDbH8FPnihE+,iMZC= ";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126962__4 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126962__4)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126962__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126962__5 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126962__5)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126962__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126962__6 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126962__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126962__6)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        String o_testIteratorHasNext_mg126962__14 = a.getIgnoreCase(__DSPOT_key_35296);
        Assert.assertEquals("", o_testIteratorHasNext_mg126962__14);
        boolean o_testIteratorHasNext_mg126962_mg138133__24 = a.hasKeyIgnoreCase(__DSPOT_key_38685);
        Assert.assertFalse(o_testIteratorHasNext_mg126962_mg138133__24);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126962__4)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126962__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126962__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126962__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126962__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126962__6)).hashCode())));
        Assert.assertEquals("", o_testIteratorHasNext_mg126962__14);
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126966_mg134864() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126966__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126966__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__3)).hashCode())));
        Attributes o_testIteratorHasNext_mg126966__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126966__4)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126966__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126966__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__5)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        a.iterator();
        List<Attribute> o_testIteratorHasNext_mg126966_mg134864__20 = o_testIteratorHasNext_mg126966__3.asList();
        Assert.assertFalse(o_testIteratorHasNext_mg126966_mg134864__20.isEmpty());
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126966__3)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__3)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126966__4)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126966__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_remove126954_mg133531() throws Exception {
        String __DSPOT_value_35399 = "WN.GYTJ|UM`<TqzKP [E";
        String __DSPOT_key_35398 = "h^#j(OO]sz^1Pnkl6v ?";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_remove126954__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_remove126954__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_remove126954__3)).hashCode())));
        Attributes o_testIteratorHasNext_remove126954__4 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_remove126954__4)).toString());
        Assert.assertEquals(363462767, ((int) (((Attributes) (o_testIteratorHasNext_remove126954__4)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Attributes o_testIteratorHasNext_remove126954_mg133531__18 = a.put(__DSPOT_key_35398, __DSPOT_value_35399);
        Assert.assertEquals(" Tot=\"1\" data-name=\"3\" h^#j(OO]sz^1Pnkl6v ?=\"WN.GYTJ|UM`<TqzKP [E\"", ((Attributes) (o_testIteratorHasNext_remove126954_mg133531__18)).toString());
        Assert.assertEquals(1127684193, ((int) (((Attributes) (o_testIteratorHasNext_remove126954_mg133531__18)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" data-name=\"3\" h^#j(OO]sz^1Pnkl6v ?=\"WN.GYTJ|UM`<TqzKP [E\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1127684193, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" data-name=\"3\" h^#j(OO]sz^1Pnkl6v ?=\"WN.GYTJ|UM`<TqzKP [E\"", ((Attributes) (o_testIteratorHasNext_remove126954__3)).toString());
        Assert.assertEquals(1127684193, ((int) (((Attributes) (o_testIteratorHasNext_remove126954__3)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" data-name=\"3\" h^#j(OO]sz^1Pnkl6v ?=\"WN.GYTJ|UM`<TqzKP [E\"", ((Attributes) (o_testIteratorHasNext_remove126954__4)).toString());
        Assert.assertEquals(1127684193, ((int) (((Attributes) (o_testIteratorHasNext_remove126954__4)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126968null141603_failAssert164() throws Exception {
        try {
            boolean __DSPOT_value_35300 = true;
            String __DSPOT_key_35299 = "D|3#2X}R<{:`A&SwYK7b";
            Attributes a = new Attributes();
            Attributes o_testIteratorHasNext_mg126968__5 = a.put("Tot", "1");
            Attributes o_testIteratorHasNext_mg126968__6 = a.put("Hello", "2");
            Attributes o_testIteratorHasNext_mg126968__7 = a.put("data-name", "3");
            int seen = 0;
            for (Attribute attribute : a) {
                seen++;
                String.valueOf(seen);
                attribute.getValue();
            }
            Attributes o_testIteratorHasNext_mg126968__15 = a.put(null, __DSPOT_value_35300);
            org.junit.Assert.fail("testIteratorHasNext_mg126968null141603 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126965litString128048() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126965__3 = a.put("Tot", "\n");
        Assert.assertEquals(" Tot=\"\n\"", ((Attributes) (o_testIteratorHasNext_mg126965__3)).toString());
        Assert.assertEquals(555713616, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__3)).hashCode())));
        Attributes o_testIteratorHasNext_mg126965__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"\n\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126965__4)).toString());
        Assert.assertEquals(-172358191, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126965__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"\n\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126965__5)).toString());
        Assert.assertEquals(1206876941, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__5)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        String o_testIteratorHasNext_mg126965__13 = a.html();
        Assert.assertEquals(" Tot=\"\n\" Hello=\"2\" data-name=\"3\"", o_testIteratorHasNext_mg126965__13);
        Assert.assertEquals(" Tot=\"\n\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1206876941, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"\n\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126965__3)).toString());
        Assert.assertEquals(1206876941, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__3)).hashCode())));
        Assert.assertEquals(" Tot=\"\n\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126965__4)).toString());
        Assert.assertEquals(1206876941, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__4)).hashCode())));
        Assert.assertEquals(" Tot=\"\n\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126965__5)).toString());
        Assert.assertEquals(1206876941, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126967_mg137529_mg153943() throws Exception {
        String __DSPOT_key_45169 = "`I&!QYfhL/@8>s@#gj^S";
        String __DSPOT_key_38254 = "g>CAL$I;-frzM]+4>.*r";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126967__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126967__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__3)).hashCode())));
        Attributes o_testIteratorHasNext_mg126967__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126967__4)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126967__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126967__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__5)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        a.normalize();
        boolean o_testIteratorHasNext_mg126967_mg137529__21 = o_testIteratorHasNext_mg126967__4.hasKey(__DSPOT_key_38254);
        o_testIteratorHasNext_mg126967__3.remove(__DSPOT_key_45169);
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-521258618, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126967__3)).toString());
        Assert.assertEquals(-521258618, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__3)).hashCode())));
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126967__4)).toString());
        Assert.assertEquals(-521258618, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__4)).hashCode())));
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126967__5)).toString());
        Assert.assertEquals(-521258618, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126964_remove133380_remove148014() throws Exception {
        String __DSPOT_key_35298 = "R P-w1?{ !.PTq?Cs.zD";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126964__4 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126964__4)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126964__5 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126964__5)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126964__6 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126964__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__6)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
        }
        boolean o_testIteratorHasNext_mg126964__14 = a.hasKeyIgnoreCase(__DSPOT_key_35298);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126964__4)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126964__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126964__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__6)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNextnull127042_failAssert159_rv141295_rv155915() throws Exception {
        try {
            String __DSPOT_key_46568 = "nN[B n WDnoL`3BwN+[Y";
            Attributes __DSPOT_incoming_40928 = new Attributes();
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes __DSPOT_invoc_13 = a.put(null, "1");
            a.put("Hello", "2");
            Attributes __DSPOT_invoc_7 = a.put("data-name", "3");
            int seen = 0;
            for (Attribute attribute : a) {
                seen++;
                String.valueOf(seen);
                attribute.getValue();
            }
            org.junit.Assert.fail("testIteratorHasNextnull127042 should have thrown IllegalArgumentException");
            __DSPOT_invoc_7.addAll(__DSPOT_incoming_40928);
            __DSPOT_invoc_13.getIgnoreCase(__DSPOT_key_46568);
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126964null141875_mg149509() throws Exception {
        Attribute __DSPOT_attribute_42000 = new Attribute("G#36r(xhnabQTL#x1ta3", "#rSRTkNq0w7b`lc,>{vk");
        String __DSPOT_key_35298 = "R P-w1?{ !.PTq?Cs.zD";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126964__4 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126964__4)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126964__5 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126964__5)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126964__6 = a.put("data-name", null);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name", ((Attributes) (o_testIteratorHasNext_mg126964__6)).toString());
        Assert.assertEquals(1208037209, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__6)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        boolean o_testIteratorHasNext_mg126964__14 = a.hasKeyIgnoreCase(__DSPOT_key_35298);
        Attributes o_testIteratorHasNext_mg126964null141875_mg149509__25 = o_testIteratorHasNext_mg126964__5.put(__DSPOT_attribute_42000);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name G#36r(xhnabQTL#x1ta3=\"#rSRTkNq0w7b`lc,>{vk\"", ((Attributes) (o_testIteratorHasNext_mg126964null141875_mg149509__25)).toString());
        Assert.assertEquals(2077760274, ((int) (((Attributes) (o_testIteratorHasNext_mg126964null141875_mg149509__25)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name G#36r(xhnabQTL#x1ta3=\"#rSRTkNq0w7b`lc,>{vk\"", ((Attributes) (a)).toString());
        Assert.assertEquals(2077760274, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name G#36r(xhnabQTL#x1ta3=\"#rSRTkNq0w7b`lc,>{vk\"", ((Attributes) (o_testIteratorHasNext_mg126964__4)).toString());
        Assert.assertEquals(2077760274, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name G#36r(xhnabQTL#x1ta3=\"#rSRTkNq0w7b`lc,>{vk\"", ((Attributes) (o_testIteratorHasNext_mg126964__5)).toString());
        Assert.assertEquals(2077760274, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name G#36r(xhnabQTL#x1ta3=\"#rSRTkNq0w7b`lc,>{vk\"", ((Attributes) (o_testIteratorHasNext_mg126964__6)).toString());
        Assert.assertEquals(2077760274, ((int) (((Attributes) (o_testIteratorHasNext_mg126964__6)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126967_remove133354_mg148549() throws Exception {
        Attribute __DSPOT_attribute_41314 = new Attribute("W!D}Qo,A&|XD6ue[)8hd", "*!J`7#Xp)^#o&!vesQuz", new Attributes());
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126967__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126967__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__3)).hashCode())));
        Attributes o_testIteratorHasNext_mg126967__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126967__4)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126967__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126967__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__5)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
        }
        a.normalize();
        Attributes o_testIteratorHasNext_mg126967_remove133354_mg148549__22 = a.put(__DSPOT_attribute_41314);
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\" W!D}Qo,A&|XD6ue[)8hd=\"*!J`7#Xp)^#o&amp;!vesQuz\"", ((Attributes) (o_testIteratorHasNext_mg126967_remove133354_mg148549__22)).toString());
        Assert.assertEquals(643998158, ((int) (((Attributes) (o_testIteratorHasNext_mg126967_remove133354_mg148549__22)).hashCode())));
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\" W!D}Qo,A&|XD6ue[)8hd=\"*!J`7#Xp)^#o&amp;!vesQuz\"", ((Attributes) (a)).toString());
        Assert.assertEquals(643998158, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\" W!D}Qo,A&|XD6ue[)8hd=\"*!J`7#Xp)^#o&amp;!vesQuz\"", ((Attributes) (o_testIteratorHasNext_mg126967__3)).toString());
        Assert.assertEquals(643998158, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__3)).hashCode())));
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\" W!D}Qo,A&|XD6ue[)8hd=\"*!J`7#Xp)^#o&amp;!vesQuz\"", ((Attributes) (o_testIteratorHasNext_mg126967__4)).toString());
        Assert.assertEquals(643998158, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__4)).hashCode())));
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\" W!D}Qo,A&|XD6ue[)8hd=\"*!J`7#Xp)^#o&amp;!vesQuz\"", ((Attributes) (o_testIteratorHasNext_mg126967__5)).toString());
        Assert.assertEquals(643998158, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126961_remove133286_mg148767() throws Exception {
        String __DSPOT_key_41469 = "NsaZQm%s3_^9hCPDg-.h";
        String __DSPOT_key_35295 = "2.,eLG{**[.&Y!Zv}G#}";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126961__4 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126961__4)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126961__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126961__5 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126961__5)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126961__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126961__6 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126961__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126961__6)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            attribute.getValue();
        }
        String o_testIteratorHasNext_mg126961__14 = a.get(__DSPOT_key_35295);
        Assert.assertEquals("", o_testIteratorHasNext_mg126961__14);
        String o_testIteratorHasNext_mg126961_remove133286_mg148767__23 = o_testIteratorHasNext_mg126961__6.getIgnoreCase(__DSPOT_key_41469);
        Assert.assertEquals("", o_testIteratorHasNext_mg126961_remove133286_mg148767__23);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126961__4)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126961__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126961__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126961__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126961__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126961__6)).hashCode())));
        Assert.assertEquals("", o_testIteratorHasNext_mg126961__14);
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126966litString127956_failAssert171litNum146044() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorHasNext_mg126966__3 = a.put("", "1");
            Assert.assertEquals(" =\"1\"", ((Attributes) (o_testIteratorHasNext_mg126966__3)).toString());
            Assert.assertEquals(31013392, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__3)).hashCode())));
            Attributes o_testIteratorHasNext_mg126966__4 = a.put("Hello", "2");
            Assert.assertEquals(" =\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126966__4)).toString());
            Assert.assertEquals(-697058415, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__4)).hashCode())));
            Attributes o_testIteratorHasNext_mg126966__5 = a.put("data-name", "3");
            Assert.assertEquals(" =\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126966__5)).toString());
            Assert.assertEquals(682176717, ((int) (((Attributes) (o_testIteratorHasNext_mg126966__5)).hashCode())));
            int seen = 0;
            for (Attribute attribute : a) {
                seen++;
                String.valueOf(seen);
                attribute.getValue();
            }
            a.iterator();
            org.junit.Assert.fail("testIteratorHasNext_mg126966litString127956 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126965litNum130786litString144717() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126965__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126965__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__3)).hashCode())));
        Attributes o_testIteratorHasNext_mg126965__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126965__4)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126965__5 = a.put("data-name", "\n");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"\n\"", ((Attributes) (o_testIteratorHasNext_mg126965__5)).toString());
        Assert.assertEquals(1208037519, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__5)).hashCode())));
        int seen = 1805878975;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        String o_testIteratorHasNext_mg126965__13 = a.html();
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"\n\"", o_testIteratorHasNext_mg126965__13);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"\n\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208037519, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"\n\"", ((Attributes) (o_testIteratorHasNext_mg126965__3)).toString());
        Assert.assertEquals(1208037519, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__3)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"\n\"", ((Attributes) (o_testIteratorHasNext_mg126965__4)).toString());
        Assert.assertEquals(1208037519, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"\n\"", ((Attributes) (o_testIteratorHasNext_mg126965__5)).toString());
        Assert.assertEquals(1208037519, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126965litNum130786_mg153424() throws Exception {
        boolean __DSPOT_value_44796 = false;
        String __DSPOT_key_44795 = "l9G>Q4HbJ525[{HY0ThM";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126965__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126965__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__3)).hashCode())));
        Attributes o_testIteratorHasNext_mg126965__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126965__4)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126965__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126965__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__5)).hashCode())));
        int seen = 1805878975;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        String o_testIteratorHasNext_mg126965__13 = a.html();
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", o_testIteratorHasNext_mg126965__13);
        Attributes o_testIteratorHasNext_mg126965litNum130786_mg153424__24 = a.put(__DSPOT_key_44795, __DSPOT_value_44796);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126965litNum130786_mg153424__24)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126965litNum130786_mg153424__24)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126965__3)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__3)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126965__4)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__4)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126965__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", o_testIteratorHasNext_mg126965__13);
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126963null141634_failAssert166_add147964() throws Exception {
        try {
            String __DSPOT_key_35297 = "5)|akt)^N[#w]o!d/%gv";
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorHasNext_mg126963__4 = a.put("Tot", "1");
            Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126963__4)).toString());
            Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126963__4)).hashCode())));
            Attributes o_testIteratorHasNext_mg126963__5 = a.put(null, "2");
            a.put("data-name", "3");
            Attributes o_testIteratorHasNext_mg126963__6 = a.put("data-name", "3");
            int seen = 0;
            for (Attribute attribute : a) {
                seen++;
                String.valueOf(seen);
                attribute.getValue();
            }
            boolean o_testIteratorHasNext_mg126963__14 = a.hasKey(__DSPOT_key_35297);
            org.junit.Assert.fail("testIteratorHasNext_mg126963null141634 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126967_add132323_add147820() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126967__3 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126967__3)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__3)).hashCode())));
        Attributes o_testIteratorHasNext_mg126967__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126967__4)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126967__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126967__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__5)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        a.normalize();
        a.normalize();
        ((Attributes) (o_testIteratorHasNext_mg126967__5)).toString();
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-521258618, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126967__3)).toString());
        Assert.assertEquals(-521258618, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__3)).hashCode())));
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126967__4)).toString());
        Assert.assertEquals(-521258618, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__4)).hashCode())));
        Assert.assertEquals(" tot=\"1\" hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126967__5)).toString());
        Assert.assertEquals(-521258618, ((int) (((Attributes) (o_testIteratorHasNext_mg126967__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126961_remove133286litString142621() throws Exception {
        String __DSPOT_key_35295 = "2.,eLG{**[.&Y!Zv}G#}";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126961__4 = a.put("Tot", "Tot");
        Assert.assertEquals(" Tot=\"Tot\"", ((Attributes) (o_testIteratorHasNext_mg126961__4)).toString());
        Assert.assertEquals(-1228736319, ((int) (((Attributes) (o_testIteratorHasNext_mg126961__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126961__5 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"Tot\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126961__5)).toString());
        Assert.assertEquals(-1956808126, ((int) (((Attributes) (o_testIteratorHasNext_mg126961__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126961__6 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"Tot\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126961__6)).toString());
        Assert.assertEquals(-577572994, ((int) (((Attributes) (o_testIteratorHasNext_mg126961__6)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            attribute.getValue();
        }
        String o_testIteratorHasNext_mg126961__14 = a.get(__DSPOT_key_35295);
        Assert.assertEquals("", o_testIteratorHasNext_mg126961__14);
        Assert.assertEquals(" Tot=\"Tot\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-577572994, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"Tot\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126961__4)).toString());
        Assert.assertEquals(-577572994, ((int) (((Attributes) (o_testIteratorHasNext_mg126961__4)).hashCode())));
        Assert.assertEquals(" Tot=\"Tot\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126961__5)).toString());
        Assert.assertEquals(-577572994, ((int) (((Attributes) (o_testIteratorHasNext_mg126961__5)).hashCode())));
        Assert.assertEquals(" Tot=\"Tot\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126961__6)).toString());
        Assert.assertEquals(-577572994, ((int) (((Attributes) (o_testIteratorHasNext_mg126961__6)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126968_remove133280_mg148612() throws Exception {
        Attributes __DSPOT_incoming_41359 = new Attributes();
        boolean __DSPOT_value_35300 = true;
        String __DSPOT_key_35299 = "D|3#2X}R<{:`A&SwYK7b";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__5 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126968__5)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__6 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126968__6)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__6)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__7 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126968__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__7)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
        }
        Attributes o_testIteratorHasNext_mg126968__15 = a.put(__DSPOT_key_35299, __DSPOT_value_35300);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__15)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__15)).hashCode())));
        a.addAll(__DSPOT_incoming_41359);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (a)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__5)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__6)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__6)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__7)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__7)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\" D|3#2X}R<{:`A&SwYK7b", ((Attributes) (o_testIteratorHasNext_mg126968__15)).toString());
        Assert.assertEquals(677348697, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__15)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126964_remove133380null156023_failAssert177() throws Exception {
        try {
            String __DSPOT_key_35298 = "R P-w1?{ !.PTq?Cs.zD";
            Attributes a = new Attributes();
            Attributes o_testIteratorHasNext_mg126964__4 = a.put("Tot", "1");
            Attributes o_testIteratorHasNext_mg126964__5 = a.put("Hello", "2");
            Attributes o_testIteratorHasNext_mg126964__6 = a.put(null, "3");
            int seen = 0;
            for (Attribute attribute : a) {
                seen++;
                attribute.getValue();
            }
            boolean o_testIteratorHasNext_mg126964__14 = a.hasKeyIgnoreCase(__DSPOT_key_35298);
            org.junit.Assert.fail("testIteratorHasNext_mg126964_remove133380null156023 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126969litString127805_failAssert168_add147975() throws Exception {
        try {
            String __DSPOT_value_35302 = "!LRY9;nOI&%`vZ5;N9#4";
            String __DSPOT_key_35301 = "0 #`4rM<(>!r8GeXDDXU";
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_testIteratorHasNext_mg126969__5 = a.put("Tot", "1");
            Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126969__5)).toString());
            Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126969__5)).hashCode())));
            Attributes o_testIteratorHasNext_mg126969litString127805_failAssert168_add147975__10 = a.put("", "2");
            Assert.assertEquals(" Tot=\"1\" =\"2\"", ((Attributes) (o_testIteratorHasNext_mg126969litString127805_failAssert168_add147975__10)).toString());
            Assert.assertEquals(556924476, ((int) (((Attributes) (o_testIteratorHasNext_mg126969litString127805_failAssert168_add147975__10)).hashCode())));
            Attributes o_testIteratorHasNext_mg126969__6 = a.put("", "2");
            Assert.assertEquals(" Tot=\"1\" =\"2\"", ((Attributes) (o_testIteratorHasNext_mg126969__6)).toString());
            Assert.assertEquals(556924476, ((int) (((Attributes) (o_testIteratorHasNext_mg126969__6)).hashCode())));
            Attributes o_testIteratorHasNext_mg126969__7 = a.put("data-name", "3");
            Assert.assertEquals(" Tot=\"1\" =\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126969__7)).toString());
            Assert.assertEquals(1936159608, ((int) (((Attributes) (o_testIteratorHasNext_mg126969__7)).hashCode())));
            int seen = 0;
            for (Attribute attribute : a) {
                seen++;
                String.valueOf(seen);
                attribute.getValue();
            }
            Attributes o_testIteratorHasNext_mg126969__15 = a.put(__DSPOT_key_35301, __DSPOT_value_35302);
            org.junit.Assert.fail("testIteratorHasNext_mg126969litString127805 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126968_mg134743litBool146048() throws Exception {
        String __DSPOT_key_36266 = "]t94(023(DCwUSir$&L=";
        boolean __DSPOT_value_35300 = false;
        String __DSPOT_key_35299 = "D|3#2X}R<{:`A&SwYK7b";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__5 = a.put("Tot", "1");
        Assert.assertEquals(" Tot=\"1\"", ((Attributes) (o_testIteratorHasNext_mg126968__5)).toString());
        Assert.assertEquals(556875465, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__5)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__6 = a.put("Hello", "2");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126968__6)).toString());
        Assert.assertEquals(-171196342, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__6)).hashCode())));
        Attributes o_testIteratorHasNext_mg126968__7 = a.put("data-name", "3");
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126968__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__7)).hashCode())));
        int seen = 0;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        Attributes o_testIteratorHasNext_mg126968__15 = a.put(__DSPOT_key_35299, __DSPOT_value_35300);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126968__15)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__15)).hashCode())));
        o_testIteratorHasNext_mg126968__7.removeIgnoreCase(__DSPOT_key_36266);
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126968__5)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__5)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126968__6)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__6)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126968__7)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__7)).hashCode())));
        Assert.assertEquals(" Tot=\"1\" Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126968__15)).toString());
        Assert.assertEquals(1208038790, ((int) (((Attributes) (o_testIteratorHasNext_mg126968__15)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126965litNum130783null156083() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testIteratorHasNext_mg126965__3 = a.put("Tot", null);
        Assert.assertEquals(" Tot", ((Attributes) (o_testIteratorHasNext_mg126965__3)).toString());
        Assert.assertEquals(555415706, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__3)).hashCode())));
        Attributes o_testIteratorHasNext_mg126965__4 = a.put("Hello", "2");
        Assert.assertEquals(" Tot Hello=\"2\"", ((Attributes) (o_testIteratorHasNext_mg126965__4)).toString());
        Assert.assertEquals(-172656101, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__4)).hashCode())));
        Attributes o_testIteratorHasNext_mg126965__5 = a.put("data-name", "3");
        Assert.assertEquals(" Tot Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126965__5)).toString());
        Assert.assertEquals(1206579031, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__5)).hashCode())));
        int seen = Integer.MAX_VALUE;
        for (Attribute attribute : a) {
            seen++;
            String.valueOf(seen);
            attribute.getValue();
        }
        String o_testIteratorHasNext_mg126965__13 = a.html();
        Assert.assertEquals(" Tot Hello=\"2\" data-name=\"3\"", o_testIteratorHasNext_mg126965__13);
        Assert.assertEquals(" Tot Hello=\"2\" data-name=\"3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1206579031, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126965__3)).toString());
        Assert.assertEquals(1206579031, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__3)).hashCode())));
        Assert.assertEquals(" Tot Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126965__4)).toString());
        Assert.assertEquals(1206579031, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__4)).hashCode())));
        Assert.assertEquals(" Tot Hello=\"2\" data-name=\"3\"", ((Attributes) (o_testIteratorHasNext_mg126965__5)).toString());
        Assert.assertEquals(1206579031, ((int) (((Attributes) (o_testIteratorHasNext_mg126965__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126964_remove133380litString142759_failAssert179() throws Exception {
        try {
            String __DSPOT_key_35298 = "R P-w1?{ !.PTq?Cs.zD";
            Attributes a = new Attributes();
            Attributes o_testIteratorHasNext_mg126964__4 = a.put("", "1");
            Attributes o_testIteratorHasNext_mg126964__5 = a.put("Hello", "2");
            Attributes o_testIteratorHasNext_mg126964__6 = a.put("data-name", "3");
            int seen = 0;
            for (Attribute attribute : a) {
                seen++;
                attribute.getValue();
            }
            boolean o_testIteratorHasNext_mg126964__14 = a.hasKeyIgnoreCase(__DSPOT_key_35298);
            org.junit.Assert.fail("testIteratorHasNext_mg126964_remove133380litString142759 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("String must not be empty", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorHasNext_mg126961_remove133286null155995_failAssert172() throws Exception {
        try {
            String __DSPOT_key_35295 = "2.,eLG{**[.&Y!Zv}G#}";
            Attributes a = new Attributes();
            Attributes o_testIteratorHasNext_mg126961__4 = a.put(null, "1");
            Attributes o_testIteratorHasNext_mg126961__5 = a.put("Hello", "2");
            Attributes o_testIteratorHasNext_mg126961__6 = a.put("data-name", "3");
            int seen = 0;
            for (Attribute attribute : a) {
                seen++;
                attribute.getValue();
            }
            String o_testIteratorHasNext_mg126961__14 = a.get(__DSPOT_key_35295);
            org.junit.Assert.fail("testIteratorHasNext_mg126961_remove133286null155995 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIterator_mg96159() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            a.put(atts[0], atts[1]);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String String_130 = datas[i][0];
            attribute.getKey();
            String String_131 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Attributes o_testIterator_mg96159__20 = a.clone();
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (o_testIterator_mg96159__20)).toString());
        Assert.assertEquals(80196295, ((int) (((Attributes) (o_testIterator_mg96159__20)).hashCode())));
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-274504897, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(3, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96195_failAssert89() throws Exception {
        try {
            Attributes a = new Attributes();
            String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
            for (String[] atts : datas) {
                String __DSPOT_value_27018 = "]K!yBs;z<B3{qY:1.TS1";
                String __DSPOT_key_27017 = "#y`?=Wg4tbv$vlK]CG:e";
                Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
                __DSPOT_invoc_7.put(__DSPOT_key_27017, __DSPOT_value_27018);
            }
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            int i = 0;
            for (Attribute attribute : a) {
                String String_152 = datas[i][0];
                attribute.getKey();
                String String_153 = datas[i][1];
                attribute.getValue();
                i++;
            }
            org.junit.Assert.fail("testIterator_rv96195 should have thrown ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException expected) {
            Assert.assertEquals("3", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIterator_rv96198() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            String __DSPOT_key_27021 = "=%_<pa<5heC?T,:+x%Ir";
            Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
            __DSPOT_invoc_7.removeIgnoreCase(__DSPOT_key_27021);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String String_56 = datas[i][0];
            attribute.getKey();
            String String_57 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(80196295, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(3, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIteratorlitNum96130() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            a.put(atts[0], atts[0]);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String String_110 = datas[i][0];
            attribute.getKey();
            String String_111 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Assert.assertEquals(" Tot=\"Tot\" Hello=\"Hello\" data-name=\"data-name\"", ((Attributes) (a)).toString());
        Assert.assertEquals(2075780291, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(3, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIterator_mg96170() throws Exception {
        String __DSPOT_value_27002 = "iZk^V}P#o/(ke}@!y;%w";
        String __DSPOT_key_27001 = "o$#{L(MK,S&xi`fFUFl.";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            a.put(atts[0], atts[1]);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String String_42 = datas[i][0];
            attribute.getKey();
            String String_43 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Attributes o_testIterator_mg96170__22 = a.put(__DSPOT_key_27001, __DSPOT_value_27002);
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\" o$#{L(MK,S&xi`fFUFl.=\"iZk^V}P#o/(ke}@!y;%w\"", ((Attributes) (o_testIterator_mg96170__22)).toString());
        Assert.assertEquals(1862505260, ((int) (((Attributes) (o_testIterator_mg96170__22)).hashCode())));
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\" o$#{L(MK,S&xi`fFUFl.=\"iZk^V}P#o/(ke}@!y;%w\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1862505260, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(3, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96194() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            boolean __DSPOT_value_27016 = false;
            String __DSPOT_key_27015 = "[xxU9{Rv%#};-^L<Q{If";
            Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
            __DSPOT_invoc_7.put(__DSPOT_key_27015, __DSPOT_value_27016);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String String_166 = datas[i][0];
            attribute.getKey();
            String String_167 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(80196295, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(3, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIterator_remove96156() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String String_2 = datas[i][0];
            attribute.getKey();
            String String_3 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(0, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96182() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
            __DSPOT_invoc_7.asList();
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String String_158 = datas[i][0];
            attribute.getKey();
            String String_159 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(80196295, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(3, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96193() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
            __DSPOT_invoc_7.normalize();
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String String_64 = datas[i][0];
            attribute.getKey();
            String String_65 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Assert.assertEquals(" tot=\"raul\" hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1649101113, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(3, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIterator_mg96161() throws Exception {
        Object __DSPOT_o_26994 = new Object();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            a.put(atts[0], atts[1]);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String String_126 = datas[i][0];
            attribute.getKey();
            String String_127 = datas[i][1];
            attribute.getValue();
            i++;
        }
        boolean o_testIterator_mg96161__22 = a.equals(__DSPOT_o_26994);
        Assert.assertFalse(o_testIterator_mg96161__22);
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(80196295, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(3, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIterator_mg96171() throws Exception {
        Attribute __DSPOT_attribute_27003 = new Attribute("I1QU<s#gz!ZbQ4Yv{f__", "d8jjy;Y<#5sMapM>m]!0");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            a.put(atts[0], atts[1]);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String String_44 = datas[i][0];
            attribute.getKey();
            String String_45 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Attributes o_testIterator_mg96171__22 = a.put(__DSPOT_attribute_27003);
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\" I1QU<s#gz!ZbQ4Yv{f__=\"d8jjy;Y<#5sMapM>m]!0\"", ((Attributes) (o_testIterator_mg96171__22)).toString());
        Assert.assertEquals(-1380408981, ((int) (((Attributes) (o_testIterator_mg96171__22)).hashCode())));
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\" I1QU<s#gz!ZbQ4Yv{f__=\"d8jjy;Y<#5sMapM>m]!0\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1380408981, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(3, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96192() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
            __DSPOT_invoc_7.iterator();
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String String_58 = datas[i][0];
            attribute.getKey();
            String String_59 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(80196295, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(3, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIterator_mg96177() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            a.put(atts[0], atts[1]);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String String_36 = datas[i][0];
            attribute.getKey();
            String String_37 = datas[i][1];
            attribute.getValue();
            i++;
            attribute.html();
        }
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(80196295, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(3, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIterator_mg96158() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            a.put(atts[0], atts[1]);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String String_146 = datas[i][0];
            attribute.getKey();
            String String_147 = datas[i][1];
            attribute.getValue();
            i++;
        }
        List<Attribute> o_testIterator_mg96158__20 = a.asList();
        Assert.assertFalse(o_testIterator_mg96158__20.isEmpty());
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(80196295, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(3, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIterator_mg96169() throws Exception {
        boolean __DSPOT_value_27000 = true;
        String __DSPOT_key_26999 = "!myflbwm=1.v-[hEt[-r";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            a.put(atts[0], atts[1]);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String String_32 = datas[i][0];
            attribute.getKey();
            String String_33 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Attributes o_testIterator_mg96169__22 = a.put(__DSPOT_key_26999, __DSPOT_value_27000);
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\" !myflbwm=1.v-[hEt[-r", ((Attributes) (o_testIterator_mg96169__22)).toString());
        Assert.assertEquals(-1106321040, ((int) (((Attributes) (o_testIterator_mg96169__22)).hashCode())));
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\" !myflbwm=1.v-[hEt[-r", ((Attributes) (a)).toString());
        Assert.assertEquals(-1106321040, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(3, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIterator_add96151() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            a.put(atts[0], atts[1]);
            a.put(atts[0], atts[1]);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String String_92 = datas[i][0];
            attribute.getKey();
            String String_93 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(80196295, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(3, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIterator_mg96179() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            a.put(atts[0], atts[1]);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String __DSPOT_val_27008 = "JPp.ZZQ,/@/54}hDLf43";
            String String_128 = datas[i][0];
            attribute.getKey();
            String String_129 = datas[i][1];
            attribute.getValue();
            i++;
            attribute.setValue(__DSPOT_val_27008);
        }
        Assert.assertEquals(" Tot=\"JPp.ZZQ,/@/54}hDLf43\" Hello=\"JPp.ZZQ,/@/54}hDLf43\" data-name=\"JPp.ZZQ,/@/54}hDLf43\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-486891740, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(3, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIterator_mg96163() throws Exception {
        String __DSPOT_key_26996 = "WuY57bQDQL(B?9#Y>kLW";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            a.put(atts[0], atts[1]);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String String_30 = datas[i][0];
            attribute.getKey();
            String String_31 = datas[i][1];
            attribute.getValue();
            i++;
        }
        String o_testIterator_mg96163__21 = a.getIgnoreCase(__DSPOT_key_26996);
        Assert.assertEquals("", o_testIterator_mg96163__21);
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(80196295, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(3, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIterator_mg96165() throws Exception {
        String __DSPOT_key_26998 = "pKe/XHPvS55u@aFlnnll";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            a.put(atts[0], atts[1]);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        Assert.assertEquals(0, ((int) (i)));
        for (Attribute attribute : a) {
            String String_142 = datas[i][0];
            attribute.getKey();
            String String_143 = datas[i][1];
            attribute.getValue();
            i++;
        }
        boolean o_testIterator_mg96165__21 = a.hasKeyIgnoreCase(__DSPOT_key_26998);
        Assert.assertFalse(o_testIterator_mg96165__21);
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(80196295, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(3, ((int) (i)));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96196_failAssert80() throws Exception {
        try {
            Attributes a = new Attributes();
            String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
            for (String[] atts : datas) {
                Attribute __DSPOT_attribute_27019 = new Attribute("{M7WPm)@5J3kRDp7(;;(", "(OZJQo_#LF[]%l^#@W-%");
                Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
                __DSPOT_invoc_7.put(__DSPOT_attribute_27019);
            }
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            int i = 0;
            for (Attribute attribute : a) {
                String String_52 = datas[i][0];
                attribute.getKey();
                String String_53 = datas[i][1];
                attribute.getValue();
                i++;
            }
            org.junit.Assert.fail("testIterator_rv96196 should have thrown ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException expected) {
            Assert.assertEquals("3", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorlitString96080_failAssert81() throws Exception {
        try {
            Attributes a = new Attributes();
            String[][] datas = new String[][]{ new String[]{ "", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
            for (String[] atts : datas) {
                a.put(atts[0], atts[1]);
            }
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            int i = 0;
            for (Attribute attribute : a) {
                String String_70 = datas[i][0];
                attribute.getKey();
                String String_71 = datas[i][1];
                attribute.getValue();
                i++;
            }
            org.junit.Assert.fail("testIteratorlitString96080 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("String must not be empty", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIterator_rv96182litNum102319_failAssert101() throws Exception {
        try {
            Attributes a = new Attributes();
            String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
            for (String[] atts : datas) {
                Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
                __DSPOT_invoc_7.asList();
            }
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            int i = 0;
            for (Attribute attribute : a) {
                String String_158 = datas[i][Integer.MIN_VALUE];
                attribute.getKey();
                String String_159 = datas[i][1];
                attribute.getValue();
                i++;
            }
            org.junit.Assert.fail("testIterator_rv96182litNum102319 should have thrown ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException expected) {
            Assert.assertEquals("-2147483648", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIterator_rv96184litString99087() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "There", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
            __DSPOT_invoc_7.dataset();
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        for (Attribute attribute : a) {
            String String_156 = datas[i][0];
            attribute.getKey();
            String String_157 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Assert.assertEquals(" There=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1716220498, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96185_mg106225() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            String __DSPOT_key_28241 = "+|lNBDW-`AzEHL?)&ed*";
            Attributes __DSPOT_o_27010 = new Attributes();
            Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
            __DSPOT_invoc_7.equals(__DSPOT_o_27010);
            __DSPOT_o_27010.removeIgnoreCase(__DSPOT_key_28241);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        for (Attribute attribute : a) {
            String String_160 = datas[i][0];
            attribute.getKey();
            String String_161 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(80196295, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96187_mg106322_failAssert113() throws Exception {
        try {
            Attributes a = new Attributes();
            String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
            for (String[] atts : datas) {
                String __DSPOT_value_28309 = "3LF).n^O)KBT&]NY_gJz";
                String __DSPOT_key_28308 = "a4&lT5emHkhYJ;qQSHxo";
                String __DSPOT_key_27012 = "kg>vikQ|2ZwDub&0y[}M";
                Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
                __DSPOT_invoc_7.getIgnoreCase(__DSPOT_key_27012);
                __DSPOT_invoc_7.put(__DSPOT_key_28308, __DSPOT_value_28309);
            }
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            int i = 0;
            for (Attribute attribute : a) {
                String String_164 = datas[i][0];
                attribute.getKey();
                String String_165 = datas[i][1];
                attribute.getValue();
                i++;
            }
            org.junit.Assert.fail("testIterator_rv96187_mg106322 should have thrown ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException expected) {
            Assert.assertEquals("3", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIterator_rv96181null109081_failAssert115() throws Exception {
        try {
            Attributes a = new Attributes();
            String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
            for (String[] atts : datas) {
                Attributes __DSPOT_incoming_27009 = new Attributes();
                Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
                __DSPOT_invoc_7.addAll(null);
            }
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            int i = 0;
            for (Attribute attribute : a) {
                String String_60 = datas[i][0];
                attribute.getKey();
                String String_61 = datas[i][1];
                attribute.getValue();
                i++;
            }
            org.junit.Assert.fail("testIterator_rv96181null109081 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals(null, expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIterator_remove96156_mg104488() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        for (Attribute attribute : a) {
            String String_2 = datas[i][0];
            attribute.getKey();
            String String_3 = datas[i][1];
            attribute.getValue();
            i++;
        }
        List<Attribute> o_testIterator_remove96156_mg104488__19 = a.asList();
        Assert.assertTrue(o_testIterator_remove96156_mg104488__19.isEmpty());
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96183litString99058() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Helo", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
            __DSPOT_invoc_7.clone();
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        for (Attribute attribute : a) {
            String String_154 = datas[i][0];
            attribute.getKey();
            String String_155 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Assert.assertEquals(" Tot=\"raul\" Helo=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-586970515, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96183_rv108236() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            boolean __DSPOT_value_29564 = false;
            String __DSPOT_key_29563 = "wl=] Lr=**pIAV]$/^Na";
            Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
            Attributes __DSPOT_invoc_16 = __DSPOT_invoc_7.clone();
            __DSPOT_invoc_16.put(__DSPOT_key_29563, __DSPOT_value_29564);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        for (Attribute attribute : a) {
            String String_154 = datas[i][0];
            attribute.getKey();
            String String_155 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-274504897, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIterator_mg96169litBool103282() throws Exception {
        boolean __DSPOT_value_27000 = false;
        String __DSPOT_key_26999 = "!myflbwm=1.v-[hEt[-r";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            a.put(atts[0], atts[1]);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        for (Attribute attribute : a) {
            String String_32 = datas[i][0];
            attribute.getKey();
            String String_33 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Attributes o_testIterator_mg96169__22 = a.put(__DSPOT_key_26999, __DSPOT_value_27000);
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (o_testIterator_mg96169__22)).toString());
        Assert.assertEquals(80196295, ((int) (((Attributes) (o_testIterator_mg96169__22)).hashCode())));
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(80196295, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96186null109082_failAssert94() throws Exception {
        try {
            Attributes a = new Attributes();
            String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
            for (String[] atts : datas) {
                String __DSPOT_key_27011 = null;
                Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
                __DSPOT_invoc_7.get(__DSPOT_key_27011);
            }
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            int i = 0;
            for (Attribute attribute : a) {
                String String_62 = datas[i][0];
                attribute.getKey();
                String String_63 = datas[i][1];
                attribute.getValue();
                i++;
            }
            org.junit.Assert.fail("testIterator_rv96186null109082 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIterator_rv96185null109097() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            Attributes __DSPOT_o_27010 = new Attributes();
            Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
            __DSPOT_invoc_7.equals(null);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        for (Attribute attribute : a) {
            String String_160 = datas[i][0];
            attribute.getKey();
            String String_161 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(80196295, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96187null109101_failAssert105() throws Exception {
        try {
            Attributes a = new Attributes();
            String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
            for (String[] atts : datas) {
                String __DSPOT_key_27012 = "kg>vikQ|2ZwDub&0y[}M";
                Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
                __DSPOT_invoc_7.getIgnoreCase(null);
            }
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            int i = 0;
            for (Attribute attribute : a) {
                String String_164 = datas[i][0];
                attribute.getKey();
                String String_165 = datas[i][1];
                attribute.getValue();
                i++;
            }
            org.junit.Assert.fail("testIterator_rv96187null109101 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIterator_rv96183_mg106074() throws Exception {
        String __DSPOT_key_28132 = "w#,/JSy,N&DcM?(!3Dk*";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
            __DSPOT_invoc_7.clone();
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        for (Attribute attribute : a) {
            String String_154 = datas[i][0];
            attribute.getKey();
            String String_155 = datas[i][1];
            attribute.getValue();
            i++;
        }
        String o_testIterator_rv96183_mg106074__24 = a.getIgnoreCase(__DSPOT_key_28132);
        Assert.assertEquals("", o_testIterator_rv96183_mg106074__24);
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-274504897, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96187litString99332() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "" } };
        for (String[] atts : datas) {
            String __DSPOT_key_27012 = "kg>vikQ|2ZwDub&0y[}M";
            Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
            __DSPOT_invoc_7.getIgnoreCase(__DSPOT_key_27012);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        for (Attribute attribute : a) {
            String String_164 = datas[i][0];
            attribute.getKey();
            String String_165 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"\"", ((Attributes) (a)).toString());
        Assert.assertEquals(2146978792, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96189null109084_failAssert95() throws Exception {
        try {
            Attributes a = new Attributes();
            String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
            for (String[] atts : datas) {
                String __DSPOT_key_27014 = null;
                Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
                __DSPOT_invoc_7.hasKeyIgnoreCase(__DSPOT_key_27014);
            }
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            int i = 0;
            for (Attribute attribute : a) {
                String String_66 = datas[i][0];
                attribute.getKey();
                String String_67 = datas[i][1];
                attribute.getValue();
                i++;
            }
            org.junit.Assert.fail("testIterator_rv96189null109084 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIterator_rv96194litBool103283_failAssert104() throws Exception {
        try {
            Attributes a = new Attributes();
            String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
            for (String[] atts : datas) {
                boolean __DSPOT_value_27016 = true;
                String __DSPOT_key_27015 = "[xxU9{Rv%#};-^L<Q{If";
                Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
                __DSPOT_invoc_7.put(__DSPOT_key_27015, __DSPOT_value_27016);
            }
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            int i = 0;
            for (Attribute attribute : a) {
                String String_166 = datas[i][0];
                attribute.getKey();
                String String_167 = datas[i][1];
                attribute.getValue();
                i++;
            }
            org.junit.Assert.fail("testIterator_rv96194litBool103283 should have thrown ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException expected) {
            Assert.assertEquals("3", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorlitNum96128_failAssert74_add104055() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
            for (String[] atts : datas) {
                a.put(atts[338334981], atts[1]);
            }
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            iterator.hasNext();
            int i = 0;
            for (Attribute attribute : a) {
                String String_14 = datas[i][0];
                attribute.getKey();
                String String_15 = datas[i][1];
                attribute.getValue();
                i++;
            }
            org.junit.Assert.fail("testIteratorlitNum96128 should have thrown ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIterator_rv96184_remove104410_remove116606() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
            __DSPOT_invoc_7.dataset();
        }
        Iterator<Attribute> iterator = a.iterator();
        int i = 0;
        for (Attribute attribute : a) {
            String String_156 = datas[i][0];
            attribute.getKey();
            String String_157 = datas[i][1];
            i++;
        }
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(80196295, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorlitNum96128_failAssert74_rv108677_rv120977() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
            for (String[] atts : datas) {
                boolean __DSPOT_value_29837 = true;
                String __DSPOT_key_29836 = "bIw[IVQ!J/;WWMN!,nje";
                Attributes __DSPOT_invoc_9 = a.put(atts[338334981], atts[1]);
                Attributes __DSPOT_invoc_20 = __DSPOT_invoc_9.put(__DSPOT_key_29836, __DSPOT_value_29837);
                __DSPOT_invoc_20.clone();
            }
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            int i = 0;
            for (Attribute attribute : a) {
                String String_14 = datas[i][0];
                attribute.getKey();
                String String_15 = datas[i][1];
                attribute.getValue();
                i++;
            }
            org.junit.Assert.fail("testIteratorlitNum96128 should have thrown ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIterator_rv96182litString99159_mg118166_failAssert122() throws Exception {
        try {
            Attributes a = new Attributes();
            String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "a&p" }, new String[]{ "data-name", "Jsoup" } };
            for (String[] atts : datas) {
                Attribute __DSPOT_attribute_31034 = new Attribute("g,QC=&68!7Tpo@JIEa53", "ame$^}vZ#a E}SbyDbUW", new Attributes());
                Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
                __DSPOT_invoc_7.asList();
                __DSPOT_invoc_7.put(__DSPOT_attribute_31034);
            }
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            int i = 0;
            for (Attribute attribute : a) {
                String String_158 = datas[i][0];
                attribute.getKey();
                String String_159 = datas[i][1];
                attribute.getValue();
                i++;
            }
            org.junit.Assert.fail("testIterator_rv96182litString99159_mg118166 should have thrown ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException expected) {
            Assert.assertEquals("3", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIterator_rv96189_mg105211litNum113765_failAssert121() throws Exception {
        try {
            Attributes a = new Attributes();
            String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
            for (String[] atts : datas) {
                String __DSPOT_key_27014 = "#$nd9|65h;McRW,8:/e%";
                Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
                __DSPOT_invoc_7.hasKeyIgnoreCase(__DSPOT_key_27014);
                __DSPOT_invoc_7.clone();
            }
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            int i = 0;
            for (Attribute attribute : a) {
                String String_66 = datas[i][Integer.MIN_VALUE];
                attribute.getKey();
                String String_67 = datas[i][1];
                attribute.getValue();
                i++;
            }
            org.junit.Assert.fail("testIterator_rv96189_mg105211litNum113765 should have thrown ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException expected) {
            Assert.assertEquals("-2147483648", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIterator_add96153litString97992_rv121030() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ ":", "Jsoup" } };
        for (String[] atts : datas) {
            boolean __DSPOT_value_33021 = false;
            String __DSPOT_key_33020 = ",0}a%plL[e*;E=B%CO>%";
            Attributes __DSPOT_invoc_13 = a.put(atts[0], atts[1]);
            __DSPOT_invoc_13.put(__DSPOT_key_33020, __DSPOT_value_33021);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        iterator.hasNext();
        int i = 0;
        for (Attribute attribute : a) {
            String String_96 = datas[i][0];
            attribute.getKey();
            String String_97 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" :=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1298980557, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96182litString99159litString110915_failAssert127() throws Exception {
        try {
            Attributes a = new Attributes();
            String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "a&p" }, new String[]{ "", "Jsoup" } };
            for (String[] atts : datas) {
                Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
                __DSPOT_invoc_7.asList();
            }
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            int i = 0;
            for (Attribute attribute : a) {
                String String_158 = datas[i][0];
                attribute.getKey();
                String String_159 = datas[i][1];
                attribute.getValue();
                i++;
            }
            org.junit.Assert.fail("testIterator_rv96182litString99159litString110915 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("String must not be empty", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIterator_rv96187_remove104426litString112209() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "\n", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            String __DSPOT_key_27012 = "kg>vikQ|2ZwDub&0y[}M";
            Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
            __DSPOT_invoc_7.getIgnoreCase(__DSPOT_key_27012);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        for (Attribute attribute : a) {
            String String_164 = datas[i][0];
            attribute.getKey();
            String String_165 = datas[i][1];
            i++;
        }
        Assert.assertEquals(" \n=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-436430568, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96183_rv108236litBool115726() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            boolean __DSPOT_value_29564 = true;
            String __DSPOT_key_29563 = "wl=] Lr=**pIAV]$/^Na";
            Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
            Attributes __DSPOT_invoc_16 = __DSPOT_invoc_7.clone();
            __DSPOT_invoc_16.put(__DSPOT_key_29563, __DSPOT_value_29564);
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        for (Attribute attribute : a) {
            String String_154 = datas[i][0];
            attribute.getKey();
            String String_155 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-274504897, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIterator_remove96156litString96517_mg118112() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "one" } };
        for (String[] atts : datas) {
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        for (Attribute attribute : a) {
            String String_2 = datas[i][0];
            attribute.getKey();
            String String_3 = datas[i][1];
            attribute.getValue();
            i++;
        }
        List<Attribute> o_testIterator_remove96156litString96517_mg118112__19 = a.asList();
        Assert.assertTrue(o_testIterator_remove96156litString96517_mg118112__19.isEmpty());
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96189_mg105211null121115_failAssert123() throws Exception {
        try {
            Attributes a = new Attributes();
            String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
            for (String[] atts : datas) {
                String __DSPOT_key_27014 = null;
                Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
                __DSPOT_invoc_7.hasKeyIgnoreCase(__DSPOT_key_27014);
                __DSPOT_invoc_7.clone();
            }
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            int i = 0;
            for (Attribute attribute : a) {
                String String_66 = datas[i][0];
                attribute.getKey();
                String String_67 = datas[i][1];
                attribute.getValue();
                i++;
            }
            org.junit.Assert.fail("testIterator_rv96189_mg105211null121115 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIterator_rv96184_remove104410_mg117148() throws Exception {
        String __DSPOT_key_30314 = "k{|%)7UlzLD[T 9Yo7g4";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
            __DSPOT_invoc_7.dataset();
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        for (Attribute attribute : a) {
            String String_156 = datas[i][0];
            attribute.getKey();
            String String_157 = datas[i][1];
            i++;
        }
        boolean o_testIterator_rv96184_remove104410_mg117148__23 = a.hasKeyIgnoreCase(__DSPOT_key_30314);
        Assert.assertFalse(o_testIterator_rv96184_remove104410_mg117148__23);
        Assert.assertEquals(" Tot=\"raul\" Hello=\"pismuth\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(80196295, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIterator_rv96183_rv108236null121127_failAssert124() throws Exception {
        try {
            Attributes a = new Attributes();
            String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "pismuth" }, new String[]{ "data-name", "Jsoup" } };
            for (String[] atts : datas) {
                boolean __DSPOT_value_29564 = false;
                String __DSPOT_key_29563 = "wl=] Lr=**pIAV]$/^Na";
                Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[1]);
                Attributes __DSPOT_invoc_16 = __DSPOT_invoc_7.clone();
                __DSPOT_invoc_16.put(null, __DSPOT_value_29564);
            }
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            int i = 0;
            for (Attribute attribute : a) {
                String String_154 = datas[i][0];
                attribute.getKey();
                String String_155 = datas[i][1];
                attribute.getValue();
                i++;
            }
            org.junit.Assert.fail("testIterator_rv96183_rv108236null121127 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIterator_rv96182litString99159litNum114212() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        String[][] datas = new String[][]{ new String[]{ "Tot", "raul" }, new String[]{ "Hello", "a&p" }, new String[]{ "data-name", "Jsoup" } };
        for (String[] atts : datas) {
            Attributes __DSPOT_invoc_7 = a.put(atts[0], atts[0]);
            __DSPOT_invoc_7.asList();
        }
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        int i = 0;
        for (Attribute attribute : a) {
            String String_158 = datas[i][0];
            attribute.getKey();
            String String_159 = datas[i][1];
            attribute.getValue();
            i++;
        }
        Assert.assertEquals(" Tot=\"Tot\" Hello=\"Hello\" data-name=\"data-name\"", ((Attributes) (a)).toString());
        Assert.assertEquals(2075780291, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121520() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        a.normalize();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121510() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        List<Attribute> o_testIteratorEmpty_mg121510__6 = a.asList();
        Assert.assertTrue(o_testIteratorEmpty_mg121510__6.isEmpty());
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121521() throws Exception {
        boolean __DSPOT_value_33073 = true;
        String __DSPOT_key_33072 = "XcZxdx[ BH=u9<i3/quu";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        Attributes o_testIteratorEmpty_mg121521__8 = a.put(__DSPOT_key_33072, __DSPOT_value_33073);
        Assert.assertEquals(" XcZxdx[ BH=u9<i3/quu", ((Attributes) (o_testIteratorEmpty_mg121521__8)).toString());
        Assert.assertEquals(828517616, ((int) (((Attributes) (o_testIteratorEmpty_mg121521__8)).hashCode())));
        Assert.assertEquals(" XcZxdx[ BH=u9<i3/quu", ((Attributes) (a)).toString());
        Assert.assertEquals(828517616, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121511() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        Attributes o_testIteratorEmpty_mg121511__6 = a.clone();
        Assert.assertEquals("", ((Attributes) (o_testIteratorEmpty_mg121511__6)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (o_testIteratorEmpty_mg121511__6)).hashCode())));
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121522() throws Exception {
        String __DSPOT_value_33075 = "lboeOc)zg)/b/+C3]+>3";
        String __DSPOT_key_33074 = "zNPg)Bz0.9.H$aq@G!G1";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        Attributes o_testIteratorEmpty_mg121522__8 = a.put(__DSPOT_key_33074, __DSPOT_value_33075);
        Assert.assertEquals(" zNPg)Bz0.9.H$aq@G!G1=\"lboeOc)zg)/b/+C3]+>3\"", ((Attributes) (o_testIteratorEmpty_mg121522__8)).toString());
        Assert.assertEquals(1921962875, ((int) (((Attributes) (o_testIteratorEmpty_mg121522__8)).hashCode())));
        Assert.assertEquals(" zNPg)Bz0.9.H$aq@G!G1=\"lboeOc)zg)/b/+C3]+>3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1921962875, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121523() throws Exception {
        Attribute __DSPOT_attribute_33076 = new Attribute("YR(K@m]!C`??1v[r&8JF", "#USoME=2_t`4lmG@0#`5");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        Attributes o_testIteratorEmpty_mg121523__8 = a.put(__DSPOT_attribute_33076);
        Assert.assertEquals(384390991, ((int) (((Attributes) (o_testIteratorEmpty_mg121523__8)).hashCode())));
        Assert.assertEquals(384390991, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121513() throws Exception {
        Attributes __DSPOT_o_33067 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        boolean o_testIteratorEmpty_mg121513__8 = a.equals(__DSPOT_o_33067);
        Assert.assertTrue(o_testIteratorEmpty_mg121513__8);
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121524() throws Exception {
        String __DSPOT_key_33077 = "#8F+-!zyw&j#P&1ln[Uo";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        a.remove(__DSPOT_key_33077);
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121525() throws Exception {
        String __DSPOT_key_33078 = "o=/c1<_PHc/W?(@runa4";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        a.removeIgnoreCase(__DSPOT_key_33078);
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121515() throws Exception {
        String __DSPOT_key_33069 = "o9wPVN3;_Ay-v=kspa,Y";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        String o_testIteratorEmpty_mg121515__7 = a.getIgnoreCase(__DSPOT_key_33069);
        Assert.assertEquals("", o_testIteratorEmpty_mg121515__7);
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121517() throws Exception {
        String __DSPOT_key_33071 = "B;nMuhkLm.eC?6qKKHS*";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        boolean o_testIteratorEmpty_mg121517__7 = a.hasKeyIgnoreCase(__DSPOT_key_33071);
        Assert.assertFalse(o_testIteratorEmpty_mg121517__7);
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121518() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        String o_testIteratorEmpty_mg121518__6 = a.html();
        Assert.assertEquals("", o_testIteratorEmpty_mg121518__6);
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121511_add121735() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        ((Attributes) (a)).toString();
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        Attributes o_testIteratorEmpty_mg121511__6 = a.clone();
        Assert.assertEquals("", ((Attributes) (o_testIteratorEmpty_mg121511__6)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (o_testIteratorEmpty_mg121511__6)).hashCode())));
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121523litString121633() throws Exception {
        Attribute __DSPOT_attribute_33076 = new Attribute("YR(K@m]!C`??1v[r&8JF", "\n");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        Attributes o_testIteratorEmpty_mg121523__8 = a.put(__DSPOT_attribute_33076);
        Assert.assertEquals(" YR(K@m]!C`??1v[r&8JF=\"\n\"", ((Attributes) (o_testIteratorEmpty_mg121523__8)).toString());
        Assert.assertEquals(-620573013, ((int) (((Attributes) (o_testIteratorEmpty_mg121523__8)).hashCode())));
        Assert.assertEquals(" YR(K@m]!C`??1v[r&8JF=\"\n\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-620573013, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121522null122324() throws Exception {
        String __DSPOT_value_33075 = null;
        String __DSPOT_key_33074 = "zNPg)Bz0.9.H$aq@G!G1";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        Attributes o_testIteratorEmpty_mg121522__8 = a.put(__DSPOT_key_33074, __DSPOT_value_33075);
        Assert.assertEquals(" zNPg)Bz0.9.H$aq@G!G1", ((Attributes) (o_testIteratorEmpty_mg121522__8)).toString());
        Assert.assertEquals(1947511376, ((int) (((Attributes) (o_testIteratorEmpty_mg121522__8)).hashCode())));
        Assert.assertEquals(" zNPg)Bz0.9.H$aq@G!G1", ((Attributes) (a)).toString());
        Assert.assertEquals(1947511376, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121520_add121807() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        a.normalize();
        a.normalize();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121510_remove121844() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        List<Attribute> o_testIteratorEmpty_mg121510__6 = a.asList();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121523_mg121947() throws Exception {
        Attribute __DSPOT_attribute_33076 = new Attribute("YR(K@m]!C`??1v[r&8JF", "#USoME=2_t`4lmG@0#`5");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        Attributes o_testIteratorEmpty_mg121523__8 = a.put(__DSPOT_attribute_33076);
        Assert.assertEquals(384390991, ((int) (((Attributes) (o_testIteratorEmpty_mg121523__8)).hashCode())));
        List<Attribute> o_testIteratorEmpty_mg121523_mg121947__11 = a.asList();
        Assert.assertFalse(o_testIteratorEmpty_mg121523_mg121947__11.isEmpty());
        Assert.assertEquals(384390991, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(384390991, ((int) (((Attributes) (o_testIteratorEmpty_mg121523__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121517null122337_failAssert140() throws Exception {
        try {
            String __DSPOT_key_33071 = "B;nMuhkLm.eC?6qKKHS*";
            Attributes a = new Attributes();
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            boolean o_testIteratorEmpty_mg121517__7 = a.hasKeyIgnoreCase(null);
            org.junit.Assert.fail("testIteratorEmpty_mg121517null122337 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121521_mg122243() throws Exception {
        boolean __DSPOT_value_33073 = true;
        String __DSPOT_key_33072 = "XcZxdx[ BH=u9<i3/quu";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        Attributes o_testIteratorEmpty_mg121521__8 = a.put(__DSPOT_key_33072, __DSPOT_value_33073);
        Assert.assertEquals(" XcZxdx[ BH=u9<i3/quu", ((Attributes) (o_testIteratorEmpty_mg121521__8)).toString());
        Assert.assertEquals(828517616, ((int) (((Attributes) (o_testIteratorEmpty_mg121521__8)).hashCode())));
        String o_testIteratorEmpty_mg121521_mg122243__11 = o_testIteratorEmpty_mg121521__8.html();
        Assert.assertEquals(" XcZxdx[ BH=u9<i3/quu", o_testIteratorEmpty_mg121521_mg122243__11);
        Assert.assertEquals(" XcZxdx[ BH=u9<i3/quu", ((Attributes) (a)).toString());
        Assert.assertEquals(828517616, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" XcZxdx[ BH=u9<i3/quu", ((Attributes) (o_testIteratorEmpty_mg121521__8)).toString());
        Assert.assertEquals(828517616, ((int) (((Attributes) (o_testIteratorEmpty_mg121521__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121514_mg121924() throws Exception {
        String __DSPOT_key_33068 = "e:l<aBZw2Zw%8sWmWcP1";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        String o_testIteratorEmpty_mg121514__7 = a.get(__DSPOT_key_33068);
        Assert.assertEquals("", o_testIteratorEmpty_mg121514__7);
        List<Attribute> o_testIteratorEmpty_mg121514_mg121924__10 = a.asList();
        Assert.assertTrue(o_testIteratorEmpty_mg121514_mg121924__10.isEmpty());
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals("", o_testIteratorEmpty_mg121514__7);
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121509null122333_failAssert141() throws Exception {
        try {
            Attributes __DSPOT_incoming_33066 = new Attributes();
            Attributes a = new Attributes();
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            a.addAll(null);
            org.junit.Assert.fail("testIteratorEmpty_mg121509null122333 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals(null, expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121515_remove121843() throws Exception {
        String __DSPOT_key_33069 = "o9wPVN3;_Ay-v=kspa,Y";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        String o_testIteratorEmpty_mg121515__7 = a.getIgnoreCase(__DSPOT_key_33069);
        Assert.assertEquals("", o_testIteratorEmpty_mg121515__7);
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121525_remove121835() throws Exception {
        String __DSPOT_key_33078 = "o=/c1<_PHc/W?(@runa4";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        a.removeIgnoreCase(__DSPOT_key_33078);
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121513_mg122292() throws Exception {
        Attributes __DSPOT_o_33395 = new Attributes();
        Attributes __DSPOT_o_33067 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        boolean o_testIteratorEmpty_mg121513__8 = a.equals(__DSPOT_o_33067);
        boolean o_testIteratorEmpty_mg121513_mg122292__13 = a.equals(__DSPOT_o_33395);
        Assert.assertTrue(o_testIteratorEmpty_mg121513_mg122292__13);
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121523_add121710() throws Exception {
        Attribute __DSPOT_attribute_33076 = new Attribute("YR(K@m]!C`??1v[r&8JF", "#USoME=2_t`4lmG@0#`5");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        iterator.hasNext();
        Attributes o_testIteratorEmpty_mg121523__8 = a.put(__DSPOT_attribute_33076);
        Assert.assertEquals(384390991, ((int) (((Attributes) (o_testIteratorEmpty_mg121523__8)).hashCode())));
        Assert.assertEquals(384390991, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121519_remove121829() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        a.iterator();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121521null122340_failAssert128() throws Exception {
        try {
            boolean __DSPOT_value_33073 = true;
            String __DSPOT_key_33072 = null;
            Attributes a = new Attributes();
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            Attributes o_testIteratorEmpty_mg121521__8 = a.put(__DSPOT_key_33072, __DSPOT_value_33073);
            org.junit.Assert.fail("testIteratorEmpty_mg121521null122340 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121523_mg121950() throws Exception {
        Attributes __DSPOT_o_33148 = new Attributes();
        Attribute __DSPOT_attribute_33076 = new Attribute("YR(K@m]!C`??1v[r&8JF", "#USoME=2_t`4lmG@0#`5");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        Attributes o_testIteratorEmpty_mg121523__8 = a.put(__DSPOT_attribute_33076);
        Assert.assertEquals(384390991, ((int) (((Attributes) (o_testIteratorEmpty_mg121523__8)).hashCode())));
        boolean o_testIteratorEmpty_mg121523_mg121950__13 = a.equals(__DSPOT_o_33148);
        Assert.assertFalse(o_testIteratorEmpty_mg121523_mg121950__13);
        Assert.assertEquals(384390991, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(384390991, ((int) (((Attributes) (o_testIteratorEmpty_mg121523__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121522null122325_failAssert129() throws Exception {
        try {
            String __DSPOT_value_33075 = "lboeOc)zg)/b/+C3]+>3";
            String __DSPOT_key_33074 = null;
            Attributes a = new Attributes();
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            Attributes o_testIteratorEmpty_mg121522__8 = a.put(__DSPOT_key_33074, __DSPOT_value_33075);
            org.junit.Assert.fail("testIteratorEmpty_mg121522null122325 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121525null122334_failAssert137() throws Exception {
        try {
            String __DSPOT_key_33078 = null;
            Attributes a = new Attributes();
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            a.removeIgnoreCase(__DSPOT_key_33078);
            org.junit.Assert.fail("testIteratorEmpty_mg121525null122334 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121523null122332_failAssert130() throws Exception {
        try {
            Attribute __DSPOT_attribute_33076 = new Attribute("YR(K@m]!C`??1v[r&8JF", "#USoME=2_t`4lmG@0#`5");
            Attributes a = new Attributes();
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            Attributes o_testIteratorEmpty_mg121523__8 = a.put(null);
            org.junit.Assert.fail("testIteratorEmpty_mg121523null122332 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121522_mg121872() throws Exception {
        String __DSPOT_value_33075 = "lboeOc)zg)/b/+C3]+>3";
        String __DSPOT_key_33074 = "zNPg)Bz0.9.H$aq@G!G1";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        Attributes o_testIteratorEmpty_mg121522__8 = a.put(__DSPOT_key_33074, __DSPOT_value_33075);
        Assert.assertEquals(" zNPg)Bz0.9.H$aq@G!G1=\"lboeOc)zg)/b/+C3]+>3\"", ((Attributes) (o_testIteratorEmpty_mg121522__8)).toString());
        Assert.assertEquals(1921962875, ((int) (((Attributes) (o_testIteratorEmpty_mg121522__8)).hashCode())));
        Map<String, String> o_testIteratorEmpty_mg121522_mg121872__11 = o_testIteratorEmpty_mg121522__8.dataset();
        Assert.assertTrue(o_testIteratorEmpty_mg121522_mg121872__11.isEmpty());
        Assert.assertEquals(" zNPg)Bz0.9.H$aq@G!G1=\"lboeOc)zg)/b/+C3]+>3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1921962875, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" zNPg)Bz0.9.H$aq@G!G1=\"lboeOc)zg)/b/+C3]+>3\"", ((Attributes) (o_testIteratorEmpty_mg121522__8)).toString());
        Assert.assertEquals(1921962875, ((int) (((Attributes) (o_testIteratorEmpty_mg121522__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121513null122342() throws Exception {
        Attributes __DSPOT_o_33067 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        boolean o_testIteratorEmpty_mg121513__8 = a.equals(null);
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121522_remove121824() throws Exception {
        String __DSPOT_value_33075 = "lboeOc)zg)/b/+C3]+>3";
        String __DSPOT_key_33074 = "zNPg)Bz0.9.H$aq@G!G1";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        Attributes o_testIteratorEmpty_mg121522__8 = a.put(__DSPOT_key_33074, __DSPOT_value_33075);
        Assert.assertEquals(" zNPg)Bz0.9.H$aq@G!G1=\"lboeOc)zg)/b/+C3]+>3\"", ((Attributes) (o_testIteratorEmpty_mg121522__8)).toString());
        Assert.assertEquals(1921962875, ((int) (((Attributes) (o_testIteratorEmpty_mg121522__8)).hashCode())));
        Assert.assertEquals(" zNPg)Bz0.9.H$aq@G!G1=\"lboeOc)zg)/b/+C3]+>3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1921962875, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121521_mg122236() throws Exception {
        boolean __DSPOT_value_33073 = true;
        String __DSPOT_key_33072 = "XcZxdx[ BH=u9<i3/quu";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        Attributes o_testIteratorEmpty_mg121521__8 = a.put(__DSPOT_key_33072, __DSPOT_value_33073);
        Assert.assertEquals(" XcZxdx[ BH=u9<i3/quu", ((Attributes) (o_testIteratorEmpty_mg121521__8)).toString());
        Assert.assertEquals(828517616, ((int) (((Attributes) (o_testIteratorEmpty_mg121521__8)).hashCode())));
        Attributes o_testIteratorEmpty_mg121521_mg122236__11 = o_testIteratorEmpty_mg121521__8.clone();
        Assert.assertEquals(" XcZxdx[ BH=u9<i3/quu", ((Attributes) (o_testIteratorEmpty_mg121521_mg122236__11)).toString());
        Assert.assertEquals(828517616, ((int) (((Attributes) (o_testIteratorEmpty_mg121521_mg122236__11)).hashCode())));
        Assert.assertEquals(" XcZxdx[ BH=u9<i3/quu", ((Attributes) (a)).toString());
        Assert.assertEquals(-168361742, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" XcZxdx[ BH=u9<i3/quu", ((Attributes) (o_testIteratorEmpty_mg121521__8)).toString());
        Assert.assertEquals(-168361742, ((int) (((Attributes) (o_testIteratorEmpty_mg121521__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121521litBool121675() throws Exception {
        boolean __DSPOT_value_33073 = false;
        String __DSPOT_key_33072 = "XcZxdx[ BH=u9<i3/quu";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        Attributes o_testIteratorEmpty_mg121521__8 = a.put(__DSPOT_key_33072, __DSPOT_value_33073);
        Assert.assertEquals("", ((Attributes) (o_testIteratorEmpty_mg121521__8)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (o_testIteratorEmpty_mg121521__8)).hashCode())));
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121513_add121815null126609() throws Exception {
        Attributes __DSPOT_o_33067 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        boolean o_testIteratorEmpty_mg121513__8 = a.equals(null);
        ((Attributes) (a)).toString();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121522null122324null126572_failAssert150() throws Exception {
        try {
            String __DSPOT_value_33075 = null;
            String __DSPOT_key_33074 = null;
            Attributes a = new Attributes();
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            Attributes o_testIteratorEmpty_mg121522__8 = a.put(__DSPOT_key_33074, __DSPOT_value_33075);
            org.junit.Assert.fail("testIteratorEmpty_mg121522null122324null126572 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121523_remove121828_mg124108() throws Exception {
        Object __DSPOT_o_33567 = new Object();
        Attribute __DSPOT_attribute_33076 = new Attribute("YR(K@m]!C`??1v[r&8JF", "#USoME=2_t`4lmG@0#`5");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        Attributes o_testIteratorEmpty_mg121523__8 = a.put(__DSPOT_attribute_33076);
        Assert.assertEquals(384390991, ((int) (((Attributes) (o_testIteratorEmpty_mg121523__8)).hashCode())));
        boolean o_testIteratorEmpty_mg121523_remove121828_mg124108__12 = a.equals(__DSPOT_o_33567);
        Assert.assertFalse(o_testIteratorEmpty_mg121523_remove121828_mg124108__12);
        Assert.assertEquals(384390991, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(384390991, ((int) (((Attributes) (o_testIteratorEmpty_mg121523__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121523_remove121828_add123130() throws Exception {
        Attribute __DSPOT_attribute_33076 = new Attribute("YR(K@m]!C`??1v[r&8JF", "#USoME=2_t`4lmG@0#`5");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        ((Attributes) (a)).toString();
        Iterator<Attribute> iterator = a.iterator();
        Attributes o_testIteratorEmpty_mg121523__8 = a.put(__DSPOT_attribute_33076);
        Assert.assertEquals(384390991, ((int) (((Attributes) (o_testIteratorEmpty_mg121523__8)).hashCode())));
        Assert.assertEquals(384390991, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121521litString121666_remove123897() throws Exception {
        boolean __DSPOT_value_33073 = true;
        String __DSPOT_key_33072 = ":";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        Attributes o_testIteratorEmpty_mg121521__8 = a.put(__DSPOT_key_33072, __DSPOT_value_33073);
        Assert.assertEquals(" :", ((Attributes) (o_testIteratorEmpty_mg121521__8)).toString());
        Assert.assertEquals(83117851, ((int) (((Attributes) (o_testIteratorEmpty_mg121521__8)).hashCode())));
        Assert.assertEquals(" :", ((Attributes) (a)).toString());
        Assert.assertEquals(83117851, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121521_mg122236litBool123071() throws Exception {
        boolean __DSPOT_value_33073 = false;
        String __DSPOT_key_33072 = "XcZxdx[ BH=u9<i3/quu";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        Attributes o_testIteratorEmpty_mg121521__8 = a.put(__DSPOT_key_33072, __DSPOT_value_33073);
        Assert.assertEquals("", ((Attributes) (o_testIteratorEmpty_mg121521__8)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (o_testIteratorEmpty_mg121521__8)).hashCode())));
        Attributes o_testIteratorEmpty_mg121521_mg122236__11 = o_testIteratorEmpty_mg121521__8.clone();
        Assert.assertEquals("", ((Attributes) (o_testIteratorEmpty_mg121521_mg122236__11)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (o_testIteratorEmpty_mg121521_mg122236__11)).hashCode())));
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals("", ((Attributes) (o_testIteratorEmpty_mg121521__8)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (o_testIteratorEmpty_mg121521__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121521litString121666null126614_failAssert156() throws Exception {
        try {
            boolean __DSPOT_value_33073 = true;
            String __DSPOT_key_33072 = ":";
            Attributes a = new Attributes();
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            Attributes o_testIteratorEmpty_mg121521__8 = a.put(null, __DSPOT_value_33073);
            org.junit.Assert.fail("testIteratorEmpty_mg121521litString121666null126614 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121524_remove121850litString122868() throws Exception {
        String __DSPOT_key_33077 = "\n";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121525_add121747null126561_failAssert151() throws Exception {
        try {
            String __DSPOT_key_33078 = null;
            Attributes a = new Attributes();
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            iterator.hasNext();
            a.removeIgnoreCase(__DSPOT_key_33078);
            org.junit.Assert.fail("testIteratorEmpty_mg121525_add121747null126561 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121520_mg122258_remove123895() throws Exception {
        String __DSPOT_key_33371 = "IA]jf_o@(Wl}### 2@+;";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        a.normalize();
        String o_testIteratorEmpty_mg121520_mg122258__8 = a.getIgnoreCase(__DSPOT_key_33371);
        Assert.assertEquals("", o_testIteratorEmpty_mg121520_mg122258__8);
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121521null122340_failAssert128litBool123077() throws Exception {
        try {
            boolean __DSPOT_value_33073 = false;
            String __DSPOT_key_33072 = null;
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            Attributes o_testIteratorEmpty_mg121521__8 = a.put(__DSPOT_key_33072, __DSPOT_value_33073);
            org.junit.Assert.fail("testIteratorEmpty_mg121521null122340 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121525litString121642_remove123872() throws Exception {
        String __DSPOT_key_33078 = ":";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        a.removeIgnoreCase(__DSPOT_key_33078);
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121514litString121615_mg124748() throws Exception {
        Attributes __DSPOT_o_34028 = new Attributes();
        String __DSPOT_key_33068 = "gtYUicH;OLtNHANM/o$`";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        String o_testIteratorEmpty_mg121514__7 = a.get(__DSPOT_key_33068);
        Assert.assertEquals("", o_testIteratorEmpty_mg121514__7);
        boolean o_testIteratorEmpty_mg121514litString121615_mg124748__12 = a.equals(__DSPOT_o_34028);
        Assert.assertTrue(o_testIteratorEmpty_mg121514litString121615_mg124748__12);
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals("", o_testIteratorEmpty_mg121514__7);
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121523_remove121828null126510_failAssert149() throws Exception {
        try {
            Attribute __DSPOT_attribute_33076 = new Attribute("YR(K@m]!C`??1v[r&8JF", "#USoME=2_t`4lmG@0#`5");
            Attributes a = new Attributes();
            Iterator<Attribute> iterator = a.iterator();
            Attributes o_testIteratorEmpty_mg121523__8 = a.put(null);
            org.junit.Assert.fail("testIteratorEmpty_mg121523_remove121828null126510 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121522null122324_remove123851() throws Exception {
        String __DSPOT_value_33075 = null;
        String __DSPOT_key_33074 = "zNPg)Bz0.9.H$aq@G!G1";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        Attributes o_testIteratorEmpty_mg121522__8 = a.put(__DSPOT_key_33074, __DSPOT_value_33075);
        Assert.assertEquals(" zNPg)Bz0.9.H$aq@G!G1", ((Attributes) (o_testIteratorEmpty_mg121522__8)).toString());
        Assert.assertEquals(1947511376, ((int) (((Attributes) (o_testIteratorEmpty_mg121522__8)).hashCode())));
        Assert.assertEquals(" zNPg)Bz0.9.H$aq@G!G1", ((Attributes) (a)).toString());
        Assert.assertEquals(1947511376, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121523_remove121828_mg124123() throws Exception {
        Attribute __DSPOT_attribute_33076 = new Attribute("YR(K@m]!C`??1v[r&8JF", "#USoME=2_t`4lmG@0#`5");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        Attributes o_testIteratorEmpty_mg121523__8 = a.put(__DSPOT_attribute_33076);
        Assert.assertEquals(384390991, ((int) (((Attributes) (o_testIteratorEmpty_mg121523__8)).hashCode())));
        List<Attribute> o_testIteratorEmpty_mg121523_remove121828_mg124123__10 = o_testIteratorEmpty_mg121523__8.asList();
        Assert.assertFalse(o_testIteratorEmpty_mg121523_remove121828_mg124123__10.isEmpty());
        Assert.assertEquals(384390991, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(384390991, ((int) (((Attributes) (o_testIteratorEmpty_mg121523__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121510_add121786_remove123831() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        ((Attributes) (a)).toString();
        Iterator<Attribute> iterator = a.iterator();
        List<Attribute> o_testIteratorEmpty_mg121510__6 = a.asList();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121520_mg122258_mg126061() throws Exception {
        Attribute __DSPOT_attribute_34975 = new Attribute("X]5qY r_xVlTGD4((h51", "O2ajWN lCS+ok82|`tE<");
        String __DSPOT_key_33371 = "IA]jf_o@(Wl}### 2@+;";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        a.normalize();
        String o_testIteratorEmpty_mg121520_mg122258__8 = a.getIgnoreCase(__DSPOT_key_33371);
        Assert.assertEquals("", o_testIteratorEmpty_mg121520_mg122258__8);
        Attributes o_testIteratorEmpty_mg121520_mg122258_mg126061__13 = a.put(__DSPOT_attribute_34975);
        Assert.assertEquals(" X]5qY r_xVlTGD4((h51=\"O2ajWN lCS+ok82|`tE<\"", ((Attributes) (o_testIteratorEmpty_mg121520_mg122258_mg126061__13)).toString());
        Assert.assertEquals(1432183588, ((int) (((Attributes) (o_testIteratorEmpty_mg121520_mg122258_mg126061__13)).hashCode())));
        Assert.assertEquals(" X]5qY r_xVlTGD4((h51=\"O2ajWN lCS+ok82|`tE<\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1432183588, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals("", o_testIteratorEmpty_mg121520_mg122258__8);
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121522_add121676_remove123882() throws Exception {
        String __DSPOT_value_33075 = "lboeOc)zg)/b/+C3]+>3";
        String __DSPOT_key_33074 = "zNPg)Bz0.9.H$aq@G!G1";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        Attributes o_testIteratorEmpty_mg121522__8 = a.put(__DSPOT_key_33074, __DSPOT_value_33075);
        Assert.assertEquals(" zNPg)Bz0.9.H$aq@G!G1=\"lboeOc)zg)/b/+C3]+>3\"", ((Attributes) (o_testIteratorEmpty_mg121522__8)).toString());
        Assert.assertEquals(1921962875, ((int) (((Attributes) (o_testIteratorEmpty_mg121522__8)).hashCode())));
        Assert.assertEquals(" zNPg)Bz0.9.H$aq@G!G1=\"lboeOc)zg)/b/+C3]+>3\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1921962875, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121520_mg122258_mg126055() throws Exception {
        String __DSPOT_key_34970 = "ON}qH{Pw5|Va29rKleL6";
        String __DSPOT_key_33371 = "IA]jf_o@(Wl}### 2@+;";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Iterator<Attribute> iterator = a.iterator();
        iterator.hasNext();
        a.normalize();
        String o_testIteratorEmpty_mg121520_mg122258__8 = a.getIgnoreCase(__DSPOT_key_33371);
        Assert.assertEquals("", o_testIteratorEmpty_mg121520_mg122258__8);
        boolean o_testIteratorEmpty_mg121520_mg122258_mg126055__12 = a.hasKeyIgnoreCase(__DSPOT_key_34970);
        Assert.assertFalse(o_testIteratorEmpty_mg121520_mg122258_mg126055__12);
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals("", o_testIteratorEmpty_mg121520_mg122258__8);
    }

    @Test(timeout = 10000)
    public void testIteratorEmpty_mg121520_mg122257null126518_failAssert147() throws Exception {
        try {
            String __DSPOT_key_33370 = "N!A{tgKua(3a{xsRM>$r";
            Attributes a = new Attributes();
            Iterator<Attribute> iterator = a.iterator();
            iterator.hasNext();
            a.normalize();
            String o_testIteratorEmpty_mg121520_mg122257__8 = a.get(null);
            org.junit.Assert.fail("testIteratorEmpty_mg121520_mg122257null126518 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive__3)).hashCode())));
        Attributes o_removeCaseSensitive__4 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive__4)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive__4)).hashCode())));
        Attributes o_removeCaseSensitive__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive__5)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive__5)).hashCode())));
        Attributes o_removeCaseSensitive__6 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive__6)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive__6)).hashCode())));
        Attributes o_removeCaseSensitive__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive__7)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive__7)).hashCode())));
        int o_removeCaseSensitive__8 = a.size();
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive__8)));
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive__11 = a.size();
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive__11)));
        boolean o_removeCaseSensitive__12 = a.hasKey("tot");
        Assert.assertTrue(o_removeCaseSensitive__12);
        boolean o_removeCaseSensitive__13 = a.hasKey("Tot");
        Assert.assertFalse(o_removeCaseSensitive__13);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive__3)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive__3)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive__4)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive__5)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive__6)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive__7)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive__7)).hashCode())));
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive__8)));
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive__11)));
        Assert.assertTrue(o_removeCaseSensitive__12);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_mg46803() throws Exception {
        Attribute __DSPOT_attribute_11108 = new Attribute(",z)Q]L?FYvd/N/p0#5W ", "k*!It}(:7gw&8*Ux$;rb", new Attributes());
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_mg46803__6 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_mg46803__6)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_mg46803__6)).hashCode())));
        Attributes o_removeCaseSensitive_mg46803__7 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_mg46803__7)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_mg46803__7)).hashCode())));
        Attributes o_removeCaseSensitive_mg46803__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_mg46803__8)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_mg46803__8)).hashCode())));
        Attributes o_removeCaseSensitive_mg46803__9 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_mg46803__9)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_mg46803__9)).hashCode())));
        Attributes o_removeCaseSensitive_mg46803__10 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46803__10)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_mg46803__10)).hashCode())));
        int o_removeCaseSensitive_mg46803__11 = a.size();
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_mg46803__11)));
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_mg46803__14 = a.size();
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_mg46803__14)));
        boolean o_removeCaseSensitive_mg46803__15 = a.hasKey("tot");
        Assert.assertTrue(o_removeCaseSensitive_mg46803__15);
        boolean o_removeCaseSensitive_mg46803__16 = a.hasKey("Tot");
        Assert.assertFalse(o_removeCaseSensitive_mg46803__16);
        Attributes o_removeCaseSensitive_mg46803__17 = a.put(__DSPOT_attribute_11108);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" ,z)Q]L?FYvd/N/p0#5W=\"k*!It}(:7gw&amp;8*Ux$;rb\"", ((Attributes) (o_removeCaseSensitive_mg46803__17)).toString());
        Assert.assertEquals(618214467, ((int) (((Attributes) (o_removeCaseSensitive_mg46803__17)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" ,z)Q]L?FYvd/N/p0#5W=\"k*!It}(:7gw&amp;8*Ux$;rb\"", ((Attributes) (a)).toString());
        Assert.assertEquals(618214467, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" ,z)Q]L?FYvd/N/p0#5W=\"k*!It}(:7gw&amp;8*Ux$;rb\"", ((Attributes) (o_removeCaseSensitive_mg46803__6)).toString());
        Assert.assertEquals(618214467, ((int) (((Attributes) (o_removeCaseSensitive_mg46803__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" ,z)Q]L?FYvd/N/p0#5W=\"k*!It}(:7gw&amp;8*Ux$;rb\"", ((Attributes) (o_removeCaseSensitive_mg46803__7)).toString());
        Assert.assertEquals(618214467, ((int) (((Attributes) (o_removeCaseSensitive_mg46803__7)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" ,z)Q]L?FYvd/N/p0#5W=\"k*!It}(:7gw&amp;8*Ux$;rb\"", ((Attributes) (o_removeCaseSensitive_mg46803__8)).toString());
        Assert.assertEquals(618214467, ((int) (((Attributes) (o_removeCaseSensitive_mg46803__8)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" ,z)Q]L?FYvd/N/p0#5W=\"k*!It}(:7gw&amp;8*Ux$;rb\"", ((Attributes) (o_removeCaseSensitive_mg46803__9)).toString());
        Assert.assertEquals(618214467, ((int) (((Attributes) (o_removeCaseSensitive_mg46803__9)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" ,z)Q]L?FYvd/N/p0#5W=\"k*!It}(:7gw&amp;8*Ux$;rb\"", ((Attributes) (o_removeCaseSensitive_mg46803__10)).toString());
        Assert.assertEquals(618214467, ((int) (((Attributes) (o_removeCaseSensitive_mg46803__10)).hashCode())));
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_mg46803__11)));
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_mg46803__14)));
        Assert.assertTrue(o_removeCaseSensitive_mg46803__15);
        Assert.assertFalse(o_removeCaseSensitive_mg46803__16);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitivelitString46689() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitivelitString46689__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitivelitString46689__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitivelitString46689__3)).hashCode())));
        Attributes o_removeCaseSensitivelitString46689__4 = a.put("tot", "\n");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"\n\"", ((Attributes) (o_removeCaseSensitivelitString46689__4)).toString());
        Assert.assertEquals(-1792102175, ((int) (((Attributes) (o_removeCaseSensitivelitString46689__4)).hashCode())));
        Attributes o_removeCaseSensitivelitString46689__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"\n\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitivelitString46689__5)).toString());
        Assert.assertEquals(-1112687856, ((int) (((Attributes) (o_removeCaseSensitivelitString46689__5)).hashCode())));
        Attributes o_removeCaseSensitivelitString46689__6 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"\n\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitivelitString46689__6)).toString());
        Assert.assertEquals(2042119811, ((int) (((Attributes) (o_removeCaseSensitivelitString46689__6)).hashCode())));
        Attributes o_removeCaseSensitivelitString46689__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"\n\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivelitString46689__7)).toString());
        Assert.assertEquals(349924785, ((int) (((Attributes) (o_removeCaseSensitivelitString46689__7)).hashCode())));
        int o_removeCaseSensitivelitString46689__8 = a.size();
        Assert.assertEquals(5, ((int) (o_removeCaseSensitivelitString46689__8)));
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitivelitString46689__11 = a.size();
        Assert.assertEquals(3, ((int) (o_removeCaseSensitivelitString46689__11)));
        boolean o_removeCaseSensitivelitString46689__12 = a.hasKey("tot");
        Assert.assertTrue(o_removeCaseSensitivelitString46689__12);
        boolean o_removeCaseSensitivelitString46689__13 = a.hasKey("Tot");
        Assert.assertFalse(o_removeCaseSensitivelitString46689__13);
        Assert.assertEquals(" tot=\"\n\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1367772591, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"\n\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivelitString46689__3)).toString());
        Assert.assertEquals(-1367772591, ((int) (((Attributes) (o_removeCaseSensitivelitString46689__3)).hashCode())));
        Assert.assertEquals(" tot=\"\n\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivelitString46689__4)).toString());
        Assert.assertEquals(-1367772591, ((int) (((Attributes) (o_removeCaseSensitivelitString46689__4)).hashCode())));
        Assert.assertEquals(" tot=\"\n\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivelitString46689__5)).toString());
        Assert.assertEquals(-1367772591, ((int) (((Attributes) (o_removeCaseSensitivelitString46689__5)).hashCode())));
        Assert.assertEquals(" tot=\"\n\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivelitString46689__6)).toString());
        Assert.assertEquals(-1367772591, ((int) (((Attributes) (o_removeCaseSensitivelitString46689__6)).hashCode())));
        Assert.assertEquals(" tot=\"\n\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivelitString46689__7)).toString());
        Assert.assertEquals(-1367772591, ((int) (((Attributes) (o_removeCaseSensitivelitString46689__7)).hashCode())));
        Assert.assertEquals(5, ((int) (o_removeCaseSensitivelitString46689__8)));
        Assert.assertEquals(3, ((int) (o_removeCaseSensitivelitString46689__11)));
        Assert.assertTrue(o_removeCaseSensitivelitString46689__12);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_mg46801() throws Exception {
        boolean __DSPOT_value_11105 = true;
        String __DSPOT_key_11104 = " ! ^2mtc+t9mWS8QH*h@";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_mg46801__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_mg46801__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__5)).hashCode())));
        Attributes o_removeCaseSensitive_mg46801__6 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_mg46801__6)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__6)).hashCode())));
        Attributes o_removeCaseSensitive_mg46801__7 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_mg46801__7)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__7)).hashCode())));
        Attributes o_removeCaseSensitive_mg46801__8 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_mg46801__8)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__8)).hashCode())));
        Attributes o_removeCaseSensitive_mg46801__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46801__9)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__9)).hashCode())));
        int o_removeCaseSensitive_mg46801__10 = a.size();
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_mg46801__10)));
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_mg46801__13 = a.size();
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_mg46801__13)));
        boolean o_removeCaseSensitive_mg46801__14 = a.hasKey("tot");
        Assert.assertTrue(o_removeCaseSensitive_mg46801__14);
        boolean o_removeCaseSensitive_mg46801__15 = a.hasKey("Tot");
        Assert.assertFalse(o_removeCaseSensitive_mg46801__15);
        Attributes o_removeCaseSensitive_mg46801__16 = a.put(__DSPOT_key_11104, __DSPOT_value_11105);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"  ! ^2mtc+t9mWS8QH*h@", ((Attributes) (o_removeCaseSensitive_mg46801__16)).toString());
        Assert.assertEquals(955430081, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__16)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"  ! ^2mtc+t9mWS8QH*h@", ((Attributes) (a)).toString());
        Assert.assertEquals(955430081, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"  ! ^2mtc+t9mWS8QH*h@", ((Attributes) (o_removeCaseSensitive_mg46801__5)).toString());
        Assert.assertEquals(955430081, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"  ! ^2mtc+t9mWS8QH*h@", ((Attributes) (o_removeCaseSensitive_mg46801__6)).toString());
        Assert.assertEquals(955430081, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"  ! ^2mtc+t9mWS8QH*h@", ((Attributes) (o_removeCaseSensitive_mg46801__7)).toString());
        Assert.assertEquals(955430081, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__7)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"  ! ^2mtc+t9mWS8QH*h@", ((Attributes) (o_removeCaseSensitive_mg46801__8)).toString());
        Assert.assertEquals(955430081, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__8)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"  ! ^2mtc+t9mWS8QH*h@", ((Attributes) (o_removeCaseSensitive_mg46801__9)).toString());
        Assert.assertEquals(955430081, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__9)).hashCode())));
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_mg46801__10)));
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_mg46801__13)));
        Assert.assertTrue(o_removeCaseSensitive_mg46801__14);
        Assert.assertFalse(o_removeCaseSensitive_mg46801__15);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_rv46879() throws Exception {
        String __DSPOT_key_11155 = "GEI0*nOAYh)Df!OWL+|j";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_rv46879__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_rv46879__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_rv46879__4)).hashCode())));
        Attributes o_removeCaseSensitive_rv46879__5 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_rv46879__5)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_rv46879__5)).hashCode())));
        Attributes o_removeCaseSensitive_rv46879__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46879__6)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_rv46879__6)).hashCode())));
        Attributes __DSPOT_invoc_6 = a.put("hello", "There");
        Attributes o_removeCaseSensitive_rv46879__10 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46879__10)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_rv46879__10)).hashCode())));
        int o_removeCaseSensitive_rv46879__11 = a.size();
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_rv46879__11)));
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_rv46879__14 = a.size();
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_rv46879__14)));
        boolean o_removeCaseSensitive_rv46879__15 = a.hasKey("tot");
        Assert.assertTrue(o_removeCaseSensitive_rv46879__15);
        boolean o_removeCaseSensitive_rv46879__16 = a.hasKey("Tot");
        Assert.assertFalse(o_removeCaseSensitive_rv46879__16);
        boolean o_removeCaseSensitive_rv46879__17 = __DSPOT_invoc_6.hasKeyIgnoreCase(__DSPOT_key_11155);
        Assert.assertFalse(o_removeCaseSensitive_rv46879__17);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46879__4)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46879__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46879__5)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46879__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46879__6)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46879__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46879__10)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46879__10)).hashCode())));
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_rv46879__11)));
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_rv46879__14)));
        Assert.assertTrue(o_removeCaseSensitive_rv46879__15);
        Assert.assertFalse(o_removeCaseSensitive_rv46879__16);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_mg46800() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_mg46800__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_mg46800__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_mg46800__3)).hashCode())));
        Attributes o_removeCaseSensitive_mg46800__4 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_mg46800__4)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_mg46800__4)).hashCode())));
        Attributes o_removeCaseSensitive_mg46800__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_mg46800__5)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_mg46800__5)).hashCode())));
        Attributes o_removeCaseSensitive_mg46800__6 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_mg46800__6)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_mg46800__6)).hashCode())));
        Attributes o_removeCaseSensitive_mg46800__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46800__7)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_mg46800__7)).hashCode())));
        int o_removeCaseSensitive_mg46800__8 = a.size();
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_mg46800__8)));
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_mg46800__11 = a.size();
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_mg46800__11)));
        boolean o_removeCaseSensitive_mg46800__12 = a.hasKey("tot");
        Assert.assertTrue(o_removeCaseSensitive_mg46800__12);
        boolean o_removeCaseSensitive_mg46800__13 = a.hasKey("Tot");
        Assert.assertFalse(o_removeCaseSensitive_mg46800__13);
        a.normalize();
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46800__3)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46800__3)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46800__4)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46800__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46800__5)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46800__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46800__6)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46800__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46800__7)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46800__7)).hashCode())));
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_mg46800__8)));
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_mg46800__11)));
        Assert.assertTrue(o_removeCaseSensitive_mg46800__12);
        Assert.assertFalse(o_removeCaseSensitive_mg46800__13);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_rv46824() throws Exception {
        String __DSPOT_key_11122 = "b^zCeJZ!x&*x+vhL+DEn";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_removeCaseSensitive_rv46824__7 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_rv46824__7)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_rv46824__7)).hashCode())));
        Attributes o_removeCaseSensitive_rv46824__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46824__8)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_rv46824__8)).hashCode())));
        Attributes o_removeCaseSensitive_rv46824__9 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46824__9)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_rv46824__9)).hashCode())));
        Attributes o_removeCaseSensitive_rv46824__10 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46824__10)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_rv46824__10)).hashCode())));
        int o_removeCaseSensitive_rv46824__11 = a.size();
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_rv46824__11)));
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_rv46824__14 = a.size();
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_rv46824__14)));
        boolean o_removeCaseSensitive_rv46824__15 = a.hasKey("tot");
        Assert.assertTrue(o_removeCaseSensitive_rv46824__15);
        boolean o_removeCaseSensitive_rv46824__16 = a.hasKey("Tot");
        Assert.assertFalse(o_removeCaseSensitive_rv46824__16);
        __DSPOT_invoc_3.remove(__DSPOT_key_11122);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46824__7)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46824__7)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46824__8)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46824__8)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46824__9)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46824__9)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46824__10)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46824__10)).hashCode())));
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_rv46824__11)));
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_rv46824__14)));
        Assert.assertTrue(o_removeCaseSensitive_rv46824__15);
        Assert.assertFalse(o_removeCaseSensitive_rv46824__16);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_mg46805() throws Exception {
        String __DSPOT_key_11110 = "qU=<Mf*IW8nOLZp?lDsT";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_mg46805__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_mg46805__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_mg46805__4)).hashCode())));
        Attributes o_removeCaseSensitive_mg46805__5 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_mg46805__5)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_mg46805__5)).hashCode())));
        Attributes o_removeCaseSensitive_mg46805__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_mg46805__6)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_mg46805__6)).hashCode())));
        Attributes o_removeCaseSensitive_mg46805__7 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_mg46805__7)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_mg46805__7)).hashCode())));
        Attributes o_removeCaseSensitive_mg46805__8 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46805__8)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_mg46805__8)).hashCode())));
        int o_removeCaseSensitive_mg46805__9 = a.size();
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_mg46805__9)));
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_mg46805__12 = a.size();
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_mg46805__12)));
        boolean o_removeCaseSensitive_mg46805__13 = a.hasKey("tot");
        Assert.assertTrue(o_removeCaseSensitive_mg46805__13);
        boolean o_removeCaseSensitive_mg46805__14 = a.hasKey("Tot");
        Assert.assertFalse(o_removeCaseSensitive_mg46805__14);
        a.removeIgnoreCase(__DSPOT_key_11110);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46805__4)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46805__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46805__5)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46805__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46805__6)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46805__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46805__7)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46805__7)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46805__8)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46805__8)).hashCode())));
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_mg46805__9)));
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_mg46805__12)));
        Assert.assertTrue(o_removeCaseSensitive_mg46805__13);
        Assert.assertFalse(o_removeCaseSensitive_mg46805__14);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitivelitString46704() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitivelitString46704__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitivelitString46704__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitivelitString46704__3)).hashCode())));
        Attributes o_removeCaseSensitivelitString46704__4 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitivelitString46704__4)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitivelitString46704__4)).hashCode())));
        Attributes o_removeCaseSensitivelitString46704__5 = a.put("Hello", "");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"\"", ((Attributes) (o_removeCaseSensitivelitString46704__5)).toString());
        Assert.assertEquals(784138288, ((int) (((Attributes) (o_removeCaseSensitivelitString46704__5)).hashCode())));
        Attributes o_removeCaseSensitivelitString46704__6 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"\" hello=\"There\"", ((Attributes) (o_removeCaseSensitivelitString46704__6)).toString());
        Assert.assertEquals(-356021341, ((int) (((Attributes) (o_removeCaseSensitivelitString46704__6)).hashCode())));
        Attributes o_removeCaseSensitivelitString46704__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivelitString46704__7)).toString());
        Assert.assertEquals(881009361, ((int) (((Attributes) (o_removeCaseSensitivelitString46704__7)).hashCode())));
        int o_removeCaseSensitivelitString46704__8 = a.size();
        Assert.assertEquals(5, ((int) (o_removeCaseSensitivelitString46704__8)));
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitivelitString46704__11 = a.size();
        Assert.assertEquals(3, ((int) (o_removeCaseSensitivelitString46704__11)));
        boolean o_removeCaseSensitivelitString46704__12 = a.hasKey("tot");
        Assert.assertTrue(o_removeCaseSensitivelitString46704__12);
        boolean o_removeCaseSensitivelitString46704__13 = a.hasKey("Tot");
        Assert.assertFalse(o_removeCaseSensitivelitString46704__13);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivelitString46704__3)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitivelitString46704__3)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivelitString46704__4)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitivelitString46704__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivelitString46704__5)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitivelitString46704__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivelitString46704__6)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitivelitString46704__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivelitString46704__7)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitivelitString46704__7)).hashCode())));
        Assert.assertEquals(5, ((int) (o_removeCaseSensitivelitString46704__8)));
        Assert.assertEquals(3, ((int) (o_removeCaseSensitivelitString46704__11)));
        Assert.assertTrue(o_removeCaseSensitivelitString46704__12);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_rv46812() throws Exception {
        Object __DSPOT_o_11112 = new Object();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("Tot", "a&p");
        Attributes o_removeCaseSensitive_rv46812__8 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_rv46812__8)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_rv46812__8)).hashCode())));
        Attributes o_removeCaseSensitive_rv46812__9 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46812__9)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_rv46812__9)).hashCode())));
        Attributes o_removeCaseSensitive_rv46812__10 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46812__10)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_rv46812__10)).hashCode())));
        Attributes o_removeCaseSensitive_rv46812__11 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46812__11)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_rv46812__11)).hashCode())));
        int o_removeCaseSensitive_rv46812__12 = a.size();
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_rv46812__12)));
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_rv46812__15 = a.size();
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_rv46812__15)));
        boolean o_removeCaseSensitive_rv46812__16 = a.hasKey("tot");
        Assert.assertTrue(o_removeCaseSensitive_rv46812__16);
        boolean o_removeCaseSensitive_rv46812__17 = a.hasKey("Tot");
        Assert.assertFalse(o_removeCaseSensitive_rv46812__17);
        boolean o_removeCaseSensitive_rv46812__18 = __DSPOT_invoc_3.equals(__DSPOT_o_11112);
        Assert.assertFalse(o_removeCaseSensitive_rv46812__18);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46812__8)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46812__8)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46812__9)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46812__9)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46812__10)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46812__10)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46812__11)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46812__11)).hashCode())));
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_rv46812__12)));
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_rv46812__15)));
        Assert.assertTrue(o_removeCaseSensitive_rv46812__16);
        Assert.assertFalse(o_removeCaseSensitive_rv46812__17);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_add46775() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_add46775__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_add46775__3)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__4 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_add46775__4)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_add46775__4)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46775__5)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_add46775__5)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__6 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46775__6)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_add46775__6)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__7)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_add46775__7)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__8 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__8)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_add46775__8)).hashCode())));
        int o_removeCaseSensitive_add46775__9 = a.size();
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_add46775__9)));
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_add46775__12 = a.size();
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_add46775__12)));
        boolean o_removeCaseSensitive_add46775__13 = a.hasKey("tot");
        Assert.assertTrue(o_removeCaseSensitive_add46775__13);
        boolean o_removeCaseSensitive_add46775__14 = a.hasKey("Tot");
        Assert.assertFalse(o_removeCaseSensitive_add46775__14);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__3)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46775__3)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__4)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46775__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__5)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46775__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__6)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46775__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__7)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46775__7)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__8)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46775__8)).hashCode())));
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_add46775__9)));
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_add46775__12)));
        Assert.assertTrue(o_removeCaseSensitive_add46775__13);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_rv46833() throws Exception {
        Attributes __DSPOT_o_11125 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_rv46833__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_rv46833__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__5)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("tot", "one");
        Attributes o_removeCaseSensitive_rv46833__9 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46833__9)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__9)).hashCode())));
        Attributes o_removeCaseSensitive_rv46833__10 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46833__10)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__10)).hashCode())));
        Attributes o_removeCaseSensitive_rv46833__11 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__11)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__11)).hashCode())));
        int o_removeCaseSensitive_rv46833__12 = a.size();
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_rv46833__12)));
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_rv46833__15 = a.size();
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_rv46833__15)));
        boolean o_removeCaseSensitive_rv46833__16 = a.hasKey("tot");
        Assert.assertTrue(o_removeCaseSensitive_rv46833__16);
        boolean o_removeCaseSensitive_rv46833__17 = a.hasKey("Tot");
        Assert.assertFalse(o_removeCaseSensitive_rv46833__17);
        boolean o_removeCaseSensitive_rv46833__18 = __DSPOT_invoc_4.equals(__DSPOT_o_11125);
        Assert.assertFalse(o_removeCaseSensitive_rv46833__18);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__5)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__9)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__9)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__10)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__10)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__11)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__11)).hashCode())));
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_rv46833__12)));
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_rv46833__15)));
        Assert.assertTrue(o_removeCaseSensitive_rv46833__16);
        Assert.assertFalse(o_removeCaseSensitive_rv46833__17);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitivenull46912_failAssert47() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put(null, "a&p");
            a.put("tot", "one");
            a.put("Hello", "There");
            a.put("hello", "There");
            a.put("data-name", "Jsoup");
            a.size();
            a.remove("Tot");
            a.remove("Hello");
            a.size();
            a.hasKey("tot");
            a.hasKey("Tot");
            org.junit.Assert.fail("removeCaseSensitivenull46912 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_remove46786() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_remove46786__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_remove46786__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_remove46786__3)).hashCode())));
        Attributes o_removeCaseSensitive_remove46786__4 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_remove46786__4)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_remove46786__4)).hashCode())));
        Attributes o_removeCaseSensitive_remove46786__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_remove46786__5)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_remove46786__5)).hashCode())));
        Attributes o_removeCaseSensitive_remove46786__6 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_remove46786__6)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_remove46786__6)).hashCode())));
        int o_removeCaseSensitive_remove46786__7 = a.size();
        Assert.assertEquals(4, ((int) (o_removeCaseSensitive_remove46786__7)));
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_remove46786__10 = a.size();
        Assert.assertEquals(2, ((int) (o_removeCaseSensitive_remove46786__10)));
        boolean o_removeCaseSensitive_remove46786__11 = a.hasKey("tot");
        Assert.assertTrue(o_removeCaseSensitive_remove46786__11);
        boolean o_removeCaseSensitive_remove46786__12 = a.hasKey("Tot");
        Assert.assertFalse(o_removeCaseSensitive_remove46786__12);
        Assert.assertEquals(" tot=\"one\" hello=\"There\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1695528839, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_remove46786__3)).toString());
        Assert.assertEquals(1695528839, ((int) (((Attributes) (o_removeCaseSensitive_remove46786__3)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_remove46786__4)).toString());
        Assert.assertEquals(1695528839, ((int) (((Attributes) (o_removeCaseSensitive_remove46786__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_remove46786__5)).toString());
        Assert.assertEquals(1695528839, ((int) (((Attributes) (o_removeCaseSensitive_remove46786__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_remove46786__6)).toString());
        Assert.assertEquals(1695528839, ((int) (((Attributes) (o_removeCaseSensitive_remove46786__6)).hashCode())));
        Assert.assertEquals(4, ((int) (o_removeCaseSensitive_remove46786__7)));
        Assert.assertEquals(2, ((int) (o_removeCaseSensitive_remove46786__10)));
        Assert.assertTrue(o_removeCaseSensitive_remove46786__11);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_mg46791() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_mg46791__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_mg46791__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_mg46791__3)).hashCode())));
        Attributes o_removeCaseSensitive_mg46791__4 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_mg46791__4)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_mg46791__4)).hashCode())));
        Attributes o_removeCaseSensitive_mg46791__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_mg46791__5)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_mg46791__5)).hashCode())));
        Attributes o_removeCaseSensitive_mg46791__6 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_mg46791__6)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_mg46791__6)).hashCode())));
        Attributes o_removeCaseSensitive_mg46791__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46791__7)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_mg46791__7)).hashCode())));
        int o_removeCaseSensitive_mg46791__8 = a.size();
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_mg46791__8)));
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_mg46791__11 = a.size();
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_mg46791__11)));
        boolean o_removeCaseSensitive_mg46791__12 = a.hasKey("tot");
        Assert.assertTrue(o_removeCaseSensitive_mg46791__12);
        boolean o_removeCaseSensitive_mg46791__13 = a.hasKey("Tot");
        Assert.assertFalse(o_removeCaseSensitive_mg46791__13);
        Attributes o_removeCaseSensitive_mg46791__14 = a.clone();
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46791__14)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46791__14)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1491502383, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46791__3)).toString());
        Assert.assertEquals(-1491502383, ((int) (((Attributes) (o_removeCaseSensitive_mg46791__3)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46791__4)).toString());
        Assert.assertEquals(-1491502383, ((int) (((Attributes) (o_removeCaseSensitive_mg46791__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46791__5)).toString());
        Assert.assertEquals(-1491502383, ((int) (((Attributes) (o_removeCaseSensitive_mg46791__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46791__6)).toString());
        Assert.assertEquals(-1491502383, ((int) (((Attributes) (o_removeCaseSensitive_mg46791__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46791__7)).toString());
        Assert.assertEquals(-1491502383, ((int) (((Attributes) (o_removeCaseSensitive_mg46791__7)).hashCode())));
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_mg46791__8)));
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_mg46791__11)));
        Assert.assertTrue(o_removeCaseSensitive_mg46791__12);
        Assert.assertFalse(o_removeCaseSensitive_mg46791__13);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_mg46790() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_mg46790__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_mg46790__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_mg46790__3)).hashCode())));
        Attributes o_removeCaseSensitive_mg46790__4 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_mg46790__4)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_mg46790__4)).hashCode())));
        Attributes o_removeCaseSensitive_mg46790__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_mg46790__5)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_mg46790__5)).hashCode())));
        Attributes o_removeCaseSensitive_mg46790__6 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_mg46790__6)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_mg46790__6)).hashCode())));
        Attributes o_removeCaseSensitive_mg46790__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46790__7)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_mg46790__7)).hashCode())));
        int o_removeCaseSensitive_mg46790__8 = a.size();
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_mg46790__8)));
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_mg46790__11 = a.size();
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_mg46790__11)));
        boolean o_removeCaseSensitive_mg46790__12 = a.hasKey("tot");
        Assert.assertTrue(o_removeCaseSensitive_mg46790__12);
        boolean o_removeCaseSensitive_mg46790__13 = a.hasKey("Tot");
        Assert.assertFalse(o_removeCaseSensitive_mg46790__13);
        List<Attribute> o_removeCaseSensitive_mg46790__14 = a.asList();
        Assert.assertFalse(o_removeCaseSensitive_mg46790__14.isEmpty());
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46790__3)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46790__3)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46790__4)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46790__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46790__5)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46790__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46790__6)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46790__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46790__7)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46790__7)).hashCode())));
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_mg46790__8)));
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_mg46790__11)));
        Assert.assertTrue(o_removeCaseSensitive_mg46790__12);
        Assert.assertFalse(o_removeCaseSensitive_mg46790__13);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_mg46795() throws Exception {
        String __DSPOT_key_11101 = "4q]&y%_e!|rJZy7B8]E]";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_mg46795__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_mg46795__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_mg46795__4)).hashCode())));
        Attributes o_removeCaseSensitive_mg46795__5 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_mg46795__5)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_mg46795__5)).hashCode())));
        Attributes o_removeCaseSensitive_mg46795__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_mg46795__6)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_mg46795__6)).hashCode())));
        Attributes o_removeCaseSensitive_mg46795__7 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_mg46795__7)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_mg46795__7)).hashCode())));
        Attributes o_removeCaseSensitive_mg46795__8 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46795__8)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_mg46795__8)).hashCode())));
        int o_removeCaseSensitive_mg46795__9 = a.size();
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_mg46795__9)));
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_mg46795__12 = a.size();
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_mg46795__12)));
        boolean o_removeCaseSensitive_mg46795__13 = a.hasKey("tot");
        Assert.assertTrue(o_removeCaseSensitive_mg46795__13);
        boolean o_removeCaseSensitive_mg46795__14 = a.hasKey("Tot");
        Assert.assertFalse(o_removeCaseSensitive_mg46795__14);
        String o_removeCaseSensitive_mg46795__15 = a.getIgnoreCase(__DSPOT_key_11101);
        Assert.assertEquals("", o_removeCaseSensitive_mg46795__15);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46795__4)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46795__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46795__5)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46795__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46795__6)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46795__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46795__7)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46795__7)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46795__8)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46795__8)).hashCode())));
        Assert.assertEquals(5, ((int) (o_removeCaseSensitive_mg46795__9)));
        Assert.assertEquals(3, ((int) (o_removeCaseSensitive_mg46795__12)));
        Assert.assertTrue(o_removeCaseSensitive_mg46795__13);
        Assert.assertFalse(o_removeCaseSensitive_mg46795__14);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitivenull46913() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitivenull46913__3 = a.put("Tot", null);
        Assert.assertEquals(" Tot", ((Attributes) (o_removeCaseSensitivenull46913__3)).toString());
        Assert.assertEquals(555415706, ((int) (((Attributes) (o_removeCaseSensitivenull46913__3)).hashCode())));
        Attributes o_removeCaseSensitivenull46913__4 = a.put("tot", "one");
        Assert.assertEquals(" Tot tot=\"one\"", ((Attributes) (o_removeCaseSensitivenull46913__4)).toString());
        Assert.assertEquals(-206717624, ((int) (((Attributes) (o_removeCaseSensitivenull46913__4)).hashCode())));
        Attributes o_removeCaseSensitivenull46913__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitivenull46913__5)).toString());
        Assert.assertEquals(472696695, ((int) (((Attributes) (o_removeCaseSensitivenull46913__5)).hashCode())));
        Attributes o_removeCaseSensitivenull46913__6 = a.put("hello", "There");
        Assert.assertEquals(" Tot tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitivenull46913__6)).toString());
        Assert.assertEquals(-667462934, ((int) (((Attributes) (o_removeCaseSensitivenull46913__6)).hashCode())));
        Attributes o_removeCaseSensitivenull46913__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivenull46913__7)).toString());
        Assert.assertEquals(-895488360, ((int) (((Attributes) (o_removeCaseSensitivenull46913__7)).hashCode())));
        int o_removeCaseSensitivenull46913__8 = a.size();
        Assert.assertEquals(5, ((int) (o_removeCaseSensitivenull46913__8)));
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitivenull46913__11 = a.size();
        Assert.assertEquals(3, ((int) (o_removeCaseSensitivenull46913__11)));
        boolean o_removeCaseSensitivenull46913__12 = a.hasKey("tot");
        Assert.assertTrue(o_removeCaseSensitivenull46913__12);
        boolean o_removeCaseSensitivenull46913__13 = a.hasKey("Tot");
        Assert.assertFalse(o_removeCaseSensitivenull46913__13);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivenull46913__3)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitivenull46913__3)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivenull46913__4)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitivenull46913__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivenull46913__5)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitivenull46913__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivenull46913__6)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitivenull46913__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitivenull46913__7)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitivenull46913__7)).hashCode())));
        Assert.assertEquals(5, ((int) (o_removeCaseSensitivenull46913__8)));
        Assert.assertEquals(3, ((int) (o_removeCaseSensitivenull46913__11)));
        Assert.assertTrue(o_removeCaseSensitivenull46913__12);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitivenull46912_failAssert47_add59412() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            a.put(null, "a&p");
            a.put("tot", "one");
            a.put("Hello", "There");
            a.put("hello", "There");
            a.put("data-name", "Jsoup");
            a.size();
            a.remove("Tot");
            a.remove("Hello");
            a.size();
            a.hasKey("tot");
            a.hasKey("Tot");
            a.hasKey("Tot");
            org.junit.Assert.fail("removeCaseSensitivenull46912 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void removeCaseSensitivenull46914_failAssert41_rv70006() throws Exception {
        try {
            boolean __DSPOT_value_18651 = false;
            String __DSPOT_key_18650 = "4e=3C+s;@QMGC{hsB/&]";
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_removeCaseSensitivenull46914_failAssert41_rv70006__7 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitivenull46914_failAssert41_rv70006__7)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitivenull46914_failAssert41_rv70006__7)).hashCode())));
            a.put(null, "one");
            a.put("Hello", "There");
            a.put("hello", "There");
            Attributes __DSPOT_invoc_9 = a.put("data-name", "Jsoup");
            a.size();
            a.remove("Tot");
            a.remove("Hello");
            a.size();
            a.hasKey("tot");
            a.hasKey("Tot");
            org.junit.Assert.fail("removeCaseSensitivenull46914 should have thrown IllegalArgumentException");
            __DSPOT_invoc_9.put(__DSPOT_key_18650, __DSPOT_value_18651);
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void removeCaseSensitivenull46918_failAssert42_rv70087() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_removeCaseSensitivenull46918_failAssert42_rv70087__5 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitivenull46918_failAssert42_rv70087__5)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitivenull46918_failAssert42_rv70087__5)).hashCode())));
            Attributes o_removeCaseSensitivenull46918_failAssert42_rv70087__6 = a.put("tot", "one");
            Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitivenull46918_failAssert42_rv70087__6)).toString());
            Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitivenull46918_failAssert42_rv70087__6)).hashCode())));
            Attributes o_removeCaseSensitivenull46918_failAssert42_rv70087__7 = a.put("Hello", "There");
            Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitivenull46918_failAssert42_rv70087__7)).toString());
            Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitivenull46918_failAssert42_rv70087__7)).hashCode())));
            Attributes __DSPOT_invoc_8 = a.put(null, "There");
            a.put("data-name", "Jsoup");
            a.size();
            a.remove("Tot");
            a.remove("Hello");
            a.size();
            a.hasKey("tot");
            a.hasKey("Tot");
            org.junit.Assert.fail("removeCaseSensitivenull46918 should have thrown IllegalArgumentException");
            __DSPOT_invoc_8.html();
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_add46771litString52569() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_add46771__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_add46771__3)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_add46771__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_add46771__4)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__5 = a.put("Tot", "one");
        Assert.assertEquals(" Tot=\"one\"", ((Attributes) (o_removeCaseSensitive_add46771__5)).toString());
        Assert.assertEquals(-457119628, ((int) (((Attributes) (o_removeCaseSensitive_add46771__5)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46771__6)).toString());
        Assert.assertEquals(-870141049, ((int) (((Attributes) (o_removeCaseSensitive_add46771__6)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__7 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46771__7)).toString());
        Assert.assertEquals(-1855380010, ((int) (((Attributes) (o_removeCaseSensitive_add46771__7)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__8 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__8)).toString());
        Assert.assertEquals(-1600463414, ((int) (((Attributes) (o_removeCaseSensitive_add46771__8)).hashCode())));
        int o_removeCaseSensitive_add46771__9 = a.size();
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_add46771__12 = a.size();
        boolean o_removeCaseSensitive_add46771__13 = a.hasKey("tot");
        boolean o_removeCaseSensitive_add46771__14 = a.hasKey("Tot");
        Assert.assertEquals(" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1732415965, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__3)).toString());
        Assert.assertEquals(-1732415965, ((int) (((Attributes) (o_removeCaseSensitive_add46771__3)).hashCode())));
        Assert.assertEquals(" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__4)).toString());
        Assert.assertEquals(-1732415965, ((int) (((Attributes) (o_removeCaseSensitive_add46771__4)).hashCode())));
        Assert.assertEquals(" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__5)).toString());
        Assert.assertEquals(-1732415965, ((int) (((Attributes) (o_removeCaseSensitive_add46771__5)).hashCode())));
        Assert.assertEquals(" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__6)).toString());
        Assert.assertEquals(-1732415965, ((int) (((Attributes) (o_removeCaseSensitive_add46771__6)).hashCode())));
        Assert.assertEquals(" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__7)).toString());
        Assert.assertEquals(-1732415965, ((int) (((Attributes) (o_removeCaseSensitive_add46771__7)).hashCode())));
        Assert.assertEquals(" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__8)).toString());
        Assert.assertEquals(-1732415965, ((int) (((Attributes) (o_removeCaseSensitive_add46771__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_rv46833_mg67188() throws Exception {
        String __DSPOT_key_16628 = ";3Ddn&eJm`x&D;3[zXlb";
        Attributes __DSPOT_o_11125 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_rv46833__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_rv46833__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__5)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("tot", "one");
        Attributes o_removeCaseSensitive_rv46833__9 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46833__9)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__9)).hashCode())));
        Attributes o_removeCaseSensitive_rv46833__10 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46833__10)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__10)).hashCode())));
        Attributes o_removeCaseSensitive_rv46833__11 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__11)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__11)).hashCode())));
        int o_removeCaseSensitive_rv46833__12 = a.size();
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_rv46833__15 = a.size();
        boolean o_removeCaseSensitive_rv46833__16 = a.hasKey("tot");
        boolean o_removeCaseSensitive_rv46833__17 = a.hasKey("Tot");
        boolean o_removeCaseSensitive_rv46833__18 = __DSPOT_invoc_4.equals(__DSPOT_o_11125);
        o_removeCaseSensitive_rv46833__11.removeIgnoreCase(__DSPOT_key_16628);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__5)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__9)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__9)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__10)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__10)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__11)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__11)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_add46777_mg65278() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_add46777__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_add46777__3)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__4 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_add46777__4)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_add46777__4)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46777__5)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_add46777__5)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__6 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46777__6)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_add46777__6)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46777__7)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_add46777__7)).hashCode())));
        int o_removeCaseSensitive_add46777__8 = a.size();
        a.remove("Tot");
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_add46777__12 = a.size();
        boolean o_removeCaseSensitive_add46777__13 = a.hasKey("tot");
        boolean o_removeCaseSensitive_add46777__14 = a.hasKey("Tot");
        List<Attribute> o_removeCaseSensitive_add46777_mg65278__33 = o_removeCaseSensitive_add46777__5.asList();
        Assert.assertFalse(o_removeCaseSensitive_add46777_mg65278__33.isEmpty());
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46777__3)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46777__3)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46777__4)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46777__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46777__5)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46777__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46777__6)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46777__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46777__7)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46777__7)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_add46776null71463() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_add46776__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_add46776__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_add46776__3)).hashCode())));
        Attributes o_removeCaseSensitive_add46776__4 = a.put("tot", null);
        Assert.assertEquals(" Tot=\"a&amp;p\" tot", ((Attributes) (o_removeCaseSensitive_add46776__4)).toString());
        Assert.assertEquals(-1792111785, ((int) (((Attributes) (o_removeCaseSensitive_add46776__4)).hashCode())));
        Attributes o_removeCaseSensitive_add46776__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46776__5)).toString());
        Assert.assertEquals(-1112697466, ((int) (((Attributes) (o_removeCaseSensitive_add46776__5)).hashCode())));
        Attributes o_removeCaseSensitive_add46776__6 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46776__6)).toString());
        Assert.assertEquals(2042110201, ((int) (((Attributes) (o_removeCaseSensitive_add46776__6)).hashCode())));
        Attributes o_removeCaseSensitive_add46776__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46776__7)).toString());
        Assert.assertEquals(64822567, ((int) (((Attributes) (o_removeCaseSensitive_add46776__7)).hashCode())));
        int o_removeCaseSensitive_add46776__8 = a.size();
        int o_removeCaseSensitive_add46776__9 = a.size();
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_add46776__12 = a.size();
        boolean o_removeCaseSensitive_add46776__13 = a.hasKey("tot");
        boolean o_removeCaseSensitive_add46776__14 = a.hasKey("Tot");
        Assert.assertEquals(" tot hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1616006757, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46776__3)).toString());
        Assert.assertEquals(-1616006757, ((int) (((Attributes) (o_removeCaseSensitive_add46776__3)).hashCode())));
        Assert.assertEquals(" tot hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46776__4)).toString());
        Assert.assertEquals(-1616006757, ((int) (((Attributes) (o_removeCaseSensitive_add46776__4)).hashCode())));
        Assert.assertEquals(" tot hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46776__5)).toString());
        Assert.assertEquals(-1616006757, ((int) (((Attributes) (o_removeCaseSensitive_add46776__5)).hashCode())));
        Assert.assertEquals(" tot hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46776__6)).toString());
        Assert.assertEquals(-1616006757, ((int) (((Attributes) (o_removeCaseSensitive_add46776__6)).hashCode())));
        Assert.assertEquals(" tot hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46776__7)).toString());
        Assert.assertEquals(-1616006757, ((int) (((Attributes) (o_removeCaseSensitive_add46776__7)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_rv46834_add59063() throws Exception {
        String __DSPOT_key_11126 = "/v{GZ3nB^.88Nh,vic3S";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_rv46834__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_rv46834__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__4)).hashCode())));
        Attributes o_removeCaseSensitive_rv46834_add59063__7 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_rv46834_add59063__7)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_rv46834_add59063__7)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("tot", "one");
        Attributes o_removeCaseSensitive_rv46834__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46834__8)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__8)).hashCode())));
        Attributes o_removeCaseSensitive_rv46834__9 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46834__9)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__9)).hashCode())));
        Attributes o_removeCaseSensitive_rv46834__10 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46834__10)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__10)).hashCode())));
        int o_removeCaseSensitive_rv46834__11 = a.size();
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_rv46834__14 = a.size();
        boolean o_removeCaseSensitive_rv46834__15 = a.hasKey("tot");
        boolean o_removeCaseSensitive_rv46834__16 = a.hasKey("Tot");
        String o_removeCaseSensitive_rv46834__17 = __DSPOT_invoc_4.get(__DSPOT_key_11126);
        Assert.assertEquals("", o_removeCaseSensitive_rv46834__17);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46834__4)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46834_add59063__7)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46834_add59063__7)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46834__8)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__8)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46834__9)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__9)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46834__10)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__10)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_add46779null71498_failAssert50() throws Exception {
        try {
            Attributes a = new Attributes();
            Attributes o_removeCaseSensitive_add46779__3 = a.put("Tot", "a&p");
            Attributes o_removeCaseSensitive_add46779__4 = a.put("tot", "one");
            Attributes o_removeCaseSensitive_add46779__5 = a.put("Hello", "There");
            Attributes o_removeCaseSensitive_add46779__6 = a.put("hello", "There");
            Attributes o_removeCaseSensitive_add46779__7 = a.put(null, "Jsoup");
            int o_removeCaseSensitive_add46779__8 = a.size();
            a.remove("Tot");
            a.remove("Hello");
            int o_removeCaseSensitive_add46779__11 = a.size();
            int o_removeCaseSensitive_add46779__12 = a.size();
            boolean o_removeCaseSensitive_add46779__13 = a.hasKey("tot");
            boolean o_removeCaseSensitive_add46779__14 = a.hasKey("Tot");
            org.junit.Assert.fail("removeCaseSensitive_add46779null71498 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_add46775_mg65497() throws Exception {
        Attributes __DSPOT_o_15405 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_add46775__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_add46775__3)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__4 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_add46775__4)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_add46775__4)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46775__5)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_add46775__5)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__6 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46775__6)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_add46775__6)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__7)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_add46775__7)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__8 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__8)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_add46775__8)).hashCode())));
        int o_removeCaseSensitive_add46775__9 = a.size();
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_add46775__12 = a.size();
        boolean o_removeCaseSensitive_add46775__13 = a.hasKey("tot");
        boolean o_removeCaseSensitive_add46775__14 = a.hasKey("Tot");
        boolean o_removeCaseSensitive_add46775_mg65497__37 = o_removeCaseSensitive_add46775__5.equals(__DSPOT_o_15405);
        Assert.assertFalse(o_removeCaseSensitive_add46775_mg65497__37);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__3)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46775__3)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__4)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46775__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__5)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46775__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__6)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46775__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__7)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46775__7)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__8)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46775__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_mg46801litBool56182() throws Exception {
        boolean __DSPOT_value_11105 = false;
        String __DSPOT_key_11104 = " ! ^2mtc+t9mWS8QH*h@";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_mg46801__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_mg46801__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__5)).hashCode())));
        Attributes o_removeCaseSensitive_mg46801__6 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_mg46801__6)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__6)).hashCode())));
        Attributes o_removeCaseSensitive_mg46801__7 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_mg46801__7)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__7)).hashCode())));
        Attributes o_removeCaseSensitive_mg46801__8 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_mg46801__8)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__8)).hashCode())));
        Attributes o_removeCaseSensitive_mg46801__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46801__9)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__9)).hashCode())));
        int o_removeCaseSensitive_mg46801__10 = a.size();
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_mg46801__13 = a.size();
        boolean o_removeCaseSensitive_mg46801__14 = a.hasKey("tot");
        boolean o_removeCaseSensitive_mg46801__15 = a.hasKey("Tot");
        Attributes o_removeCaseSensitive_mg46801__16 = a.put(__DSPOT_key_11104, __DSPOT_value_11105);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46801__16)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__16)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46801__5)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46801__6)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46801__7)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__7)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46801__8)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__8)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_mg46801__9)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_mg46801__9)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_rv46838litString50093() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_rv46838__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_rv46838__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__3)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("tot", "one");
        Attributes o_removeCaseSensitive_rv46838__7 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46838__7)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__7)).hashCode())));
        Attributes o_removeCaseSensitive_rv46838__8 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46838__8)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__8)).hashCode())));
        Attributes o_removeCaseSensitive_rv46838__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46838__9)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__9)).hashCode())));
        int o_removeCaseSensitive_rv46838__10 = a.size();
        a.remove("Tvot");
        a.remove("Hello");
        int o_removeCaseSensitive_rv46838__13 = a.size();
        boolean o_removeCaseSensitive_rv46838__14 = a.hasKey("tot");
        boolean o_removeCaseSensitive_rv46838__15 = a.hasKey("Tot");
        __DSPOT_invoc_4.hashCode();
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(493372544, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46838__3)).toString());
        Assert.assertEquals(493372544, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__3)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46838__7)).toString());
        Assert.assertEquals(493372544, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__7)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46838__8)).toString());
        Assert.assertEquals(493372544, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__8)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46838__9)).toString());
        Assert.assertEquals(493372544, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__9)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_rv46834_remove59621() throws Exception {
        String __DSPOT_key_11126 = "/v{GZ3nB^.88Nh,vic3S";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_rv46834__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_rv46834__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__4)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("tot", "one");
        Attributes o_removeCaseSensitive_rv46834__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46834__8)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__8)).hashCode())));
        Attributes o_removeCaseSensitive_rv46834__9 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46834__9)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__9)).hashCode())));
        Attributes o_removeCaseSensitive_rv46834__10 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46834__10)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__10)).hashCode())));
        int o_removeCaseSensitive_rv46834__11 = a.size();
        a.remove("Hello");
        int o_removeCaseSensitive_rv46834__14 = a.size();
        boolean o_removeCaseSensitive_rv46834__15 = a.hasKey("tot");
        boolean o_removeCaseSensitive_rv46834__16 = a.hasKey("Tot");
        String o_removeCaseSensitive_rv46834__17 = __DSPOT_invoc_4.get(__DSPOT_key_11126);
        Assert.assertEquals("", o_removeCaseSensitive_rv46834__17);
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(493372544, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46834__4)).toString());
        Assert.assertEquals(493372544, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46834__8)).toString());
        Assert.assertEquals(493372544, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__8)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46834__9)).toString());
        Assert.assertEquals(493372544, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__9)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46834__10)).toString());
        Assert.assertEquals(493372544, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__10)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_rv46838_mg62604() throws Exception {
        Attribute __DSPOT_attribute_13318 = new Attribute("=Q[siX8qqp!yxY/$f]6_", "n#O[[f#h#+_YrXO[V(Jg", new Attributes());
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_rv46838__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_rv46838__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__3)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("tot", "one");
        Attributes o_removeCaseSensitive_rv46838__7 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46838__7)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__7)).hashCode())));
        Attributes o_removeCaseSensitive_rv46838__8 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46838__8)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__8)).hashCode())));
        Attributes o_removeCaseSensitive_rv46838__9 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46838__9)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__9)).hashCode())));
        int o_removeCaseSensitive_rv46838__10 = a.size();
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_rv46838__13 = a.size();
        boolean o_removeCaseSensitive_rv46838__14 = a.hasKey("tot");
        boolean o_removeCaseSensitive_rv46838__15 = a.hasKey("Tot");
        __DSPOT_invoc_4.hashCode();
        Attributes o_removeCaseSensitive_rv46838_mg62604__36 = o_removeCaseSensitive_rv46838__8.put(__DSPOT_attribute_13318);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" =Q[siX8qqp!yxY/$f]6_=\"n#O[[f#h#+_YrXO[V(Jg\"", ((Attributes) (o_removeCaseSensitive_rv46838_mg62604__36)).toString());
        Assert.assertEquals(-1643451479, ((int) (((Attributes) (o_removeCaseSensitive_rv46838_mg62604__36)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" =Q[siX8qqp!yxY/$f]6_=\"n#O[[f#h#+_YrXO[V(Jg\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1643451479, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" =Q[siX8qqp!yxY/$f]6_=\"n#O[[f#h#+_YrXO[V(Jg\"", ((Attributes) (o_removeCaseSensitive_rv46838__3)).toString());
        Assert.assertEquals(-1643451479, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__3)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" =Q[siX8qqp!yxY/$f]6_=\"n#O[[f#h#+_YrXO[V(Jg\"", ((Attributes) (o_removeCaseSensitive_rv46838__7)).toString());
        Assert.assertEquals(-1643451479, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__7)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" =Q[siX8qqp!yxY/$f]6_=\"n#O[[f#h#+_YrXO[V(Jg\"", ((Attributes) (o_removeCaseSensitive_rv46838__8)).toString());
        Assert.assertEquals(-1643451479, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__8)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" =Q[siX8qqp!yxY/$f]6_=\"n#O[[f#h#+_YrXO[V(Jg\"", ((Attributes) (o_removeCaseSensitive_rv46838__9)).toString());
        Assert.assertEquals(-1643451479, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__9)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_add46777litString52222_remove83552() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_add46777__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_add46777__3)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__4 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_add46777__4)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_add46777__4)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46777__5)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_add46777__5)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__6 = a.put("r@4(Q", "There");
        Assert.assertEquals(-1896585534, ((int) (((Attributes) (o_removeCaseSensitive_add46777__6)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(-226535824, ((int) (((Attributes) (o_removeCaseSensitive_add46777__7)).hashCode())));
        int o_removeCaseSensitive_add46777__8 = a.size();
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_add46777__12 = a.size();
        boolean o_removeCaseSensitive_add46777__13 = a.hasKey("tot");
        boolean o_removeCaseSensitive_add46777__14 = a.hasKey("Tot");
        Assert.assertEquals(101009176, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(101009176, ((int) (((Attributes) (o_removeCaseSensitive_add46777__3)).hashCode())));
        Assert.assertEquals(101009176, ((int) (((Attributes) (o_removeCaseSensitive_add46777__4)).hashCode())));
        Assert.assertEquals(101009176, ((int) (((Attributes) (o_removeCaseSensitive_add46777__5)).hashCode())));
        Assert.assertEquals(101009176, ((int) (((Attributes) (o_removeCaseSensitive_add46777__6)).hashCode())));
        Assert.assertEquals(101009176, ((int) (((Attributes) (o_removeCaseSensitive_add46777__7)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_add46777litString52222_mg87461() throws Exception {
        Attribute __DSPOT_attribute_21933 = new Attribute("zOZZCz3^8FEbhMEBpaH:", "@,tB7y-/A)?B!i]dD9V,");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_add46777__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_add46777__3)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__4 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_add46777__4)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_add46777__4)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46777__5)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_add46777__5)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__6 = a.put("r@4(Q", "There");
        Assert.assertEquals(-1896585534, ((int) (((Attributes) (o_removeCaseSensitive_add46777__6)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(-226535824, ((int) (((Attributes) (o_removeCaseSensitive_add46777__7)).hashCode())));
        int o_removeCaseSensitive_add46777__8 = a.size();
        a.remove("Tot");
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_add46777__12 = a.size();
        boolean o_removeCaseSensitive_add46777__13 = a.hasKey("tot");
        boolean o_removeCaseSensitive_add46777__14 = a.hasKey("Tot");
        Attributes o_removeCaseSensitive_add46777litString52222_mg87461__35 = o_removeCaseSensitive_add46777__7.put(__DSPOT_attribute_21933);
        Assert.assertEquals(-2014516779, ((int) (((Attributes) (o_removeCaseSensitive_add46777litString52222_mg87461__35)).hashCode())));
        Assert.assertEquals(-2014516779, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(-2014516779, ((int) (((Attributes) (o_removeCaseSensitive_add46777__3)).hashCode())));
        Assert.assertEquals(-2014516779, ((int) (((Attributes) (o_removeCaseSensitive_add46777__4)).hashCode())));
        Assert.assertEquals(-2014516779, ((int) (((Attributes) (o_removeCaseSensitive_add46777__5)).hashCode())));
        Assert.assertEquals(-2014516779, ((int) (((Attributes) (o_removeCaseSensitive_add46777__6)).hashCode())));
        Assert.assertEquals(-2014516779, ((int) (((Attributes) (o_removeCaseSensitive_add46777__7)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_add46771_remove59558_mg84596() throws Exception {
        String __DSPOT_key_19865 = ">nd6QUBhO0_68Zq)kKx$";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_add46771__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_add46771__3)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_add46771__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_add46771__4)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__5 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_add46771__5)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_add46771__5)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46771__6)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_add46771__6)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__7 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46771__7)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_add46771__7)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__8 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__8)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_add46771__8)).hashCode())));
        int o_removeCaseSensitive_add46771__9 = a.size();
        a.remove("Hello");
        int o_removeCaseSensitive_add46771__12 = a.size();
        boolean o_removeCaseSensitive_add46771__13 = a.hasKey("tot");
        boolean o_removeCaseSensitive_add46771__14 = a.hasKey("Tot");
        o_removeCaseSensitive_add46771__4.removeIgnoreCase(__DSPOT_key_19865);
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(493372544, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__3)).toString());
        Assert.assertEquals(493372544, ((int) (((Attributes) (o_removeCaseSensitive_add46771__3)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__4)).toString());
        Assert.assertEquals(493372544, ((int) (((Attributes) (o_removeCaseSensitive_add46771__4)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__5)).toString());
        Assert.assertEquals(493372544, ((int) (((Attributes) (o_removeCaseSensitive_add46771__5)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__6)).toString());
        Assert.assertEquals(493372544, ((int) (((Attributes) (o_removeCaseSensitive_add46771__6)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__7)).toString());
        Assert.assertEquals(493372544, ((int) (((Attributes) (o_removeCaseSensitive_add46771__7)).hashCode())));
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__8)).toString());
        Assert.assertEquals(493372544, ((int) (((Attributes) (o_removeCaseSensitive_add46771__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_rv46838litString50085_add82844() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_rv46838__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_rv46838__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__3)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("tot", "one");
        Attributes o_removeCaseSensitive_rv46838litString50085_add82844__9 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46838litString50085_add82844__9)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_rv46838litString50085_add82844__9)).hashCode())));
        Attributes o_removeCaseSensitive_rv46838__7 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46838__7)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__7)).hashCode())));
        Attributes o_removeCaseSensitive_rv46838__8 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46838__8)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__8)).hashCode())));
        Attributes o_removeCaseSensitive_rv46838__9 = a.put("data-name", "Jsofup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsofup\"", ((Attributes) (o_removeCaseSensitive_rv46838__9)).toString());
        Assert.assertEquals(1795400307, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__9)).hashCode())));
        int o_removeCaseSensitive_rv46838__10 = a.size();
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_rv46838__13 = a.size();
        boolean o_removeCaseSensitive_rv46838__14 = a.hasKey("tot");
        boolean o_removeCaseSensitive_rv46838__15 = a.hasKey("Tot");
        __DSPOT_invoc_4.hashCode();
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsofup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1856413275, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsofup\"", ((Attributes) (o_removeCaseSensitive_rv46838__3)).toString());
        Assert.assertEquals(1856413275, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__3)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsofup\"", ((Attributes) (o_removeCaseSensitive_rv46838litString50085_add82844__9)).toString());
        Assert.assertEquals(1856413275, ((int) (((Attributes) (o_removeCaseSensitive_rv46838litString50085_add82844__9)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsofup\"", ((Attributes) (o_removeCaseSensitive_rv46838__7)).toString());
        Assert.assertEquals(1856413275, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__7)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsofup\"", ((Attributes) (o_removeCaseSensitive_rv46838__8)).toString());
        Assert.assertEquals(1856413275, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__8)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsofup\"", ((Attributes) (o_removeCaseSensitive_rv46838__9)).toString());
        Assert.assertEquals(1856413275, ((int) (((Attributes) (o_removeCaseSensitive_rv46838__9)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_rv46834_mg68969null95400_failAssert64() throws Exception {
        try {
            String __DSPOT_key_17914 = "s-4C!-N5C1r5.=B;nku>";
            String __DSPOT_key_11126 = "/v{GZ3nB^.88Nh,vic3S";
            Attributes a = new Attributes();
            Attributes o_removeCaseSensitive_rv46834__4 = a.put("Tot", "a&p");
            Attributes __DSPOT_invoc_4 = a.put("tot", "one");
            Attributes o_removeCaseSensitive_rv46834__8 = a.put(null, "There");
            Attributes o_removeCaseSensitive_rv46834__9 = a.put("hello", "There");
            Attributes o_removeCaseSensitive_rv46834__10 = a.put("data-name", "Jsoup");
            int o_removeCaseSensitive_rv46834__11 = a.size();
            a.remove("Tot");
            a.remove("Hello");
            int o_removeCaseSensitive_rv46834__14 = a.size();
            boolean o_removeCaseSensitive_rv46834__15 = a.hasKey("tot");
            boolean o_removeCaseSensitive_rv46834__16 = a.hasKey("Tot");
            String o_removeCaseSensitive_rv46834__17 = __DSPOT_invoc_4.get(__DSPOT_key_11126);
            o_removeCaseSensitive_rv46834__9.remove(__DSPOT_key_17914);
            org.junit.Assert.fail("removeCaseSensitive_rv46834_mg68969null95400 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_add46779_mg65128_mg85507() throws Exception {
        Attributes __DSPOT_o_20520 = new Attributes();
        String __DSPOT_value_15140 = "!Xnmk7uNpU9.Vz:lM_nc";
        String __DSPOT_key_15139 = "N1YRww+g!U1lba4$<j7=";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_add46779__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_add46779__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_add46779__3)).hashCode())));
        Attributes o_removeCaseSensitive_add46779__4 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_add46779__4)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_add46779__4)).hashCode())));
        Attributes o_removeCaseSensitive_add46779__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46779__5)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_add46779__5)).hashCode())));
        Attributes o_removeCaseSensitive_add46779__6 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46779__6)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_add46779__6)).hashCode())));
        Attributes o_removeCaseSensitive_add46779__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46779__7)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_add46779__7)).hashCode())));
        int o_removeCaseSensitive_add46779__8 = a.size();
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_add46779__11 = a.size();
        int o_removeCaseSensitive_add46779__12 = a.size();
        boolean o_removeCaseSensitive_add46779__13 = a.hasKey("tot");
        boolean o_removeCaseSensitive_add46779__14 = a.hasKey("Tot");
        Attributes o_removeCaseSensitive_add46779_mg65128__37 = a.put(__DSPOT_key_15139, __DSPOT_value_15140);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" N1YRww+g!U1lba4$<j7==\"!Xnmk7uNpU9.Vz:lM_nc\"", ((Attributes) (o_removeCaseSensitive_add46779_mg65128__37)).toString());
        Assert.assertEquals(1024973374, ((int) (((Attributes) (o_removeCaseSensitive_add46779_mg65128__37)).hashCode())));
        boolean o_removeCaseSensitive_add46779_mg65128_mg85507__42 = a.equals(__DSPOT_o_20520);
        Assert.assertFalse(o_removeCaseSensitive_add46779_mg65128_mg85507__42);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" N1YRww+g!U1lba4$<j7==\"!Xnmk7uNpU9.Vz:lM_nc\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1024973374, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" N1YRww+g!U1lba4$<j7==\"!Xnmk7uNpU9.Vz:lM_nc\"", ((Attributes) (o_removeCaseSensitive_add46779__3)).toString());
        Assert.assertEquals(1024973374, ((int) (((Attributes) (o_removeCaseSensitive_add46779__3)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" N1YRww+g!U1lba4$<j7==\"!Xnmk7uNpU9.Vz:lM_nc\"", ((Attributes) (o_removeCaseSensitive_add46779__4)).toString());
        Assert.assertEquals(1024973374, ((int) (((Attributes) (o_removeCaseSensitive_add46779__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" N1YRww+g!U1lba4$<j7==\"!Xnmk7uNpU9.Vz:lM_nc\"", ((Attributes) (o_removeCaseSensitive_add46779__5)).toString());
        Assert.assertEquals(1024973374, ((int) (((Attributes) (o_removeCaseSensitive_add46779__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" N1YRww+g!U1lba4$<j7==\"!Xnmk7uNpU9.Vz:lM_nc\"", ((Attributes) (o_removeCaseSensitive_add46779__6)).toString());
        Assert.assertEquals(1024973374, ((int) (((Attributes) (o_removeCaseSensitive_add46779__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" N1YRww+g!U1lba4$<j7==\"!Xnmk7uNpU9.Vz:lM_nc\"", ((Attributes) (o_removeCaseSensitive_add46779__7)).toString());
        Assert.assertEquals(1024973374, ((int) (((Attributes) (o_removeCaseSensitive_add46779__7)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" N1YRww+g!U1lba4$<j7==\"!Xnmk7uNpU9.Vz:lM_nc\"", ((Attributes) (o_removeCaseSensitive_add46779_mg65128__37)).toString());
        Assert.assertEquals(1024973374, ((int) (((Attributes) (o_removeCaseSensitive_add46779_mg65128__37)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_rv46833_add58541null95588() throws Exception {
        Attributes __DSPOT_o_11125 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_rv46833__5 = a.put("Tot", null);
        Assert.assertEquals(" Tot", ((Attributes) (o_removeCaseSensitive_rv46833__5)).toString());
        Assert.assertEquals(555415706, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__5)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("tot", "one");
        Attributes o_removeCaseSensitive_rv46833__9 = a.put("Hello", "There");
        Assert.assertEquals(" Tot tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46833__9)).toString());
        Assert.assertEquals(472696695, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__9)).hashCode())));
        Attributes o_removeCaseSensitive_rv46833__10 = a.put("hello", "There");
        Assert.assertEquals(" Tot tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46833__10)).toString());
        Assert.assertEquals(-667462934, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__10)).hashCode())));
        Attributes o_removeCaseSensitive_rv46833__11 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__11)).toString());
        Assert.assertEquals(-895488360, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__11)).hashCode())));
        int o_removeCaseSensitive_rv46833__12 = a.size();
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_rv46833__15 = a.size();
        boolean o_removeCaseSensitive_rv46833__16 = a.hasKey("tot");
        boolean o_removeCaseSensitive_rv46833__17 = a.hasKey("Tot");
        boolean o_removeCaseSensitive_rv46833__18 = __DSPOT_invoc_4.equals(__DSPOT_o_11125);
        ((Attributes) (a)).toString();
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__5)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__9)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__9)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__10)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__10)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__11)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__11)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_add46771_mg65637_mg86459() throws Exception {
        Attributes __DSPOT_incoming_15508 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_add46771__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_add46771__3)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_add46771__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_add46771__4)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__5 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_add46771__5)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_add46771__5)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__6 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46771__6)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_add46771__6)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__7 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46771__7)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_add46771__7)).hashCode())));
        Attributes o_removeCaseSensitive_add46771__8 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__8)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_add46771__8)).hashCode())));
        int o_removeCaseSensitive_add46771__9 = a.size();
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_add46771__12 = a.size();
        boolean o_removeCaseSensitive_add46771__13 = a.hasKey("tot");
        boolean o_removeCaseSensitive_add46771__14 = a.hasKey("Tot");
        o_removeCaseSensitive_add46771__6.addAll(__DSPOT_incoming_15508);
        Attributes o_removeCaseSensitive_add46771_mg65637_mg86459__38 = o_removeCaseSensitive_add46771__6.clone();
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771_mg65637_mg86459__38)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_add46771_mg65637_mg86459__38)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1491502383, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__3)).toString());
        Assert.assertEquals(-1491502383, ((int) (((Attributes) (o_removeCaseSensitive_add46771__3)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__4)).toString());
        Assert.assertEquals(-1491502383, ((int) (((Attributes) (o_removeCaseSensitive_add46771__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__5)).toString());
        Assert.assertEquals(-1491502383, ((int) (((Attributes) (o_removeCaseSensitive_add46771__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__6)).toString());
        Assert.assertEquals(-1491502383, ((int) (((Attributes) (o_removeCaseSensitive_add46771__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__7)).toString());
        Assert.assertEquals(-1491502383, ((int) (((Attributes) (o_removeCaseSensitive_add46771__7)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46771__8)).toString());
        Assert.assertEquals(-1491502383, ((int) (((Attributes) (o_removeCaseSensitive_add46771__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_add46775_remove59556_mg89042() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_add46775__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_add46775__3)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__4 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_add46775__4)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_add46775__4)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46775__5)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_add46775__5)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__6 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46775__6)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_add46775__6)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__7)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_add46775__7)).hashCode())));
        Attributes o_removeCaseSensitive_add46775__8 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__8)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_add46775__8)).hashCode())));
        int o_removeCaseSensitive_add46775__9 = a.size();
        a.remove("Hello");
        int o_removeCaseSensitive_add46775__12 = a.size();
        boolean o_removeCaseSensitive_add46775__13 = a.hasKey("tot");
        boolean o_removeCaseSensitive_add46775__14 = a.hasKey("Tot");
        o_removeCaseSensitive_add46775__7.normalize();
        Assert.assertEquals(" tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1174496096, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__3)).toString());
        Assert.assertEquals(-1174496096, ((int) (((Attributes) (o_removeCaseSensitive_add46775__3)).hashCode())));
        Assert.assertEquals(" tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__4)).toString());
        Assert.assertEquals(-1174496096, ((int) (((Attributes) (o_removeCaseSensitive_add46775__4)).hashCode())));
        Assert.assertEquals(" tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__5)).toString());
        Assert.assertEquals(-1174496096, ((int) (((Attributes) (o_removeCaseSensitive_add46775__5)).hashCode())));
        Assert.assertEquals(" tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__6)).toString());
        Assert.assertEquals(-1174496096, ((int) (((Attributes) (o_removeCaseSensitive_add46775__6)).hashCode())));
        Assert.assertEquals(" tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__7)).toString());
        Assert.assertEquals(-1174496096, ((int) (((Attributes) (o_removeCaseSensitive_add46775__7)).hashCode())));
        Assert.assertEquals(" tot=\"a&amp;p\" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46775__8)).toString());
        Assert.assertEquals(-1174496096, ((int) (((Attributes) (o_removeCaseSensitive_add46775__8)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_rv46834_mg68969_mg90209() throws Exception {
        String __DSPOT_key_23917 = "BWnVu)v(7syI<=@,&4U:";
        String __DSPOT_key_17914 = "s-4C!-N5C1r5.=B;nku>";
        String __DSPOT_key_11126 = "/v{GZ3nB^.88Nh,vic3S";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_rv46834__4 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_rv46834__4)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__4)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("tot", "one");
        Attributes o_removeCaseSensitive_rv46834__8 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46834__8)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__8)).hashCode())));
        Attributes o_removeCaseSensitive_rv46834__9 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46834__9)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__9)).hashCode())));
        Attributes o_removeCaseSensitive_rv46834__10 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46834__10)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__10)).hashCode())));
        int o_removeCaseSensitive_rv46834__11 = a.size();
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_rv46834__14 = a.size();
        boolean o_removeCaseSensitive_rv46834__15 = a.hasKey("tot");
        boolean o_removeCaseSensitive_rv46834__16 = a.hasKey("Tot");
        String o_removeCaseSensitive_rv46834__17 = __DSPOT_invoc_4.get(__DSPOT_key_11126);
        Assert.assertEquals("", o_removeCaseSensitive_rv46834__17);
        o_removeCaseSensitive_rv46834__9.remove(__DSPOT_key_17914);
        boolean o_removeCaseSensitive_rv46834_mg68969_mg90209__39 = o_removeCaseSensitive_rv46834__9.hasKeyIgnoreCase(__DSPOT_key_23917);
        Assert.assertFalse(o_removeCaseSensitive_rv46834_mg68969_mg90209__39);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46834__4)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46834__8)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__8)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46834__9)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__9)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46834__10)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46834__10)).hashCode())));
        Assert.assertEquals("", o_removeCaseSensitive_rv46834__17);
    }

    @Test(timeout = 10000)
    public void removeCaseSensitivenull46916_failAssert46_rv70502_rv94369() throws Exception {
        try {
            String __DSPOT_key_18958 = "*^WkT/=UvW9?5/oqK6ti";
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_removeCaseSensitivenull46916_failAssert46_rv70502__6 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitivenull46916_failAssert46_rv70502__6)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitivenull46916_failAssert46_rv70502__6)).hashCode())));
            Attributes o_removeCaseSensitivenull46916_failAssert46_rv70502__7 = a.put("tot", "one");
            Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitivenull46916_failAssert46_rv70502__7)).toString());
            Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitivenull46916_failAssert46_rv70502__7)).hashCode())));
            Attributes __DSPOT_invoc_30 = a.put(null, "There");
            Attributes __DSPOT_invoc_8 = a.put("hello", "There");
            a.put("data-name", "Jsoup");
            a.size();
            a.remove("Tot");
            a.remove("Hello");
            a.size();
            a.hasKey("tot");
            a.hasKey("Tot");
            org.junit.Assert.fail("removeCaseSensitivenull46916 should have thrown IllegalArgumentException");
            __DSPOT_invoc_8.get(__DSPOT_key_18958);
            __DSPOT_invoc_30.hashCode();
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_add46779_mg65128litString74042() throws Exception {
        String __DSPOT_value_15140 = "";
        String __DSPOT_key_15139 = "N1YRww+g!U1lba4$<j7=";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_add46779__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_add46779__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_add46779__3)).hashCode())));
        Attributes o_removeCaseSensitive_add46779__4 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_add46779__4)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_add46779__4)).hashCode())));
        Attributes o_removeCaseSensitive_add46779__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46779__5)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_add46779__5)).hashCode())));
        Attributes o_removeCaseSensitive_add46779__6 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46779__6)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_add46779__6)).hashCode())));
        Attributes o_removeCaseSensitive_add46779__7 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_add46779__7)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_add46779__7)).hashCode())));
        int o_removeCaseSensitive_add46779__8 = a.size();
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_add46779__11 = a.size();
        int o_removeCaseSensitive_add46779__12 = a.size();
        boolean o_removeCaseSensitive_add46779__13 = a.hasKey("tot");
        boolean o_removeCaseSensitive_add46779__14 = a.hasKey("Tot");
        Attributes o_removeCaseSensitive_add46779_mg65128__37 = a.put(__DSPOT_key_15139, __DSPOT_value_15140);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" N1YRww+g!U1lba4$<j7==\"\"", ((Attributes) (o_removeCaseSensitive_add46779_mg65128__37)).toString());
        Assert.assertEquals(-310694196, ((int) (((Attributes) (o_removeCaseSensitive_add46779_mg65128__37)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" N1YRww+g!U1lba4$<j7==\"\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-310694196, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" N1YRww+g!U1lba4$<j7==\"\"", ((Attributes) (o_removeCaseSensitive_add46779__3)).toString());
        Assert.assertEquals(-310694196, ((int) (((Attributes) (o_removeCaseSensitive_add46779__3)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" N1YRww+g!U1lba4$<j7==\"\"", ((Attributes) (o_removeCaseSensitive_add46779__4)).toString());
        Assert.assertEquals(-310694196, ((int) (((Attributes) (o_removeCaseSensitive_add46779__4)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" N1YRww+g!U1lba4$<j7==\"\"", ((Attributes) (o_removeCaseSensitive_add46779__5)).toString());
        Assert.assertEquals(-310694196, ((int) (((Attributes) (o_removeCaseSensitive_add46779__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" N1YRww+g!U1lba4$<j7==\"\"", ((Attributes) (o_removeCaseSensitive_add46779__6)).toString());
        Assert.assertEquals(-310694196, ((int) (((Attributes) (o_removeCaseSensitive_add46779__6)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\" N1YRww+g!U1lba4$<j7==\"\"", ((Attributes) (o_removeCaseSensitive_add46779__7)).toString());
        Assert.assertEquals(-310694196, ((int) (((Attributes) (o_removeCaseSensitive_add46779__7)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_rv46833_mg67091null95442() throws Exception {
        Attributes __DSPOT_o_11125 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_rv46833__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_rv46833__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__5)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("tot", "one");
        Attributes o_removeCaseSensitive_rv46833__9 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46833__9)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__9)).hashCode())));
        Attributes o_removeCaseSensitive_rv46833__10 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46833__10)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__10)).hashCode())));
        Attributes o_removeCaseSensitive_rv46833__11 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__11)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__11)).hashCode())));
        int o_removeCaseSensitive_rv46833__12 = a.size();
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_rv46833__15 = a.size();
        boolean o_removeCaseSensitive_rv46833__16 = a.hasKey("tot");
        boolean o_removeCaseSensitive_rv46833__17 = a.hasKey("Tot");
        boolean o_removeCaseSensitive_rv46833__18 = __DSPOT_invoc_4.equals(null);
        String o_removeCaseSensitive_rv46833_mg67091__37 = a.html();
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", o_removeCaseSensitive_rv46833_mg67091__37);
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__5)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__9)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__9)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__10)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__10)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__11)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__11)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitivenull46912_failAssert47_add59412_rv94242() throws Exception {
        try {
            String __DSPOT_key_26777 = "v=.B&WI$9v[Ev>Up+`b;";
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            a.put(null, "a&p");
            a.put("tot", "one");
            a.put("Hello", "There");
            a.put("hello", "There");
            Attributes __DSPOT_invoc_15 = a.put("data-name", "Jsoup");
            a.size();
            a.remove("Tot");
            a.remove("Hello");
            a.size();
            a.hasKey("tot");
            a.hasKey("Tot");
            a.hasKey("Tot");
            org.junit.Assert.fail("removeCaseSensitivenull46912 should have thrown IllegalArgumentException");
            __DSPOT_invoc_15.hasKeyIgnoreCase(__DSPOT_key_26777);
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_rv46833_add58541_mg92066() throws Exception {
        Attributes __DSPOT_o_11125 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_rv46833__5 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_rv46833__5)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__5)).hashCode())));
        Attributes __DSPOT_invoc_4 = a.put("tot", "one");
        Attributes o_removeCaseSensitive_rv46833__9 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46833__9)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__9)).hashCode())));
        Attributes o_removeCaseSensitive_rv46833__10 = a.put("hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\"", ((Attributes) (o_removeCaseSensitive_rv46833__10)).toString());
        Assert.assertEquals(-2146972193, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__10)).hashCode())));
        Attributes o_removeCaseSensitive_rv46833__11 = a.put("data-name", "Jsoup");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__11)).toString());
        Assert.assertEquals(-819992819, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__11)).hashCode())));
        int o_removeCaseSensitive_rv46833__12 = a.size();
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_rv46833__15 = a.size();
        boolean o_removeCaseSensitive_rv46833__16 = a.hasKey("tot");
        boolean o_removeCaseSensitive_rv46833__17 = a.hasKey("Tot");
        boolean o_removeCaseSensitive_rv46833__18 = __DSPOT_invoc_4.equals(__DSPOT_o_11125);
        ((Attributes) (a)).toString();
        o_removeCaseSensitive_rv46833__10.normalize();
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__5)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__5)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__9)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__9)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__10)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__10)).hashCode())));
        Assert.assertEquals(" tot=\"one\" hello=\"There\" data-name=\"Jsoup\"", ((Attributes) (o_removeCaseSensitive_rv46833__11)).toString());
        Assert.assertEquals(1019487349, ((int) (((Attributes) (o_removeCaseSensitive_rv46833__11)).hashCode())));
    }

    @Test(timeout = 10000)
    public void removeCaseSensitivenull46914_failAssert41_rv70006litBool80608() throws Exception {
        try {
            boolean __DSPOT_value_18651 = true;
            String __DSPOT_key_18650 = "4e=3C+s;@QMGC{hsB/&]";
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes o_removeCaseSensitivenull46914_failAssert41_rv70006__7 = a.put("Tot", "a&p");
            Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitivenull46914_failAssert41_rv70006__7)).toString());
            Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitivenull46914_failAssert41_rv70006__7)).hashCode())));
            a.put(null, "one");
            a.put("Hello", "There");
            a.put("hello", "There");
            Attributes __DSPOT_invoc_9 = a.put("data-name", "Jsoup");
            a.size();
            a.remove("Tot");
            a.remove("Hello");
            a.size();
            a.hasKey("tot");
            a.hasKey("Tot");
            org.junit.Assert.fail("removeCaseSensitivenull46914 should have thrown IllegalArgumentException");
            __DSPOT_invoc_9.put(__DSPOT_key_18650, __DSPOT_value_18651);
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void removeCaseSensitive_add46777litString52222litString75681() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__3 = a.put("Tot", "a&p");
        Assert.assertEquals(" Tot=\"a&amp;p\"", ((Attributes) (o_removeCaseSensitive_add46777__3)).toString());
        Assert.assertEquals(-924093553, ((int) (((Attributes) (o_removeCaseSensitive_add46777__3)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__4 = a.put("tot", "one");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\"", ((Attributes) (o_removeCaseSensitive_add46777__4)).toString());
        Assert.assertEquals(-1686226883, ((int) (((Attributes) (o_removeCaseSensitive_add46777__4)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__5 = a.put("Hello", "There");
        Assert.assertEquals(" Tot=\"a&amp;p\" tot=\"one\" Hello=\"There\"", ((Attributes) (o_removeCaseSensitive_add46777__5)).toString());
        Assert.assertEquals(-1006812564, ((int) (((Attributes) (o_removeCaseSensitive_add46777__5)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__6 = a.put("r@4(Q", "There");
        Assert.assertEquals(-1896585534, ((int) (((Attributes) (o_removeCaseSensitive_add46777__6)).hashCode())));
        Attributes o_removeCaseSensitive_add46777__7 = a.put("data-name", "");
        Assert.assertEquals(1676553041, ((int) (((Attributes) (o_removeCaseSensitive_add46777__7)).hashCode())));
        int o_removeCaseSensitive_add46777__8 = a.size();
        a.remove("Tot");
        a.remove("Tot");
        a.remove("Hello");
        int o_removeCaseSensitive_add46777__12 = a.size();
        boolean o_removeCaseSensitive_add46777__13 = a.hasKey("tot");
        boolean o_removeCaseSensitive_add46777__14 = a.hasKey("Tot");
        Assert.assertEquals(-686659655, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(-686659655, ((int) (((Attributes) (o_removeCaseSensitive_add46777__3)).hashCode())));
        Assert.assertEquals(-686659655, ((int) (((Attributes) (o_removeCaseSensitive_add46777__4)).hashCode())));
        Assert.assertEquals(-686659655, ((int) (((Attributes) (o_removeCaseSensitive_add46777__5)).hashCode())));
        Assert.assertEquals(-686659655, ((int) (((Attributes) (o_removeCaseSensitive_add46777__6)).hashCode())));
        Assert.assertEquals(-686659655, ((int) (((Attributes) (o_removeCaseSensitive_add46777__7)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency__8 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency__8);
        boolean o_testSetKeyConsistency__9 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency__9);
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency__3)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency__3)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency__8);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232229() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232229__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232229__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232229__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_mg232229__8 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_mg232229__8);
        boolean o_testSetKeyConsistency_mg232229__9 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency_mg232229__9);
        List<Attribute> o_testSetKeyConsistency_mg232229__10 = a.asList();
        Assert.assertFalse(o_testSetKeyConsistency_mg232229__10.isEmpty());
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232229__3)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_mg232229__3)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_mg232229__8);
        Assert.assertTrue(o_testSetKeyConsistency_mg232229__9);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232248() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232248__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232248__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232248__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
            at.html();
        }
        boolean o_testSetKeyConsistency_mg232248__9 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_mg232248__9);
        boolean o_testSetKeyConsistency_mg232248__10 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency_mg232248__10);
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232248__3)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_mg232248__3)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_mg232248__9);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232247() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232247__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232247__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232247__3)).hashCode())));
        for (Attribute at : a) {
            Object __DSPOT_o_66794 = new Object();
            at.setKey("b");
            at.equals(__DSPOT_o_66794);
        }
        boolean o_testSetKeyConsistency_mg232247__11 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_mg232247__11);
        boolean o_testSetKeyConsistency_mg232247__12 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency_mg232247__12);
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232247__3)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_mg232247__3)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_mg232247__11);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencynull232275_failAssert236() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put("a", "a");
            for (Attribute at : a) {
                at.setKey("b");
            }
            a.hasKey(null);
            a.hasKey("b");
            org.junit.Assert.fail("testSetKeyConsistencynull232275 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232241() throws Exception {
        String __DSPOT_value_66790 = "ziTGlk&}>VsKL#;@uoU;";
        String __DSPOT_key_66789 = "Cpt?Ik{2.Th.oq_^B;pR";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232241__5 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232241__5)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232241__5)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_mg232241__10 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_mg232241__10);
        boolean o_testSetKeyConsistency_mg232241__11 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency_mg232241__11);
        Attributes o_testSetKeyConsistency_mg232241__12 = a.put(__DSPOT_key_66789, __DSPOT_value_66790);
        Assert.assertEquals(" b=\"a\" Cpt?Ik{2.Th.oq_^B;pR=\"ziTGlk&amp;}>VsKL#;@uoU;\"", ((Attributes) (o_testSetKeyConsistency_mg232241__12)).toString());
        Assert.assertEquals(-1003418866, ((int) (((Attributes) (o_testSetKeyConsistency_mg232241__12)).hashCode())));
        Assert.assertEquals(" b=\"a\" Cpt?Ik{2.Th.oq_^B;pR=\"ziTGlk&amp;}>VsKL#;@uoU;\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1003418866, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\" Cpt?Ik{2.Th.oq_^B;pR=\"ziTGlk&amp;}>VsKL#;@uoU;\"", ((Attributes) (o_testSetKeyConsistency_mg232241__5)).toString());
        Assert.assertEquals(-1003418866, ((int) (((Attributes) (o_testSetKeyConsistency_mg232241__5)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_mg232241__10);
        Assert.assertTrue(o_testSetKeyConsistency_mg232241__11);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232240() throws Exception {
        boolean __DSPOT_value_66788 = true;
        String __DSPOT_key_66787 = "dQ39:sPMNa-$-_:0UY#S";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232240__5 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232240__5)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232240__5)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_mg232240__10 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_mg232240__10);
        boolean o_testSetKeyConsistency_mg232240__11 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency_mg232240__11);
        Attributes o_testSetKeyConsistency_mg232240__12 = a.put(__DSPOT_key_66787, __DSPOT_value_66788);
        Assert.assertEquals(" b=\"a\" dQ39:sPMNa-$-_:0UY#S", ((Attributes) (o_testSetKeyConsistency_mg232240__12)).toString());
        Assert.assertEquals(-1542028940, ((int) (((Attributes) (o_testSetKeyConsistency_mg232240__12)).hashCode())));
        Assert.assertEquals(" b=\"a\" dQ39:sPMNa-$-_:0UY#S", ((Attributes) (a)).toString());
        Assert.assertEquals(-1542028940, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\" dQ39:sPMNa-$-_:0UY#S", ((Attributes) (o_testSetKeyConsistency_mg232240__5)).toString());
        Assert.assertEquals(-1542028940, ((int) (((Attributes) (o_testSetKeyConsistency_mg232240__5)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_mg232240__10);
        Assert.assertTrue(o_testSetKeyConsistency_mg232240__11);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232210_failAssert240() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put("a", "a");
            for (Attribute at : a) {
                at.setKey("\n");
            }
            a.hasKey("a");
            a.hasKey("b");
            org.junit.Assert.fail("testSetKeyConsistencylitString232210 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("String must not be empty", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencynull232273() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencynull232273__3 = a.put("a", null);
        Assert.assertEquals(" a", ((Attributes) (o_testSetKeyConsistencynull232273__3)).toString());
        Assert.assertEquals(119135170, ((int) (((Attributes) (o_testSetKeyConsistencynull232273__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistencynull232273__8 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistencynull232273__8);
        boolean o_testSetKeyConsistencynull232273__9 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistencynull232273__9);
        Assert.assertEquals(" b", ((Attributes) (a)).toString());
        Assert.assertEquals(120058691, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b", ((Attributes) (o_testSetKeyConsistencynull232273__3)).toString());
        Assert.assertEquals(120058691, ((int) (((Attributes) (o_testSetKeyConsistencynull232273__3)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistencynull232273__8);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232256() throws Exception {
        Attributes __DSPOT_o_66798 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("a", "a");
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_rv232256__12 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_rv232256__12);
        boolean o_testSetKeyConsistency_rv232256__13 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency_rv232256__13);
        boolean o_testSetKeyConsistency_rv232256__14 = __DSPOT_invoc_3.equals(__DSPOT_o_66798);
        Assert.assertFalse(o_testSetKeyConsistency_rv232256__14);
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_rv232256__12);
        Assert.assertTrue(o_testSetKeyConsistency_rv232256__13);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232199_failAssert242() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put("", "a");
            for (Attribute at : a) {
                at.setKey("b");
            }
            a.hasKey("a");
            a.hasKey("b");
            org.junit.Assert.fail("testSetKeyConsistencylitString232199 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("String must not be empty", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232236() throws Exception {
        String __DSPOT_key_66786 = "i/bNV4!Ox&vczcxvQ;,n";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232236__4 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232236__4)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232236__4)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_mg232236__9 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_mg232236__9);
        boolean o_testSetKeyConsistency_mg232236__10 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency_mg232236__10);
        boolean o_testSetKeyConsistency_mg232236__11 = a.hasKeyIgnoreCase(__DSPOT_key_66786);
        Assert.assertFalse(o_testSetKeyConsistency_mg232236__11);
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232236__4)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_mg232236__4)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_mg232236__9);
        Assert.assertTrue(o_testSetKeyConsistency_mg232236__10);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232234() throws Exception {
        String __DSPOT_key_66784 = "sQ=Ba)./8d:4|hs0zl,[";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232234__4 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232234__4)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232234__4)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_mg232234__9 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_mg232234__9);
        boolean o_testSetKeyConsistency_mg232234__10 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency_mg232234__10);
        String o_testSetKeyConsistency_mg232234__11 = a.getIgnoreCase(__DSPOT_key_66784);
        Assert.assertEquals("", o_testSetKeyConsistency_mg232234__11);
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232234__4)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_mg232234__4)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_mg232234__9);
        Assert.assertTrue(o_testSetKeyConsistency_mg232234__10);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232232() throws Exception {
        Object __DSPOT_o_66782 = new Object();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232232__5 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232232__5)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232232__5)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_mg232232__10 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_mg232232__10);
        boolean o_testSetKeyConsistency_mg232232__11 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency_mg232232__11);
        boolean o_testSetKeyConsistency_mg232232__12 = a.equals(__DSPOT_o_66782);
        Assert.assertFalse(o_testSetKeyConsistency_mg232232__12);
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232232__5)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_mg232232__5)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_mg232232__10);
        Assert.assertTrue(o_testSetKeyConsistency_mg232232__11);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_remove232226() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_remove232226__7 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_remove232226__7);
        boolean o_testSetKeyConsistency_remove232226__8 = a.hasKey("b");
        Assert.assertFalse(o_testSetKeyConsistency_remove232226__8);
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_remove232226__7);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232230() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232230__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232230__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232230__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_mg232230__8 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_mg232230__8);
        boolean o_testSetKeyConsistency_mg232230__9 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency_mg232230__9);
        Attributes o_testSetKeyConsistency_mg232230__10 = a.clone();
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232230__10)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_mg232230__10)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(5088, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232230__3)).toString());
        Assert.assertEquals(5088, ((int) (((Attributes) (o_testSetKeyConsistency_mg232230__3)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_mg232230__8);
        Assert.assertTrue(o_testSetKeyConsistency_mg232230__9);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232200() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencylitString232200__3 = a.put("\n", "a");
        Assert.assertEquals(" \n=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232200__3)).toString());
        Assert.assertEquals(41678570, ((int) (((Attributes) (o_testSetKeyConsistencylitString232200__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistencylitString232200__8 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistencylitString232200__8);
        boolean o_testSetKeyConsistencylitString232200__9 = a.hasKey("b");
        Assert.assertFalse(o_testSetKeyConsistencylitString232200__9);
        Assert.assertEquals(" \n=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(41678570, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" \n=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232200__3)).toString());
        Assert.assertEquals(41678570, ((int) (((Attributes) (o_testSetKeyConsistencylitString232200__3)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistencylitString232200__8);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232250() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232250__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232250__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232250__3)).hashCode())));
        for (Attribute at : a) {
            String __DSPOT_val_66796 = "C2n(%iz<V1=upV_b#=iO";
            at.setKey("b");
            at.setValue(__DSPOT_val_66796);
        }
        boolean o_testSetKeyConsistency_mg232250__10 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_mg232250__10);
        boolean o_testSetKeyConsistency_mg232250__11 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency_mg232250__11);
        Assert.assertEquals(" b=\"C2n(%iz<V1=upV_b#=iO\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1749052920, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"C2n(%iz<V1=upV_b#=iO\"", ((Attributes) (o_testSetKeyConsistency_mg232250__3)).toString());
        Assert.assertEquals(1749052920, ((int) (((Attributes) (o_testSetKeyConsistency_mg232250__3)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_mg232250__10);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232204() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencylitString232204__3 = a.put("a", "");
        Assert.assertEquals(" a=\"\"", ((Attributes) (o_testSetKeyConsistencylitString232204__3)).toString());
        Assert.assertEquals(119135170, ((int) (((Attributes) (o_testSetKeyConsistencylitString232204__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistencylitString232204__8 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistencylitString232204__8);
        boolean o_testSetKeyConsistencylitString232204__9 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistencylitString232204__9);
        Assert.assertEquals(" b=\"\"", ((Attributes) (a)).toString());
        Assert.assertEquals(120058691, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"\"", ((Attributes) (o_testSetKeyConsistencylitString232204__3)).toString());
        Assert.assertEquals(120058691, ((int) (((Attributes) (o_testSetKeyConsistencylitString232204__3)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistencylitString232204__8);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencynull232274_failAssert239() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put("a", "a");
            for (Attribute at : a) {
                at.setKey(null);
            }
            a.hasKey("a");
            a.hasKey("b");
            org.junit.Assert.fail("testSetKeyConsistencynull232274 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232205() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencylitString232205__3 = a.put("a", "\n");
        Assert.assertEquals(" a=\"\n\"", ((Attributes) (o_testSetKeyConsistencylitString232205__3)).toString());
        Assert.assertEquals(119433080, ((int) (((Attributes) (o_testSetKeyConsistencylitString232205__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistencylitString232205__8 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistencylitString232205__8);
        boolean o_testSetKeyConsistencylitString232205__9 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistencylitString232205__9);
        Assert.assertEquals(" b=\"\n\"", ((Attributes) (a)).toString());
        Assert.assertEquals(120356601, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"\n\"", ((Attributes) (o_testSetKeyConsistencylitString232205__3)).toString());
        Assert.assertEquals(120356601, ((int) (((Attributes) (o_testSetKeyConsistencylitString232205__3)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistencylitString232205__8);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232265() throws Exception {
        boolean __DSPOT_value_66804 = false;
        String __DSPOT_key_66803 = "BN:]4r$u)v3}8u=8j]}{";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("a", "a");
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_rv232265__12 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_rv232265__12);
        boolean o_testSetKeyConsistency_rv232265__13 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency_rv232265__13);
        Attributes o_testSetKeyConsistency_rv232265__14 = __DSPOT_invoc_3.put(__DSPOT_key_66803, __DSPOT_value_66804);
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_rv232265__14)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_rv232265__14)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_rv232265__12);
        Assert.assertTrue(o_testSetKeyConsistency_rv232265__13);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232264() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("a", "a");
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_rv232264__10 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_rv232264__10);
        boolean o_testSetKeyConsistency_rv232264__11 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency_rv232264__11);
        __DSPOT_invoc_3.normalize();
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_rv232264__10);
        Assert.assertTrue(o_testSetKeyConsistency_rv232264__11);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencynull232272_failAssert238() throws Exception {
        try {
            Attributes a = new Attributes();
            a.put(null, "a");
            for (Attribute at : a) {
                at.setKey("b");
            }
            a.hasKey("a");
            a.hasKey("b");
            org.junit.Assert.fail("testSetKeyConsistencynull232272 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232269() throws Exception {
        String __DSPOT_key_66809 = "QkM0(?2 9J?c_T#f0b7m";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("a", "a");
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_rv232269__11 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_rv232269__11);
        boolean o_testSetKeyConsistency_rv232269__12 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency_rv232269__12);
        __DSPOT_invoc_3.removeIgnoreCase(__DSPOT_key_66809);
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_rv232269__11);
        Assert.assertTrue(o_testSetKeyConsistency_rv232269__12);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_add232222() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_add232222__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_add232222__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_add232222__3)).hashCode())));
        Attributes o_testSetKeyConsistency_add232222__4 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_add232222__4)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_add232222__4)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_add232222__9 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_add232222__9);
        boolean o_testSetKeyConsistency_add232222__10 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency_add232222__10);
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_add232222__3)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_add232222__3)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_add232222__4)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_add232222__4)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_add232222__9);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232267() throws Exception {
        Attribute __DSPOT_attribute_66807 = new Attribute("Zf#E Pt4p3/XY}r7b!d?", "]G9Od<Q2U_%TIv(c1SI#");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("a", "a");
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_rv232267__12 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_rv232267__12);
        boolean o_testSetKeyConsistency_rv232267__13 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency_rv232267__13);
        Attributes o_testSetKeyConsistency_rv232267__14 = __DSPOT_invoc_3.put(__DSPOT_attribute_66807);
        Assert.assertEquals(" b=\"a\" Zf#E Pt4p3/XY}r7b!d?=\"]G9Od<Q2U_%TIv(c1SI#\"", ((Attributes) (o_testSetKeyConsistency_rv232267__14)).toString());
        Assert.assertEquals(-2062359348, ((int) (((Attributes) (o_testSetKeyConsistency_rv232267__14)).hashCode())));
        Assert.assertEquals(" b=\"a\" Zf#E Pt4p3/XY}r7b!d?=\"]G9Od<Q2U_%TIv(c1SI#\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-2062359348, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_rv232267__12);
        Assert.assertTrue(o_testSetKeyConsistency_rv232267__13);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232266() throws Exception {
        String __DSPOT_value_66806 = "vH&N07W4f,^Zl(P2<*Fx";
        String __DSPOT_key_66805 = "j 0y$VnTtAi1Y<zEXH}6";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("a", "a");
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_rv232266__12 = a.hasKey("a");
        Assert.assertFalse(o_testSetKeyConsistency_rv232266__12);
        boolean o_testSetKeyConsistency_rv232266__13 = a.hasKey("b");
        Assert.assertTrue(o_testSetKeyConsistency_rv232266__13);
        Attributes o_testSetKeyConsistency_rv232266__14 = __DSPOT_invoc_3.put(__DSPOT_key_66805, __DSPOT_value_66806);
        Assert.assertEquals(" b=\"a\" j 0y$VnTtAi1Y<zEXH}6=\"vH&amp;N07W4f,^Zl(P2<*Fx\"", ((Attributes) (o_testSetKeyConsistency_rv232266__14)).toString());
        Assert.assertEquals(234970686, ((int) (((Attributes) (o_testSetKeyConsistency_rv232266__14)).hashCode())));
        Assert.assertEquals(" b=\"a\" j 0y$VnTtAi1Y<zEXH}6=\"vH&amp;N07W4f,^Zl(P2<*Fx\"", ((Attributes) (a)).toString());
        Assert.assertEquals(234970686, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistency_rv232266__12);
        Assert.assertTrue(o_testSetKeyConsistency_rv232266__13);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232214_mg238047() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencylitString232214__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232214__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistencylitString232214__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistencylitString232214__8 = a.hasKey("");
        boolean o_testSetKeyConsistencylitString232214__9 = a.hasKey("b");
        List<Attribute> o_testSetKeyConsistencylitString232214_mg238047__16 = o_testSetKeyConsistencylitString232214__3.asList();
        Assert.assertFalse(o_testSetKeyConsistencylitString232214_mg238047__16.isEmpty());
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232214__3)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistencylitString232214__3)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencynull232273_remove235108() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencynull232273__3 = a.put("a", null);
        Assert.assertEquals(" a", ((Attributes) (o_testSetKeyConsistencynull232273__3)).toString());
        Assert.assertEquals(119135170, ((int) (((Attributes) (o_testSetKeyConsistencynull232273__3)).hashCode())));
        for (Attribute at : a) {
        }
        boolean o_testSetKeyConsistencynull232273__8 = a.hasKey("a");
        boolean o_testSetKeyConsistencynull232273__9 = a.hasKey("b");
        Assert.assertEquals(" a", ((Attributes) (a)).toString());
        Assert.assertEquals(119135170, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" a", ((Attributes) (o_testSetKeyConsistencynull232273__3)).toString());
        Assert.assertEquals(119135170, ((int) (((Attributes) (o_testSetKeyConsistencynull232273__3)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232232litString233654() throws Exception {
        Object __DSPOT_o_66782 = new Object();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232232__5 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232232__5)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232232__5)).hashCode())));
        for (Attribute at : a) {
            at.setKey(":");
        }
        boolean o_testSetKeyConsistency_mg232232__10 = a.hasKey("a");
        boolean o_testSetKeyConsistency_mg232232__11 = a.hasKey("b");
        boolean o_testSetKeyConsistency_mg232232__12 = a.equals(__DSPOT_o_66782);
        Assert.assertEquals(" :=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(86007578, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" :=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232232__5)).toString());
        Assert.assertEquals(86007578, ((int) (((Attributes) (o_testSetKeyConsistency_mg232232__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232210_failAssert240_rv238631() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes __DSPOT_invoc_5 = a.put("a", "a");
            for (Attribute at : a) {
                at.setKey("\n");
            }
            a.hasKey("a");
            a.hasKey("b");
            org.junit.Assert.fail("testSetKeyConsistencylitString232210 should have thrown IllegalArgumentException");
            __DSPOT_invoc_5.toString();
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232220_mg238101() throws Exception {
        Attribute __DSPOT_attribute_68867 = new Attribute("&]hy(<&,p(ibyOn+[H7 ", "j;0TM$>SYm-VwY&N-PKI");
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencylitString232220__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232220__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistencylitString232220__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistencylitString232220__8 = a.hasKey("a");
        boolean o_testSetKeyConsistencylitString232220__9 = a.hasKey("\n");
        Attributes o_testSetKeyConsistencylitString232220_mg238101__18 = o_testSetKeyConsistencylitString232220__3.put(__DSPOT_attribute_68867);
        Assert.assertEquals(" b=\"a\" &]hy(<&,p(ibyOn+[H7=\"j;0TM$>SYm-VwY&amp;N-PKI\"", ((Attributes) (o_testSetKeyConsistencylitString232220_mg238101__18)).toString());
        Assert.assertEquals(795335144, ((int) (((Attributes) (o_testSetKeyConsistencylitString232220_mg238101__18)).hashCode())));
        Assert.assertEquals(" b=\"a\" &]hy(<&,p(ibyOn+[H7=\"j;0TM$>SYm-VwY&amp;N-PKI\"", ((Attributes) (a)).toString());
        Assert.assertEquals(795335144, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\" &]hy(<&,p(ibyOn+[H7=\"j;0TM$>SYm-VwY&amp;N-PKI\"", ((Attributes) (o_testSetKeyConsistencylitString232220__3)).toString());
        Assert.assertEquals(795335144, ((int) (((Attributes) (o_testSetKeyConsistencylitString232220__3)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232213_add234530() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        ((Attributes) (a)).toString();
        Attributes o_testSetKeyConsistencylitString232213__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232213__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistencylitString232213__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistencylitString232213__8 = a.hasKey("u");
        boolean o_testSetKeyConsistencylitString232213__9 = a.hasKey("b");
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232213__3)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistencylitString232213__3)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232258_remove235125() throws Exception {
        String __DSPOT_key_66800 = "&-m4|l<t9Ll?ywkYt@Ih";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("a", "a");
        for (Attribute at : a) {
        }
        boolean o_testSetKeyConsistency_rv232258__11 = a.hasKey("a");
        boolean o_testSetKeyConsistency_rv232258__12 = a.hasKey("b");
        String o_testSetKeyConsistency_rv232258__13 = __DSPOT_invoc_3.getIgnoreCase(__DSPOT_key_66800);
        Assert.assertEquals("", o_testSetKeyConsistency_rv232258__13);
        Assert.assertEquals(" a=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232246_rv238520() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232246__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232246__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232246__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
            Attribute __DSPOT_invoc_22 = at.clone();
            __DSPOT_invoc_22.getKey();
        }
        boolean o_testSetKeyConsistency_mg232246__9 = a.hasKey("a");
        boolean o_testSetKeyConsistency_mg232246__10 = a.hasKey("b");
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232246__3)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_mg232246__3)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232220_mg238107() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencylitString232220__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232220__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistencylitString232220__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
            at.html();
        }
        boolean o_testSetKeyConsistencylitString232220__8 = a.hasKey("a");
        boolean o_testSetKeyConsistencylitString232220__9 = a.hasKey("\n");
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232220__3)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistencylitString232220__3)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232265litBool234221() throws Exception {
        boolean __DSPOT_value_66804 = true;
        String __DSPOT_key_66803 = "BN:]4r$u)v3}8u=8j]}{";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("a", "a");
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_rv232265__12 = a.hasKey("a");
        boolean o_testSetKeyConsistency_rv232265__13 = a.hasKey("b");
        Attributes o_testSetKeyConsistency_rv232265__14 = __DSPOT_invoc_3.put(__DSPOT_key_66803, __DSPOT_value_66804);
        Assert.assertEquals(" b=\"a\" BN:]4r$u)v3}8u=8j]}{", ((Attributes) (o_testSetKeyConsistency_rv232265__14)).toString());
        Assert.assertEquals(2096023685, ((int) (((Attributes) (o_testSetKeyConsistency_rv232265__14)).hashCode())));
        Assert.assertEquals(" b=\"a\" BN:]4r$u)v3}8u=8j]}{", ((Attributes) (a)).toString());
        Assert.assertEquals(2096023685, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232254litString232978_failAssert252() throws Exception {
        try {
            Attributes a = new Attributes();
            Attributes __DSPOT_invoc_3 = a.put("", "a");
            for (Attribute at : a) {
                at.setKey("b");
            }
            boolean o_testSetKeyConsistency_rv232254__10 = a.hasKey("a");
            boolean o_testSetKeyConsistency_rv232254__11 = a.hasKey("b");
            Attributes o_testSetKeyConsistency_rv232254__12 = __DSPOT_invoc_3.clone();
            org.junit.Assert.fail("testSetKeyConsistency_rv232254litString232978 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("String must not be empty", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232211_mg238016() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencylitString232211__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232211__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistencylitString232211__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey(":");
        }
        boolean o_testSetKeyConsistencylitString232211__8 = a.hasKey("a");
        boolean o_testSetKeyConsistencylitString232211__9 = a.hasKey("b");
        o_testSetKeyConsistencylitString232211__3.normalize();
        Assert.assertEquals(" :=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(86007578, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" :=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232211__3)).toString());
        Assert.assertEquals(86007578, ((int) (((Attributes) (o_testSetKeyConsistencylitString232211__3)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232252null238973_failAssert256() throws Exception {
        try {
            Attributes __DSPOT_incoming_66797 = new Attributes();
            Attributes a = new Attributes();
            Attributes __DSPOT_invoc_3 = a.put("a", "a");
            for (Attribute at : a) {
                at.setKey(null);
            }
            boolean o_testSetKeyConsistency_rv232252__12 = a.hasKey("a");
            boolean o_testSetKeyConsistency_rv232252__13 = a.hasKey("b");
            __DSPOT_invoc_3.addAll(__DSPOT_incoming_66797);
            org.junit.Assert.fail("testSetKeyConsistency_rv232252null238973 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencynull232274_failAssert239_rv238597() throws Exception {
        try {
            String __DSPOT_key_69204 = "E2t}Xb?(<En!::(B<8#K";
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes __DSPOT_invoc_5 = a.put("a", "a");
            for (Attribute at : a) {
                at.setKey(null);
            }
            a.hasKey("a");
            a.hasKey("b");
            org.junit.Assert.fail("testSetKeyConsistencynull232274 should have thrown IllegalArgumentException");
            __DSPOT_invoc_5.getIgnoreCase(__DSPOT_key_69204);
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232254_remove235132() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("a", "a");
        for (Attribute at : a) {
        }
        boolean o_testSetKeyConsistency_rv232254__10 = a.hasKey("a");
        boolean o_testSetKeyConsistency_rv232254__11 = a.hasKey("b");
        Attributes o_testSetKeyConsistency_rv232254__12 = __DSPOT_invoc_3.clone();
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_rv232254__12)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_rv232254__12)).hashCode())));
        Assert.assertEquals(" a=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(5057, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232254null238776_failAssert251() throws Exception {
        try {
            Attributes a = new Attributes();
            Attributes __DSPOT_invoc_3 = a.put("a", "a");
            for (Attribute at : a) {
                at.setKey("b");
            }
            boolean o_testSetKeyConsistency_rv232254__10 = a.hasKey(null);
            boolean o_testSetKeyConsistency_rv232254__11 = a.hasKey("b");
            Attributes o_testSetKeyConsistency_rv232254__12 = __DSPOT_invoc_3.clone();
            org.junit.Assert.fail("testSetKeyConsistency_rv232254null238776 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232240litBool234222() throws Exception {
        boolean __DSPOT_value_66788 = false;
        String __DSPOT_key_66787 = "dQ39:sPMNa-$-_:0UY#S";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232240__5 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232240__5)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232240__5)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_mg232240__10 = a.hasKey("a");
        boolean o_testSetKeyConsistency_mg232240__11 = a.hasKey("b");
        Attributes o_testSetKeyConsistency_mg232240__12 = a.put(__DSPOT_key_66787, __DSPOT_value_66788);
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232240__12)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_mg232240__12)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232240__5)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_mg232240__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232209_failAssert241_rv238633() throws Exception {
        try {
            Attributes __DSPOT_incoming_69227 = new Attributes();
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes __DSPOT_invoc_5 = a.put("a", "a");
            for (Attribute at : a) {
                at.setKey("");
            }
            a.hasKey("a");
            a.hasKey("b");
            org.junit.Assert.fail("testSetKeyConsistencylitString232209 should have thrown IllegalArgumentException");
            __DSPOT_invoc_5.addAll(__DSPOT_incoming_69227);
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232229null238874() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232229__3 = a.put("a", null);
        Assert.assertEquals(" a", ((Attributes) (o_testSetKeyConsistency_mg232229__3)).toString());
        Assert.assertEquals(119135170, ((int) (((Attributes) (o_testSetKeyConsistency_mg232229__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_mg232229__8 = a.hasKey("a");
        boolean o_testSetKeyConsistency_mg232229__9 = a.hasKey("b");
        List<Attribute> o_testSetKeyConsistency_mg232229__10 = a.asList();
        Assert.assertEquals(" b", ((Attributes) (a)).toString());
        Assert.assertEquals(120058691, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b", ((Attributes) (o_testSetKeyConsistency_mg232229__3)).toString());
        Assert.assertEquals(120058691, ((int) (((Attributes) (o_testSetKeyConsistency_mg232229__3)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232228_add234684() throws Exception {
        Attributes __DSPOT_incoming_66781 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232228_add234684__5 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232228_add234684__5)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232228_add234684__5)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232228__5 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232228__5)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232228__5)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_mg232228__10 = a.hasKey("a");
        boolean o_testSetKeyConsistency_mg232228__11 = a.hasKey("b");
        a.addAll(__DSPOT_incoming_66781);
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232228_add234684__5)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_mg232228_add234684__5)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232228__5)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_mg232228__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232228null238860_failAssert244() throws Exception {
        try {
            Attributes __DSPOT_incoming_66781 = new Attributes();
            Attributes a = new Attributes();
            Attributes o_testSetKeyConsistency_mg232228__5 = a.put(null, "a");
            for (Attribute at : a) {
                at.setKey("b");
            }
            boolean o_testSetKeyConsistency_mg232228__10 = a.hasKey("a");
            boolean o_testSetKeyConsistency_mg232228__11 = a.hasKey("b");
            a.addAll(__DSPOT_incoming_66781);
            org.junit.Assert.fail("testSetKeyConsistency_mg232228null238860 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232217_mg238246() throws Exception {
        String __DSPOT_value_68969 = "O0$u-iK-|WGY20Oz$SMC";
        String __DSPOT_key_68968 = ":2HX#fl+l.u!A[%fRQqg";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencylitString232217__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232217__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistencylitString232217__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistencylitString232217__8 = a.hasKey("a");
        boolean o_testSetKeyConsistencylitString232217__9 = a.hasKey("Tot");
        Attributes o_testSetKeyConsistencylitString232217_mg238246__18 = a.put(__DSPOT_key_68968, __DSPOT_value_68969);
        Assert.assertEquals(" b=\"a\" :2HX#fl+l.u!A[%fRQqg=\"O0$u-iK-|WGY20Oz$SMC\"", ((Attributes) (o_testSetKeyConsistencylitString232217_mg238246__18)).toString());
        Assert.assertEquals(1958333670, ((int) (((Attributes) (o_testSetKeyConsistencylitString232217_mg238246__18)).hashCode())));
        Assert.assertEquals(" b=\"a\" :2HX#fl+l.u!A[%fRQqg=\"O0$u-iK-|WGY20Oz$SMC\"", ((Attributes) (a)).toString());
        Assert.assertEquals(1958333670, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\" :2HX#fl+l.u!A[%fRQqg=\"O0$u-iK-|WGY20Oz$SMC\"", ((Attributes) (o_testSetKeyConsistencylitString232217__3)).toString());
        Assert.assertEquals(1958333670, ((int) (((Attributes) (o_testSetKeyConsistencylitString232217__3)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232212_mg236706() throws Exception {
        String __DSPOT_key_67879 = "g$}c5+RhO(G02Za, _vT";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencylitString232212__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232212__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistencylitString232212__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistencylitString232212__8 = a.hasKey("hello");
        boolean o_testSetKeyConsistencylitString232212__9 = a.hasKey("b");
        boolean o_testSetKeyConsistencylitString232212_mg236706__17 = o_testSetKeyConsistencylitString232212__3.hasKeyIgnoreCase(__DSPOT_key_67879);
        Assert.assertFalse(o_testSetKeyConsistencylitString232212_mg236706__17);
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232212__3)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistencylitString232212__3)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232265litBool234221litString239683() throws Exception {
        boolean __DSPOT_value_66804 = true;
        String __DSPOT_key_66803 = "BN:]4r$u)v3}8u=8j]}{";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("\n", "a");
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_rv232265__12 = a.hasKey("a");
        boolean o_testSetKeyConsistency_rv232265__13 = a.hasKey("b");
        Attributes o_testSetKeyConsistency_rv232265__14 = __DSPOT_invoc_3.put(__DSPOT_key_66803, __DSPOT_value_66804);
        Assert.assertEquals(" \n=\"a\" BN:]4r$u)v3}8u=8j]}{", ((Attributes) (o_testSetKeyConsistency_rv232265__14)).toString());
        Assert.assertEquals(2014753837, ((int) (((Attributes) (o_testSetKeyConsistency_rv232265__14)).hashCode())));
        Assert.assertEquals(" \n=\"a\" BN:]4r$u)v3}8u=8j]}{", ((Attributes) (a)).toString());
        Assert.assertEquals(2014753837, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232215_mg236621_remove241313() throws Exception {
        String __DSPOT_key_67818 = "Zy=5w:`WG,dB`QX|aZ&2";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencylitString232215__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232215__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistencylitString232215__3)).hashCode())));
        for (Attribute at : a) {
        }
        boolean o_testSetKeyConsistencylitString232215__8 = a.hasKey("\n");
        boolean o_testSetKeyConsistencylitString232215__9 = a.hasKey("b");
        String o_testSetKeyConsistencylitString232215_mg236621__17 = o_testSetKeyConsistencylitString232215__3.get(__DSPOT_key_67818);
        Assert.assertEquals("", o_testSetKeyConsistencylitString232215_mg236621__17);
        Assert.assertEquals(" a=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232215__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistencylitString232215__3)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232215_mg236621_mg242178() throws Exception {
        boolean __DSPOT_value_69818 = false;
        String __DSPOT_key_69817 = "iW(!Nqo>2$/q,@).%Mt_";
        String __DSPOT_key_67818 = "Zy=5w:`WG,dB`QX|aZ&2";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencylitString232215__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232215__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistencylitString232215__3)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistencylitString232215__8 = a.hasKey("\n");
        boolean o_testSetKeyConsistencylitString232215__9 = a.hasKey("b");
        String o_testSetKeyConsistencylitString232215_mg236621__17 = o_testSetKeyConsistencylitString232215__3.get(__DSPOT_key_67818);
        Assert.assertEquals("", o_testSetKeyConsistencylitString232215_mg236621__17);
        Attributes o_testSetKeyConsistencylitString232215_mg236621_mg242178__22 = o_testSetKeyConsistencylitString232215__3.put(__DSPOT_key_69817, __DSPOT_value_69818);
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232215_mg236621_mg242178__22)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistencylitString232215_mg236621_mg242178__22)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232215__3)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistencylitString232215__3)).hashCode())));
        Assert.assertEquals("", o_testSetKeyConsistencylitString232215_mg236621__17);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232254_mg235988_rv245719() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("a", "a");
        for (Attribute at : a) {
            String __DSPOT_val_72325 = "NH2Q[IqK)wUk<PW%(XK[";
            at.setKey("b");
            Attribute __DSPOT_invoc_16 = at.clone();
            __DSPOT_invoc_16.setValue(__DSPOT_val_72325);
        }
        boolean o_testSetKeyConsistency_rv232254__10 = a.hasKey("a");
        boolean o_testSetKeyConsistency_rv232254__11 = a.hasKey("b");
        Attributes o_testSetKeyConsistency_rv232254__12 = __DSPOT_invoc_3.clone();
        Assert.assertEquals(" b=\"NH2Q[IqK)wUk<PW%(XK[\"", ((Attributes) (o_testSetKeyConsistency_rv232254__12)).toString());
        Assert.assertEquals(1587385596, ((int) (((Attributes) (o_testSetKeyConsistency_rv232254__12)).hashCode())));
        Assert.assertEquals(" b=\"NH2Q[IqK)wUk<PW%(XK[\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-1254656922, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232228_mg236918_add240903() throws Exception {
        String __DSPOT_key_68030 = "#VV=qR#nKol4@K91)*+e";
        Attributes __DSPOT_incoming_66781 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232228_mg236918_add240903__6 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232228_mg236918_add240903__6)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232228_mg236918_add240903__6)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232228__5 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232228__5)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232228__5)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_mg232228__10 = a.hasKey("a");
        boolean o_testSetKeyConsistency_mg232228__11 = a.hasKey("b");
        a.addAll(__DSPOT_incoming_66781);
        __DSPOT_incoming_66781.remove(__DSPOT_key_68030);
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232228_mg236918_add240903__6)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_mg232228_mg236918_add240903__6)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232228__5)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_mg232228__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232216_remove235140_mg241806() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencylitString232216__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232216__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistencylitString232216__3)).hashCode())));
        for (Attribute at : a) {
            String __DSPOT_val_69555 = "CbCw-8:#f2u39@u#$td^";
            at.setValue(__DSPOT_val_69555);
        }
        boolean o_testSetKeyConsistencylitString232216__8 = a.hasKey(":");
        boolean o_testSetKeyConsistencylitString232216__9 = a.hasKey("b");
        Assert.assertEquals(" a=\"CbCw-8:#f2u39@u#$td^\"", ((Attributes) (a)).toString());
        Assert.assertEquals(254644722, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" a=\"CbCw-8:#f2u39@u#$td^\"", ((Attributes) (o_testSetKeyConsistencylitString232216__3)).toString());
        Assert.assertEquals(254644722, ((int) (((Attributes) (o_testSetKeyConsistencylitString232216__3)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencynull232273_remove235108_mg243513() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencynull232273__3 = a.put("a", null);
        Assert.assertEquals(" a", ((Attributes) (o_testSetKeyConsistencynull232273__3)).toString());
        Assert.assertEquals(119135170, ((int) (((Attributes) (o_testSetKeyConsistencynull232273__3)).hashCode())));
        for (Attribute at : a) {
        }
        boolean o_testSetKeyConsistencynull232273__8 = a.hasKey("a");
        boolean o_testSetKeyConsistencynull232273__9 = a.hasKey("b");
        List<Attribute> o_testSetKeyConsistencynull232273_remove235108_mg243513__15 = o_testSetKeyConsistencynull232273__3.asList();
        Assert.assertFalse(o_testSetKeyConsistencynull232273_remove235108_mg243513__15.isEmpty());
        Assert.assertEquals(" a", ((Attributes) (a)).toString());
        Assert.assertEquals(119135170, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" a", ((Attributes) (o_testSetKeyConsistencynull232273__3)).toString());
        Assert.assertEquals(119135170, ((int) (((Attributes) (o_testSetKeyConsistencynull232273__3)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232265litBool234221_add240758() throws Exception {
        boolean __DSPOT_value_66804 = true;
        String __DSPOT_key_66803 = "BN:]4r$u)v3}8u=8j]}{";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        ((Attributes) (a)).toString();
        Attributes __DSPOT_invoc_3 = a.put("a", "a");
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_rv232265__12 = a.hasKey("a");
        boolean o_testSetKeyConsistency_rv232265__13 = a.hasKey("b");
        Attributes o_testSetKeyConsistency_rv232265__14 = __DSPOT_invoc_3.put(__DSPOT_key_66803, __DSPOT_value_66804);
        Assert.assertEquals(" b=\"a\" BN:]4r$u)v3}8u=8j]}{", ((Attributes) (o_testSetKeyConsistency_rv232265__14)).toString());
        Assert.assertEquals(2096023685, ((int) (((Attributes) (o_testSetKeyConsistency_rv232265__14)).hashCode())));
        Assert.assertEquals(" b=\"a\" BN:]4r$u)v3}8u=8j]}{", ((Attributes) (a)).toString());
        Assert.assertEquals(2096023685, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232232litString233654_mg245020() throws Exception {
        Attribute __DSPOT_attribute_71833 = new Attribute("f8mGD)(aH2wT@Q[jD[/I", "Qp&Rq;lK(^W(;8kW!{gB", new Attributes());
        Object __DSPOT_o_66782 = new Object();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232232__5 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232232__5)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232232__5)).hashCode())));
        for (Attribute at : a) {
            at.setKey(":");
        }
        boolean o_testSetKeyConsistency_mg232232__10 = a.hasKey("a");
        boolean o_testSetKeyConsistency_mg232232__11 = a.hasKey("b");
        boolean o_testSetKeyConsistency_mg232232__12 = a.equals(__DSPOT_o_66782);
        Attributes o_testSetKeyConsistency_mg232232litString233654_mg245020__24 = a.put(__DSPOT_attribute_71833);
        Assert.assertEquals(" :=\"a\" f8mGD)(aH2wT@Q[jD[/I=\"Qp&amp;Rq;lK(^W(;8kW!{gB\"", ((Attributes) (o_testSetKeyConsistency_mg232232litString233654_mg245020__24)).toString());
        Assert.assertEquals(-897052174, ((int) (((Attributes) (o_testSetKeyConsistency_mg232232litString233654_mg245020__24)).hashCode())));
        Assert.assertEquals(" :=\"a\" f8mGD)(aH2wT@Q[jD[/I=\"Qp&amp;Rq;lK(^W(;8kW!{gB\"", ((Attributes) (a)).toString());
        Assert.assertEquals(-897052174, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" :=\"a\" f8mGD)(aH2wT@Q[jD[/I=\"Qp&amp;Rq;lK(^W(;8kW!{gB\"", ((Attributes) (o_testSetKeyConsistency_mg232232__5)).toString());
        Assert.assertEquals(-897052174, ((int) (((Attributes) (o_testSetKeyConsistency_mg232232__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencynull232273_remove235108null245852_failAssert267() throws Exception {
        try {
            Attributes a = new Attributes();
            Attributes o_testSetKeyConsistencynull232273__3 = a.put(null, null);
            for (Attribute at : a) {
            }
            boolean o_testSetKeyConsistencynull232273__8 = a.hasKey("a");
            boolean o_testSetKeyConsistencynull232273__9 = a.hasKey("b");
            org.junit.Assert.fail("testSetKeyConsistencynull232273_remove235108null245852 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232254_mg235988_rv245712() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("a", "a");
        for (Attribute at : a) {
            at.setKey("b");
            Attribute __DSPOT_invoc_16 = at.clone();
            __DSPOT_invoc_16.clone();
        }
        boolean o_testSetKeyConsistency_rv232254__10 = a.hasKey("a");
        boolean o_testSetKeyConsistency_rv232254__11 = a.hasKey("b");
        Attributes o_testSetKeyConsistency_rv232254__12 = __DSPOT_invoc_3.clone();
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_rv232254__12)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_rv232254__12)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(5088, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232254_add234440litString239655_failAssert266() throws Exception {
        try {
            Attributes a = new Attributes();
            Attributes __DSPOT_invoc_3 = a.put("a", "a");
            for (Attribute at : a) {
                at.setKey("\n");
                at.setKey("b");
            }
            boolean o_testSetKeyConsistency_rv232254__10 = a.hasKey("a");
            boolean o_testSetKeyConsistency_rv232254__11 = a.hasKey("b");
            Attributes o_testSetKeyConsistency_rv232254__12 = __DSPOT_invoc_3.clone();
            org.junit.Assert.fail("testSetKeyConsistency_rv232254_add234440litString239655 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("String must not be empty", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232254_mg235988_rv245713() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("a", "a");
        for (Attribute at : a) {
            Object __DSPOT_o_72323 = new Object();
            at.setKey("b");
            Attribute __DSPOT_invoc_16 = at.clone();
            __DSPOT_invoc_16.equals(__DSPOT_o_72323);
        }
        boolean o_testSetKeyConsistency_rv232254__10 = a.hasKey("a");
        boolean o_testSetKeyConsistency_rv232254__11 = a.hasKey("b");
        Attributes o_testSetKeyConsistency_rv232254__12 = __DSPOT_invoc_3.clone();
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_rv232254__12)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_rv232254__12)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(5088, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232265litBool234221null245824_failAssert271() throws Exception {
        try {
            boolean __DSPOT_value_66804 = true;
            String __DSPOT_key_66803 = null;
            Attributes a = new Attributes();
            Attributes __DSPOT_invoc_3 = a.put("a", "a");
            for (Attribute at : a) {
                at.setKey("b");
            }
            boolean o_testSetKeyConsistency_rv232265__12 = a.hasKey("a");
            boolean o_testSetKeyConsistency_rv232265__13 = a.hasKey("b");
            Attributes o_testSetKeyConsistency_rv232265__14 = __DSPOT_invoc_3.put(__DSPOT_key_66803, __DSPOT_value_66804);
            org.junit.Assert.fail("testSetKeyConsistency_rv232265litBool234221null245824 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232228_mg236918_mg243769() throws Exception {
        String __DSPOT_key_68030 = "#VV=qR#nKol4@K91)*+e";
        Attributes __DSPOT_incoming_66781 = new Attributes();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232228__5 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232228__5)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232228__5)).hashCode())));
        for (Attribute at : a) {
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_mg232228__10 = a.hasKey("a");
        boolean o_testSetKeyConsistency_mg232228__11 = a.hasKey("b");
        a.addAll(__DSPOT_incoming_66781);
        __DSPOT_incoming_66781.remove(__DSPOT_key_68030);
        __DSPOT_incoming_66781.normalize();
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232228__5)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_mg232228__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232228_mg236918null245884_failAssert269() throws Exception {
        try {
            String __DSPOT_key_68030 = "#VV=qR#nKol4@K91)*+e";
            Attributes __DSPOT_incoming_66781 = new Attributes();
            Attributes a = new Attributes();
            Attributes o_testSetKeyConsistency_mg232228__5 = a.put("a", "a");
            for (Attribute at : a) {
                at.setKey("b");
            }
            boolean o_testSetKeyConsistency_mg232228__10 = a.hasKey("a");
            boolean o_testSetKeyConsistency_mg232228__11 = a.hasKey("b");
            a.addAll(null);
            __DSPOT_incoming_66781.remove(__DSPOT_key_68030);
            org.junit.Assert.fail("testSetKeyConsistency_mg232228_mg236918null245884 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals(null, expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232254_add234440null245819() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("a", null);
        for (Attribute at : a) {
            at.setKey("b");
            at.setKey("b");
        }
        boolean o_testSetKeyConsistency_rv232254__10 = a.hasKey("a");
        boolean o_testSetKeyConsistency_rv232254__11 = a.hasKey("b");
        Attributes o_testSetKeyConsistency_rv232254__12 = __DSPOT_invoc_3.clone();
        Assert.assertEquals(" b", ((Attributes) (o_testSetKeyConsistency_rv232254__12)).toString());
        Assert.assertEquals(120058691, ((int) (((Attributes) (o_testSetKeyConsistency_rv232254__12)).hashCode())));
        Assert.assertEquals(" b", ((Attributes) (a)).toString());
        Assert.assertEquals(4991, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232232litString233654_add241223() throws Exception {
        Object __DSPOT_o_66782 = new Object();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232232__5 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232232__5)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232232__5)).hashCode())));
        for (Attribute at : a) {
            at.setKey(":");
        }
        boolean o_testSetKeyConsistency_mg232232__10 = a.hasKey("a");
        boolean o_testSetKeyConsistency_mg232232__11 = a.hasKey("b");
        boolean o_testSetKeyConsistency_mg232232__12 = a.equals(__DSPOT_o_66782);
        ((Attributes) (o_testSetKeyConsistency_mg232232__5)).toString();
        Assert.assertEquals(" :=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(86007578, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" :=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232232__5)).toString());
        Assert.assertEquals(86007578, ((int) (((Attributes) (o_testSetKeyConsistency_mg232232__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232214_remove235188_mg241718() throws Exception {
        String __DSPOT_key_69494 = "Q2Jia[_Rz/vBhMEfbE.!";
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencylitString232214__3 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232214__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistencylitString232214__3)).hashCode())));
        for (Attribute at : a) {
        }
        boolean o_testSetKeyConsistencylitString232214__8 = a.hasKey("");
        boolean o_testSetKeyConsistencylitString232214__9 = a.hasKey("b");
        o_testSetKeyConsistencylitString232214__3.removeIgnoreCase(__DSPOT_key_69494);
        Assert.assertEquals(" a=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistencylitString232214__3)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistencylitString232214__3)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencynull232273_remove235108_add240840() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencynull232273__3 = a.put("a", null);
        Assert.assertEquals(" a", ((Attributes) (o_testSetKeyConsistencynull232273__3)).toString());
        Assert.assertEquals(119135170, ((int) (((Attributes) (o_testSetKeyConsistencynull232273__3)).hashCode())));
        for (Attribute at : a) {
        }
        boolean o_testSetKeyConsistencynull232273__8 = a.hasKey("a");
        boolean o_testSetKeyConsistencynull232273_remove235108_add240840__12 = a.hasKey("b");
        Assert.assertFalse(o_testSetKeyConsistencynull232273_remove235108_add240840__12);
        boolean o_testSetKeyConsistencynull232273__9 = a.hasKey("b");
        Assert.assertEquals(" a", ((Attributes) (a)).toString());
        Assert.assertEquals(119135170, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" a", ((Attributes) (o_testSetKeyConsistencynull232273__3)).toString());
        Assert.assertEquals(119135170, ((int) (((Attributes) (o_testSetKeyConsistencynull232273__3)).hashCode())));
        Assert.assertFalse(o_testSetKeyConsistencynull232273_remove235108_add240840__12);
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232232litString233654null245960() throws Exception {
        Object __DSPOT_o_66782 = new Object();
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistency_mg232232__5 = a.put("a", "a");
        Assert.assertEquals(" a=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232232__5)).toString());
        Assert.assertEquals(122024897, ((int) (((Attributes) (o_testSetKeyConsistency_mg232232__5)).hashCode())));
        for (Attribute at : a) {
            at.setKey(":");
        }
        boolean o_testSetKeyConsistency_mg232232__10 = a.hasKey("a");
        boolean o_testSetKeyConsistency_mg232232__11 = a.hasKey("b");
        boolean o_testSetKeyConsistency_mg232232__12 = a.equals(null);
        Assert.assertEquals(" :=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(86007578, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" :=\"a\"", ((Attributes) (o_testSetKeyConsistency_mg232232__5)).toString());
        Assert.assertEquals(86007578, ((int) (((Attributes) (o_testSetKeyConsistency_mg232232__5)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232214_remove235188null245758_failAssert260() throws Exception {
        try {
            Attributes a = new Attributes();
            Attributes o_testSetKeyConsistencylitString232214__3 = a.put("a", "a");
            for (Attribute at : a) {
            }
            boolean o_testSetKeyConsistencylitString232214__8 = a.hasKey("");
            boolean o_testSetKeyConsistencylitString232214__9 = a.hasKey(null);
            org.junit.Assert.fail("testSetKeyConsistencylitString232214_remove235188null245758 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232254_mg235988litString239515() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("a", "\n");
        for (Attribute at : a) {
            at.setKey("b");
            at.clone();
        }
        boolean o_testSetKeyConsistency_rv232254__10 = a.hasKey("a");
        boolean o_testSetKeyConsistency_rv232254__11 = a.hasKey("b");
        Attributes o_testSetKeyConsistency_rv232254__12 = __DSPOT_invoc_3.clone();
        Assert.assertEquals(" b=\"\n\"", ((Attributes) (o_testSetKeyConsistency_rv232254__12)).toString());
        Assert.assertEquals(120356601, ((int) (((Attributes) (o_testSetKeyConsistency_rv232254__12)).hashCode())));
        Assert.assertEquals(" b=\"\n\"", ((Attributes) (a)).toString());
        Assert.assertEquals(5001, ((int) (((Attributes) (a)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencylitString232210_failAssert240_rv238631_add240985() throws Exception {
        try {
            Attributes a = new Attributes();
            Assert.assertEquals("", ((Attributes) (a)).toString());
            Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
            Attributes __DSPOT_invoc_5 = a.put("a", "a");
            for (Attribute at : a) {
                at.setKey("\n");
                at.setKey("\n");
            }
            a.hasKey("a");
            a.hasKey("b");
            org.junit.Assert.fail("testSetKeyConsistencylitString232210 should have thrown IllegalArgumentException");
            __DSPOT_invoc_5.toString();
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistencynull232273_remove235108_mg243505() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes o_testSetKeyConsistencynull232273__3 = a.put("a", null);
        Assert.assertEquals(" a", ((Attributes) (o_testSetKeyConsistencynull232273__3)).toString());
        Assert.assertEquals(119135170, ((int) (((Attributes) (o_testSetKeyConsistencynull232273__3)).hashCode())));
        for (Attribute at : a) {
        }
        boolean o_testSetKeyConsistencynull232273__8 = a.hasKey("a");
        boolean o_testSetKeyConsistencynull232273__9 = a.hasKey("b");
        a.normalize();
        Assert.assertEquals(" a", ((Attributes) (a)).toString());
        Assert.assertEquals(119135170, ((int) (((Attributes) (a)).hashCode())));
        Assert.assertEquals(" a", ((Attributes) (o_testSetKeyConsistencynull232273__3)).toString());
        Assert.assertEquals(119135170, ((int) (((Attributes) (o_testSetKeyConsistencynull232273__3)).hashCode())));
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_mg232228_mg236918null245881_failAssert259() throws Exception {
        try {
            String __DSPOT_key_68030 = "#VV=qR#nKol4@K91)*+e";
            Attributes __DSPOT_incoming_66781 = new Attributes();
            Attributes a = new Attributes();
            Attributes o_testSetKeyConsistency_mg232228__5 = a.put("a", "a");
            for (Attribute at : a) {
                at.setKey(null);
            }
            boolean o_testSetKeyConsistency_mg232228__10 = a.hasKey("a");
            boolean o_testSetKeyConsistency_mg232228__11 = a.hasKey("b");
            a.addAll(__DSPOT_incoming_66781);
            __DSPOT_incoming_66781.remove(__DSPOT_key_68030);
            org.junit.Assert.fail("testSetKeyConsistency_mg232228_mg236918null245881 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
            Assert.assertEquals("Object must not be null", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSetKeyConsistency_rv232254_mg235988_rv245720() throws Exception {
        Attributes a = new Attributes();
        Assert.assertEquals("", ((Attributes) (a)).toString());
        Assert.assertEquals(32, ((int) (((Attributes) (a)).hashCode())));
        Attributes __DSPOT_invoc_3 = a.put("a", "a");
        for (Attribute at : a) {
            at.setKey("b");
            Attribute __DSPOT_invoc_16 = at.clone();
            __DSPOT_invoc_16.toString();
        }
        boolean o_testSetKeyConsistency_rv232254__10 = a.hasKey("a");
        boolean o_testSetKeyConsistency_rv232254__11 = a.hasKey("b");
        Attributes o_testSetKeyConsistency_rv232254__12 = __DSPOT_invoc_3.clone();
        Assert.assertEquals(" b=\"a\"", ((Attributes) (o_testSetKeyConsistency_rv232254__12)).toString());
        Assert.assertEquals(122948418, ((int) (((Attributes) (o_testSetKeyConsistency_rv232254__12)).hashCode())));
        Assert.assertEquals(" b=\"a\"", ((Attributes) (a)).toString());
        Assert.assertEquals(5088, ((int) (((Attributes) (a)).hashCode())));
    }
}

