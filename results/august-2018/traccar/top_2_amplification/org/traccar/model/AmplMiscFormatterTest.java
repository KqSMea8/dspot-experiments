package org.traccar.model;


import java.util.Date;
import org.junit.Assert;
import org.junit.Test;


public class AmplMiscFormatterTest {
    @Test(timeout = 10000)
    public void testToString() throws Exception {
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString__6);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
    }

    @Test(timeout = 10000)
    public void testToString_mg42() throws Exception {
        double __DSPOT_course_3 = 0.9603427899977239;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg42__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg42__7);
        position.setCourse(__DSPOT_course_3);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.9603427899977239, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg42__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg53() throws Exception {
        boolean __DSPOT_valid_14 = true;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg53__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg53__7);
        position.setValid(__DSPOT_valid_14);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertTrue(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg53__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg51() throws Exception {
        double __DSPOT_speed_12 = 0.8093309164938622;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg51__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg51__7);
        position.setSpeed(__DSPOT_speed_12);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.8093309164938622, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg51__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg40() throws Exception {
        String __DSPOT_address_1 = "#-VtX(r!Fs2l>UgIvC=T";
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg40__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg40__7);
        position.setAddress(__DSPOT_address_1);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertEquals("#-VtX(r!Fs2l>UgIvC=T", ((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg40__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg41() throws Exception {
        double __DSPOT_altitude_2 = 0.6904160431196424;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg41__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg41__7);
        position.setAltitude(__DSPOT_altitude_2);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.6904160431196424, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg41__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg52() throws Exception {
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg46() throws Exception {
        double __DSPOT_longitude_7 = 0.5949639977154475;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg46__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg46__7);
        position.setLongitude(__DSPOT_longitude_7);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.5949639977154475, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg46__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg47() throws Exception {
        Network __DSPOT_network_8 = new Network(new CellTower());
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg47__9 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg47__9);
        position.setNetwork(__DSPOT_network_8);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getCellTowers().isEmpty());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg47__9);
    }

    @Test(timeout = 10000)
    public void testToString_mg45() throws Exception {
        double __DSPOT_latitude_6 = 0.7036897094148656;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg45__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg45__7);
        position.setLatitude(__DSPOT_latitude_6);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.7036897094148656, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg45__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg50() throws Exception {
        Date __DSPOT_serverTime_11 = new Date(279793993L);
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg50__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg50__8);
        position.setServerTime(__DSPOT_serverTime_11);
        Assert.assertEquals(279793993L, ((long) (((Date) (((Position) (position)).getServerTime())).getTime())));
        Assert.assertEquals(4, ((int) (((Date) (((Position) (position)).getServerTime())).getDate())));
        Assert.assertEquals(70, ((int) (((Date) (((Position) (position)).getServerTime())).getYear())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getServerTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getServerTime())).getDay())));
        Assert.assertEquals(6, ((int) (((Date) (((Position) (position)).getServerTime())).getHours())));
        Assert.assertEquals(43, ((int) (((Date) (((Position) (position)).getServerTime())).getMinutes())));
        Assert.assertEquals(13, ((int) (((Date) (((Position) (position)).getServerTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getServerTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Jan 04 06:43:13 CET 1970", ((Date) (((Position) (position)).getServerTime())).toString());
        Assert.assertEquals(279793993, ((int) (((Date) (((Position) (position)).getServerTime())).hashCode())));
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg50__8);
    }

    @Test(timeout = 10000)
    public void testToStringlitString27() throws Exception {
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "C");
        String o_testToStringlitString27__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>C</a><b>2</b></info>", o_testToStringlitString27__6);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("C", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
    }

    @Test(timeout = 10000)
    public void testToStringlitString28() throws Exception {
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "");
        String o_testToStringlitString28__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>1</a><b>2</b></info>", o_testToStringlitString28__6);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("1", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
    }

    @Test(timeout = 10000)
    public void testToString_mg39() throws Exception {
        double __DSPOT_accuracy_0 = 0.6760454888695611;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg39__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg39__7);
        position.setAccuracy(__DSPOT_accuracy_0);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.6760454888695611, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg39__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg49() throws Exception {
        String __DSPOT_protocol_10 = "SO/woO!OKS@Rl&{ha!&B";
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg49__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg49__7);
        position.setProtocol(__DSPOT_protocol_10);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertEquals("SO/woO!OKS@Rl&{ha!&B", ((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg49__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg50litNum2568() throws Exception {
        Date __DSPOT_serverTime_11 = new Date(Long.MAX_VALUE);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg50__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg50__8);
        position.setServerTime(__DSPOT_serverTime_11);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertEquals(292277094, ((int) (((Date) (((Position) (position)).getServerTime())).getYear())));
        Assert.assertEquals(7, ((int) (((Date) (((Position) (position)).getServerTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getServerTime())).getDay())));
        Assert.assertEquals(8, ((int) (((Date) (((Position) (position)).getServerTime())).getHours())));
        Assert.assertEquals(12, ((int) (((Date) (((Position) (position)).getServerTime())).getMinutes())));
        Assert.assertEquals(55, ((int) (((Date) (((Position) (position)).getServerTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getServerTime())).getTimezoneOffset())));
        Assert.assertEquals(9223372036854775807L, ((long) (((Date) (((Position) (position)).getServerTime())).getTime())));
        Assert.assertEquals(17, ((int) (((Date) (((Position) (position)).getServerTime())).getDate())));
        Assert.assertEquals("Sun Aug 17 08:12:55 CET 292278994", ((Date) (((Position) (position)).getServerTime())).toString());
        Assert.assertEquals(Integer.MIN_VALUE, ((int) (((Date) (((Position) (position)).getServerTime())).hashCode())));
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg50__8);
    }

    @Test(timeout = 10000)
    public void testToStringlitString14_mg5688() throws Exception {
        Network __DSPOT_network_188 = new Network(new CellTower());
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("\n", "2");
        position.set("a", "3");
        String o_testToStringlitString14__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><\n>2</\n></info>", o_testToStringlitString14__6);
        position.setNetwork(__DSPOT_network_188);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getCellTowers().isEmpty());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("\n"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("\n"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><\n>2</\n></info>", o_testToStringlitString14__6);
    }

    @Test(timeout = 10000)
    public void testToStringlitString13_mg6304() throws Exception {
        double __DSPOT_accuracy_804 = 0.9664190123853226;
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("", "2");
        position.set("a", "3");
        String o_testToStringlitString13__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><>2</></info>", o_testToStringlitString13__6);
        position.setAccuracy(__DSPOT_accuracy_804);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.9664190123853226, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey(""));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get(""));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><>2</></info>", o_testToStringlitString13__6);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_remove5467() throws Exception {
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><b>2</b><a>3</a></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><b>2</b><a>3</a></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_remove37_mg5563() throws Exception {
        double __DSPOT_course_63 = 0.6422959075211429;
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("a", "3");
        String o_testToString_remove37__5 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a></info>", o_testToString_remove37__5);
        position.setCourse(__DSPOT_course_63);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.6422959075211429, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a></info>", o_testToString_remove37__5);
    }

    @Test(timeout = 10000)
    public void testToString_remove37_remove5340() throws Exception {
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "3");
        String o_testToString_remove37__5 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a></info>", o_testToString_remove37__5);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
    }

    @Test(timeout = 10000)
    public void testToString_mg51_mg6198() throws Exception {
        boolean __DSPOT_valid_698 = true;
        double __DSPOT_speed_12 = 0.8093309164938622;
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg51__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg51__7);
        position.setSpeed(__DSPOT_speed_12);
        position.setValid(__DSPOT_valid_698);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.8093309164938622, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertTrue(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg51__7);
    }

    @Test(timeout = 10000)
    public void testToString_remove37_mg5566() throws Exception {
        double __DSPOT_latitude_66 = 0.5883629579837891;
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("a", "3");
        String o_testToString_remove37__5 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a></info>", o_testToString_remove37__5);
        position.setLatitude(__DSPOT_latitude_66);
        Assert.assertEquals(0.5883629579837891, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a></info>", o_testToString_remove37__5);
    }

    @Test(timeout = 10000)
    public void testToString_remove36_mg5597() throws Exception {
        double __DSPOT_longitude_97 = 0.1519296280879494;
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_remove36__5 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><b>2</b><a>3</a></info>", o_testToString_remove36__5);
        position.setLongitude(__DSPOT_longitude_97);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.1519296280879494, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><b>2</b><a>3</a></info>", o_testToString_remove36__5);
    }

    @Test(timeout = 10000)
    public void testToStringlitString18_remove5381() throws Exception {
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "");
        String o_testToStringlitString18__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>1</a></info>", o_testToStringlitString18__6);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("1", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
    }

    @Test(timeout = 10000)
    public void testToString_mg48litBool2665() throws Exception {
        boolean __DSPOT_outdated_9 = true;
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg48__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg48__7);
        position.setOutdated(__DSPOT_outdated_9);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertTrue(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg48__7);
    }

    @Test(timeout = 10000)
    public void testToStringlitString13_mg6306() throws Exception {
        double __DSPOT_altitude_806 = 0.30060549627343236;
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("", "2");
        position.set("a", "3");
        String o_testToStringlitString13__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><>2</></info>", o_testToStringlitString13__6);
        position.setAltitude(__DSPOT_altitude_806);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.30060549627343236, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey(""));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get(""));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><>2</></info>", o_testToStringlitString13__6);
    }

    @Test(timeout = 10000)
    public void testToStringlitString30_mg6357() throws Exception {
        Network __DSPOT_network_857 = new Network();
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", ":");
        String o_testToStringlitString30__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>:</a><b>2</b></info>", o_testToStringlitString30__6);
        position.setNetwork(__DSPOT_network_857);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals(":", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>:</a><b>2</b></info>", o_testToStringlitString30__6);
    }

    @Test(timeout = 10000)
    public void testToStringlitString16_mg5846() throws Exception {
        String __DSPOT_address_346 = "$lX2:BB[^R)LFN[YXs>A";
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "a");
        position.set("a", "3");
        String o_testToStringlitString16__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>a</b></info>", o_testToStringlitString16__6);
        position.setAddress(__DSPOT_address_346);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals("$lX2:BB[^R)LFN[YXs>A", ((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("a", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>a</b></info>", o_testToStringlitString16__6);
    }

    @Test(timeout = 10000)
    public void testToStringlitString9_mg5872() throws Exception {
        double __DSPOT_speed_372 = 0.7816344228839684;
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "\n");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToStringlitString9__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToStringlitString9__6);
        position.setSpeed(__DSPOT_speed_372);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.7816344228839684, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToStringlitString9__6);
    }

    @Test(timeout = 10000)
    public void testToStringlitString30_mg6359() throws Exception {
        String __DSPOT_protocol_859 = "2|K:.0)CVp5h+El_H3)p";
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", ":");
        String o_testToStringlitString30__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>:</a><b>2</b></info>", o_testToStringlitString30__6);
        position.setProtocol(__DSPOT_protocol_859);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertEquals("2|K:.0)CVp5h+El_H3)p", ((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals(":", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>:</a><b>2</b></info>", o_testToStringlitString30__6);
    }

    @Test(timeout = 10000)
    public void testToString_remove38_remove5343_mg25452() throws Exception {
        double __DSPOT_speed_2505 = 0.5257548130492298;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        String o_testToString_remove38__5 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>1</a></info>", o_testToString_remove38__5);
        position.setSpeed(__DSPOT_speed_2505);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.5257548130492298, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("1", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>1</a></info>", o_testToString_remove38__5);
    }

    @Test(timeout = 10000)
    public void testToStringlitString17litString617litString9387() throws Exception {
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "h");
        position.set("a", "");
        String o_testToStringlitString17__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>1</a><b>h</b></info>", o_testToStringlitString17__6);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("1", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("h", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
    }

    @Test(timeout = 10000)
    public void testToStringlitString12_remove5391_mg24162() throws Exception {
        double __DSPOT_latitude_1215 = 0.8769529532552262;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("G", "2");
        position.set("a", "3");
        String o_testToStringlitString12__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><G>2</G><a>3</a></info>", o_testToStringlitString12__6);
        position.setLatitude(__DSPOT_latitude_1215);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.8769529532552262, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("G"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("G"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><G>2</G><a>3</a></info>", o_testToStringlitString12__6);
    }

    @Test(timeout = 10000)
    public void testToString_mg53_mg6036_add22151() throws Exception {
        Date __DSPOT_serverTime_536 = new Date(767670700, -1333416243, 1262081682, 796965536, 337701179);
        boolean __DSPOT_valid_14 = true;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        ((Position) (position)).getOutdated();
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg53__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg53__7);
        position.setValid(__DSPOT_valid_14);
        position.setServerTime(__DSPOT_serverTime_536);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertEquals(75545652, ((int) (((Date) (((Position) (position)).getServerTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getServerTime())).getMonth())));
        Assert.assertEquals(2, ((int) (((Date) (((Position) (position)).getServerTime())).getDay())));
        Assert.assertEquals(10, ((int) (((Date) (((Position) (position)).getServerTime())).getHours())));
        Assert.assertEquals(33, ((int) (((Date) (((Position) (position)).getServerTime())).getMinutes())));
        Assert.assertEquals(8, ((int) (((Date) (((Position) (position)).getServerTime())).getSeconds())));
        Assert.assertEquals(-120, ((int) (((Date) (((Position) (position)).getServerTime())).getTimezoneOffset())));
        Assert.assertEquals(2383988312824388384L, ((long) (((Date) (((Position) (position)).getServerTime())).getTime())));
        Assert.assertEquals(1, ((int) (((Date) (((Position) (position)).getServerTime())).getDate())));
        Assert.assertEquals("Tue Apr 01 10:33:08 CEST 75547552", ((Date) (((Position) (position)).getServerTime())).toString());
        Assert.assertEquals(2004958109, ((int) (((Date) (((Position) (position)).getServerTime())).hashCode())));
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertTrue(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg53__7);
    }

    @Test(timeout = 10000)
    public void testToString_remove37litString280_mg24449() throws Exception {
        Network __DSPOT_network_1502 = new Network(new CellTower());
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "3");
        position.set("a", "3");
        String o_testToString_remove37__5 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a></info>", o_testToString_remove37__5);
        position.setNetwork(__DSPOT_network_1502);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getCellTowers().isEmpty());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a></info>", o_testToString_remove37__5);
    }

    @Test(timeout = 10000)
    public void testToStringlitString17litString617_mg24721() throws Exception {
        String __DSPOT_protocol_1774 = "?a*:zs7w{(a2;KNoQ-C:";
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "h");
        position.set("a", "3");
        String o_testToStringlitString17__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>h</b></info>", o_testToStringlitString17__6);
        position.setProtocol(__DSPOT_protocol_1774);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertEquals("?a*:zs7w{(a2;KNoQ-C:", ((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("h", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>h</b></info>", o_testToStringlitString17__6);
    }

    @Test(timeout = 10000)
    public void testToString_remove37litString280null26725() throws Exception {
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "3");
        position.set("a", "3");
        String o_testToString_remove37__5 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a></info>", o_testToString_remove37__5);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
    }

    @Test(timeout = 10000)
    public void testToStringlitString9null6527_mg23873() throws Exception {
        double __DSPOT_altitude_926 = 0.8802553330331747;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "\n");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToStringlitString9__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToStringlitString9__6);
        position.setAltitude(__DSPOT_altitude_926);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.8802553330331747, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToStringlitString9__6);
    }

    @Test(timeout = 10000)
    public void testToStringlitString17litString617_mg24712() throws Exception {
        String __DSPOT_address_1765 = "3y.?w}Q]mzFB[%#4 t5+";
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "h");
        position.set("a", "3");
        String o_testToStringlitString17__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>h</b></info>", o_testToStringlitString17__6);
        position.setAddress(__DSPOT_address_1765);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals("3y.?w}Q]mzFB[%#4 t5+", ((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("h", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>h</b></info>", o_testToStringlitString17__6);
    }

    @Test(timeout = 10000)
    public void testToString_mg52litNum2606null27721() throws Exception {
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 0, -451956994);
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        Assert.assertEquals(97502700, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(12, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(23, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3077073291702994000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(15, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 15 12:23:26 CET 97504600", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(964653460, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertEquals(97502700, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(12, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(23, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertEquals(-3077073291702994000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(15, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 15 12:23:26 CET 97504600", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(964653460, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToStringlitString15_remove5382_mg25590() throws Exception {
        double __DSPOT_accuracy_2643 = 0.870480348482059;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set(":", "2");
        position.set("a", "3");
        String o_testToStringlitString15__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><:>2</:><a>3</a></info>", o_testToStringlitString15__6);
        position.setAccuracy(__DSPOT_accuracy_2643);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.870480348482059, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey(":"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get(":"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><:>2</:><a>3</a></info>", o_testToStringlitString15__6);
    }

    @Test(timeout = 10000)
    public void testToString_mg53_mg6031_add18456() throws Exception {
        double __DSPOT_latitude_531 = 0.05038015866823786;
        boolean __DSPOT_valid_14 = true;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        ((Position) (position)).getAttributes().isEmpty();
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg53__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg53__7);
        position.setValid(__DSPOT_valid_14);
        position.setLatitude(__DSPOT_latitude_531);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.05038015866823786, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertTrue(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg53__7);
    }

    @Test(timeout = 10000)
    public void testToStringlitString16litString968_mg24704() throws Exception {
        Network __DSPOT_network_1757 = new Network();
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "a");
        position.set("a", "3");
        String o_testToStringlitString16__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>a</b></info>", o_testToStringlitString16__6);
        position.setNetwork(__DSPOT_network_1757);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("a", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>a</b></info>", o_testToStringlitString16__6);
    }

    @Test(timeout = 10000)
    public void testToString_mg52litNum2606_mg26335() throws Exception {
        double __DSPOT_longitude_3388 = 0.8292091473256851;
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 0, -451956994);
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setLongitude(__DSPOT_longitude_3388);
        Assert.assertEquals(97502700, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(12, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(23, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3077073291702994000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(15, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 15 12:23:26 CET 97504600", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(964653460, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.8292091473256851, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertEquals(97502700, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(12, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(23, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertEquals(-3077073291702994000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(15, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 15 12:23:26 CET 97504600", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(964653460, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_remove37litString285_mg25794() throws Exception {
        boolean __DSPOT_outdated_2847 = true;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("1", "3");
        String o_testToString_remove37__5 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>1</a><1>3</1></info>", o_testToString_remove37__5);
        position.setOutdated(__DSPOT_outdated_2847);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertTrue(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("1", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("1"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("1"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>1</a><1>3</1></info>", o_testToString_remove37__5);
    }
}

