package org.traccar.model;


import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import org.junit.Assert;
import org.junit.Test;


public class AmplMiscFormatterTest {
    @Test(timeout = 10000)
    public void testToString() throws Exception {
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString__6);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
    }

    @Test(timeout = 10000)
    public void testToString_mg42() throws Exception {
        double __DSPOT_course_3 = 0.09733608441735975;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg42__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg42__7);
        position.setCourse(__DSPOT_course_3);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.09733608441735975, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg42__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg53() throws Exception {
        boolean __DSPOT_valid_14 = true;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg53__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg53__7);
        position.setValid(__DSPOT_valid_14);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertTrue(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg53__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg51() throws Exception {
        double __DSPOT_speed_12 = 0.8093309164938622;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg51__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg51__7);
        position.setSpeed(__DSPOT_speed_12);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.8093309164938622, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg51__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg40() throws Exception {
        String __DSPOT_address_1 = "!x*zH_,y(q2 5[gpbL[{";
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg40__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg40__7);
        position.setAddress(__DSPOT_address_1);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertEquals("!x*zH_,y(q2 5[gpbL[{", ((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg40__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg41() throws Exception {
        double __DSPOT_altitude_2 = 0.10089601329744369;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg41__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg41__7);
        position.setAltitude(__DSPOT_altitude_2);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.10089601329744369, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg41__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg52() throws Exception {
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg46() throws Exception {
        double __DSPOT_longitude_7 = 0.5949639977154475;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg46__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg46__7);
        position.setLongitude(__DSPOT_longitude_7);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.5949639977154475, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg46__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg47() throws Exception {
        Network __DSPOT_network_8 = new Network(new CellTower());
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg47__9 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg47__9);
        position.setNetwork(__DSPOT_network_8);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getCellTowers().isEmpty());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg47__9);
    }

    @Test(timeout = 10000)
    public void testToString_mg45() throws Exception {
        double __DSPOT_latitude_6 = 0.7036897094148656;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg45__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg45__7);
        position.setLatitude(__DSPOT_latitude_6);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.7036897094148656, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg45__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg50() throws Exception {
        Date __DSPOT_serverTime_11 = new Date(279793993L);
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg50__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg50__8);
        position.setServerTime(__DSPOT_serverTime_11);
        Assert.assertEquals(279793993L, ((long) (((Date) (((Position) (position)).getServerTime())).getTime())));
        Assert.assertEquals(4, ((int) (((Date) (((Position) (position)).getServerTime())).getDate())));
        Assert.assertEquals("Sun Jan 04 06:43:13 CET 1970", ((Date) (((Position) (position)).getServerTime())).toString());
        Assert.assertEquals(279793993, ((int) (((Date) (((Position) (position)).getServerTime())).hashCode())));
        Assert.assertEquals(70, ((int) (((Date) (((Position) (position)).getServerTime())).getYear())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getServerTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getServerTime())).getDay())));
        Assert.assertEquals(6, ((int) (((Date) (((Position) (position)).getServerTime())).getHours())));
        Assert.assertEquals(43, ((int) (((Date) (((Position) (position)).getServerTime())).getMinutes())));
        Assert.assertEquals(13, ((int) (((Date) (((Position) (position)).getServerTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getServerTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg50__8);
    }

    @Test(timeout = 10000)
    public void testToStringlitString28() throws Exception {
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "");
        String o_testToStringlitString28__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>1</a><b>2</b></info>", o_testToStringlitString28__6);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("1", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
    }

    @Test(timeout = 10000)
    public void testToString_mg39() throws Exception {
        double __DSPOT_accuracy_0 = 0.8644860611555856;
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg39__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg39__7);
        position.setAccuracy(__DSPOT_accuracy_0);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.8644860611555856, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg39__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg49() throws Exception {
        String __DSPOT_protocol_10 = "SO/woO!OKS@Rl&{ha!&B";
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg49__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg49__7);
        position.setProtocol(__DSPOT_protocol_10);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertEquals("SO/woO!OKS@Rl&{ha!&B", ((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg49__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4169() throws Exception {
        double __DSPOT_latitude_492 = 0.8965260172344848;
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setLatitude(__DSPOT_latitude_492);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.8965260172344848, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4159() throws Exception {
        double __DSPOT_course_489 = 0.9013952525437222;
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setCourse(__DSPOT_course_489);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.9013952525437222, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4124() throws Exception {
        String __DSPOT_address_487 = ":+bP*EC3,N &Q/Y_a,qU";
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setAddress(__DSPOT_address_487);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(":+bP*EC3,N &Q/Y_a,qU", ((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4201() throws Exception {
        String __DSPOT_protocol_506 = "CZ;6xP0<S_F6rq5 w=#@";
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setProtocol(__DSPOT_protocol_506);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertEquals("CZ;6xP0<S_F6rq5 w=#@", ((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4127() throws Exception {
        double __DSPOT_altitude_488 = 0.6124403785219414;
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setAltitude(__DSPOT_altitude_488);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.6124403785219414, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_add3836() throws Exception {
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        ((Date) (((Position) (position)).getDeviceTime())).toString();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4193() throws Exception {
        double __DSPOT_longitude_498 = 0.2908355170353093;
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setLongitude(__DSPOT_longitude_498);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.2908355170353093, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4121() throws Exception {
        double __DSPOT_accuracy_486 = 0.3026211750721345;
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setAccuracy(__DSPOT_accuracy_486);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.3026211750721345, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196() throws Exception {
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4230() throws Exception {
        double __DSPOT_speed_513 = 0.12758010500023398;
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setSpeed(__DSPOT_speed_513);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.12758010500023398, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9671() throws Exception {
        double __DSPOT_altitude_1023 = 0.4024327920171612;
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        position.setAltitude(__DSPOT_altitude_1023);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.4024327920171612, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9691() throws Exception {
        double __DSPOT_longitude_1028 = 0.676460183073611;
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        position.setLongitude(__DSPOT_longitude_1028);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.676460183073611, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9697() throws Exception {
        Network __DSPOT_network_1029 = new Network(new CellTower());
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        position.setNetwork(__DSPOT_network_1029);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getCellTowers().isEmpty());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9620() throws Exception {
        Collection<CellTower> __DSPOT_cellTowers_1011 = Collections.singletonList(new CellTower());
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        __DSPOT_network_501.setCellTowers(__DSPOT_cellTowers_1011);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getCellTowers().isEmpty());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9642() throws Exception {
        String __DSPOT_radioType_1019 = "g$qW!BVvY_SF;HS89JXe";
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        __DSPOT_network_501.setRadioType(__DSPOT_radioType_1019);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("g$qW!BVvY_SF;HS89JXe", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196litString8905() throws Exception {
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9676() throws Exception {
        double __DSPOT_course_1024 = 0.49553164802976946;
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        position.setCourse(__DSPOT_course_1024);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.49553164802976946, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9687() throws Exception {
        double __DSPOT_latitude_1027 = 0.5728417142074252;
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        position.setLatitude(__DSPOT_latitude_1027);
        Assert.assertEquals(0.5728417142074252, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9662() throws Exception {
        double __DSPOT_accuracy_1021 = 0.6222733731854092;
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        position.setAccuracy(__DSPOT_accuracy_1021);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.6222733731854092, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9721() throws Exception {
        double __DSPOT_speed_1033 = 0.22434323909648812;
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        position.setSpeed(__DSPOT_speed_1033);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.22434323909648812, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9666() throws Exception {
        String __DSPOT_address_1022 = "v_0tPJ#I@rL.{XK2uP_o";
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        position.setAddress(__DSPOT_address_1022);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals("v_0tPJ#I@rL.{XK2uP_o", ((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9645() throws Exception {
        Collection<WifiAccessPoint> __DSPOT_wifiAccessPoints_1020 = Collections.<WifiAccessPoint>emptyList();
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        __DSPOT_network_501.setWifiAccessPoints(__DSPOT_wifiAccessPoints_1020);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertTrue(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints().isEmpty());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9617() throws Exception {
        String __DSPOT_carrier_1007 = "PrJhA8(Z(aR?[cHzh!p{";
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        __DSPOT_network_501.setCarrier(__DSPOT_carrier_1007);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertEquals("PrJhA8(Z(aR?[cHzh!p{", ((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9629() throws Exception {
        Integer __DSPOT_homeMobileNetworkCode_1015 = 1738842581;
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        __DSPOT_network_501.setHomeMobileNetworkCode(__DSPOT_homeMobileNetworkCode_1015);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertEquals(1738842581, ((int) (((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode())));
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9703() throws Exception {
        boolean __DSPOT_outdated_1030 = true;
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        position.setOutdated(__DSPOT_outdated_1030);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertTrue(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9604() throws Exception {
        WifiAccessPoint __DSPOT_wifiAccessPoint_1000 = new WifiAccessPoint();
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        __DSPOT_network_501.addWifiAccessPoint(__DSPOT_wifiAccessPoint_1000);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints().isEmpty());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9626() throws Exception {
        Integer __DSPOT_homeMobileCountryCode_1014 = -1511167817;
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        __DSPOT_network_501.setHomeMobileCountryCode(__DSPOT_homeMobileCountryCode_1014);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(-1511167817, ((int) (((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode())));
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9715() throws Exception {
        Date __DSPOT_serverTime_1032 = new Date(-2025633511, 1165815518, -1188831721);
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        position.setServerTime(__DSPOT_serverTime_1032);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertEquals(-5620755485223745152L, ((long) (((Date) (((Position) (position)).getServerTime())).getTime())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getServerTime())).getDate())));
        Assert.assertEquals("Tue Jul 26 19:17:34 CET 178109025", ((Date) (((Position) (position)).getServerTime())).toString());
        Assert.assertEquals(1008081194, ((int) (((Date) (((Position) (position)).getServerTime())).hashCode())));
        Assert.assertEquals(178107125, ((int) (((Date) (((Position) (position)).getServerTime())).getYear())));
        Assert.assertEquals(6, ((int) (((Date) (((Position) (position)).getServerTime())).getMonth())));
        Assert.assertEquals(2, ((int) (((Date) (((Position) (position)).getServerTime())).getDay())));
        Assert.assertEquals(19, ((int) (((Date) (((Position) (position)).getServerTime())).getHours())));
        Assert.assertEquals(17, ((int) (((Date) (((Position) (position)).getServerTime())).getMinutes())));
        Assert.assertEquals(34, ((int) (((Date) (((Position) (position)).getServerTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getServerTime())).getTimezoneOffset())));
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196_mg9709() throws Exception {
        String __DSPOT_protocol_1031 = "OLxY[s=ns5,U.Y[?;Ytm";
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        position.setProtocol(__DSPOT_protocol_1031);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertEquals("OLxY[s=ns5,U.Y[?;Ytm", ((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg52_mg4196litString8984() throws Exception {
        Network __DSPOT_network_501 = new Network();
        Date __DSPOT_time_13 = new Date(-15911933, -1014115561, 1065588677, -20548404, 2129087437, -451956994);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg52__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
        position.setTime(__DSPOT_time_13);
        position.setNetwork(__DSPOT_network_501);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCellTowers());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals(-3076945546456774000L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(16, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals("Sun Apr 16 11:00:26 CET 97500552", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(997536963, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(97498652, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(3, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(11, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(26, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg52__8);
    }
}

