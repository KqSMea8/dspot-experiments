package org.traccar.model;


import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import org.junit.Assert;
import org.junit.Test;


public class AmplMiscFormatterTest {
    @Test(timeout = 10000)
    public void testToString() throws Exception {
        Position position = new Position();
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString__6);
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
    }

    @Test(timeout = 10000)
    public void testToString_mg64() throws Exception {
        String __DSPOT_protocol_10 = "SO/woO!OKS@Rl&{ha!&B";
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg64__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg64__7);
        position.setProtocol(__DSPOT_protocol_10);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertEquals("SO/woO!OKS@Rl&{ha!&B", ((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg64__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg54() throws Exception {
        double __DSPOT_accuracy_0 = 0.8644860611555856;
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg54__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg54__7);
        position.setAccuracy(__DSPOT_accuracy_0);
        Assert.assertEquals(0.8644860611555856, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg54__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg65() throws Exception {
        Date __DSPOT_serverTime_11 = new Date(279793993, -818917466, 1743679250);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg65__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg65__8);
        position.setServerTime(__DSPOT_serverTime_11);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertEquals(6826552354533600000L, ((long) (((Date) (((Position) (position)).getServerTime())).getTime())));
        Assert.assertEquals(20, ((int) (((Date) (((Position) (position)).getServerTime())).getDate())));
        Assert.assertEquals(216324902, ((int) (((Date) (((Position) (position)).getServerTime())).getYear())));
        Assert.assertEquals(5, ((int) (((Date) (((Position) (position)).getServerTime())).getMonth())));
        Assert.assertEquals(4, ((int) (((Date) (((Position) (position)).getServerTime())).getDay())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getServerTime())).getHours())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getServerTime())).getMinutes())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getServerTime())).getSeconds())));
        Assert.assertEquals(-120, ((int) (((Date) (((Position) (position)).getServerTime())).getTimezoneOffset())));
        Assert.assertEquals("Thu Jun 20 00:00:00 CEST 216326802", ((Date) (((Position) (position)).getServerTime())).toString());
        Assert.assertEquals(-98033102, ((int) (((Date) (((Position) (position)).getServerTime())).hashCode())));
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg65__8);
    }

    @Test(timeout = 10000)
    public void testToString_mg62() throws Exception {
        Network __DSPOT_network_8 = new Network(new CellTower());
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg62__9 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg62__9);
        position.setNetwork(__DSPOT_network_8);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileCountryCode());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getHomeMobileNetworkCode());
        Assert.assertEquals("gsm", ((Network) (((Position) (position)).getNetwork())).getRadioType());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getCarrier());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getConsiderIp());
        Assert.assertFalse(((Network) (((Position) (position)).getNetwork())).getCellTowers().isEmpty());
        Assert.assertNull(((Network) (((Position) (position)).getNetwork())).getWifiAccessPoints());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg62__9);
    }

    @Test(timeout = 10000)
    public void testToString_mg68() throws Exception {
        boolean __DSPOT_valid_14 = true;
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg68__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg68__7);
        position.setValid(__DSPOT_valid_14);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertTrue(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg68__7);
    }

    @Test(timeout = 10000)
    public void testToStringlitString28() throws Exception {
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "");
        String o_testToStringlitString28__6 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>1</a><b>2</b></info>", o_testToStringlitString28__6);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("1", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
    }

    @Test(timeout = 10000)
    public void testToString_mg55() throws Exception {
        String __DSPOT_address_1 = "!x*zH_,y(q2 5[gpbL[{";
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg55__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg55__7);
        position.setAddress(__DSPOT_address_1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertEquals("!x*zH_,y(q2 5[gpbL[{", ((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg55__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg56() throws Exception {
        double __DSPOT_altitude_2 = 0.10089601329744369;
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg56__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg56__7);
        position.setAltitude(__DSPOT_altitude_2);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.10089601329744369, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg56__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg67() throws Exception {
        Date __DSPOT_time_13 = new Date(1065588677L);
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg67__8 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg67__8);
        position.setTime(__DSPOT_time_13);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertEquals(1065588677L, ((long) (((Date) (((Position) (position)).getDeviceTime())).getTime())));
        Assert.assertEquals(13, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDate())));
        Assert.assertEquals(70, ((int) (((Date) (((Position) (position)).getDeviceTime())).getYear())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMonth())));
        Assert.assertEquals(2, ((int) (((Date) (((Position) (position)).getDeviceTime())).getDay())));
        Assert.assertEquals(8, ((int) (((Date) (((Position) (position)).getDeviceTime())).getHours())));
        Assert.assertEquals(59, ((int) (((Date) (((Position) (position)).getDeviceTime())).getMinutes())));
        Assert.assertEquals(48, ((int) (((Date) (((Position) (position)).getDeviceTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getDeviceTime())).getTimezoneOffset())));
        Assert.assertEquals("Tue Jan 13 08:59:48 CET 1970", ((Date) (((Position) (position)).getDeviceTime())).toString());
        Assert.assertEquals(1065588677, ((int) (((Date) (((Position) (position)).getDeviceTime())).hashCode())));
        Assert.assertEquals(1065588677L, ((long) (((Date) (((Position) (position)).getFixTime())).getTime())));
        Assert.assertEquals(13, ((int) (((Date) (((Position) (position)).getFixTime())).getDate())));
        Assert.assertEquals(70, ((int) (((Date) (((Position) (position)).getFixTime())).getYear())));
        Assert.assertEquals(0, ((int) (((Date) (((Position) (position)).getFixTime())).getMonth())));
        Assert.assertEquals(2, ((int) (((Date) (((Position) (position)).getFixTime())).getDay())));
        Assert.assertEquals(8, ((int) (((Date) (((Position) (position)).getFixTime())).getHours())));
        Assert.assertEquals(59, ((int) (((Date) (((Position) (position)).getFixTime())).getMinutes())));
        Assert.assertEquals(48, ((int) (((Date) (((Position) (position)).getFixTime())).getSeconds())));
        Assert.assertEquals(-60, ((int) (((Date) (((Position) (position)).getFixTime())).getTimezoneOffset())));
        Assert.assertEquals("Tue Jan 13 08:59:48 CET 1970", ((Date) (((Position) (position)).getFixTime())).toString());
        Assert.assertEquals(1065588677, ((int) (((Date) (((Position) (position)).getFixTime())).hashCode())));
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg67__8);
    }

    @Test(timeout = 10000)
    public void testToStringnull81() throws Exception {
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
    }

    @Test(timeout = 10000)
    public void testToString_mg60() throws Exception {
        double __DSPOT_latitude_6 = 0.7036897094148656;
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg60__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg60__7);
        position.setLatitude(__DSPOT_latitude_6);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.7036897094148656, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg60__7);
    }

    @Test(timeout = 10000)
    public void testToString_mg61() throws Exception {
        double __DSPOT_longitude_7 = 0.5949639977154475;
        Position position = new Position();
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        position.set("a", "1");
        position.set("b", "2");
        position.set("a", "3");
        String o_testToString_mg61__7 = MiscFormatter.toXmlString(position.getAttributes());
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg61__7);
        position.setLongitude(__DSPOT_longitude_7);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
        Assert.assertNull(((Position) (position)).getDeviceTime());
        Assert.assertNull(((Position) (position)).getFixTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
        Assert.assertEquals(0.5949639977154475, ((double) (((Position) (position)).getLongitude())), 0.1);
        Assert.assertNull(((Position) (position)).getNetwork());
        Assert.assertFalse(((Position) (position)).getOutdated());
        Assert.assertNull(((Position) (position)).getServerTime());
        Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
        Assert.assertFalse(((Position) (position)).getValid());
        Assert.assertNull(((Position) (position)).getAddress());
        Assert.assertNull(((Position) (position)).getType());
        Assert.assertNull(((Position) (position)).getProtocol());
        Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("a"));
        Assert.assertEquals("3", ((org.traccar.model.Position)position).getAttributes().get("a"));
        Assert.assertTrue(((org.traccar.model.Position)position).getAttributes().containsKey("b"));
        Assert.assertEquals("2", ((org.traccar.model.Position)position).getAttributes().get("b"));
        Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
        Assert.assertEquals("<info><a>3</a><b>2</b></info>", o_testToString_mg61__7);
    }

    @Test(timeout = 10000)
    public void testToStringnull83_failAssert3_mg17667() throws Exception {
        try {
            double __DSPOT_accuracy_1065 = 0.19988582491730855;
            Position position = new Position();
            Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
            Assert.assertFalse(((Position) (position)).getValid());
            Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
            Assert.assertNull(((Position) (position)).getFixTime());
            Assert.assertNull(((Position) (position)).getNetwork());
            Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
            Assert.assertFalse(((Position) (position)).getOutdated());
            Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
            Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
            Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
            Assert.assertNull(((Position) (position)).getDeviceTime());
            Assert.assertNull(((Position) (position)).getServerTime());
            Assert.assertNull(((Position) (position)).getAddress());
            Assert.assertNull(((Position) (position)).getType());
            Assert.assertNull(((Position) (position)).getProtocol());
            Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
            Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
            Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
            position.set("a", "1");
            position.set("b", "2");
            position.set("a", "3");
            MiscFormatter.toXmlString(null);
            org.junit.Assert.fail("testToStringnull83 should have thrown NullPointerException");
            position.setAccuracy(__DSPOT_accuracy_1065);
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void testToStringnull83_failAssert3_mg17684_mg24048() throws Exception {
        try {
            Collection<WifiAccessPoint> __DSPOT_wifiAccessPoints_1614 = Collections.singletonList(new WifiAccessPoint());
            Network __DSPOT_network_1073 = new Network();
            Position position = new Position();
            Assert.assertEquals(0.0, ((double) (((Position) (position)).getSpeed())), 0.1);
            Assert.assertFalse(((Position) (position)).getValid());
            Assert.assertEquals(0.0, ((double) (((Position) (position)).getCourse())), 0.1);
            Assert.assertNull(((Position) (position)).getFixTime());
            Assert.assertNull(((Position) (position)).getNetwork());
            Assert.assertEquals(0.0, ((double) (((Position) (position)).getAccuracy())), 0.1);
            Assert.assertFalse(((Position) (position)).getOutdated());
            Assert.assertEquals(0.0, ((double) (((Position) (position)).getLatitude())), 0.1);
            Assert.assertEquals(0.0, ((double) (((Position) (position)).getAltitude())), 0.1);
            Assert.assertEquals(0.0, ((double) (((Position) (position)).getLongitude())), 0.1);
            Assert.assertNull(((Position) (position)).getDeviceTime());
            Assert.assertNull(((Position) (position)).getServerTime());
            Assert.assertNull(((Position) (position)).getAddress());
            Assert.assertNull(((Position) (position)).getType());
            Assert.assertNull(((Position) (position)).getProtocol());
            Assert.assertEquals(0L, ((long) (((Position) (position)).getDeviceId())));
            Assert.assertTrue(((Position) (position)).getAttributes().isEmpty());
            Assert.assertEquals(0L, ((long) (((Position) (position)).getId())));
            position.set("a", "1");
            position.set("b", "2");
            position.set("a", "3");
            MiscFormatter.toXmlString(null);
            org.junit.Assert.fail("testToStringnull83 should have thrown NullPointerException");
            position.setNetwork(__DSPOT_network_1073);
            __DSPOT_network_1073.setWifiAccessPoints(__DSPOT_wifiAccessPoints_1614);
        } catch (NullPointerException expected) {
        }
    }
}

