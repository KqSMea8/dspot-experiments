/**
 * Logback: the reliable, generic, fast and flexible logging framework.
 * Copyright (C) 1999-2015, QOS.ch. All rights reserved.
 *
 * This program and the accompanying materials are dual-licensed under
 * either the terms of the Eclipse Public License v1.0 as published by
 * the Eclipse Foundation
 *
 *   or (per the licensee's choosing)
 *
 * under the terms of the GNU Lesser General Public License version 2.1
 * as published by the Free Software Foundation.
 */


package ch.qos.logback.core.rolling.helper;


/**
 * @author Ceki
 */
public class AmplFileNamePatternTest {
    ch.qos.logback.core.Context context = new ch.qos.logback.core.ContextBase();

    @org.junit.Test
    public void testSmoke() {
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("t", context);
        org.junit.Assert.assertEquals("t", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo", context);
        org.junit.Assert.assertEquals("foo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("%i foo", context);
        org.junit.Assert.assertEquals("3 foo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i.xixo", context);
        org.junit.Assert.assertEquals("foo3.xixo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i.log", context);
        org.junit.Assert.assertEquals("foo3.log", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo.%i.log", context);
        org.junit.Assert.assertEquals("foo.3.log", pp.convertInt(3));
        // pp = new FileNamePattern("%i.foo\\%", context);
        // assertEquals("3.foo%", pp.convertInt(3));
        // pp = new FileNamePattern("\\%foo", context);
        // assertEquals("%foo", pp.convertInt(3));
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    @org.junit.Test
    public void flowingI() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
    }

    @org.junit.Test
    public void date() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy.MM.dd}", context);
        org.junit.Assert.assertEquals("foo2003.05.20", pp.convert(cal.getTime()));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy.MM.dd HH:mm}", context);
        org.junit.Assert.assertEquals("foo2003.05.20 17:55", pp.convert(cal.getTime()));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("%d{yyyy.MM.dd HH:mm} foo", context);
        org.junit.Assert.assertEquals("2003.05.20 17:55 foo", pp.convert(cal.getTime()));
    }

    @org.junit.Test
    public void dateWithTimeZone() {
        java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC");
        java.util.Calendar cal = java.util.Calendar.getInstance(utc);
        cal.set(2003, 4, 20, 10, 55);
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy-MM-dd'T'HH:mm, Australia/Perth}", context);
        // Perth is 8 hours ahead of UTC
        org.junit.Assert.assertEquals("foo2003-05-20T18:55", fnp.convert(cal.getTime()));
    }

    @org.junit.Test
    public void auxAndTimeZoneShouldNotConflict() {
        java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC");
        java.util.Calendar cal = java.util.Calendar.getInstance(utc);
        cal.set(2003, 4, 20, 10, 55);
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy-MM-dd'T'HH:mm, aux, Australia/Perth}", context);
            // Perth is 8 hours ahead of UTC
            org.junit.Assert.assertEquals("foo2003-05-20T18:55", fnp.convert(cal.getTime()));
            org.junit.Assert.assertNull(fnp.getPrimaryDateTokenConverter());
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("folder/%d{yyyy/MM, aux, Australia/Perth}/test.%d{yyyy-MM-dd'T'HHmm, Australia/Perth}.log", context);
            org.junit.Assert.assertEquals("folder/2003/05/test.2003-05-20T1855.log", fnp.convert(cal.getTime()));
            org.junit.Assert.assertNotNull(fnp.getPrimaryDateTokenConverter());
        }
    }

    @org.junit.Test
    public void withBackslash() {
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
        org.junit.Assert.assertEquals("c:/foo/bar.3", pp.convertInt(3));
    }

    @org.junit.Test
    public void objectListConverter() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
        org.junit.Assert.assertEquals("foo-2003.05.20-79.txt", fnp.convertMultipleArguments(cal.getTime(), 79));
    }

    @org.junit.Test
    public void asRegexByDate() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            org.junit.Assert.assertEquals("foo-2003.05.20-(\\d{1,3}).txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("\\toto\\foo-%d{yyyy\\MM\\dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            org.junit.Assert.assertEquals("/toto/foo-2003/05/20-(\\d{1,3}).txt", regex);
        }
    }

    @org.junit.Test
    public void asRegex() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}-\\d{1,2}.txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd'T'}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}T-\\d{1,2}.txt", regex);
        }
    }

    @org.junit.Test
    public void convertMultipleDates() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt", context);
        org.junit.Assert.assertEquals("foo-2003.05/2003.05.20.txt", fnp.convert(cal.getTime()));
    }

    @org.junit.Test
    public void nullTimeZoneByDefault() {
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("%d{hh}", context);
        org.junit.Assert.assertNull(fnp.getPrimaryDateTokenConverter().getTimeZone());
    }

    @org.junit.Test
    public void settingTimeZoneOptionHasAnEffect() {
        java.util.TimeZone tz = java.util.TimeZone.getTimeZone("Australia/Perth");
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern((("%d{hh, " + (tz.getID())) + "}"), context);
        org.junit.Assert.assertEquals(tz, fnp.getPrimaryDateTokenConverter().getTimeZone());
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegex */
    @org.junit.Test(timeout = 10000)
    public void asRegex_cf23() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}-\\d{1,2}.txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd'T'}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            // StatementAdderOnAssert create null value
            java.lang.Object vc_2 = (java.lang.Object)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_2);
            // AssertGenerator replace invocation
            boolean o_asRegex_cf23__14 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_2);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_asRegex_cf23__14);
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}T-\\d{1,2}.txt", regex);
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegex */
    @org.junit.Test(timeout = 10000)
    public void asRegex_cf34() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}-\\d{1,2}.txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd'T'}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            // AssertGenerator replace invocation
            ch.qos.logback.core.rolling.helper.IntegerTokenConverter o_asRegex_cf34__12 = // StatementAdderMethod cloned existing statement
fnp.getIntegerTokenConverter();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegex_cf34__12).getNext()).getNext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegex_cf34__12).getFormattingInfo());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegex_cf34__12).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegex_cf34__12).getFirstOption());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegex_cf34__12).isStarted());
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}T-\\d{1,2}.txt", regex);
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegex */
    @org.junit.Test(timeout = 10000)
    public void asRegex_cf88() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}-\\d{1,2}.txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd'T'}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            // StatementAdderMethod cloned existing statement
            fnp.parse();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_115024925 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_115024925, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getNext()).getNext());
            // AssertGenerator add assertion
            java.util.ArrayList collection_2073671806 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2073671806, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getFirstOption());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getDatePattern());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1469119857 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1469119857, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1365912461 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1365912461, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isPrimary());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getFormattingInfo());
            // AssertGenerator add assertion
            java.util.HashMap map_340942082 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_340942082, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "foo-%d{yyyy.MM.dd'T'}-%i.txt");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFirstOption(), "yyyy.MM.dd'T'");
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getTimeZone());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            java.util.ArrayList collection_671105473 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_671105473, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_431358282 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_431358282, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1396564503 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1396564503, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFormattingInfo());
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}T-\\d{1,2}.txt", regex);
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegex */
    @org.junit.Test(timeout = 10000)
    public void asRegex_cf73() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}-\\d{1,2}.txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd'T'}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            // AssertGenerator replace invocation
            java.lang.String o_asRegex_cf73__12 = // StatementAdderMethod cloned existing statement
fnp.getPattern();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_asRegex_cf73__12, "foo-%d{yyyy.MM.dd'T'}-%i.txt");
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}T-\\d{1,2}.txt", regex);
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegex */
    @org.junit.Test(timeout = 10000)
    public void asRegex_cf80_failAssert43() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegex();
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd'T'}-%i.txt", context);
                java.lang.String regex = fnp.toRegex();
                // StatementAdderOnAssert create null value
                java.util.Date vc_33 = (java.util.Date)null;
                // StatementAdderMethod cloned existing statement
                fnp.toRegexForFixedDate(vc_33);
            }
            org.junit.Assert.fail("asRegex_cf80 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegex */
    @org.junit.Test(timeout = 10000)
    public void asRegex_cf48_failAssert31() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegex();
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd'T'}-%i.txt", context);
                java.lang.String regex = fnp.toRegex();
                // StatementAdderOnAssert create random local variable
                int vc_18 = -536654171;
                // StatementAdderMethod cloned existing statement
                fnp.convertInt(vc_18);
            }
            org.junit.Assert.fail("asRegex_cf48 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegex */
    @org.junit.Test(timeout = 10000)
    public void asRegex_cf37() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}-\\d{1,2}.txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd'T'}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            // AssertGenerator replace invocation
            int o_asRegex_cf37__12 = // StatementAdderMethod cloned existing statement
fnp.hashCode();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_asRegex_cf37__12, 1206161242);
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}T-\\d{1,2}.txt", regex);
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegex */
    @org.junit.Test(timeout = 10000)
    public void asRegex_cf24() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}-\\d{1,2}.txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd'T'}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_3 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_asRegex_cf24__14 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_3);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_asRegex_cf24__14);
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}T-\\d{1,2}.txt", regex);
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegex */
    @org.junit.Test(timeout = 10000)
    public void asRegex_cf66_cf1387_cf3838() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}-\\d{1,2}.txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd'T'}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_26 = new java.lang.String();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_26, "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_26, "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_26, "");
            // AssertGenerator replace invocation
            java.lang.String o_asRegex_cf66__14 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(vc_26);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_asRegex_cf66__14, "foo-%d{yyyy.MM.dd'T'}-%i.txt");
            // AssertGenerator replace invocation
            java.lang.String o_asRegex_cf66_cf1387__20 = // StatementAdderMethod cloned existing statement
fnp.toString();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_asRegex_cf66_cf1387__20, "foo-%d{yyyy.MM.dd'T'}-%i.txt");
            // AssertGenerator replace invocation
            ch.qos.logback.core.rolling.helper.IntegerTokenConverter o_asRegex_cf66_cf1387_cf3838__26 = // StatementAdderMethod cloned existing statement
fnp.getIntegerTokenConverter();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegex_cf66_cf1387_cf3838__26).getFirstOption());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegex_cf66_cf1387_cf3838__26).getNext()).getNext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegex_cf66_cf1387_cf3838__26).getFormattingInfo());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegex_cf66_cf1387_cf3838__26).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegex_cf66_cf1387_cf3838__26).isStarted());
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}T-\\d{1,2}.txt", regex);
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegex */
    @org.junit.Test(timeout = 10000)
    public void asRegex_cf73_cf1441_cf4545_failAssert39() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegex();
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd'T'}-%i.txt", context);
                java.lang.String regex = fnp.toRegex();
                // AssertGenerator replace invocation
                java.lang.String o_asRegex_cf73__12 = // StatementAdderMethod cloned existing statement
fnp.getPattern();
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_asRegex_cf73__12, "foo-%d{yyyy.MM.dd'T'}-%i.txt");
                // StatementAdderOnAssert create random local variable
                java.lang.Object vc_433 = new java.lang.Object();
                // AssertGenerator replace invocation
                boolean o_asRegex_cf73_cf1441__18 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_433);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(o_asRegex_cf73_cf1441__18);
                // StatementAdderOnAssert create null value
                ch.qos.logback.core.rolling.helper.FileNamePattern vc_1231 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
                // StatementAdderMethod cloned existing statement
                vc_1231.getPattern();
            }
            org.junit.Assert.fail("asRegex_cf73_cf1441_cf4545 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegex */
    @org.junit.Test(timeout = 10000)
    public void asRegex_cf90_failAssert46_literalMutation1812_literalMutation2125() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("?bfZ`LvH&)da1WGLR`6=x(Yr#", context);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
                // AssertGenerator add assertion
                java.util.ArrayList collection_2067119238 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2067119238, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1174424458 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1174424458, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "?bfZ`LvH&)da1WGLR`6=x(Yr#");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                java.util.ArrayList collection_2057849553 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2057849553, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1223653618 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1223653618, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                java.util.HashMap map_1584054522 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1584054522, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "?bfZ`LvH&)da1WGLR`6=x(Yr#");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                java.util.ArrayList collection_2133828028 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2133828028, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                java.util.ArrayList collection_264054560 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_264054560, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusList());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1493809010 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1493809010, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
                java.lang.String regex = fnp.toRegex();
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("", context);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
                // AssertGenerator add assertion
                java.util.ArrayList collection_710026730 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_710026730, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1985183895 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1985183895, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                java.util.ArrayList collection_719277941 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_719277941, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1085031072 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1085031072, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                java.util.HashMap map_379505112 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_379505112, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                java.util.ArrayList collection_87216237 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_87216237, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
                // AssertGenerator add assertion
                java.util.ArrayList collection_1093682260 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1093682260, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1875458924 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1875458924, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                java.util.ArrayList collection_1068473508 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1068473508, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1466485298 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1466485298, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                java.util.HashMap map_143080861 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_143080861, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                java.util.ArrayList collection_878040351 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_878040351, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
                java.lang.String regex = fnp.toRegex();
                // StatementAdderOnAssert create null value
                java.lang.String vc_41 = (java.lang.String)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_41);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_41);
                // StatementAdderOnAssert create null value
                ch.qos.logback.core.rolling.helper.FileNamePattern vc_39 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_39);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_39);
                // StatementAdderMethod cloned existing statement
                vc_39.setPattern(vc_41);
            }
            org.junit.Assert.fail("asRegex_cf90 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegex */
    @org.junit.Test(timeout = 10000)
    public void asRegex_cf24_cf375_cf3081_failAssert69() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegex();
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd'T'}-%i.txt", context);
                java.lang.String regex = fnp.toRegex();
                // StatementAdderOnAssert create random local variable
                java.lang.Object vc_3 = new java.lang.Object();
                // AssertGenerator replace invocation
                boolean o_asRegex_cf24__14 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_3);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(o_asRegex_cf24__14);
                // AssertGenerator replace invocation
                java.lang.String o_asRegex_cf24_cf375__18 = // StatementAdderMethod cloned existing statement
fnp.convertMultipleArguments(vc_3);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_asRegex_cf24_cf375__18, "foo--.txt");
                // StatementAdderOnAssert create null value
                java.lang.Object vc_831 = (java.lang.Object)null;
                // StatementAdderMethod cloned existing statement
                fnp.convert(vc_831);
            }
            org.junit.Assert.fail("asRegex_cf24_cf375_cf3081 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegex */
    @org.junit.Test(timeout = 10000)
    public void asRegex_cf66_cf1327_cf3248_failAssert40() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegex();
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd'T'}-%i.txt", context);
                java.lang.String regex = fnp.toRegex();
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_26 = new java.lang.String();
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(vc_26, "");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(vc_26, "");
                // AssertGenerator replace invocation
                java.lang.String o_asRegex_cf66__14 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(vc_26);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_asRegex_cf66__14, "foo-%d{yyyy.MM.dd'T'}-%i.txt");
                // AssertGenerator replace invocation
                boolean o_asRegex_cf66_cf1327__20 = // StatementAdderMethod cloned existing statement
fnp.hasIntegerTokenCOnverter();
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(o_asRegex_cf66_cf1327__20);
                // StatementAdderOnAssert create literal from method
                int int_vc_59 = 10000;
                // StatementAdderMethod cloned existing statement
                fnp.convertInt(int_vc_59);
            }
            org.junit.Assert.fail("asRegex_cf66_cf1327_cf3248 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegex */
    @org.junit.Test(timeout = 10000)
    public void asRegex_cf63_cf1283_cf3761() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}-\\d{1,2}.txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd'T'}-%i.txt", context);
            java.lang.String regex = fnp.toRegex();
            // AssertGenerator replace invocation
            java.lang.String o_asRegex_cf63__12 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(regex);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_asRegex_cf63__12, "foo-%d{yyyy.MM.dd'T'}-%i.txt");
            // StatementAdderMethod cloned existing statement
            fnp.parse();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_406265211 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_406265211, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getNext()).getNext());
            // AssertGenerator add assertion
            java.util.ArrayList collection_2140743459 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2140743459, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getFirstOption());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getDatePattern());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_259369828 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_259369828, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_420265731 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_420265731, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isPrimary());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getFormattingInfo());
            // AssertGenerator add assertion
            java.util.HashMap map_1991186746 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1991186746, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "foo-%d{yyyy.MM.dd'T'}-%i.txt");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFirstOption(), "yyyy.MM.dd'T'");
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getTimeZone());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            java.util.ArrayList collection_425429242 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_425429242, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1393058438 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1393058438, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1140852807 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1140852807, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFormattingInfo());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1471851549 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1471851549, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getNext()).getNext());
            // AssertGenerator add assertion
            java.util.ArrayList collection_207200482 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_207200482, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getFirstOption());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getDatePattern());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1410277768 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1410277768, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_317948700 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_317948700, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isPrimary());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getFormattingInfo());
            // AssertGenerator add assertion
            java.util.HashMap map_1512575713 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1512575713, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "foo-%d{yyyy.MM.dd'T'}-%i.txt");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFirstOption(), "yyyy.MM.dd'T'");
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getTimeZone());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1010701261 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1010701261, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_753243618 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_753243618, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1915072497 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1915072497, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFormattingInfo());
            // StatementAdderOnAssert create null value
            java.lang.String vc_1030 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_1030);
            // StatementAdderMethod cloned existing statement
            fnp.setPattern(vc_1030);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1120510422 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1120510422, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getNext()).getNext());
            // AssertGenerator add assertion
            java.util.ArrayList collection_292701847 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_292701847, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getFirstOption());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getDatePattern());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_191129917 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_191129917, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_382166504 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_382166504, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isPrimary());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getFormattingInfo());
            // AssertGenerator add assertion
            java.util.HashMap map_1197223934 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1197223934, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "foo-%d{yyyy.MM.dd'T'}-%i.txt");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFirstOption(), "yyyy.MM.dd'T'");
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getTimeZone());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            java.util.ArrayList collection_541431286 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_541431286, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_2092801243 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2092801243, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1846291064 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1846291064, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFormattingInfo());
            org.junit.Assert.assertEquals("foo-\\d{4}\\.\\d{2}\\.\\d{2}T-\\d{1,2}.txt", regex);
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegex */
    @org.junit.Test(timeout = 10000)
    public void asRegex_cf90_failAssert46_literalMutation1807_literalMutation2169_failAssert82() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                {
                    ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("", context);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
                    // AssertGenerator add assertion
                    java.util.ArrayList collection_1897009576 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1897009576, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
                    // AssertGenerator add assertion
                    java.util.ArrayList collection_695969346 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_695969346, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "");
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
                    // AssertGenerator add assertion
                    java.util.ArrayList collection_1461962965 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1461962965, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
                    // AssertGenerator add assertion
                    java.util.ArrayList collection_608311353 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_608311353, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
                    // AssertGenerator add assertion
                    org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
                    // AssertGenerator add assertion
                    java.util.HashMap map_30230152 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_30230152, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 1);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "");
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 1);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 1);
                    // AssertGenerator add assertion
                    org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
                    // AssertGenerator add assertion
                    java.util.ArrayList collection_1446019323 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1446019323, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
                    // AssertGenerator add assertion
                    org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
                    java.lang.String regex = fnp.toRegex();
                }
                {
                    ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd\'T\'n}-%i.txt", context);
                    java.lang.String regex = fnp.toRegex();
                    // StatementAdderOnAssert create null value
                    java.lang.String vc_41 = (java.lang.String)null;
                    // AssertGenerator add assertion
                    org.junit.Assert.assertNull(vc_41);
                    // StatementAdderOnAssert create null value
                    ch.qos.logback.core.rolling.helper.FileNamePattern vc_39 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
                    // AssertGenerator add assertion
                    org.junit.Assert.assertNull(vc_39);
                    // StatementAdderMethod cloned existing statement
                    vc_39.setPattern(vc_41);
                }
                org.junit.Assert.fail("asRegex_cf90 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("asRegex_cf90_failAssert46_literalMutation1807_literalMutation2169 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegex */
    @org.junit.Test(timeout = 10000)
    public void asRegex_cf28_cf540_failAssert5_literalMutation1885_failAssert9() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            // AssertGenerator generate try/catch block with fail statement
            try {
                {
                    ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
                    java.lang.String regex = fnp.toRegex();
                }
                {
                    ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd\'\'}-%i.txt", context);
                    java.lang.String regex = fnp.toRegex();
                    // AssertGenerator replace invocation
                    boolean o_asRegex_cf28__12 = // StatementAdderMethod cloned existing statement
fnp.hasIntegerTokenCOnverter();
                    // AssertGenerator add assertion
                    org.junit.Assert.assertTrue(o_asRegex_cf28__12);
                    // StatementAdderOnAssert create null value
                    ch.qos.logback.core.rolling.helper.FileNamePattern vc_156 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
                    // StatementAdderMethod cloned existing statement
                    vc_156.getPattern();
                }
                org.junit.Assert.fail("asRegex_cf28_cf540 should have thrown NullPointerException");
            } catch (java.lang.NullPointerException eee) {
            }
            org.junit.Assert.fail("asRegex_cf28_cf540_failAssert5_literalMutation1885 should have thrown IllegalStateException");
        } catch (java.lang.IllegalStateException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegex */
    @org.junit.Test(timeout = 10000)
    public void asRegex_cf72_failAssert39_add1407_literalMutation3779() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegex();
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("oCK|z>0^mm+[S`v+p*6d+FRoW0%n", context);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
                // AssertGenerator add assertion
                java.util.ArrayList collection_1989502098 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1989502098, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1065666811 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1065666811, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "oCK|z>0^mm+[S`v+p*6d+FRoW0%PARSER_ERROR[n]");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                java.util.ArrayList collection_422700422 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_422700422, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1552532672 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1552532672, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                java.util.HashMap map_2024452016 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_2024452016, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "oCK|z>0^mm+[S`v+p*6d+FRoW0%n");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                java.util.ArrayList collection_671255559 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_671255559, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
                java.lang.String regex = fnp.toRegex();
                // StatementAdderOnAssert create null value
                ch.qos.logback.core.rolling.helper.FileNamePattern vc_27 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_27);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_27);
                // StatementAdderMethod cloned existing statement
                // MethodCallAdder
                vc_27.getPattern();
                // StatementAdderMethod cloned existing statement
                vc_27.getPattern();
            }
            org.junit.Assert.fail("asRegex_cf72 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegexByDate */
    @org.junit.Test(timeout = 10000)
    public void asRegexByDate_cf4646_failAssert32() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("\\toto\\foo-%d{yyyy\\MM\\dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
                // StatementAdderOnAssert create literal from method
                int int_vc_86 = 4;
                // StatementAdderMethod cloned existing statement
                fnp.convertInt(int_vc_86);
            }
            org.junit.Assert.fail("asRegexByDate_cf4646 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegexByDate */
    @org.junit.Test(timeout = 10000)
    public void asRegexByDate_cf4673() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            org.junit.Assert.assertEquals("foo-2003.05.20-(\\d{1,3}).txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("\\toto\\foo-%d{yyyy\\MM\\dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            // AssertGenerator replace invocation
            java.lang.String o_asRegexByDate_cf4673__17 = // StatementAdderMethod cloned existing statement
fnp.getPattern();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_asRegexByDate_cf4673__17, "/toto/foo-%d{yyyy/MM/dd}-%i.txt");
            org.junit.Assert.assertEquals("/toto/foo-2003/05/20-(\\d{1,3}).txt", regex);
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegexByDate */
    @org.junit.Test(timeout = 10000)
    public void asRegexByDate_cf4688() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            org.junit.Assert.assertEquals("foo-2003.05.20-(\\d{1,3}).txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("\\toto\\foo-%d{yyyy\\MM\\dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            // StatementAdderMethod cloned existing statement
            fnp.parse();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_579025746 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_579025746, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getNext()).getNext());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1858219327 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1858219327, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getFirstOption());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getDatePattern());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1148040838 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1148040838, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1862920461 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1862920461, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isPrimary());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getFormattingInfo());
            // AssertGenerator add assertion
            java.util.HashMap map_636908758 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_636908758, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "/toto/foo-%d{yyyy/MM/dd}-%i.txt");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFirstOption(), "yyyy/MM/dd");
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getTimeZone());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1945776514 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1945776514, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1149480830 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1149480830, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_385928861 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_385928861, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFormattingInfo());
            org.junit.Assert.assertEquals("/toto/foo-2003/05/20-(\\d{1,3}).txt", regex);
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegexByDate */
    @org.junit.Test(timeout = 10000)
    public void asRegexByDate_cf4621() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            org.junit.Assert.assertEquals("foo-2003.05.20-(\\d{1,3}).txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("\\toto\\foo-%d{yyyy\\MM\\dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_1250 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_asRegexByDate_cf4621__19 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_1250);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_asRegexByDate_cf4621__19);
            org.junit.Assert.assertEquals("/toto/foo-2003/05/20-(\\d{1,3}).txt", regex);
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegexByDate */
    @org.junit.Test(timeout = 10000)
    public void asRegexByDate_cf4620() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            org.junit.Assert.assertEquals("foo-2003.05.20-(\\d{1,3}).txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("\\toto\\foo-%d{yyyy\\MM\\dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            // StatementAdderOnAssert create null value
            java.lang.Object vc_1249 = (java.lang.Object)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_1249);
            // AssertGenerator replace invocation
            boolean o_asRegexByDate_cf4620__19 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_1249);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_asRegexByDate_cf4620__19);
            org.junit.Assert.assertEquals("/toto/foo-2003/05/20-(\\d{1,3}).txt", regex);
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegexByDate */
    @org.junit.Test(timeout = 10000)
    public void asRegexByDate_cf4631() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            org.junit.Assert.assertEquals("foo-2003.05.20-(\\d{1,3}).txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("\\toto\\foo-%d{yyyy\\MM\\dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            // AssertGenerator replace invocation
            ch.qos.logback.core.rolling.helper.IntegerTokenConverter o_asRegexByDate_cf4631__17 = // StatementAdderMethod cloned existing statement
fnp.getIntegerTokenConverter();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegexByDate_cf4631__17).getFormattingInfo());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegexByDate_cf4631__17).getFirstOption());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegexByDate_cf4631__17).getNext()).getNext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegexByDate_cf4631__17).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegexByDate_cf4631__17).isStarted());
            org.junit.Assert.assertEquals("/toto/foo-2003/05/20-(\\d{1,3}).txt", regex);
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegexByDate */
    @org.junit.Test(timeout = 10000)
    public void asRegexByDate_cf4680_failAssert45() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("\\toto\\foo-%d{yyyy\\MM\\dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
                // StatementAdderOnAssert create null value
                java.util.Date vc_1280 = (java.util.Date)null;
                // StatementAdderMethod cloned existing statement
                fnp.toRegexForFixedDate(vc_1280);
            }
            org.junit.Assert.fail("asRegexByDate_cf4680 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegexByDate */
    @org.junit.Test(timeout = 10000)
    public void asRegexByDate_cf4634() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            org.junit.Assert.assertEquals("foo-2003.05.20-(\\d{1,3}).txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("\\toto\\foo-%d{yyyy\\MM\\dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            // AssertGenerator replace invocation
            int o_asRegexByDate_cf4634__17 = // StatementAdderMethod cloned existing statement
fnp.hashCode();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_asRegexByDate_cf4634__17, -624199520);
            org.junit.Assert.assertEquals("/toto/foo-2003/05/20-(\\d{1,3}).txt", regex);
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegexByDate */
    @org.junit.Test(timeout = 10000)
    public void asRegexByDate_cf4631_cf5295_failAssert34_literalMutation7964() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("OggV|; ;8V!;h.#?QT?p9STN%", context);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
                // AssertGenerator add assertion
                java.util.ArrayList collection_204758422 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_204758422, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1437776543 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1437776543, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                java.util.ArrayList collection_1203866946 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1203866946, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1242594173 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1242594173, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                java.util.HashMap map_84628506 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_84628506, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "OggV|; ;8V!;h.#?QT?p9STN%");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                java.util.ArrayList collection_1110593119 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1110593119, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
                java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("\\toto\\foo-%d{yyyy\\MM\\dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
                // AssertGenerator replace invocation
                ch.qos.logback.core.rolling.helper.IntegerTokenConverter o_asRegexByDate_cf4631__17 = // StatementAdderMethod cloned existing statement
fnp.getIntegerTokenConverter();
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegexByDate_cf4631__17).getFormattingInfo());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegexByDate_cf4631__17).getFirstOption());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegexByDate_cf4631__17).getNext()).getNext());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegexByDate_cf4631__17).getContext());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegexByDate_cf4631__17).isStarted());
                // StatementAdderOnAssert create null value
                java.util.Date vc_1452 = (java.util.Date)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_1452);
                // StatementAdderOnAssert create null value
                ch.qos.logback.core.rolling.helper.FileNamePattern vc_1450 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_1450);
                // StatementAdderMethod cloned existing statement
                vc_1450.toRegexForFixedDate(vc_1452);
            }
            org.junit.Assert.fail("asRegexByDate_cf4631_cf5295 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegexByDate */
    @org.junit.Test(timeout = 10000)
    public void asRegexByDate_cf4630_failAssert24_add5202_literalMutation8362() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            // MethodCallAdder
            cal.set(2003, 4, 20, 17, 55);
            cal.set(2003, 4, 20, 17, 55);
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("TkklC0*%z;N=H4md&[8jI+jlJ)h}aZ>", context);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
                // AssertGenerator add assertion
                java.util.ArrayList collection_127505219 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_127505219, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1542893513 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1542893513, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "TkklC0*%PARSER_ERROR[z];N=H4md&[8jI+jlJ)h}aZ>");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                java.util.ArrayList collection_219888234 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_219888234, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_715980690 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_715980690, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                java.util.HashMap map_883303745 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_883303745, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "TkklC0*%z;N=H4md&[8jI+jlJ)h}aZ>");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                java.util.ArrayList collection_980568315 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_980568315, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
                java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
                // StatementAdderOnAssert create null value
                ch.qos.logback.core.rolling.helper.FileNamePattern vc_1255 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_1255);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_1255);
                // StatementAdderMethod cloned existing statement
                vc_1255.getIntegerTokenConverter();
            }
            org.junit.Assert.fail("asRegexByDate_cf4630 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegexByDate */
    @org.junit.Test(timeout = 10000)
    public void asRegexByDate_cf4666_cf6038_cf7120_failAssert72() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("\\toto\\foo-%d{yyyy\\MM\\dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
                // StatementAdderOnAssert create random local variable
                java.lang.String vc_1273 = new java.lang.String();
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(vc_1273, "");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(vc_1273, "");
                // AssertGenerator replace invocation
                java.lang.String o_asRegexByDate_cf4666__19 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(vc_1273);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_asRegexByDate_cf4666__19, "/toto/foo-%d{yyyy/MM/dd}-%i.txt");
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_114 = "foo-%d{yyyy.MM.dd}-%i.txt";
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(String_vc_114, "foo-%d{yyyy.MM.dd}-%i.txt");
                // AssertGenerator replace invocation
                java.lang.String o_asRegexByDate_cf4666_cf6038__27 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(String_vc_114);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_asRegexByDate_cf4666_cf6038__27, "/toto/foo-%d{yyyy/MM/dd}-%i.txt");
                // StatementAdderOnAssert create null value
                java.lang.Object vc_1949 = (java.lang.Object)null;
                // StatementAdderMethod cloned existing statement
                fnp.convert(vc_1949);
            }
            org.junit.Assert.fail("asRegexByDate_cf4666_cf6038_cf7120 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegexByDate */
    @org.junit.Test(timeout = 10000)
    public void asRegexByDate_cf4672_failAssert41_literalMutation6084_literalMutation8065() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern(" D:Wn[#NK8kvHITA>|4}oV=/6", context);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
                // AssertGenerator add assertion
                java.util.ArrayList collection_310353166 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_310353166, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_230732625 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_230732625, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "D:Wn[#NK8kvHITA>|4}oV=/6");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                java.util.ArrayList collection_508047227 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_508047227, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_51639074 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_51639074, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                java.util.HashMap map_1273956220 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1273956220, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "D:Wn[#NK8kvHITA>|4}oV=/6");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                java.util.ArrayList collection_2079778877 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2079778877, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                java.util.ArrayList collection_277171058 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_277171058, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusList());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_2070277277 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2070277277, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
                // AssertGenerator add assertion
                java.util.ArrayList collection_2104660067 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2104660067, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1873184724 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1873184724, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "D:Wn[#NK8kvHITA>|4}oV=/6");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                java.util.ArrayList collection_360364743 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_360364743, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_338835572 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_338835572, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                java.util.HashMap map_1047098502 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1047098502, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "D:Wn[#NK8kvHITA>|4}oV=/6");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                java.util.ArrayList collection_1890471832 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1890471832, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                java.util.ArrayList collection_135087365 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_135087365, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusList());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_2078956513 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2078956513, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
                java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("", context);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
                // AssertGenerator add assertion
                java.util.ArrayList collection_410265492 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_410265492, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1224430500 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1224430500, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                java.util.ArrayList collection_1246767158 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1246767158, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_588171496 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_588171496, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                java.util.HashMap map_1654493520 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1654493520, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                java.util.ArrayList collection_1563282275 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1563282275, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
                java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
                // StatementAdderOnAssert create null value
                ch.qos.logback.core.rolling.helper.FileNamePattern vc_1274 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_1274);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_1274);
                // StatementAdderMethod cloned existing statement
                vc_1274.getPattern();
            }
            org.junit.Assert.fail("asRegexByDate_cf4672 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegexByDate */
    @org.junit.Test(timeout = 10000)
    public void asRegexByDate_cf4666_cf6038_cf7113() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            org.junit.Assert.assertEquals("foo-2003.05.20-(\\d{1,3}).txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("\\toto\\foo-%d{yyyy\\MM\\dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_1273 = new java.lang.String();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_1273, "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_1273, "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_1273, "");
            // AssertGenerator replace invocation
            java.lang.String o_asRegexByDate_cf4666__19 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(vc_1273);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_asRegexByDate_cf4666__19, "/toto/foo-%d{yyyy/MM/dd}-%i.txt");
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_114 = "foo-%d{yyyy.MM.dd}-%i.txt";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_114, "foo-%d{yyyy.MM.dd}-%i.txt");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_114, "foo-%d{yyyy.MM.dd}-%i.txt");
            // AssertGenerator replace invocation
            java.lang.String o_asRegexByDate_cf4666_cf6038__27 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(String_vc_114);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_asRegexByDate_cf4666_cf6038__27, "/toto/foo-%d{yyyy/MM/dd}-%i.txt");
            // AssertGenerator replace invocation
            ch.qos.logback.core.rolling.helper.IntegerTokenConverter o_asRegexByDate_cf4666_cf6038_cf7113__35 = // StatementAdderMethod cloned existing statement
fnp.getIntegerTokenConverter();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegexByDate_cf4666_cf6038_cf7113__35).getFirstOption());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegexByDate_cf4666_cf6038_cf7113__35).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegexByDate_cf4666_cf6038_cf7113__35).getNext()).getNext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegexByDate_cf4666_cf6038_cf7113__35).getFormattingInfo());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_asRegexByDate_cf4666_cf6038_cf7113__35).isStarted());
            org.junit.Assert.assertEquals("/toto/foo-2003/05/20-(\\d{1,3}).txt", regex);
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegexByDate */
    @org.junit.Test(timeout = 10000)
    public void asRegexByDate_cf4673_cf6113_cf7592_failAssert21() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("\\toto\\foo-%d{yyyy\\MM\\dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
                // AssertGenerator replace invocation
                java.lang.String o_asRegexByDate_cf4673__17 = // StatementAdderMethod cloned existing statement
fnp.getPattern();
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_asRegexByDate_cf4673__17, "/toto/foo-%d{yyyy/MM/dd}-%i.txt");
                // StatementAdderOnAssert create null value
                java.lang.Object vc_1679 = (java.lang.Object)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_1679);
                // AssertGenerator replace invocation
                boolean o_asRegexByDate_cf4673_cf6113__23 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_1679);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(o_asRegexByDate_cf4673_cf6113__23);
                // StatementAdderOnAssert create null value
                ch.qos.logback.core.rolling.helper.FileNamePattern vc_2072 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
                // StatementAdderMethod cloned existing statement
                vc_2072.getIntegerTokenConverter();
            }
            org.junit.Assert.fail("asRegexByDate_cf4673_cf6113_cf7592 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegexByDate */
    @org.junit.Test(timeout = 10000)
    public void asRegexByDate_cf4625_cf5119_cf8506() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            org.junit.Assert.assertEquals("foo-2003.05.20-(\\d{1,3}).txt", regex);
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("\\toto\\foo-%d{yyyy\\MM\\dd}-%i.txt", context);
            java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            // AssertGenerator replace invocation
            boolean o_asRegexByDate_cf4625__17 = // StatementAdderMethod cloned existing statement
fnp.hasIntegerTokenCOnverter();
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(o_asRegexByDate_cf4625__17);
            // AssertGenerator replace invocation
            int o_asRegexByDate_cf4625_cf5119__21 = // StatementAdderMethod cloned existing statement
fnp.hashCode();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_asRegexByDate_cf4625_cf5119__21, -624199520);
            // StatementAdderMethod cloned existing statement
            fnp.parse();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1201577686 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1201577686, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getNext()).getNext());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1317138312 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1317138312, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getFirstOption());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getDatePattern());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1148238097 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1148238097, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1700765762 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1700765762, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isPrimary());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter()).getFormattingInfo());
            // AssertGenerator add assertion
            java.util.HashMap map_1833080244 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1833080244, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "/toto/foo-%d{yyyy/MM/dd}-%i.txt");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFirstOption(), "yyyy/MM/dd");
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getTimeZone());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            java.util.ArrayList collection_798791004 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_798791004, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_854081404 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_854081404, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1483167965 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1483167965, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFormattingInfo());
            org.junit.Assert.assertEquals("/toto/foo-2003/05/20-(\\d{1,3}).txt", regex);
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#asRegexByDate */
    @org.junit.Test(timeout = 10000)
    public void asRegexByDate_cf4634_cf5399_cf8593_failAssert80() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("\\toto\\foo-%d{yyyy\\MM\\dd}-%i.txt", context);
                java.lang.String regex = fnp.toRegexForFixedDate(cal.getTime());
                // AssertGenerator replace invocation
                int o_asRegexByDate_cf4634__17 = // StatementAdderMethod cloned existing statement
fnp.hashCode();
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_asRegexByDate_cf4634__17, -624199520);
                // StatementAdderOnAssert create null value
                java.lang.String vc_1487 = (java.lang.String)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_1487);
                // AssertGenerator replace invocation
                java.lang.String o_asRegexByDate_cf4634_cf5399__23 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(vc_1487);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_asRegexByDate_cf4634_cf5399__23, "/toto/foo-%d{yyyy/MM/dd}-%i.txt");
                // StatementAdderOnAssert create random local variable
                java.lang.Object vc_2251 = new java.lang.Object();
                // StatementAdderMethod cloned existing statement
                fnp.convert(vc_2251);
            }
            org.junit.Assert.fail("asRegexByDate_cf4634_cf5399_cf8593 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#auxAndTimeZoneShouldNotConflict */
    @org.junit.Test(timeout = 10000)
    public void auxAndTimeZoneShouldNotConflict_cf9033() {
        java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC");
        java.util.Calendar cal = java.util.Calendar.getInstance(utc);
        cal.set(2003, 4, 20, 10, 55);
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy-MM-dd'T'HH:mm, aux, Australia/Perth}", context);
            // Perth is 8 hours ahead of UTC
            org.junit.Assert.assertEquals("foo2003-05-20T18:55", fnp.convert(cal.getTime()));
            org.junit.Assert.assertNull(fnp.getPrimaryDateTokenConverter());
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("folder/%d{yyyy/MM, aux, Australia/Perth}/test.%d{yyyy-MM-dd'T'HHmm, Australia/Perth}.log", context);
            org.junit.Assert.assertEquals("folder/2003/05/test.2003-05-20T1855.log", fnp.convert(cal.getTime()));
            // StatementAdderMethod cloned existing statement
            fnp.parse();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1896791954 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1896791954, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1597647348 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1597647348, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getDatePattern());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1562175797 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1562175797, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_446153739 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_446153739, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isPrimary());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_795625279 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_795625279, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "folder/%d{yyyy/MM, aux, Australia/Perth}/test.%d{yyyy-MM-dd'T'HHmm, Australia/Perth}.log");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFirstOption(), "yyyy/MM");
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getTimeZone());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            java.util.ArrayList collection_436619459 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_436619459, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1466427764 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1466427764, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_340704091 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_340704091, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFormattingInfo());
            org.junit.Assert.assertNotNull(fnp.getPrimaryDateTokenConverter());
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#auxAndTimeZoneShouldNotConflict */
    @org.junit.Test(timeout = 10000)
    public void auxAndTimeZoneShouldNotConflict_cf8995_failAssert31() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC");
            java.util.Calendar cal = java.util.Calendar.getInstance(utc);
            cal.set(2003, 4, 20, 10, 55);
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy-MM-dd'T'HH:mm, aux, Australia/Perth}", context);
                // MethodAssertGenerator build local variable
                Object o_9_0 = fnp.convert(cal.getTime());
                org.junit.Assert.assertNull(fnp.getPrimaryDateTokenConverter());
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("folder/%d{yyyy/MM, aux, Australia/Perth}/test.%d{yyyy-MM-dd'T'HHmm, Australia/Perth}.log", context);
                // MethodAssertGenerator build local variable
                Object o_18_0 = fnp.convert(cal.getTime());
                // StatementAdderOnAssert create literal from method
                int int_vc_164 = 55;
                // StatementAdderMethod cloned existing statement
                fnp.convertInt(int_vc_164);
                org.junit.Assert.assertNotNull(fnp.getPrimaryDateTokenConverter());
            }
            org.junit.Assert.fail("auxAndTimeZoneShouldNotConflict_cf8995 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#auxAndTimeZoneShouldNotConflict */
    @org.junit.Test(timeout = 10000)
    public void auxAndTimeZoneShouldNotConflict_cf8971() {
        java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC");
        java.util.Calendar cal = java.util.Calendar.getInstance(utc);
        cal.set(2003, 4, 20, 10, 55);
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy-MM-dd'T'HH:mm, aux, Australia/Perth}", context);
            // Perth is 8 hours ahead of UTC
            org.junit.Assert.assertEquals("foo2003-05-20T18:55", fnp.convert(cal.getTime()));
            org.junit.Assert.assertNull(fnp.getPrimaryDateTokenConverter());
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("folder/%d{yyyy/MM, aux, Australia/Perth}/test.%d{yyyy-MM-dd'T'HHmm, Australia/Perth}.log", context);
            org.junit.Assert.assertEquals("folder/2003/05/test.2003-05-20T1855.log", fnp.convert(cal.getTime()));
            // StatementAdderOnAssert create null value
            java.lang.Object vc_2367 = (java.lang.Object)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_2367);
            // AssertGenerator replace invocation
            boolean o_auxAndTimeZoneShouldNotConflict_cf8971__23 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_2367);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_auxAndTimeZoneShouldNotConflict_cf8971__23);
            org.junit.Assert.assertNotNull(fnp.getPrimaryDateTokenConverter());
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#auxAndTimeZoneShouldNotConflict */
    @org.junit.Test(timeout = 10000)
    public void auxAndTimeZoneShouldNotConflict_cf8972() {
        java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC");
        java.util.Calendar cal = java.util.Calendar.getInstance(utc);
        cal.set(2003, 4, 20, 10, 55);
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy-MM-dd'T'HH:mm, aux, Australia/Perth}", context);
            // Perth is 8 hours ahead of UTC
            org.junit.Assert.assertEquals("foo2003-05-20T18:55", fnp.convert(cal.getTime()));
            org.junit.Assert.assertNull(fnp.getPrimaryDateTokenConverter());
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("folder/%d{yyyy/MM, aux, Australia/Perth}/test.%d{yyyy-MM-dd'T'HHmm, Australia/Perth}.log", context);
            org.junit.Assert.assertEquals("folder/2003/05/test.2003-05-20T1855.log", fnp.convert(cal.getTime()));
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_2368 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_auxAndTimeZoneShouldNotConflict_cf8972__23 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_2368);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_auxAndTimeZoneShouldNotConflict_cf8972__23);
            org.junit.Assert.assertNotNull(fnp.getPrimaryDateTokenConverter());
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#auxAndTimeZoneShouldNotConflict */
    @org.junit.Test(timeout = 10000)
    public void auxAndTimeZoneShouldNotConflict_cf9018() {
        java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC");
        java.util.Calendar cal = java.util.Calendar.getInstance(utc);
        cal.set(2003, 4, 20, 10, 55);
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy-MM-dd'T'HH:mm, aux, Australia/Perth}", context);
            // Perth is 8 hours ahead of UTC
            org.junit.Assert.assertEquals("foo2003-05-20T18:55", fnp.convert(cal.getTime()));
            org.junit.Assert.assertNull(fnp.getPrimaryDateTokenConverter());
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("folder/%d{yyyy/MM, aux, Australia/Perth}/test.%d{yyyy-MM-dd'T'HHmm, Australia/Perth}.log", context);
            org.junit.Assert.assertEquals("folder/2003/05/test.2003-05-20T1855.log", fnp.convert(cal.getTime()));
            // AssertGenerator replace invocation
            java.lang.String o_auxAndTimeZoneShouldNotConflict_cf9018__21 = // StatementAdderMethod cloned existing statement
fnp.getPattern();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_auxAndTimeZoneShouldNotConflict_cf9018__21, "folder/%d{yyyy/MM, aux, Australia/Perth}/test.%d{yyyy-MM-dd'T'HHmm, Australia/Perth}.log");
            org.junit.Assert.assertNotNull(fnp.getPrimaryDateTokenConverter());
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#auxAndTimeZoneShouldNotConflict */
    @org.junit.Test(timeout = 10000)
    public void auxAndTimeZoneShouldNotConflict_cf8985() {
        java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC");
        java.util.Calendar cal = java.util.Calendar.getInstance(utc);
        cal.set(2003, 4, 20, 10, 55);
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy-MM-dd'T'HH:mm, aux, Australia/Perth}", context);
            // Perth is 8 hours ahead of UTC
            org.junit.Assert.assertEquals("foo2003-05-20T18:55", fnp.convert(cal.getTime()));
            org.junit.Assert.assertNull(fnp.getPrimaryDateTokenConverter());
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("folder/%d{yyyy/MM, aux, Australia/Perth}/test.%d{yyyy-MM-dd'T'HHmm, Australia/Perth}.log", context);
            org.junit.Assert.assertEquals("folder/2003/05/test.2003-05-20T1855.log", fnp.convert(cal.getTime()));
            // AssertGenerator replace invocation
            int o_auxAndTimeZoneShouldNotConflict_cf8985__21 = // StatementAdderMethod cloned existing statement
fnp.hashCode();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_auxAndTimeZoneShouldNotConflict_cf8985__21, -25833542);
            org.junit.Assert.assertNotNull(fnp.getPrimaryDateTokenConverter());
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#auxAndTimeZoneShouldNotConflict */
    @org.junit.Test(timeout = 10000)
    public void auxAndTimeZoneShouldNotConflict_cf9025_failAssert44() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC");
            java.util.Calendar cal = java.util.Calendar.getInstance(utc);
            cal.set(2003, 4, 20, 10, 55);
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy-MM-dd'T'HH:mm, aux, Australia/Perth}", context);
                // MethodAssertGenerator build local variable
                Object o_9_0 = fnp.convert(cal.getTime());
                org.junit.Assert.assertNull(fnp.getPrimaryDateTokenConverter());
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("folder/%d{yyyy/MM, aux, Australia/Perth}/test.%d{yyyy-MM-dd'T'HHmm, Australia/Perth}.log", context);
                // MethodAssertGenerator build local variable
                Object o_18_0 = fnp.convert(cal.getTime());
                // StatementAdderOnAssert create null value
                java.util.Date vc_2398 = (java.util.Date)null;
                // StatementAdderMethod cloned existing statement
                fnp.toRegexForFixedDate(vc_2398);
                org.junit.Assert.assertNotNull(fnp.getPrimaryDateTokenConverter());
            }
            org.junit.Assert.fail("auxAndTimeZoneShouldNotConflict_cf9025 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#convertMultipleDates */
    @org.junit.Test(timeout = 10000)
    public void convertMultipleDates_cf26215_cf26378() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt", context);
        // StatementAdderOnAssert create null value
        java.lang.Object vc_8817 = (java.lang.Object)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_8817);
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_8817);
        // AssertGenerator replace invocation
        boolean o_convertMultipleDates_cf26215__8 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_8817);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_convertMultipleDates_cf26215__8);
        // StatementAdderOnAssert create random local variable
        int vc_8876 = 444996079;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(vc_8876, 444996079);
        // StatementAddOnAssert local variable replacement
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("t", context);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCorePoolSize(), 8);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).isStarted());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getLevel(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
        // AssertGenerator add assertion
        java.util.ArrayList collection_1540079836 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1540079836, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList());;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).hasIntegerTokenCOnverter());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getName());
        // AssertGenerator add assertion
        java.util.ArrayList collection_652466668 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_652466668, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledFutures());;
        // AssertGenerator add assertion
        java.util.HashMap map_1012100703 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1012100703, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getCopyOfPropertyMap());;
        // AssertGenerator add assertion
        java.util.ArrayList collection_2095434891 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2095434891, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).shutdownNow());;
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isShutdown());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getLevel(), 0);
        // AssertGenerator add assertion
        java.util.ArrayList collection_1348770297 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1348770297, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminating());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getPoolSize(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminated());
        // AssertGenerator add assertion
        java.util.ArrayList collection_917580092 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_917580092, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusListenerList());;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getTaskCount(), 0L);
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPrimaryDateTokenConverter());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getIntegerTokenConverter());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCount(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).toRegex(), "t");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPattern(), "t");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartCoreThread());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminating());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartCoreThread());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getActiveCount(), 0);
        // AssertGenerator add assertion
        java.util.ArrayList collection_1326456454 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1326456454, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusList());;
        // AssertGenerator add assertion
        java.util.ArrayList collection_534520912 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_534520912, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).shutdownNow());;
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminated());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCount(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isShutdown());
        // AssertGenerator replace invocation
        java.lang.String o_convertMultipleDates_cf26215_cf26378__19 = // StatementAdderMethod cloned existing statement
pp.convertInt(vc_8876);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_convertMultipleDates_cf26215_cf26378__19, "t");
        org.junit.Assert.assertEquals("foo-2003.05/2003.05.20.txt", fnp.convert(cal.getTime()));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#convertMultipleDates */
    @org.junit.Test(timeout = 10000)
    public void convertMultipleDates_cf26229_cf26862_failAssert44() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt", context);
            // AssertGenerator replace invocation
            int o_convertMultipleDates_cf26229__6 = // StatementAdderMethod cloned existing statement
fnp.hashCode();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_convertMultipleDates_cf26229__6, -249400949);
            // StatementAdderOnAssert create literal from method
            int int_vc_629 = 55;
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_9046 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // StatementAdderMethod cloned existing statement
            vc_9046.convertInt(int_vc_629);
            // MethodAssertGenerator build local variable
            Object o_16_0 = fnp.convert(cal.getTime());
            org.junit.Assert.fail("convertMultipleDates_cf26229_cf26862 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#convertMultipleDates */
    @org.junit.Test(timeout = 10000)
    public void convertMultipleDates_cf26238_failAssert19_literalMutation26960() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("(d&V2%0Fk2VnnucK$/TYtp10:e;0ZrC5Y!`(zui", context);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_835729738 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_835729738, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1070439342 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1070439342, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "(d&V2%PARSER_ERROR[Fk2VnnucK$]/TYtp10:e;0ZrC5Y!`(zui");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_283772281 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_283772281, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1006719315 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1006719315, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_416055781 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_416055781, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "(d&V2%0Fk2VnnucK$/TYtp10:e;0ZrC5Y!`(zui");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_2116512549 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2116512549, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
            // StatementAdderOnAssert create random local variable
            int vc_8833 = -1123474480;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_8833, -1123474480);
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_8831 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_8831);
            // StatementAdderMethod cloned existing statement
            vc_8831.convertInt(vc_8833);
            // MethodAssertGenerator build local variable
            Object o_12_0 = fnp.convert(cal.getTime());
            org.junit.Assert.fail("convertMultipleDates_cf26238 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#convertMultipleDates */
    @org.junit.Test(timeout = 10000)
    public void convertMultipleDates_cf26262_cf27471_failAssert14() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt", context);
            // AssertGenerator replace invocation
            java.lang.String o_convertMultipleDates_cf26262__6 = // StatementAdderMethod cloned existing statement
fnp.getPattern();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_convertMultipleDates_cf26262__6, "foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt");
            // StatementAdderOnAssert create null value
            java.lang.Object vc_9259 = (java.lang.Object)null;
            // StatementAdderMethod cloned existing statement
            fnp.convert(vc_9259);
            // MethodAssertGenerator build local variable
            Object o_14_0 = fnp.convert(cal.getTime());
            org.junit.Assert.fail("convertMultipleDates_cf26262_cf27471 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#convertMultipleDates */
    @org.junit.Test(timeout = 10000)
    public void convertMultipleDates_cf26216_cf26516_failAssert13() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt", context);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_8818 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_convertMultipleDates_cf26216__8 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_8818);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_convertMultipleDates_cf26216__8);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_8916 = new java.lang.Object();
            // StatementAdderMethod cloned existing statement
            fnp.convert(vc_8916);
            // MethodAssertGenerator build local variable
            Object o_16_0 = fnp.convert(cal.getTime());
            org.junit.Assert.fail("convertMultipleDates_cf26216_cf26516 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#convertMultipleDates */
    @org.junit.Test(timeout = 10000)
    public void convertMultipleDates_cf26216_cf26480_failAssert68() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt", context);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_8818 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_convertMultipleDates_cf26216__8 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_8818);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_convertMultipleDates_cf26216__8);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_8904 = new java.lang.Object();
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_8901 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // StatementAdderMethod cloned existing statement
            vc_8901.equals(vc_8904);
            // MethodAssertGenerator build local variable
            Object o_18_0 = fnp.convert(cal.getTime());
            org.junit.Assert.fail("convertMultipleDates_cf26216_cf26480 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#convertMultipleDates */
    @org.junit.Test(timeout = 10000)
    public void convertMultipleDates_cf26255_cf27250() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt", context);
        // StatementAdderOnAssert create literal from method
        java.lang.String String_vc_615 = "foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(String_vc_615, "foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(String_vc_615, "foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt");
        // AssertGenerator replace invocation
        java.lang.String o_convertMultipleDates_cf26255__8 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(String_vc_615);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_convertMultipleDates_cf26255__8, "foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt");
        // StatementAdderOnAssert create null value
        java.lang.Object vc_9161 = (java.lang.Object)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_9161);
        // AssertGenerator replace invocation
        boolean o_convertMultipleDates_cf26255_cf27250__16 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_9161);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_convertMultipleDates_cf26255_cf27250__16);
        org.junit.Assert.assertEquals("foo-2003.05/2003.05.20.txt", fnp.convert(cal.getTime()));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#convertMultipleDates */
    @org.junit.Test(timeout = 10000)
    public void convertMultipleDates_cf26277_failAssert36_add27752() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            // MethodCallAdder
            cal.set(2003, 4, 20, 17, 55);
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt", context);
            // StatementAdderMethod cloned existing statement
            fnp.parse();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1846211070 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1846211070, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1103050365 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1103050365, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getDatePattern());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_2048727111 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2048727111, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1997469338 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1997469338, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isPrimary());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_345074779 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_345074779, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFirstOption(), "yyyy.MM");
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getTimeZone());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            java.util.ArrayList collection_59354128 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_59354128, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1658358752 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1658358752, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1219703598 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1219703598, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFormattingInfo());
            // MethodAssertGenerator build local variable
            Object o_8_0 = fnp.convert(cal.getTime());
            org.junit.Assert.fail("convertMultipleDates_cf26277 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#convertMultipleDates */
    @org.junit.Test(timeout = 10000)
    public void convertMultipleDates_cf26251_failAssert27_literalMutation27118() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("", context);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_677206624 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_677206624, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_2064777034 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2064777034, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_748887210 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_748887210, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_2114638447 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2114638447, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_1181589739 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1181589739, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_772514151 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_772514151, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_615 = "foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_615, "foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt");
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_8838 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_8838);
            // StatementAdderMethod cloned existing statement
            vc_8838.escapeRightParantesis(String_vc_615);
            // MethodAssertGenerator build local variable
            Object o_12_0 = fnp.convert(cal.getTime());
            org.junit.Assert.fail("convertMultipleDates_cf26251 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#convertMultipleDates */
    @org.junit.Test(timeout = 10000)
    public void convertMultipleDates_cf26255_cf27296_cf28073_failAssert73() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt", context);
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_615 = "foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_615, "foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_615, "foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt");
            // AssertGenerator replace invocation
            java.lang.String o_convertMultipleDates_cf26255__8 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(String_vc_615);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_convertMultipleDates_cf26255__8, "foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt");
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_9185 = new java.lang.String();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_9185, "");
            // AssertGenerator replace invocation
            java.lang.String o_convertMultipleDates_cf26255_cf27296__16 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(vc_9185);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_convertMultipleDates_cf26255_cf27296__16, "foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt");
            // StatementAdderOnAssert create null value
            java.util.Date vc_9450 = (java.util.Date)null;
            // StatementAdderMethod cloned existing statement
            fnp.toRegexForFixedDate(vc_9450);
            // MethodAssertGenerator build local variable
            Object o_28_0 = fnp.convert(cal.getTime());
            org.junit.Assert.fail("convertMultipleDates_cf26255_cf27296_cf28073 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#convertMultipleDates */
    @org.junit.Test(timeout = 10000)
    public void convertMultipleDates_cf26256_cf27348_cf29330_failAssert53() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt", context);
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_8841 = new java.lang.String();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_8841, "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_8841, "");
            // AssertGenerator replace invocation
            java.lang.String o_convertMultipleDates_cf26256__8 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(vc_8841);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_convertMultipleDates_cf26256__8, "foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt");
            // StatementAdderOnAssert create null value
            java.lang.Object vc_9204 = (java.lang.Object)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_9204);
            // AssertGenerator replace invocation
            boolean o_convertMultipleDates_cf26256_cf27348__16 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_9204);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_convertMultipleDates_cf26256_cf27348__16);
            // StatementAdderOnAssert create literal from method
            int int_vc_680 = 55;
            // StatementAdderMethod cloned existing statement
            fnp.convertInt(int_vc_680);
            // MethodAssertGenerator build local variable
            Object o_28_0 = fnp.convert(cal.getTime());
            org.junit.Assert.fail("convertMultipleDates_cf26256_cf27348_cf29330 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#convertMultipleDates */
    @org.junit.Test(timeout = 10000)
    public void convertMultipleDates_cf26243_failAssert22_add26988_literalMutation28203() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            // MethodCallAdder
            cal.set(2003, 4, 20, 17, 55);
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("", context);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_401131175 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_401131175, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_882139275 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_882139275, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1510635046 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1510635046, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_611227595 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_611227595, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_1382253601 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1382253601, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1078396020 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1078396020, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
            // StatementAdderOnAssert create null value
            java.lang.Object[] vc_8836 = (java.lang.Object[])null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_8836);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_8836);
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_8834 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_8834);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_8834);
            // StatementAdderMethod cloned existing statement
            vc_8834.convertMultipleArguments(vc_8836);
            // MethodAssertGenerator build local variable
            Object o_12_0 = fnp.convert(cal.getTime());
            org.junit.Assert.fail("convertMultipleDates_cf26243 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#convertMultipleDates */
    @org.junit.Test(timeout = 10000)
    public void convertMultipleDates_cf26216_cf26570_cf30003_failAssert44() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt", context);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_8818 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_convertMultipleDates_cf26216__8 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_8818);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_convertMultipleDates_cf26216__8);
            // AssertGenerator replace invocation
            java.lang.String o_convertMultipleDates_cf26216_cf26570__12 = // StatementAdderMethod cloned existing statement
fnp.getPattern();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_convertMultipleDates_cf26216_cf26570__12, "foo-%d{yyyy.MM, aux}/%d{yyyy.MM.dd}.txt");
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_9986 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // StatementAdderMethod cloned existing statement
            vc_9986.hashCode();
            // MethodAssertGenerator build local variable
            Object o_20_0 = fnp.convert(cal.getTime());
            org.junit.Assert.fail("convertMultipleDates_cf26216_cf26570_cf30003 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#dateWithTimeZone */
    @org.junit.Test(timeout = 10000)
    public void dateWithTimeZone_cf35081_cf35765_failAssert43() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC");
            java.util.Calendar cal = java.util.Calendar.getInstance(utc);
            cal.set(2003, 4, 20, 10, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy-MM-dd'T'HH:mm, Australia/Perth}", context);
            // AssertGenerator replace invocation
            int o_dateWithTimeZone_cf35081__8 = // StatementAdderMethod cloned existing statement
fnp.hashCode();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_dateWithTimeZone_cf35081__8, 739585380);
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_11308 = new java.lang.String();
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_11305 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // StatementAdderMethod cloned existing statement
            vc_11305.setPattern(vc_11308);
            // MethodAssertGenerator build local variable
            Object o_18_0 = fnp.convert(cal.getTime());
            org.junit.Assert.fail("dateWithTimeZone_cf35081_cf35765 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#dateWithTimeZone */
    @org.junit.Test(timeout = 10000)
    public void dateWithTimeZone_cf35108_cf36199() {
        java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC");
        java.util.Calendar cal = java.util.Calendar.getInstance(utc);
        cal.set(2003, 4, 20, 10, 55);
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy-MM-dd'T'HH:mm, Australia/Perth}", context);
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_11077 = new java.lang.String();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(vc_11077, "");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(vc_11077, "");
        // AssertGenerator replace invocation
        java.lang.String o_dateWithTimeZone_cf35108__10 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(vc_11077);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_dateWithTimeZone_cf35108__10, "foo%d{yyyy-MM-dd'T'HH:mm, Australia/Perth}");
        // StatementAdderOnAssert create null value
        java.lang.Object vc_11440 = (java.lang.Object)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_11440);
        // AssertGenerator replace invocation
        boolean o_dateWithTimeZone_cf35108_cf36199__18 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_11440);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_dateWithTimeZone_cf35108_cf36199__18);
        // Perth is 8 hours ahead of UTC
        org.junit.Assert.assertEquals("foo2003-05-20T18:55", fnp.convert(cal.getTime()));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#dateWithTimeZone */
    @org.junit.Test(timeout = 10000)
    public void dateWithTimeZone_cf35068_cf35368_failAssert40() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC");
            java.util.Calendar cal = java.util.Calendar.getInstance(utc);
            cal.set(2003, 4, 20, 10, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy-MM-dd'T'HH:mm, Australia/Perth}", context);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_11054 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_dateWithTimeZone_cf35068__10 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_11054);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_dateWithTimeZone_cf35068__10);
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_11149 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // StatementAdderMethod cloned existing statement
            vc_11149.convert(vc_11054);
            // MethodAssertGenerator build local variable
            Object o_18_0 = fnp.convert(cal.getTime());
            org.junit.Assert.fail("dateWithTimeZone_cf35068_cf35368 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#dateWithTimeZone */
    @org.junit.Test(timeout = 10000)
    public void dateWithTimeZone_cf35081_cf35722_failAssert54() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC");
            java.util.Calendar cal = java.util.Calendar.getInstance(utc);
            cal.set(2003, 4, 20, 10, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy-MM-dd'T'HH:mm, Australia/Perth}", context);
            // AssertGenerator replace invocation
            int o_dateWithTimeZone_cf35081__8 = // StatementAdderMethod cloned existing statement
fnp.hashCode();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_dateWithTimeZone_cf35081__8, 739585380);
            // StatementAdderOnAssert create literal from method
            int int_vc_785 = 10000;
            // StatementAdderMethod cloned existing statement
            fnp.convertInt(int_vc_785);
            // MethodAssertGenerator build local variable
            Object o_16_0 = fnp.convert(cal.getTime());
            org.junit.Assert.fail("dateWithTimeZone_cf35081_cf35722 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#dateWithTimeZone */
    @org.junit.Test(timeout = 10000)
    public void dateWithTimeZone_cf35081_cf35716_failAssert20() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC");
            java.util.Calendar cal = java.util.Calendar.getInstance(utc);
            cal.set(2003, 4, 20, 10, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy-MM-dd'T'HH:mm, Australia/Perth}", context);
            // AssertGenerator replace invocation
            int o_dateWithTimeZone_cf35081__8 = // StatementAdderMethod cloned existing statement
fnp.hashCode();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_dateWithTimeZone_cf35081__8, 739585380);
            // StatementAdderOnAssert create null value
            java.lang.Object vc_11280 = (java.lang.Object)null;
            // StatementAdderMethod cloned existing statement
            fnp.convert(vc_11280);
            // MethodAssertGenerator build local variable
            Object o_16_0 = fnp.convert(cal.getTime());
            org.junit.Assert.fail("dateWithTimeZone_cf35081_cf35716 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#dateWithTimeZone */
    @org.junit.Test(timeout = 10000)
    public void dateWithTimeZone_cf35068_cf35433() {
        java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC");
        java.util.Calendar cal = java.util.Calendar.getInstance(utc);
        cal.set(2003, 4, 20, 10, 55);
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy-MM-dd'T'HH:mm, Australia/Perth}", context);
        // StatementAdderOnAssert create random local variable
        java.lang.Object vc_11054 = new java.lang.Object();
        // AssertGenerator replace invocation
        boolean o_dateWithTimeZone_cf35068__10 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_11054);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_dateWithTimeZone_cf35068__10);
        // StatementAddOnAssert local variable replacement
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("t", context);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCorePoolSize(), 8);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).isStarted());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getLevel(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
        // AssertGenerator add assertion
        java.util.ArrayList collection_771934041 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_771934041, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList());;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).hasIntegerTokenCOnverter());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getName());
        // AssertGenerator add assertion
        java.util.ArrayList collection_1924543856 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1924543856, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledFutures());;
        // AssertGenerator add assertion
        java.util.HashMap map_565712380 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_565712380, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getCopyOfPropertyMap());;
        // AssertGenerator add assertion
        java.util.ArrayList collection_741062281 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_741062281, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).shutdownNow());;
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isShutdown());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getLevel(), 0);
        // AssertGenerator add assertion
        java.util.ArrayList collection_557172298 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_557172298, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminating());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getPoolSize(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminated());
        // AssertGenerator add assertion
        java.util.ArrayList collection_1094801350 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1094801350, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusListenerList());;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getTaskCount(), 0L);
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPrimaryDateTokenConverter());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getIntegerTokenConverter());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCount(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).toRegex(), "t");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPattern(), "t");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartCoreThread());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminating());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartCoreThread());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getActiveCount(), 0);
        // AssertGenerator add assertion
        java.util.ArrayList collection_137996502 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_137996502, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusList());;
        // AssertGenerator add assertion
        java.util.ArrayList collection_1663030745 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1663030745, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).shutdownNow());;
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminated());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCount(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isShutdown());
        // AssertGenerator replace invocation
        java.lang.String o_dateWithTimeZone_cf35068_cf35433__17 = // StatementAdderMethod cloned existing statement
pp.toRegex();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_dateWithTimeZone_cf35068_cf35433__17, "t");
        // Perth is 8 hours ahead of UTC
        org.junit.Assert.assertEquals("foo2003-05-20T18:55", fnp.convert(cal.getTime()));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#dateWithTimeZone */
    @org.junit.Test(timeout = 10000)
    public void dateWithTimeZone_cf35133_failAssert38_literalMutation36619() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC");
            java.util.Calendar cal = java.util.Calendar.getInstance(utc);
            cal.set(2003, 4, 20, 10, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("", context);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1243702477 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1243702477, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_360863385 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_360863385, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1936996175 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1936996175, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_185744861 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_185744861, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_2043989365 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_2043989365, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1103271817 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1103271817, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_772 = "foo%d{yyyy-MM-dd'T'HH:mm, Australia/Perth}";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_772, "foo%d{yyyy-MM-dd'T'HH:mm, Australia/Perth}");
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_11090 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_11090);
            // StatementAdderMethod cloned existing statement
            vc_11090.setPattern(String_vc_772);
            // MethodAssertGenerator build local variable
            Object o_14_0 = fnp.convert(cal.getTime());
            org.junit.Assert.fail("dateWithTimeZone_cf35133 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39148() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            // AssertGenerator replace invocation
            java.lang.String o_flowingI_cf39148__9 = // StatementAdderMethod cloned existing statement
pp.getPattern();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_flowingI_cf39148__9, "foo%i{}bar%i");
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39115() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            // AssertGenerator replace invocation
            int o_flowingI_cf39115__9 = // StatementAdderMethod cloned existing statement
pp.hashCode();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_flowingI_cf39115__9, -628626742);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39119_failAssert28() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // MethodAssertGenerator build local variable
                Object o_4_0 = pp.convertInt(3);
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // StatementAdderOnAssert create null value
                java.lang.Object vc_12355 = (java.lang.Object)null;
                // StatementAdderMethod cloned existing statement
                pp.convert(vc_12355);
                // MethodAssertGenerator build local variable
                Object o_13_0 = pp.convertInt(3);
            }
            org.junit.Assert.fail("flowingI_cf39119 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39102() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_12344 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_flowingI_cf39102__11 = // StatementAdderMethod cloned existing statement
pp.equals(vc_12344);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_flowingI_cf39102__11);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39101() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            // StatementAdderOnAssert create null value
            java.lang.Object vc_12343 = (java.lang.Object)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_12343);
            // AssertGenerator replace invocation
            boolean o_flowingI_cf39101__11 = // StatementAdderMethod cloned existing statement
pp.equals(vc_12343);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_flowingI_cf39101__11);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39112() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            // AssertGenerator replace invocation
            ch.qos.logback.core.rolling.helper.IntegerTokenConverter o_flowingI_cf39112__9 = // StatementAdderMethod cloned existing statement
pp.getIntegerTokenConverter();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).getNext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).getFirstOption());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getFirstOption());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getFormattingInfo());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).getFormattingInfo());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).isStarted());
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39120_failAssert29() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // MethodAssertGenerator build local variable
                Object o_4_0 = pp.convertInt(3);
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // StatementAdderOnAssert create random local variable
                java.lang.Object vc_12356 = new java.lang.Object();
                // StatementAdderMethod cloned existing statement
                pp.convert(vc_12356);
                // MethodAssertGenerator build local variable
                Object o_13_0 = pp.convertInt(3);
            }
            org.junit.Assert.fail("flowingI_cf39120 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39119_failAssert28_literalMutation39986() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("", context);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).hasIntegerTokenCOnverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getName());
                // AssertGenerator add assertion
                java.util.ArrayList collection_1284098676 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1284098676, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledFutures());;
                // AssertGenerator add assertion
                java.util.HashMap map_1150263653 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1150263653, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getCopyOfPropertyMap());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_702174523 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_702174523, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                java.util.ArrayList collection_1965198387 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1965198387, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminated());
                // AssertGenerator add assertion
                java.util.ArrayList collection_820615935 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_820615935, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList()).size(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPrimaryDateTokenConverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getIntegerTokenConverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).toRegex(), "");
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPattern(), "");
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList()).isEmpty());
                // AssertGenerator add assertion
                java.util.ArrayList collection_1738888316 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1738888316, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isShutdown());
                // MethodAssertGenerator build local variable
                Object o_4_0 = pp.convertInt(3);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_4_0, "");
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // StatementAdderOnAssert create null value
                java.lang.Object vc_12355 = (java.lang.Object)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_12355);
                // StatementAdderMethod cloned existing statement
                pp.convert(vc_12355);
                // MethodAssertGenerator build local variable
                Object o_13_0 = pp.convertInt(3);
            }
            org.junit.Assert.fail("flowingI_cf39119 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39125_cf40064() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            // StatementAdderOnAssert create literal from method
            int int_vc_860 = 3;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(int_vc_860, 3);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(int_vc_860, 3);
            // AssertGenerator replace invocation
            java.lang.String o_flowingI_cf39125__11 = // StatementAdderMethod cloned existing statement
pp.convertInt(int_vc_860);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_flowingI_cf39125__11, "foo3bar3");
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_12645 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_flowingI_cf39125_cf40064__19 = // StatementAdderMethod cloned existing statement
pp.equals(vc_12645);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_flowingI_cf39125_cf40064__19);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39120_failAssert29_literalMutation40000() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{2bar%i", context);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).hasIntegerTokenCOnverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getName());
                // AssertGenerator add assertion
                java.util.ArrayList collection_2021271227 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2021271227, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledFutures());;
                // AssertGenerator add assertion
                java.util.HashMap map_27719999 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_27719999, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getCopyOfPropertyMap());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1544061416 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1544061416, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                java.util.ArrayList collection_990281479 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_990281479, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminated());
                // AssertGenerator add assertion
                java.util.ArrayList collection_1762174772 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1762174772, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList()).size(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPrimaryDateTokenConverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getIntegerTokenConverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).toRegex(), "");
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPattern(), "foo%i{2bar%i");
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList()).isEmpty());
                // AssertGenerator add assertion
                java.util.ArrayList collection_885360376 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_885360376, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isShutdown());
                // MethodAssertGenerator build local variable
                Object o_4_0 = pp.convertInt(3);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_4_0, "");
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // StatementAdderOnAssert create random local variable
                java.lang.Object vc_12356 = new java.lang.Object();
                // StatementAdderMethod cloned existing statement
                pp.convert(vc_12356);
                // MethodAssertGenerator build local variable
                Object o_13_0 = pp.convertInt(3);
            }
            org.junit.Assert.fail("flowingI_cf39120 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39102_cf39387() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_12344 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_flowingI_cf39102__11 = // StatementAdderMethod cloned existing statement
pp.equals(vc_12344);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_flowingI_cf39102__11);
            // StatementAdderOnAssert create null value
            java.lang.Object vc_12429 = (java.lang.Object)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_12429);
            // AssertGenerator replace invocation
            boolean o_flowingI_cf39102_cf39387__17 = // StatementAdderMethod cloned existing statement
pp.equals(vc_12429);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_flowingI_cf39102_cf39387__17);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39115_cf39905_failAssert51() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // MethodAssertGenerator build local variable
                Object o_4_0 = pp.convertInt(3);
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // AssertGenerator replace invocation
                int o_flowingI_cf39115__9 = // StatementAdderMethod cloned existing statement
pp.hashCode();
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_flowingI_cf39115__9, -628626742);
                // StatementAdderOnAssert create null value
                java.lang.Object vc_12613 = (java.lang.Object)null;
                // StatementAdderMethod cloned existing statement
                pp.convert(vc_12613);
                // MethodAssertGenerator build local variable
                Object o_17_0 = pp.convertInt(3);
            }
            org.junit.Assert.fail("flowingI_cf39115_cf39905 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39141_cf40578_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // MethodAssertGenerator build local variable
                Object o_4_0 = pp.convertInt(3);
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_861 = "foo3bar3";
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(String_vc_861, "foo3bar3");
                // AssertGenerator replace invocation
                java.lang.String o_flowingI_cf39141__11 = // StatementAdderMethod cloned existing statement
pp.escapeRightParantesis(String_vc_861);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_flowingI_cf39141__11, "foo%i{}bar%i");
                // StatementAdderOnAssert create random local variable
                java.lang.Object vc_12829 = new java.lang.Object();
                // StatementAdderMethod cloned existing statement
                pp.convert(vc_12829);
                // MethodAssertGenerator build local variable
                Object o_21_0 = pp.convertInt(3);
            }
            org.junit.Assert.fail("flowingI_cf39141_cf40578 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39111_failAssert24_literalMutation39746() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("", context);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).hasIntegerTokenCOnverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getName());
                // AssertGenerator add assertion
                java.util.ArrayList collection_1834108270 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1834108270, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledFutures());;
                // AssertGenerator add assertion
                java.util.HashMap map_607924034 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_607924034, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getCopyOfPropertyMap());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_855692668 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_855692668, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                java.util.ArrayList collection_1309718656 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1309718656, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminated());
                // AssertGenerator add assertion
                java.util.ArrayList collection_1085557224 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1085557224, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList()).size(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPrimaryDateTokenConverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getIntegerTokenConverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).toRegex(), "");
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPattern(), "");
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList()).isEmpty());
                // AssertGenerator add assertion
                java.util.ArrayList collection_160084086 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_160084086, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isShutdown());
                // MethodAssertGenerator build local variable
                Object o_4_0 = pp.convertInt(3);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_4_0, "");
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // StatementAdderOnAssert create null value
                ch.qos.logback.core.rolling.helper.FileNamePattern vc_12349 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_12349);
                // StatementAdderMethod cloned existing statement
                vc_12349.getIntegerTokenConverter();
                // MethodAssertGenerator build local variable
                Object o_13_0 = pp.convertInt(3);
            }
            org.junit.Assert.fail("flowingI_cf39111 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39135_failAssert35_literalMutation40391() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("=D(?+(gwy6Xo", context);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getLevel(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                java.util.ArrayList collection_228111824 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_228111824, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).hasIntegerTokenCOnverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getName());
                // AssertGenerator add assertion
                java.util.ArrayList collection_201126187 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_201126187, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledFutures());;
                // AssertGenerator add assertion
                java.util.HashMap map_1131717322 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1131717322, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getCopyOfPropertyMap());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1668740751 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1668740751, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getLevel(), 0);
                // AssertGenerator add assertion
                java.util.ArrayList collection_725270931 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_725270931, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminated());
                // AssertGenerator add assertion
                java.util.ArrayList collection_1901904773 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1901904773, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPrimaryDateTokenConverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getIntegerTokenConverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).toRegex(), "=D(?+(gwy6Xo");
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPattern(), "=D(?+(gwy6Xo");
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                java.util.ArrayList collection_1359710917 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1359710917, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusList());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1426452533 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1426452533, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isShutdown());
                // MethodAssertGenerator build local variable
                Object o_4_0 = pp.convertInt(3);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_4_0, "=D(?+(gwy6Xo");
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // StatementAdderOnAssert create null value
                java.lang.String vc_12366 = (java.lang.String)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_12366);
                // StatementAdderOnAssert create null value
                ch.qos.logback.core.rolling.helper.FileNamePattern vc_12364 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_12364);
                // StatementAdderMethod cloned existing statement
                vc_12364.escapeRightParantesis(vc_12366);
                // MethodAssertGenerator build local variable
                Object o_15_0 = pp.convertInt(3);
            }
            org.junit.Assert.fail("flowingI_cf39135 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39101_cf39260_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // MethodAssertGenerator build local variable
                Object o_4_0 = pp.convertInt(3);
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // StatementAdderOnAssert create null value
                java.lang.Object vc_12343 = (java.lang.Object)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_12343);
                // AssertGenerator replace invocation
                boolean o_flowingI_cf39101__11 = // StatementAdderMethod cloned existing statement
pp.equals(vc_12343);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(o_flowingI_cf39101__11);
                // StatementAddOnAssert local variable replacement
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%d{yyyy-MM-dd'T'HH:mm, aux, Australia/Perth}", context);
                // StatementAdderMethod cloned existing statement
                fnp.convert(vc_12343);
                // MethodAssertGenerator build local variable
                Object o_22_0 = pp.convertInt(3);
            }
            org.junit.Assert.fail("flowingI_cf39101_cf39260 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39132_literalMutation40298_failAssert45_literalMutation43112() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("+d{RBo:2n\\A ", context);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getLevel(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                java.util.ArrayList collection_145062206 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_145062206, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).hasIntegerTokenCOnverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getName());
                // AssertGenerator add assertion
                java.util.ArrayList collection_1137470554 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1137470554, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledFutures());;
                // AssertGenerator add assertion
                java.util.HashMap map_80842054 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_80842054, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getCopyOfPropertyMap());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1148453209 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1148453209, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getLevel(), 0);
                // AssertGenerator add assertion
                java.util.ArrayList collection_341104580 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_341104580, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminated());
                // AssertGenerator add assertion
                java.util.ArrayList collection_1884218176 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1884218176, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPrimaryDateTokenConverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getIntegerTokenConverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).toRegex(), "+d{RBo:2n/A");
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPattern(), "+d{RBo:2n/A");
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                java.util.ArrayList collection_292133049 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_292133049, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusList());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_1482217485 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1482217485, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isShutdown());
                // MethodAssertGenerator build local variable
                Object o_4_0 = pp.convertInt(3);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_4_0, "+d{RBo:2n/A");
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%+{}bar%i", context);
                // StatementAdderOnAssert create random local variable
                java.lang.Object[] vc_12363 = new java.lang.Object []{new java.lang.Object(),new java.lang.Object(),new java.lang.Object(),new java.lang.Object()};
                // AssertGenerator replace invocation
                java.lang.String o_flowingI_cf39132__11 = // StatementAdderMethod cloned existing statement
pp.convertMultipleArguments(vc_12363);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_flowingI_cf39132__11, "foobar");
                // MethodAssertGenerator build local variable
                Object o_15_0 = pp.convertInt(3);
            }
            org.junit.Assert.fail("flowingI_cf39132_literalMutation40298 should have thrown NumberFormatException");
        } catch (java.lang.NumberFormatException eee) {
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39141_cf40611_failAssert60_literalMutation43814() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{bar%i", context);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).hasIntegerTokenCOnverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getName());
                // AssertGenerator add assertion
                java.util.ArrayList collection_1128338545 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1128338545, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledFutures());;
                // AssertGenerator add assertion
                java.util.HashMap map_1151676046 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1151676046, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getCopyOfPropertyMap());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_892141288 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_892141288, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                java.util.ArrayList collection_292912349 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_292912349, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminated());
                // AssertGenerator add assertion
                java.util.ArrayList collection_449769049 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_449769049, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList()).size(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPrimaryDateTokenConverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getIntegerTokenConverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).toRegex(), "");
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPattern(), "foo%i{bar%i");
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList()).isEmpty());
                // AssertGenerator add assertion
                java.util.ArrayList collection_1976386579 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1976386579, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isShutdown());
                // MethodAssertGenerator build local variable
                Object o_4_0 = pp.convertInt(3);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_4_0, "");
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_861 = "foo3bar3";
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(String_vc_861, "foo3bar3");
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(String_vc_861, "foo3bar3");
                // AssertGenerator replace invocation
                java.lang.String o_flowingI_cf39141__11 = // StatementAdderMethod cloned existing statement
pp.escapeRightParantesis(String_vc_861);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_flowingI_cf39141__11, "foo%i{}bar%i");
                // StatementAdderOnAssert create null value
                ch.qos.logback.core.rolling.helper.FileNamePattern vc_12841 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_12841);
                // StatementAdderMethod cloned existing statement
                vc_12841.getPattern();
                // MethodAssertGenerator build local variable
                Object o_21_0 = pp.convertInt(3);
            }
            org.junit.Assert.fail("flowingI_cf39141_cf40611 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39125_cf40107_cf42345() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            // StatementAdderOnAssert create literal from method
            int int_vc_860 = 3;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(int_vc_860, 3);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(int_vc_860, 3);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(int_vc_860, 3);
            // AssertGenerator replace invocation
            java.lang.String o_flowingI_cf39125__11 = // StatementAdderMethod cloned existing statement
pp.convertInt(int_vc_860);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_flowingI_cf39125__11, "foo3bar3");
            // StatementAdderOnAssert create null value
            java.lang.String vc_12667 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_12667);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_12667);
            // AssertGenerator replace invocation
            java.lang.String o_flowingI_cf39125_cf40107__19 = // StatementAdderMethod cloned existing statement
pp.escapeRightParantesis(vc_12667);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_flowingI_cf39125_cf40107__19, "foo%i{}bar%i");
            // AssertGenerator replace invocation
            int o_flowingI_cf39125_cf40107_cf42345__27 = // StatementAdderMethod cloned existing statement
pp.hashCode();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_flowingI_cf39125_cf40107_cf42345__27, -628626742);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39141_cf40567_cf43445() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_861 = "foo3bar3";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_861, "foo3bar3");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_861, "foo3bar3");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_861, "foo3bar3");
            // AssertGenerator replace invocation
            java.lang.String o_flowingI_cf39141__11 = // StatementAdderMethod cloned existing statement
pp.escapeRightParantesis(String_vc_861);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_flowingI_cf39141__11, "foo%i{}bar%i");
            // AssertGenerator replace invocation
            ch.qos.logback.core.rolling.helper.DateTokenConverter<java.lang.Object> o_flowingI_cf39141_cf40567__17 = // StatementAdderMethod cloned existing statement
pp.getPrimaryDateTokenConverter();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(o_flowingI_cf39141_cf40567__17);
            // AssertGenerator replace invocation
            java.lang.String o_flowingI_cf39141_cf40567_cf43445__23 = // StatementAdderMethod cloned existing statement
pp.getPattern();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_flowingI_cf39141_cf40567_cf43445__23, "foo%i{}bar%i");
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39112_cf39818_cf41811_failAssert54() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // MethodAssertGenerator build local variable
                Object o_4_0 = pp.convertInt(3);
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // AssertGenerator replace invocation
                ch.qos.logback.core.rolling.helper.IntegerTokenConverter o_flowingI_cf39112__9 = // StatementAdderMethod cloned existing statement
pp.getIntegerTokenConverter();
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).getContext());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getContext());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).getNext());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).getFirstOption());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getFirstOption());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getFormattingInfo());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).getFormattingInfo());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).isStarted());
                // StatementAdderOnAssert create literal from method
                java.lang.String String_vc_876 = "foo%i{}bar%i";
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(String_vc_876, "foo%i{}bar%i");
                // AssertGenerator replace invocation
                java.lang.String o_flowingI_cf39112_cf39818__31 = // StatementAdderMethod cloned existing statement
pp.escapeRightParantesis(String_vc_876);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_flowingI_cf39112_cf39818__31, "foo%i{}bar%i");
                // StatementAdderOnAssert create random local variable
                java.lang.Object vc_13173 = new java.lang.Object();
                // StatementAdderMethod cloned existing statement
                pp.convert(vc_13173);
                // MethodAssertGenerator build local variable
                Object o_41_0 = pp.convertInt(3);
            }
            org.junit.Assert.fail("flowingI_cf39112_cf39818_cf41811 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39106_cf39594_failAssert54_literalMutation43228() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("S!TfWDuqya#%", context);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).hasIntegerTokenCOnverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getName());
                // AssertGenerator add assertion
                java.util.ArrayList collection_24443871 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_24443871, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledFutures());;
                // AssertGenerator add assertion
                java.util.HashMap map_109934123 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_109934123, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getCopyOfPropertyMap());;
                // AssertGenerator add assertion
                java.util.ArrayList collection_252191432 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_252191432, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isShutdown());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getLevel(), 2);
                // AssertGenerator add assertion
                java.util.ArrayList collection_1194518403 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1194518403, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminated());
                // AssertGenerator add assertion
                java.util.ArrayList collection_1344936827 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1344936827, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusListenerList());;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList()).size(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPrimaryDateTokenConverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getIntegerTokenConverter());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).toRegex(), "");
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPattern(), "S!TfWDuqya#%");
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminating());
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartCoreThread());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getActiveCount(), 0);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList()).isEmpty());
                // AssertGenerator add assertion
                java.util.ArrayList collection_1406884936 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1406884936, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).shutdownNow());;
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminated());
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCount(), 1);
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isShutdown());
                // MethodAssertGenerator build local variable
                Object o_4_0 = pp.convertInt(3);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_4_0, "");
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // AssertGenerator replace invocation
                boolean o_flowingI_cf39106__9 = // StatementAdderMethod cloned existing statement
pp.hasIntegerTokenCOnverter();
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(o_flowingI_cf39106__9);
                // StatementAdderOnAssert create null value
                java.lang.String vc_12495 = (java.lang.String)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_12495);
                // StatementAdderOnAssert create null value
                ch.qos.logback.core.rolling.helper.FileNamePattern vc_12493 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_12493);
                // StatementAdderMethod cloned existing statement
                vc_12493.escapeRightParantesis(vc_12495);
                // MethodAssertGenerator build local variable
                Object o_19_0 = pp.convertInt(3);
            }
            org.junit.Assert.fail("flowingI_cf39106_cf39594 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39112_cf39818_cf41792() {
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
        {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
            // AssertGenerator replace invocation
            ch.qos.logback.core.rolling.helper.IntegerTokenConverter o_flowingI_cf39112__9 = // StatementAdderMethod cloned existing statement
pp.getIntegerTokenConverter();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).getNext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).getFirstOption());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getFirstOption());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getFormattingInfo());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).getFormattingInfo());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).isStarted());
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_876 = "foo%i{}bar%i";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_876, "foo%i{}bar%i");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_876, "foo%i{}bar%i");
            // AssertGenerator replace invocation
            java.lang.String o_flowingI_cf39112_cf39818__31 = // StatementAdderMethod cloned existing statement
pp.escapeRightParantesis(String_vc_876);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_flowingI_cf39112_cf39818__31, "foo%i{}bar%i");
            // StatementAdderOnAssert create null value
            java.lang.Object vc_13160 = (java.lang.Object)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_13160);
            // AssertGenerator replace invocation
            boolean o_flowingI_cf39112_cf39818_cf41792__39 = // StatementAdderMethod cloned existing statement
pp.equals(vc_13160);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_flowingI_cf39112_cf39818_cf41792__39);
            org.junit.Assert.assertEquals("foo3bar3", pp.convertInt(3));
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39112_cf39792_literalMutation43499_failAssert60() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // MethodAssertGenerator build local variable
                Object o_4_0 = pp.convertInt(3);
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{5bar%i", context);
                // AssertGenerator replace invocation
                ch.qos.logback.core.rolling.helper.IntegerTokenConverter o_flowingI_cf39112__9 = // StatementAdderMethod cloned existing statement
pp.getIntegerTokenConverter();
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).getContext());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getContext());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).getNext());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).getFirstOption());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).isStarted());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getFirstOption());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getFormattingInfo());
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).getNext()).getNext()).getFormattingInfo());
                // AssertGenerator add assertion
                org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_flowingI_cf39112__9).isStarted());
                // AssertGenerator replace invocation
                int o_flowingI_cf39112_cf39792__29 = // StatementAdderMethod cloned existing statement
pp.hashCode();
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_flowingI_cf39112_cf39792__29, -628626742);
                // MethodAssertGenerator build local variable
                Object o_33_0 = pp.convertInt(3);
            }
            org.junit.Assert.fail("flowingI_cf39112_cf39792_literalMutation43499 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39101_cf39223_cf42003_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // MethodAssertGenerator build local variable
                Object o_4_0 = pp.convertInt(3);
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // StatementAdderOnAssert create null value
                java.lang.Object vc_12343 = (java.lang.Object)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_12343);
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_12343);
                // AssertGenerator replace invocation
                boolean o_flowingI_cf39101__11 = // StatementAdderMethod cloned existing statement
pp.equals(vc_12343);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(o_flowingI_cf39101__11);
                // StatementAdderOnAssert create null value
                java.lang.Object vc_12386 = (java.lang.Object)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_12386);
                // AssertGenerator replace invocation
                boolean o_flowingI_cf39101_cf39223__19 = // StatementAdderMethod cloned existing statement
pp.equals(vc_12386);
                // AssertGenerator add assertion
                org.junit.Assert.assertFalse(o_flowingI_cf39101_cf39223__19);
                // StatementAdderOnAssert create random local variable
                int vc_13219 = -970551712;
                // StatementAddOnAssert local variable replacement
                ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
                // StatementAdderMethod cloned existing statement
                fnp.convertInt(vc_13219);
                // MethodAssertGenerator build local variable
                Object o_34_0 = pp.convertInt(3);
            }
            org.junit.Assert.fail("flowingI_cf39101_cf39223_cf42003 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    // test ways for dealing with flowing i converter, as in "foo%ix"
    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#flowingI */
    @org.junit.Test(timeout = 10000)
    public void flowingI_cf39125_cf40107_cf42349_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // MethodAssertGenerator build local variable
                Object o_4_0 = pp.convertInt(3);
            }
            {
                ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i{}bar%i", context);
                // StatementAdderOnAssert create literal from method
                int int_vc_860 = 3;
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(int_vc_860, 3);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(int_vc_860, 3);
                // AssertGenerator replace invocation
                java.lang.String o_flowingI_cf39125__11 = // StatementAdderMethod cloned existing statement
pp.convertInt(int_vc_860);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_flowingI_cf39125__11, "foo3bar3");
                // StatementAdderOnAssert create null value
                java.lang.String vc_12667 = (java.lang.String)null;
                // AssertGenerator add assertion
                org.junit.Assert.assertNull(vc_12667);
                // AssertGenerator replace invocation
                java.lang.String o_flowingI_cf39125_cf40107__19 = // StatementAdderMethod cloned existing statement
pp.escapeRightParantesis(vc_12667);
                // AssertGenerator add assertion
                org.junit.Assert.assertEquals(o_flowingI_cf39125_cf40107__19, "foo%i{}bar%i");
                // StatementAdderOnAssert create null value
                java.lang.Object vc_13301 = (java.lang.Object)null;
                // StatementAdderMethod cloned existing statement
                pp.convert(vc_13301);
                // MethodAssertGenerator build local variable
                Object o_31_0 = pp.convertInt(3);
            }
            org.junit.Assert.fail("flowingI_cf39125_cf40107_cf42349 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#nullTimeZoneByDefault */
    @org.junit.Test(timeout = 10000)
    public void nullTimeZoneByDefault_cf44118_cf45519_failAssert8_cf51352() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("%d{hh}", context);
            // AssertGenerator replace invocation
            int o_nullTimeZoneByDefault_cf44118__3 = // StatementAdderMethod cloned existing statement
fnp.hashCode();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_nullTimeZoneByDefault_cf44118__3, 1155398304);
            // StatementAdderOnAssert create null value
            java.lang.Object vc_14407 = (java.lang.Object)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_14407);
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_14405 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_14405);
            // StatementAdderMethod cloned existing statement
            vc_14405.equals(vc_14407);
            // StatementAdderOnAssert create random local variable
            java.lang.Object[] vc_16921 = new java.lang.Object []{};
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_16918 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // StatementAdderMethod cloned existing statement
            vc_16918.convertMultipleArguments(vc_16921);
            org.junit.Assert.assertNull(fnp.getPrimaryDateTokenConverter().getTimeZone());
            org.junit.Assert.fail("nullTimeZoneByDefault_cf44118_cf45519 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#nullTimeZoneByDefault */
    @org.junit.Test(timeout = 10000)
    public void nullTimeZoneByDefault_cf44122_failAssert11_cf45985_cf52782() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("%d{hh}", context);
            // StatementAdderOnAssert create null value
            java.lang.Object vc_13817 = (java.lang.Object)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_13817);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_13817);
            // StatementAdderMethod cloned existing statement
            fnp.convert(vc_13817);
            // StatementAdderOnAssert create null value
            java.lang.String vc_14559 = (java.lang.String)null;
            // StatementAddOnAssert local variable replacement
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("t", context);
            // StatementAdderMethod cloned existing statement
            pp.escapeRightParantesis(vc_14559);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_17461 = new java.lang.Object();
            // StatementAdderMethod cloned existing statement
            fnp.equals(vc_17461);
            org.junit.Assert.assertNull(fnp.getPrimaryDateTokenConverter().getTimeZone());
            org.junit.Assert.fail("nullTimeZoneByDefault_cf44122 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#nullTimeZoneByDefault */
    @org.junit.Test(timeout = 10000)
    public void nullTimeZoneByDefault_literalMutation44097_failAssert0_cf44181_cf55916() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("", context);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_57407446 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_57407446, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1436736277 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1436736277, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1451135528 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1451135528, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_156725120 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_156725120, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_1095194841 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1095194841, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1395412770 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1395412770, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1947311419 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1947311419, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_718470302 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_718470302, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1225930418 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1225930418, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_507073341 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_507073341, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_948270868 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_948270868, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_983621146 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_983621146, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
            // StatementAdderOnAssert create null value
            java.lang.Object vc_13848 = (java.lang.Object)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_13848);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_13848);
            // AssertGenerator replace invocation
            boolean o_nullTimeZoneByDefault_literalMutation44097_failAssert0_cf44181__7 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_13848);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_nullTimeZoneByDefault_literalMutation44097_failAssert0_cf44181__7);
            // StatementAdderOnAssert create literal from method
            java.lang.String String_vc_1298 = "";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(String_vc_1298, "");
            // AssertGenerator replace invocation
            java.lang.String o_nullTimeZoneByDefault_literalMutation44097_failAssert0_cf44181_cf55916__117 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(String_vc_1298);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_nullTimeZoneByDefault_literalMutation44097_failAssert0_cf44181_cf55916__117, "");
            org.junit.Assert.assertNull(fnp.getPrimaryDateTokenConverter().getTimeZone());
            org.junit.Assert.fail("nullTimeZoneByDefault_literalMutation44097 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#nullTimeZoneByDefault */
    @org.junit.Test(timeout = 10000)
    public void nullTimeZoneByDefault_literalMutation44097_failAssert0_cf44246_cf52314() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("", context);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_7267411 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_7267411, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1039058077 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1039058077, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1562544220 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1562544220, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_812387497 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_812387497, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_617384422 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_617384422, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1437893922 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1437893922, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1195204885 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1195204885, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1828367581 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1828367581, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1809413217 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1809413217, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1739199484 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1739199484, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_520812757 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_520812757, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_934049588 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_934049588, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
            // StatementAdderOnAssert create null value
            java.lang.String vc_13887 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_13887);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_13887);
            // StatementAdderMethod cloned existing statement
            fnp.setPattern(vc_13887);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_540121283 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_540121283, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1855180864 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1855180864, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_2131974951 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2131974951, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_97991734 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_97991734, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_346041133 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_346041133, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1096240722 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1096240722, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1938540719 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1938540719, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1604451105 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1604451105, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_2129896934 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2129896934, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1695618742 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1695618742, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_925277125 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_925277125, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_239803849 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_239803849, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
            // AssertGenerator replace invocation
            java.lang.String o_nullTimeZoneByDefault_literalMutation44097_failAssert0_cf44246_cf52314__215 = // StatementAdderMethod cloned existing statement
fnp.toRegex();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_nullTimeZoneByDefault_literalMutation44097_failAssert0_cf44246_cf52314__215, "");
            org.junit.Assert.assertNull(fnp.getPrimaryDateTokenConverter().getTimeZone());
            org.junit.Assert.fail("nullTimeZoneByDefault_literalMutation44097 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#nullTimeZoneByDefault */
    @org.junit.Test(timeout = 10000)
    public void nullTimeZoneByDefault_cf44139_cf47159_cf58201_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("%d{hh}", context);
            // StatementAdderOnAssert create null value
            java.lang.String vc_13828 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_13828);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_13828);
            // AssertGenerator replace invocation
            java.lang.String o_nullTimeZoneByDefault_cf44139__5 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(vc_13828);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_nullTimeZoneByDefault_cf44139__5, "%d{hh}");
            // AssertGenerator replace invocation
            java.lang.String o_nullTimeZoneByDefault_cf44139_cf47159__11 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(vc_13828);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_nullTimeZoneByDefault_cf44139_cf47159__11, "%d{hh}");
            // StatementAdderOnAssert create random local variable
            int vc_19669 = 319245739;
            // StatementAdderMethod cloned existing statement
            fnp.convertInt(vc_19669);
            org.junit.Assert.assertNull(fnp.getPrimaryDateTokenConverter().getTimeZone());
            org.junit.Assert.fail("nullTimeZoneByDefault_cf44139_cf47159_cf58201 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#nullTimeZoneByDefault */
    @org.junit.Test(timeout = 10000)
    public void nullTimeZoneByDefault_literalMutation44099_failAssert2_cf44387_cf55103() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("%dPhh}", context);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1182628743 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1182628743, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1110669181 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1110669181, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "%PARSER_ERROR[dPhh]}");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_283156384 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_283156384, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1081390555 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1081390555, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_788715131 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_788715131, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "%dPhh}");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1711215608 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1711215608, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_417455316 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_417455316, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_97787859 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_97787859, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "%PARSER_ERROR[dPhh]}");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1577449932 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1577449932, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1418367471 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1418367471, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_1955820490 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1955820490, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "%dPhh}");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_247502047 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_247502047, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_13961 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_13961);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_13961);
            // StatementAdderMethod cloned existing statement
            vc_13961.toRegex();
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_18353 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // StatementAdderMethod cloned existing statement
            vc_18353.toString();
            org.junit.Assert.assertNull(fnp.getPrimaryDateTokenConverter().getTimeZone());
            org.junit.Assert.fail("nullTimeZoneByDefault_literalMutation44099 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#nullTimeZoneByDefault */
    @org.junit.Test(timeout = 10000)
    public void nullTimeZoneByDefault_cf44105_cf44888_failAssert11_cf53072() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("%d{hh}", context);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_13806 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_nullTimeZoneByDefault_cf44105__5 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_13806);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_nullTimeZoneByDefault_cf44105__5);
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_14110 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_14110);
            // StatementAdderMethod cloned existing statement
            vc_14110.getPrimaryDateTokenConverter();
            // StatementAdderOnAssert create random local variable
            java.lang.Object[] vc_17566 = new java.lang.Object []{new java.lang.Object(),new java.lang.Object()};
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_17563 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // StatementAdderMethod cloned existing statement
            vc_17563.convertMultipleArguments(vc_17566);
            org.junit.Assert.assertNull(fnp.getPrimaryDateTokenConverter().getTimeZone());
            org.junit.Assert.fail("nullTimeZoneByDefault_cf44105_cf44888 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#nullTimeZoneByDefault */
    @org.junit.Test(timeout = 10000)
    public void nullTimeZoneByDefault_cf44163_cf48297_failAssert10_cf52977() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("%d{hh}", context);
            // StatementAdderMethod cloned existing statement
            fnp.parse();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_790991382 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_790991382, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1084064980 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1084064980, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getDatePattern());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1303338038 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1303338038, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_550274914 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_550274914, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isPrimary());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getNext());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_460896764 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_460896764, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "%d{hh}");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFirstOption(), "hh");
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getTimeZone());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1502911925 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1502911925, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1398122539 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1398122539, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1840218576 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1840218576, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFormattingInfo());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_554243860 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_554243860, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1995384916 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1995384916, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getDatePattern());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_545539869 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_545539869, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1898366192 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1898366192, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).isPrimary());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getNext());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_1370361306 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1370361306, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "%d{hh}");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFirstOption(), "hh");
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getTimeZone());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            java.util.ArrayList collection_465002081 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_465002081, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_655154565 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_655154565, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_675721244 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_675721244, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.DateTokenConverter)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter()).getFormattingInfo());
            // StatementAdderMethod cloned existing statement
            fnp.toRegex();
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_17530 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // StatementAdderMethod cloned existing statement
            vc_17530.toRegex();
            org.junit.Assert.assertNull(fnp.getPrimaryDateTokenConverter().getTimeZone());
            org.junit.Assert.fail("nullTimeZoneByDefault_cf44163_cf48297 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#objectListConverter */
    @org.junit.Test(timeout = 10000)
    public void objectListConverter_cf59770() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
        // AssertGenerator replace invocation
        ch.qos.logback.core.rolling.helper.IntegerTokenConverter o_objectListConverter_cf59770__6 = // StatementAdderMethod cloned existing statement
fnp.getIntegerTokenConverter();
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_objectListConverter_cf59770__6).isStarted());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_objectListConverter_cf59770__6).getFormattingInfo());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_objectListConverter_cf59770__6).getNext()).getNext());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_objectListConverter_cf59770__6).getContext());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_objectListConverter_cf59770__6).getFirstOption());
        org.junit.Assert.assertEquals("foo-2003.05.20-79.txt", fnp.convertMultipleArguments(cal.getTime(), 79));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#objectListConverter */
    @org.junit.Test(timeout = 10000)
    public void objectListConverter_cf59760() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
        // StatementAdderOnAssert create random local variable
        java.lang.Object vc_20256 = new java.lang.Object();
        // AssertGenerator replace invocation
        boolean o_objectListConverter_cf59760__8 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_20256);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_objectListConverter_cf59760__8);
        org.junit.Assert.assertEquals("foo-2003.05.20-79.txt", fnp.convertMultipleArguments(cal.getTime(), 79));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#objectListConverter */
    @org.junit.Test(timeout = 10000)
    public void objectListConverter_cf59806() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
        // AssertGenerator replace invocation
        java.lang.String o_objectListConverter_cf59806__6 = // StatementAdderMethod cloned existing statement
fnp.getPattern();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_objectListConverter_cf59806__6, "foo-%d{yyyy.MM.dd}-%i.txt");
        org.junit.Assert.assertEquals("foo-2003.05.20-79.txt", fnp.convertMultipleArguments(cal.getTime(), 79));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#objectListConverter */
    @org.junit.Test(timeout = 10000)
    public void objectListConverter_cf59777_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            // StatementAdderOnAssert create null value
            java.lang.Object vc_20267 = (java.lang.Object)null;
            // StatementAdderMethod cloned existing statement
            fnp.convert(vc_20267);
            // MethodAssertGenerator build local variable
            Object o_10_0 = fnp.convertMultipleArguments(cal.getTime(), 79);
            org.junit.Assert.fail("objectListConverter_cf59777 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#objectListConverter */
    @org.junit.Test(timeout = 10000)
    public void objectListConverter_cf59778_failAssert19() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_20268 = new java.lang.Object();
            // StatementAdderMethod cloned existing statement
            fnp.convert(vc_20268);
            // MethodAssertGenerator build local variable
            Object o_10_0 = fnp.convertMultipleArguments(cal.getTime(), 79);
            org.junit.Assert.fail("objectListConverter_cf59778 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#objectListConverter */
    @org.junit.Test(timeout = 10000)
    public void objectListConverter_cf59759() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
        // StatementAdderOnAssert create null value
        java.lang.Object vc_20255 = (java.lang.Object)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_20255);
        // AssertGenerator replace invocation
        boolean o_objectListConverter_cf59759__8 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_20255);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_objectListConverter_cf59759__8);
        org.junit.Assert.assertEquals("foo-2003.05.20-79.txt", fnp.convertMultipleArguments(cal.getTime(), 79));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#objectListConverter */
    @org.junit.Test(timeout = 10000)
    public void objectListConverter_cf59773() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
        // AssertGenerator replace invocation
        int o_objectListConverter_cf59773__6 = // StatementAdderMethod cloned existing statement
fnp.hashCode();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_objectListConverter_cf59773__6, 94798570);
        org.junit.Assert.assertEquals("foo-2003.05.20-79.txt", fnp.convertMultipleArguments(cal.getTime(), 79));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#objectListConverter */
    @org.junit.Test(timeout = 10000)
    public void objectListConverter_cf59799_cf60788_cf61911() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.set(2003, 4, 20, 17, 55);
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
        // StatementAdderOnAssert create literal from method
        java.lang.String String_vc_1409 = "foo-%d{yyyy.MM.dd}-%i.txt";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(String_vc_1409, "foo-%d{yyyy.MM.dd}-%i.txt");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(String_vc_1409, "foo-%d{yyyy.MM.dd}-%i.txt");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(String_vc_1409, "foo-%d{yyyy.MM.dd}-%i.txt");
        // AssertGenerator replace invocation
        java.lang.String o_objectListConverter_cf59799__8 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(String_vc_1409);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_objectListConverter_cf59799__8, "foo-%d{yyyy.MM.dd}-%i.txt");
        // StatementAdderOnAssert create null value
        java.lang.Object vc_20599 = (java.lang.Object)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_20599);
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_20599);
        // AssertGenerator replace invocation
        boolean o_objectListConverter_cf59799_cf60788__16 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_20599);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_objectListConverter_cf59799_cf60788__16);
        // AssertGenerator replace invocation
        boolean o_objectListConverter_cf59799_cf60788_cf61911__24 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_20599);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_objectListConverter_cf59799_cf60788_cf61911__24);
        org.junit.Assert.assertEquals("foo-2003.05.20-79.txt", fnp.convertMultipleArguments(cal.getTime(), 79));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#objectListConverter */
    @org.junit.Test(timeout = 10000)
    public void objectListConverter_cf59760_cf60043_failAssert46_literalMutation62984() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("", context);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_508733315 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_508733315, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_32275 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_32275, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1362776088 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1362776088, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_960425625 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_960425625, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_517507654 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_517507654, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1220158853 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1220158853, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_20256 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_objectListConverter_cf59760__8 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_20256);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_objectListConverter_cf59760__8);
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_20349 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_20349);
            // StatementAdderMethod cloned existing statement
            vc_20349.hashCode();
            // MethodAssertGenerator build local variable
            Object o_16_0 = fnp.convertMultipleArguments(cal.getTime(), 79);
            org.junit.Assert.fail("objectListConverter_cf59760_cf60043 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#objectListConverter */
    @org.junit.Test(timeout = 10000)
    public void objectListConverter_cf59818_cf61133_failAssert27_add62224() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            // MethodCallAdder
            cal.set(2003, 4, 20, 17, 55);
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            // AssertGenerator replace invocation
            java.lang.String o_objectListConverter_cf59818__6 = // StatementAdderMethod cloned existing statement
fnp.toString();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_objectListConverter_cf59818__6, "foo-%d{yyyy.MM.dd}-%i.txt");
            // StatementAdderOnAssert create null value
            java.lang.Object vc_20740 = (java.lang.Object)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_20740);
            // StatementAdderMethod cloned existing statement
            fnp.convert(vc_20740);
            // MethodAssertGenerator build local variable
            Object o_14_0 = fnp.convertMultipleArguments(cal.getTime(), 79);
            org.junit.Assert.fail("objectListConverter_cf59818_cf61133 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#objectListConverter */
    @org.junit.Test(timeout = 10000)
    public void objectListConverter_cf59800_cf60929_cf64480_failAssert63() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_20279 = new java.lang.String();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_20279, "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_20279, "");
            // AssertGenerator replace invocation
            java.lang.String o_objectListConverter_cf59800__8 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(vc_20279);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_objectListConverter_cf59800__8, "foo-%d{yyyy.MM.dd}-%i.txt");
            // AssertGenerator replace invocation
            java.lang.String o_objectListConverter_cf59800_cf60929__14 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(vc_20279);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_objectListConverter_cf59800_cf60929__14, "foo-%d{yyyy.MM.dd}-%i.txt");
            // StatementAdderOnAssert create random local variable
            int vc_21776 = 573727395;
            // StatementAdderMethod cloned existing statement
            fnp.convertInt(vc_21776);
            // MethodAssertGenerator build local variable
            Object o_24_0 = fnp.convertMultipleArguments(cal.getTime(), 79);
            org.junit.Assert.fail("objectListConverter_cf59800_cf60929_cf64480 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#objectListConverter */
    @org.junit.Test(timeout = 10000)
    public void objectListConverter_cf59806_cf61005_cf61575_failAssert40() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            // AssertGenerator replace invocation
            java.lang.String o_objectListConverter_cf59806__6 = // StatementAdderMethod cloned existing statement
fnp.getPattern();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_objectListConverter_cf59806__6, "foo-%d{yyyy.MM.dd}-%i.txt");
            // AssertGenerator replace invocation
            int o_objectListConverter_cf59806_cf61005__10 = // StatementAdderMethod cloned existing statement
fnp.hashCode();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_objectListConverter_cf59806_cf61005__10, 94798570);
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_20884 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // StatementAdderMethod cloned existing statement
            vc_20884.toRegex();
            // MethodAssertGenerator build local variable
            Object o_18_0 = fnp.convertMultipleArguments(cal.getTime(), 79);
            org.junit.Assert.fail("objectListConverter_cf59806_cf61005_cf61575 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#objectListConverter */
    @org.junit.Test(timeout = 10000)
    public void objectListConverter_cf59770_cf60334_failAssert63_literalMutation64404() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("", context);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1434314208 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1434314208, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_608711963 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_608711963, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_333336804 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_333336804, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1906471290 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1906471290, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_1746143944 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1746143944, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1057522071 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1057522071, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
            // AssertGenerator replace invocation
            ch.qos.logback.core.rolling.helper.IntegerTokenConverter o_objectListConverter_cf59770__6 = // StatementAdderMethod cloned existing statement
fnp.getIntegerTokenConverter();
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_objectListConverter_cf59770__6).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_objectListConverter_cf59770__6).getFormattingInfo());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_objectListConverter_cf59770__6).getNext()).getNext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_objectListConverter_cf59770__6).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_objectListConverter_cf59770__6).getFirstOption());
            // StatementAdderOnAssert create null value
            java.util.Date vc_20458 = (java.util.Date)null;
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_20456 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // StatementAdderMethod cloned existing statement
            vc_20456.toRegexForFixedDate(vc_20458);
            // MethodAssertGenerator build local variable
            Object o_24_0 = fnp.convertMultipleArguments(cal.getTime(), 79);
            org.junit.Assert.fail("objectListConverter_cf59770_cf60334 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#objectListConverter */
    @org.junit.Test(timeout = 10000)
    public void objectListConverter_cf59764_cf60190_cf62638_failAssert39() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            // AssertGenerator replace invocation
            boolean o_objectListConverter_cf59764__6 = // StatementAdderMethod cloned existing statement
fnp.hasIntegerTokenCOnverter();
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(o_objectListConverter_cf59764__6);
            // AssertGenerator replace invocation
            ch.qos.logback.core.rolling.helper.IntegerTokenConverter o_objectListConverter_cf59764_cf60190__10 = // StatementAdderMethod cloned existing statement
fnp.getIntegerTokenConverter();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_objectListConverter_cf59764_cf60190__10).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_objectListConverter_cf59764_cf60190__10).getFormattingInfo());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_objectListConverter_cf59764_cf60190__10).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_objectListConverter_cf59764_cf60190__10).getFirstOption());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_objectListConverter_cf59764_cf60190__10).getNext()).getNext());
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_21183 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // StatementAdderMethod cloned existing statement
            vc_21183.getPattern();
            // MethodAssertGenerator build local variable
            Object o_26_0 = fnp.convertMultipleArguments(cal.getTime(), 79);
            org.junit.Assert.fail("objectListConverter_cf59764_cf60190_cf62638 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#objectListConverter */
    @org.junit.Test(timeout = 10000)
    public void objectListConverter_cf59760_cf60045_cf62498_failAssert30() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.set(2003, 4, 20, 17, 55);
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo-%d{yyyy.MM.dd}-%i.txt", context);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_20256 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_objectListConverter_cf59760__8 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_20256);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_objectListConverter_cf59760__8);
            // StatementAddOnAssert local variable replacement
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("t", context);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            java.util.ArrayList collection_520365315 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_520365315, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getName());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1182897730 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1182897730, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            java.util.HashMap map_1668919909 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1668919909, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1468738924 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1468738924, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_547517978 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_547517978, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1640821588 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1640821588, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPrimaryDateTokenConverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).toRegex(), "t");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPattern(), "t");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_662197740 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_662197740, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_780187198 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_780187198, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator replace invocation
            int o_objectListConverter_cf59760_cf60045__15 = // StatementAdderMethod cloned existing statement
pp.hashCode();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_objectListConverter_cf59760_cf60045__15, 147);
            // StatementAdderOnAssert create null value
            java.util.Date vc_21146 = (java.util.Date)null;
            // StatementAdderMethod cloned existing statement
            fnp.toRegexForFixedDate(vc_21146);
            // MethodAssertGenerator build local variable
            Object o_125_0 = fnp.convertMultipleArguments(cal.getTime(), 79);
            org.junit.Assert.fail("objectListConverter_cf59760_cf60045_cf62498 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#settingTimeZoneOptionHasAnEffect */
    @org.junit.Test(timeout = 10000)
    public void settingTimeZoneOptionHasAnEffect_cf64593() {
        java.util.TimeZone tz = java.util.TimeZone.getTimeZone("Australia/Perth");
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern((("%d{hh, " + (tz.getID())) + "}"), context);
        // StatementAdderOnAssert create random local variable
        java.lang.Object vc_21804 = new java.lang.Object();
        // AssertGenerator replace invocation
        boolean o_settingTimeZoneOptionHasAnEffect_cf64593__8 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_21804);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_settingTimeZoneOptionHasAnEffect_cf64593__8);
        org.junit.Assert.assertEquals(tz, fnp.getPrimaryDateTokenConverter().getTimeZone());
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#settingTimeZoneOptionHasAnEffect */
    @org.junit.Test(timeout = 10000)
    public void settingTimeZoneOptionHasAnEffect_cf64592() {
        java.util.TimeZone tz = java.util.TimeZone.getTimeZone("Australia/Perth");
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern((("%d{hh, " + (tz.getID())) + "}"), context);
        // StatementAdderOnAssert create null value
        java.lang.Object vc_21803 = (java.lang.Object)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_21803);
        // AssertGenerator replace invocation
        boolean o_settingTimeZoneOptionHasAnEffect_cf64592__8 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_21803);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_settingTimeZoneOptionHasAnEffect_cf64592__8);
        org.junit.Assert.assertEquals(tz, fnp.getPrimaryDateTokenConverter().getTimeZone());
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#settingTimeZoneOptionHasAnEffect */
    @org.junit.Test(timeout = 10000)
    public void settingTimeZoneOptionHasAnEffect_cf64606() {
        java.util.TimeZone tz = java.util.TimeZone.getTimeZone("Australia/Perth");
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern((("%d{hh, " + (tz.getID())) + "}"), context);
        // AssertGenerator replace invocation
        int o_settingTimeZoneOptionHasAnEffect_cf64606__6 = // StatementAdderMethod cloned existing statement
fnp.hashCode();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_settingTimeZoneOptionHasAnEffect_cf64606__6, 288154122);
        org.junit.Assert.assertEquals(tz, fnp.getPrimaryDateTokenConverter().getTimeZone());
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#settingTimeZoneOptionHasAnEffect */
    @org.junit.Test(timeout = 10000)
    public void settingTimeZoneOptionHasAnEffect_cf64611_failAssert16() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.TimeZone tz = java.util.TimeZone.getTimeZone("Australia/Perth");
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern((("%d{hh, " + (tz.getID())) + "}"), context);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_21816 = new java.lang.Object();
            // StatementAdderMethod cloned existing statement
            fnp.convert(vc_21816);
            // MethodAssertGenerator build local variable
            Object o_10_0 = fnp.getPrimaryDateTokenConverter().getTimeZone();
            org.junit.Assert.fail("settingTimeZoneOptionHasAnEffect_cf64611 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#settingTimeZoneOptionHasAnEffect */
    @org.junit.Test(timeout = 10000)
    public void settingTimeZoneOptionHasAnEffect_cf64636() {
        java.util.TimeZone tz = java.util.TimeZone.getTimeZone("Australia/Perth");
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern((("%d{hh, " + (tz.getID())) + "}"), context);
        // AssertGenerator replace invocation
        java.lang.String o_settingTimeZoneOptionHasAnEffect_cf64636__6 = // StatementAdderMethod cloned existing statement
fnp.getPattern();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_settingTimeZoneOptionHasAnEffect_cf64636__6, "%d{hh, Australia/Perth}");
        org.junit.Assert.assertEquals(tz, fnp.getPrimaryDateTokenConverter().getTimeZone());
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#settingTimeZoneOptionHasAnEffect */
    @org.junit.Test
    public void settingTimeZoneOptionHasAnEffect_literalMutation64588_failAssert5() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.TimeZone tz = java.util.TimeZone.getTimeZone("Australia/Perth");
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern((("%d{hh, " + (tz.getID())) + ""), context);
            // MethodAssertGenerator build local variable
            Object o_6_0 = fnp.getPrimaryDateTokenConverter().getTimeZone();
            org.junit.Assert.fail("settingTimeZoneOptionHasAnEffect_literalMutation64588 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#settingTimeZoneOptionHasAnEffect */
    @org.junit.Test(timeout = 10000)
    public void settingTimeZoneOptionHasAnEffect_cf64610_failAssert15() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.TimeZone tz = java.util.TimeZone.getTimeZone("Australia/Perth");
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern((("%d{hh, " + (tz.getID())) + "}"), context);
            // StatementAdderOnAssert create null value
            java.lang.Object vc_21815 = (java.lang.Object)null;
            // StatementAdderMethod cloned existing statement
            fnp.convert(vc_21815);
            // MethodAssertGenerator build local variable
            Object o_10_0 = fnp.getPrimaryDateTokenConverter().getTimeZone();
            org.junit.Assert.fail("settingTimeZoneOptionHasAnEffect_cf64610 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#settingTimeZoneOptionHasAnEffect */
    @org.junit.Test(timeout = 10000)
    public void settingTimeZoneOptionHasAnEffect_cf64606_cf65287_cf66982_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.TimeZone tz = java.util.TimeZone.getTimeZone("Australia/Perth");
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern((("%d{hh, " + (tz.getID())) + "}"), context);
            // AssertGenerator replace invocation
            int o_settingTimeZoneOptionHasAnEffect_cf64606__6 = // StatementAdderMethod cloned existing statement
fnp.hashCode();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_settingTimeZoneOptionHasAnEffect_cf64606__6, 288154122);
            // AssertGenerator replace invocation
            java.lang.String o_settingTimeZoneOptionHasAnEffect_cf64606_cf65287__10 = // StatementAdderMethod cloned existing statement
fnp.getPattern();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_settingTimeZoneOptionHasAnEffect_cf64606_cf65287__10, "%d{hh, Australia/Perth}");
            // StatementAdderOnAssert create null value
            java.lang.Object vc_22589 = (java.lang.Object)null;
            // StatementAdderMethod cloned existing statement
            fnp.convert(vc_22589);
            // MethodAssertGenerator build local variable
            Object o_18_0 = fnp.getPrimaryDateTokenConverter().getTimeZone();
            org.junit.Assert.fail("settingTimeZoneOptionHasAnEffect_cf64606_cf65287_cf66982 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#settingTimeZoneOptionHasAnEffect */
    @org.junit.Test(timeout = 10000)
    public void settingTimeZoneOptionHasAnEffect_cf64593_cf64977_failAssert55_literalMutation68658() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.TimeZone tz = java.util.TimeZone.getTimeZone("Australia/Perth");
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern((("" + (tz.getID())) + "}"), context);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_2059067292 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2059067292, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1833620786 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1833620786, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "Australia/Perth}");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1885914330 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1885914330, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1243483444 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1243483444, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_2104413641 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_2104413641, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "Australia/Perth}");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            java.util.ArrayList collection_78087353 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_78087353, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_110079109 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_110079109, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_335473922 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_335473922, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_21804 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_settingTimeZoneOptionHasAnEffect_cf64593__8 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_21804);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_settingTimeZoneOptionHasAnEffect_cf64593__8);
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_21914 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_21914);
            // StatementAdderMethod cloned existing statement
            vc_21914.getPattern();
            // MethodAssertGenerator build local variable
            Object o_16_0 = fnp.getPrimaryDateTokenConverter().getTimeZone();
            org.junit.Assert.fail("settingTimeZoneOptionHasAnEffect_cf64593_cf64977 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#settingTimeZoneOptionHasAnEffect */
    @org.junit.Test(timeout = 10000)
    public void settingTimeZoneOptionHasAnEffect_cf64614_failAssert17_literalMutation65359_literalMutation66113() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.TimeZone tz = java.util.TimeZone.getTimeZone("Australia/Perth");
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern((("%d{hh, " + (tz.getID())) + ""), context);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_289806634 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_289806634, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_11512725 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_11512725, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).isEmpty());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1468624150 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1468624150, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_952351481 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_952351481, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_937811901 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_937811901, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "%d{hh, Australia/Perth");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList()).size(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_153508481 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_153508481, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
            // StatementAdderOnAssert create random local variable
            int vc_21819 = 2147483647;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_21819, 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_21819, 2147483647);
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_21817 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_21817);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_21817);
            // StatementAdderMethod cloned existing statement
            vc_21817.convertInt(vc_21819);
            // MethodAssertGenerator build local variable
            Object o_12_0 = fnp.getPrimaryDateTokenConverter().getTimeZone();
            org.junit.Assert.fail("settingTimeZoneOptionHasAnEffect_cf64614 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#settingTimeZoneOptionHasAnEffect */
    @org.junit.Test(timeout = 10000)
    public void settingTimeZoneOptionHasAnEffect_cf64592_cf64811_cf67649() {
        java.util.TimeZone tz = java.util.TimeZone.getTimeZone("Australia/Perth");
        ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern((("%d{hh, " + (tz.getID())) + "}"), context);
        // StatementAdderOnAssert create null value
        java.lang.Object vc_21803 = (java.lang.Object)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_21803);
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_21803);
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_21803);
        // AssertGenerator replace invocation
        boolean o_settingTimeZoneOptionHasAnEffect_cf64592__8 = // StatementAdderMethod cloned existing statement
fnp.equals(vc_21803);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_settingTimeZoneOptionHasAnEffect_cf64592__8);
        // StatementAdderOnAssert create null value
        java.lang.String vc_21869 = (java.lang.String)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_21869);
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_21869);
        // AssertGenerator replace invocation
        java.lang.String o_settingTimeZoneOptionHasAnEffect_cf64592_cf64811__16 = // StatementAdderMethod cloned existing statement
fnp.escapeRightParantesis(vc_21869);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_settingTimeZoneOptionHasAnEffect_cf64592_cf64811__16, "%d{hh, Australia/Perth}");
        // StatementAdderOnAssert create null value
        java.lang.Object vc_22749 = (java.lang.Object)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_22749);
        // StatementAddOnAssert local variable replacement
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("t", context);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCorePoolSize(), 8);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).isStarted());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getLevel(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
        // AssertGenerator add assertion
        java.util.ArrayList collection_1556127966 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1556127966, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList());;
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).hasIntegerTokenCOnverter());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getName());
        // AssertGenerator add assertion
        java.util.ArrayList collection_681095730 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_681095730, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledFutures());;
        // AssertGenerator add assertion
        java.util.HashMap map_1109416519 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1109416519, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getCopyOfPropertyMap());;
        // AssertGenerator add assertion
        java.util.ArrayList collection_2094116293 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2094116293, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).shutdownNow());;
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isShutdown());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getLevel(), 0);
        // AssertGenerator add assertion
        java.util.ArrayList collection_139698982 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_139698982, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminating());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getPoolSize(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminated());
        // AssertGenerator add assertion
        java.util.ArrayList collection_1171402820 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1171402820, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusListenerList());;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getTaskCount(), 0L);
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPrimaryDateTokenConverter());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getIntegerTokenConverter());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCount(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).toRegex(), "t");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPattern(), "t");
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartCoreThread());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminating());
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartCoreThread());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getActiveCount(), 0);
        // AssertGenerator add assertion
        java.util.ArrayList collection_745853317 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_745853317, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusList());;
        // AssertGenerator add assertion
        java.util.ArrayList collection_745131031 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_745131031, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).shutdownNow());;
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminated());
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCount(), 0);
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isShutdown());
        // AssertGenerator replace invocation
        boolean o_settingTimeZoneOptionHasAnEffect_cf64592_cf64811_cf67649__29 = // StatementAdderMethod cloned existing statement
pp.equals(vc_22749);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_settingTimeZoneOptionHasAnEffect_cf64592_cf64811_cf67649__29);
        org.junit.Assert.assertEquals(tz, fnp.getPrimaryDateTokenConverter().getTimeZone());
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#settingTimeZoneOptionHasAnEffect */
    @org.junit.Test(timeout = 10000)
    public void settingTimeZoneOptionHasAnEffect_cf64597_cf65060_cf66737_failAssert34() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.TimeZone tz = java.util.TimeZone.getTimeZone("Australia/Perth");
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern((("%d{hh, " + (tz.getID())) + "}"), context);
            // AssertGenerator replace invocation
            boolean o_settingTimeZoneOptionHasAnEffect_cf64597__6 = // StatementAdderMethod cloned existing statement
fnp.hasIntegerTokenCOnverter();
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_settingTimeZoneOptionHasAnEffect_cf64597__6);
            // AssertGenerator replace invocation
            int o_settingTimeZoneOptionHasAnEffect_cf64597_cf65060__10 = // StatementAdderMethod cloned existing statement
fnp.hashCode();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_settingTimeZoneOptionHasAnEffect_cf64597_cf65060__10, 288154122);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_22504 = new java.lang.Object();
            // StatementAdderMethod cloned existing statement
            fnp.convert(vc_22504);
            // MethodAssertGenerator build local variable
            Object o_18_0 = fnp.getPrimaryDateTokenConverter().getTimeZone();
            org.junit.Assert.fail("settingTimeZoneOptionHasAnEffect_cf64597_cf65060_cf66737 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#settingTimeZoneOptionHasAnEffect */
    @org.junit.Test(timeout = 10000)
    public void settingTimeZoneOptionHasAnEffect_cf64602_failAssert11_add65130_literalMutation68789() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.TimeZone tz = java.util.TimeZone.getTimeZone("Australia/Perth");
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern((("iV&@I,`" + (tz.getID())) + "}"), context);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1672138909 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1672138909, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1074951646 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1074951646, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).toRegex(), "iV&@I,`Australia/Perth}");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_2006737558 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_2006737558, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_678352089 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_678352089, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            java.util.HashMap map_168869508 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_168869508, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPattern(), "iV&@I,`Australia/Perth}");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1935005197 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1935005197, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getName());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            java.util.ArrayList collection_675558980 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_675558980, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1115046518 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1115046518, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)fnp).getPrimaryDateTokenConverter());
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_21809 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_21809);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_21809);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_21809.getIntegerTokenConverter();
            // StatementAdderMethod cloned existing statement
            vc_21809.getIntegerTokenConverter();
            // MethodAssertGenerator build local variable
            Object o_10_0 = fnp.getPrimaryDateTokenConverter().getTimeZone();
            org.junit.Assert.fail("settingTimeZoneOptionHasAnEffect_cf64602 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#settingTimeZoneOptionHasAnEffect */
    @org.junit.Test(timeout = 10000)
    public void settingTimeZoneOptionHasAnEffect_cf64603_cf65152_literalMutation67905_failAssert70() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            java.util.TimeZone tz = java.util.TimeZone.getTimeZone("Australia/Perth");
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern((("%d{hh, " + (tz.getID())) + ""), context);
            // AssertGenerator replace invocation
            ch.qos.logback.core.rolling.helper.IntegerTokenConverter o_settingTimeZoneOptionHasAnEffect_cf64603__6 = // StatementAdderMethod cloned existing statement
fnp.getIntegerTokenConverter();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(o_settingTimeZoneOptionHasAnEffect_cf64603__6);
            // AssertGenerator replace invocation
            boolean o_settingTimeZoneOptionHasAnEffect_cf64603_cf65152__10 = // StatementAdderMethod cloned existing statement
fnp.hasIntegerTokenCOnverter();
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_settingTimeZoneOptionHasAnEffect_cf64603_cf65152__10);
            // MethodAssertGenerator build local variable
            Object o_14_0 = fnp.getPrimaryDateTokenConverter().getTimeZone();
            org.junit.Assert.fail("settingTimeZoneOptionHasAnEffect_cf64603_cf65152_literalMutation67905 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#testSmoke */
    @org.junit.Test(timeout = 10000)
    public void testSmoke_cf69022_failAssert63() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("t", context);
            // MethodAssertGenerator build local variable
            Object o_3_0 = pp.convertInt(3);
            pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo", context);
            // MethodAssertGenerator build local variable
            Object o_7_0 = pp.convertInt(3);
            pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("%i foo", context);
            // MethodAssertGenerator build local variable
            Object o_11_0 = pp.convertInt(3);
            pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i.xixo", context);
            // MethodAssertGenerator build local variable
            Object o_15_0 = pp.convertInt(3);
            pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i.log", context);
            // MethodAssertGenerator build local variable
            Object o_19_0 = pp.convertInt(3);
            pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo.%i.log", context);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_23192 = new java.lang.Object();
            // StatementAdderMethod cloned existing statement
            pp.convert(vc_23192);
            // MethodAssertGenerator build local variable
            Object o_27_0 = pp.convertInt(3);
            // pp = new FileNamePattern("%i.foo\\%", context);
            // assertEquals("3.foo%", pp.convertInt(3));
            // pp = new FileNamePattern("\\%foo", context);
            // assertEquals("%foo", pp.convertInt(3));
            org.junit.Assert.fail("testSmoke_cf69022 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#testSmoke */
    @org.junit.Test(timeout = 10000)
    public void testSmoke_cf69021_failAssert62() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("t", context);
            // MethodAssertGenerator build local variable
            Object o_3_0 = pp.convertInt(3);
            pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo", context);
            // MethodAssertGenerator build local variable
            Object o_7_0 = pp.convertInt(3);
            pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("%i foo", context);
            // MethodAssertGenerator build local variable
            Object o_11_0 = pp.convertInt(3);
            pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i.xixo", context);
            // MethodAssertGenerator build local variable
            Object o_15_0 = pp.convertInt(3);
            pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i.log", context);
            // MethodAssertGenerator build local variable
            Object o_19_0 = pp.convertInt(3);
            pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo.%i.log", context);
            // StatementAdderOnAssert create null value
            java.lang.Object vc_23191 = (java.lang.Object)null;
            // StatementAdderMethod cloned existing statement
            pp.convert(vc_23191);
            // MethodAssertGenerator build local variable
            Object o_27_0 = pp.convertInt(3);
            // pp = new FileNamePattern("%i.foo\\%", context);
            // assertEquals("3.foo%", pp.convertInt(3));
            // pp = new FileNamePattern("\\%foo", context);
            // assertEquals("%foo", pp.convertInt(3));
            org.junit.Assert.fail("testSmoke_cf69021 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#testSmoke */
    @org.junit.Test(timeout = 10000)
    public void testSmoke_cf69004() {
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("t", context);
        org.junit.Assert.assertEquals("t", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo", context);
        org.junit.Assert.assertEquals("foo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("%i foo", context);
        org.junit.Assert.assertEquals("3 foo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i.xixo", context);
        org.junit.Assert.assertEquals("foo3.xixo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i.log", context);
        org.junit.Assert.assertEquals("foo3.log", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo.%i.log", context);
        // StatementAdderOnAssert create random local variable
        java.lang.Object vc_23180 = new java.lang.Object();
        // AssertGenerator replace invocation
        boolean o_testSmoke_cf69004__25 = // StatementAdderMethod cloned existing statement
pp.equals(vc_23180);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_testSmoke_cf69004__25);
        org.junit.Assert.assertEquals("foo.3.log", pp.convertInt(3));
        // pp = new FileNamePattern("%i.foo\\%", context);
        // assertEquals("3.foo%", pp.convertInt(3));
        // pp = new FileNamePattern("\\%foo", context);
        // assertEquals("%foo", pp.convertInt(3));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#testSmoke */
    @org.junit.Test(timeout = 10000)
    public void testSmoke_cf69003() {
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("t", context);
        org.junit.Assert.assertEquals("t", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo", context);
        org.junit.Assert.assertEquals("foo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("%i foo", context);
        org.junit.Assert.assertEquals("3 foo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i.xixo", context);
        org.junit.Assert.assertEquals("foo3.xixo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i.log", context);
        org.junit.Assert.assertEquals("foo3.log", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo.%i.log", context);
        // StatementAdderOnAssert create null value
        java.lang.Object vc_23179 = (java.lang.Object)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_23179);
        // AssertGenerator replace invocation
        boolean o_testSmoke_cf69003__25 = // StatementAdderMethod cloned existing statement
pp.equals(vc_23179);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_testSmoke_cf69003__25);
        org.junit.Assert.assertEquals("foo.3.log", pp.convertInt(3));
        // pp = new FileNamePattern("%i.foo\\%", context);
        // assertEquals("3.foo%", pp.convertInt(3));
        // pp = new FileNamePattern("\\%foo", context);
        // assertEquals("%foo", pp.convertInt(3));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#testSmoke */
    @org.junit.Test(timeout = 10000)
    public void testSmoke_cf69014() {
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("t", context);
        org.junit.Assert.assertEquals("t", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo", context);
        org.junit.Assert.assertEquals("foo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("%i foo", context);
        org.junit.Assert.assertEquals("3 foo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i.xixo", context);
        org.junit.Assert.assertEquals("foo3.xixo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i.log", context);
        org.junit.Assert.assertEquals("foo3.log", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo.%i.log", context);
        // AssertGenerator replace invocation
        ch.qos.logback.core.rolling.helper.IntegerTokenConverter o_testSmoke_cf69014__23 = // StatementAdderMethod cloned existing statement
pp.getIntegerTokenConverter();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_testSmoke_cf69014__23).getFirstOption());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_testSmoke_cf69014__23).getFormattingInfo());
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_testSmoke_cf69014__23).isStarted());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.pattern.LiteralConverter)((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_testSmoke_cf69014__23).getNext()).getNext());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_testSmoke_cf69014__23).getContext());
        org.junit.Assert.assertEquals("foo.3.log", pp.convertInt(3));
        // pp = new FileNamePattern("%i.foo\\%", context);
        // assertEquals("3.foo%", pp.convertInt(3));
        // pp = new FileNamePattern("\\%foo", context);
        // assertEquals("%foo", pp.convertInt(3));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#testSmoke */
    @org.junit.Test(timeout = 10000)
    public void testSmoke_cf69017() {
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("t", context);
        org.junit.Assert.assertEquals("t", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo", context);
        org.junit.Assert.assertEquals("foo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("%i foo", context);
        org.junit.Assert.assertEquals("3 foo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i.xixo", context);
        org.junit.Assert.assertEquals("foo3.xixo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i.log", context);
        org.junit.Assert.assertEquals("foo3.log", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo.%i.log", context);
        // AssertGenerator replace invocation
        int o_testSmoke_cf69017__23 = // StatementAdderMethod cloned existing statement
pp.hashCode();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_testSmoke_cf69017__23, 1878117761);
        org.junit.Assert.assertEquals("foo.3.log", pp.convertInt(3));
        // pp = new FileNamePattern("%i.foo\\%", context);
        // assertEquals("3.foo%", pp.convertInt(3));
        // pp = new FileNamePattern("\\%foo", context);
        // assertEquals("%foo", pp.convertInt(3));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#testSmoke */
    @org.junit.Test(timeout = 10000)
    public void testSmoke_cf69050() {
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("t", context);
        org.junit.Assert.assertEquals("t", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo", context);
        org.junit.Assert.assertEquals("foo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("%i foo", context);
        org.junit.Assert.assertEquals("3 foo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i.xixo", context);
        org.junit.Assert.assertEquals("foo3.xixo", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo%i.log", context);
        org.junit.Assert.assertEquals("foo3.log", pp.convertInt(3));
        pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("foo.%i.log", context);
        // AssertGenerator replace invocation
        java.lang.String o_testSmoke_cf69050__23 = // StatementAdderMethod cloned existing statement
pp.getPattern();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_testSmoke_cf69050__23, "foo.%i.log");
        org.junit.Assert.assertEquals("foo.3.log", pp.convertInt(3));
        // pp = new FileNamePattern("%i.foo\\%", context);
        // assertEquals("3.foo%", pp.convertInt(3));
        // pp = new FileNamePattern("\\%foo", context);
        // assertEquals("%foo", pp.convertInt(3));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75419() {
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
        // AssertGenerator replace invocation
        java.lang.String o_withBackslash_cf75419__3 = // StatementAdderMethod cloned existing statement
pp.getPattern();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_withBackslash_cf75419__3, "c:/foo/bar.%i");
        org.junit.Assert.assertEquals("c:/foo/bar.3", pp.convertInt(3));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75386() {
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
        // AssertGenerator replace invocation
        int o_withBackslash_cf75386__3 = // StatementAdderMethod cloned existing statement
pp.hashCode();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_withBackslash_cf75386__3, 1568976639);
        org.junit.Assert.assertEquals("c:/foo/bar.3", pp.convertInt(3));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75373() {
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
        // StatementAdderOnAssert create random local variable
        java.lang.Object vc_24212 = new java.lang.Object();
        // AssertGenerator replace invocation
        boolean o_withBackslash_cf75373__5 = // StatementAdderMethod cloned existing statement
pp.equals(vc_24212);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_withBackslash_cf75373__5);
        org.junit.Assert.assertEquals("c:/foo/bar.3", pp.convertInt(3));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75372() {
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
        // StatementAdderOnAssert create null value
        java.lang.Object vc_24211 = (java.lang.Object)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_24211);
        // AssertGenerator replace invocation
        boolean o_withBackslash_cf75372__5 = // StatementAdderMethod cloned existing statement
pp.equals(vc_24211);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_withBackslash_cf75372__5);
        org.junit.Assert.assertEquals("c:/foo/bar.3", pp.convertInt(3));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75383() {
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
        // AssertGenerator replace invocation
        ch.qos.logback.core.rolling.helper.IntegerTokenConverter o_withBackslash_cf75383__3 = // StatementAdderMethod cloned existing statement
pp.getIntegerTokenConverter();
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_withBackslash_cf75383__3).getFormattingInfo());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_withBackslash_cf75383__3).getContext());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_withBackslash_cf75383__3).getNext());
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_withBackslash_cf75383__3).getFirstOption());
        // AssertGenerator add assertion
        org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_withBackslash_cf75383__3).isStarted());
        org.junit.Assert.assertEquals("c:/foo/bar.3", pp.convertInt(3));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75391_failAssert19() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_24224 = new java.lang.Object();
            // StatementAdderMethod cloned existing statement
            pp.convert(vc_24224);
            // MethodAssertGenerator build local variable
            Object o_7_0 = pp.convertInt(3);
            org.junit.Assert.fail("withBackslash_cf75391 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75390_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
            // StatementAdderOnAssert create null value
            java.lang.Object vc_24223 = (java.lang.Object)null;
            // StatementAdderMethod cloned existing statement
            pp.convert(vc_24223);
            // MethodAssertGenerator build local variable
            Object o_7_0 = pp.convertInt(3);
            org.junit.Assert.fail("withBackslash_cf75390 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75410_cf76528() {
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
        // StatementAdderOnAssert create null value
        java.lang.String vc_24234 = (java.lang.String)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_24234);
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_24234);
        // AssertGenerator replace invocation
        java.lang.String o_withBackslash_cf75410__5 = // StatementAdderMethod cloned existing statement
pp.escapeRightParantesis(vc_24234);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_withBackslash_cf75410__5, "c:/foo/bar.%i");
        // StatementAdderOnAssert create null value
        java.lang.Object vc_24641 = (java.lang.Object)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_24641);
        // AssertGenerator replace invocation
        boolean o_withBackslash_cf75410_cf76528__13 = // StatementAdderMethod cloned existing statement
pp.equals(vc_24641);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_withBackslash_cf75410_cf76528__13);
        org.junit.Assert.assertEquals("c:/foo/bar.3", pp.convertInt(3));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75421_failAssert29_literalMutation76907() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("", context);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getName());
            // AssertGenerator add assertion
            java.util.ArrayList collection_282178516 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_282178516, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            java.util.HashMap map_1767286532 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_1767286532, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_984976874 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_984976874, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1363670912 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1363670912, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1521598367 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1521598367, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList()).size(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPrimaryDateTokenConverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).toRegex(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPattern(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList()).isEmpty());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1822806424 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1822806424, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isShutdown());
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_24238 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_24238);
            // StatementAdderMethod cloned existing statement
            vc_24238.toRegex();
            // MethodAssertGenerator build local variable
            Object o_7_0 = pp.convertInt(3);
            org.junit.Assert.fail("withBackslash_cf75421 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75419_cf76849_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
            // AssertGenerator replace invocation
            java.lang.String o_withBackslash_cf75419__3 = // StatementAdderMethod cloned existing statement
pp.getPattern();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_withBackslash_cf75419__3, "c:/foo/bar.%i");
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_24783 = new java.lang.Object();
            // StatementAdderMethod cloned existing statement
            pp.convert(vc_24783);
            // MethodAssertGenerator build local variable
            Object o_11_0 = pp.convertInt(3);
            org.junit.Assert.fail("withBackslash_cf75419_cf76849 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75373_cf75705_cf79422_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_24212 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_withBackslash_cf75373__5 = // StatementAdderMethod cloned existing statement
pp.equals(vc_24212);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_withBackslash_cf75373__5);
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_24321 = new java.lang.String();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_24321, "");
            // AssertGenerator replace invocation
            java.lang.String o_withBackslash_cf75373_cf75705__11 = // StatementAdderMethod cloned existing statement
pp.escapeRightParantesis(vc_24321);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_withBackslash_cf75373_cf75705__11, "c:/foo/bar.%i");
            // StatementAdderOnAssert create null value
            java.util.Date vc_25618 = (java.util.Date)null;
            // StatementAddOnAssert local variable replacement
            ch.qos.logback.core.rolling.helper.FileNamePattern fnp = new ch.qos.logback.core.rolling.helper.FileNamePattern("\\toto\\foo-%d{yyyy\\MM\\dd}-%i.txt", context);
            // StatementAdderMethod cloned existing statement
            fnp.toRegexForFixedDate(vc_25618);
            // MethodAssertGenerator build local variable
            Object o_24_0 = pp.convertInt(3);
            org.junit.Assert.fail("withBackslash_cf75373_cf75705_cf79422 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75373_cf75705_cf79350_failAssert18() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_24212 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_withBackslash_cf75373__5 = // StatementAdderMethod cloned existing statement
pp.equals(vc_24212);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_withBackslash_cf75373__5);
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_24321 = new java.lang.String();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_24321, "");
            // AssertGenerator replace invocation
            java.lang.String o_withBackslash_cf75373_cf75705__11 = // StatementAdderMethod cloned existing statement
pp.escapeRightParantesis(vc_24321);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_withBackslash_cf75373_cf75705__11, "c:/foo/bar.%i");
            // StatementAdderOnAssert create null value
            java.lang.Object vc_25599 = (java.lang.Object)null;
            // StatementAdderMethod cloned existing statement
            pp.convert(vc_25599);
            // MethodAssertGenerator build local variable
            Object o_21_0 = pp.convertInt(3);
            org.junit.Assert.fail("withBackslash_cf75373_cf75705_cf79350 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75373_cf75686_failAssert54_literalMutation79971() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("", context);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getName());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1177375505 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1177375505, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            java.util.HashMap map_89579518 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_89579518, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_80689231 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_80689231, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getLevel(), 2);
            // AssertGenerator add assertion
            java.util.ArrayList collection_482033588 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_482033588, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1794550307 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1794550307, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList()).size(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPrimaryDateTokenConverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).toRegex(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPattern(), "");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.ArrayList)((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList()).isEmpty());
            // AssertGenerator add assertion
            java.util.ArrayList collection_79152608 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_79152608, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCount(), 1);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isShutdown());
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_24212 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_withBackslash_cf75373__5 = // StatementAdderMethod cloned existing statement
pp.equals(vc_24212);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_withBackslash_cf75373__5);
            // StatementAdderOnAssert create random local variable
            java.lang.Object[] vc_24317 = new java.lang.Object []{new java.lang.Object(),new java.lang.Object()};
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_24314 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_24314);
            // StatementAdderMethod cloned existing statement
            vc_24314.convertMultipleArguments(vc_24317);
            // MethodAssertGenerator build local variable
            Object o_15_0 = pp.convertInt(3);
            org.junit.Assert.fail("withBackslash_cf75373_cf75686 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75373_cf75705_cf79343() {
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
        // StatementAdderOnAssert create random local variable
        java.lang.Object vc_24212 = new java.lang.Object();
        // AssertGenerator replace invocation
        boolean o_withBackslash_cf75373__5 = // StatementAdderMethod cloned existing statement
pp.equals(vc_24212);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_withBackslash_cf75373__5);
        // StatementAdderOnAssert create random local variable
        java.lang.String vc_24321 = new java.lang.String();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(vc_24321, "");
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(vc_24321, "");
        // AssertGenerator replace invocation
        java.lang.String o_withBackslash_cf75373_cf75705__11 = // StatementAdderMethod cloned existing statement
pp.escapeRightParantesis(vc_24321);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_withBackslash_cf75373_cf75705__11, "c:/foo/bar.%i");
        // AssertGenerator replace invocation
        int o_withBackslash_cf75373_cf75705_cf79343__17 = // StatementAdderMethod cloned existing statement
pp.hashCode();
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_withBackslash_cf75373_cf75705_cf79343__17, 1568976639);
        org.junit.Assert.assertEquals("c:/foo/bar.3", pp.convertInt(3));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75373_cf75649_cf78026_failAssert63() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_24212 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_withBackslash_cf75373__5 = // StatementAdderMethod cloned existing statement
pp.equals(vc_24212);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_withBackslash_cf75373__5);
            // AssertGenerator replace invocation
            ch.qos.logback.core.rolling.helper.IntegerTokenConverter o_withBackslash_cf75373_cf75649__9 = // StatementAdderMethod cloned existing statement
pp.getIntegerTokenConverter();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_withBackslash_cf75373_cf75649__9).getFormattingInfo());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_withBackslash_cf75373_cf75649__9).getFirstOption());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_withBackslash_cf75373_cf75649__9).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_withBackslash_cf75373_cf75649__9).getNext());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_withBackslash_cf75373_cf75649__9).isStarted());
            // StatementAdderOnAssert create literal from method
            int int_vc_1749 = 3;
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_25171 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // StatementAdderMethod cloned existing statement
            vc_25171.convertInt(int_vc_1749);
            // MethodAssertGenerator build local variable
            Object o_27_0 = pp.convertInt(3);
            org.junit.Assert.fail("withBackslash_cf75373_cf75649_cf78026 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75379_failAssert13_add75862_literalMutation78423() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("riUPkt;t@3 zm", context);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).isStarted());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getExecuteExistingDelayedTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            java.util.ArrayList collection_785532865 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_785532865, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).hasIntegerTokenCOnverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getName());
            // AssertGenerator add assertion
            java.util.ArrayList collection_396805799 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_396805799, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledFutures());;
            // AssertGenerator add assertion
            java.util.HashMap map_442094025 = new java.util.HashMap<Object, Object>();	org.junit.Assert.assertEquals(map_442094025, ((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getCopyOfPropertyMap());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1346522941 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1346522941, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isShutdown());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getLevel(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_761777772 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_761777772, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getRemoveOnCancelPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getCompletedTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminated());
            // AssertGenerator add assertion
            java.util.ArrayList collection_1635932682 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1635932682, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCopyOfStatusListenerList());;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPrimaryDateTokenConverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getIntegerTokenConverter());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getTaskCount(), 0L);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).toRegex(), "riUPkt;t@3 zm");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).allowsCoreThreadTimeOut());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getPattern(), "riUPkt;t@3 zm");
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isTerminating());
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartCoreThread());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getLargestPoolSize(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getMaximumPoolSize(), 2147483647);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getCorePoolSize(), 8);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).prestartAllCoreThreads(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).getContinueExistingPeriodicTasksAfterShutdownPolicy());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).getActiveCount(), 0);
            // AssertGenerator add assertion
            java.util.ArrayList collection_1289683952 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1289683952, ((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCopyOfStatusList());;
            // AssertGenerator add assertion
            java.util.ArrayList collection_1632371378 = new java.util.ArrayList<Object>();
	org.junit.Assert.assertEquals(collection_1632371378, ((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).shutdownNow());;
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getExecutorService()).isTerminated());
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(((ch.qos.logback.core.BasicStatusManager)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getStatusManager()).getCount(), 0);
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((java.util.concurrent.ScheduledThreadPoolExecutor)((ch.qos.logback.core.ContextBase)((ch.qos.logback.core.rolling.helper.FileNamePattern)pp).getContext()).getScheduledExecutorService()).isShutdown());
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_24215 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_24215);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_24215);
            // StatementAdderMethod cloned existing statement
            // MethodCallAdder
            vc_24215.getPrimaryDateTokenConverter();
            // StatementAdderMethod cloned existing statement
            vc_24215.getPrimaryDateTokenConverter();
            // MethodAssertGenerator build local variable
            Object o_7_0 = pp.convertInt(3);
            org.junit.Assert.fail("withBackslash_cf75379 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75373_cf75649_cf78016_failAssert27() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_24212 = new java.lang.Object();
            // AssertGenerator replace invocation
            boolean o_withBackslash_cf75373__5 = // StatementAdderMethod cloned existing statement
pp.equals(vc_24212);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_withBackslash_cf75373__5);
            // AssertGenerator replace invocation
            ch.qos.logback.core.rolling.helper.IntegerTokenConverter o_withBackslash_cf75373_cf75649__9 = // StatementAdderMethod cloned existing statement
pp.getIntegerTokenConverter();
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_withBackslash_cf75373_cf75649__9).getFormattingInfo());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_withBackslash_cf75373_cf75649__9).getFirstOption());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_withBackslash_cf75373_cf75649__9).getContext());
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_withBackslash_cf75373_cf75649__9).getNext());
            // AssertGenerator add assertion
            org.junit.Assert.assertTrue(((ch.qos.logback.core.rolling.helper.IntegerTokenConverter)o_withBackslash_cf75373_cf75649__9).isStarted());
            // StatementAdderOnAssert create random local variable
            java.lang.Object vc_25170 = new java.lang.Object();
            // StatementAdderMethod cloned existing statement
            pp.convert(vc_25170);
            // MethodAssertGenerator build local variable
            Object o_25_0 = pp.convertInt(3);
            org.junit.Assert.fail("withBackslash_cf75373_cf75649_cf78016 should have thrown IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75413_cf76780_cf77091_failAssert48() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
            // StatementAdderOnAssert create random local variable
            java.lang.String vc_24235 = new java.lang.String();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_24235, "");
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(vc_24235, "");
            // AssertGenerator replace invocation
            java.lang.String o_withBackslash_cf75413__5 = // StatementAdderMethod cloned existing statement
pp.escapeRightParantesis(vc_24235);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_withBackslash_cf75413__5, "c:/foo/bar.%i");
            // AssertGenerator replace invocation
            java.lang.String o_withBackslash_cf75413_cf76780__11 = // StatementAdderMethod cloned existing statement
pp.getPattern();
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_withBackslash_cf75413_cf76780__11, "c:/foo/bar.%i");
            // StatementAdderOnAssert create null value
            java.lang.Object vc_24868 = (java.lang.Object)null;
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_24866 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // StatementAdderMethod cloned existing statement
            vc_24866.convert(vc_24868);
            // MethodAssertGenerator build local variable
            Object o_23_0 = pp.convertInt(3);
            org.junit.Assert.fail("withBackslash_cf75413_cf76780_cf77091 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75397_cf76328_cf79125() {
        ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
        // StatementAdderOnAssert create random local variable
        int vc_24227 = -110207849;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(vc_24227, -110207849);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(vc_24227, -110207849);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(vc_24227, -110207849);
        // AssertGenerator replace invocation
        java.lang.String o_withBackslash_cf75397__5 = // StatementAdderMethod cloned existing statement
pp.convertInt(vc_24227);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_withBackslash_cf75397__5, "c:/foo/bar.-110207849");
        // AssertGenerator replace invocation
        java.lang.String o_withBackslash_cf75397_cf76328__11 = // StatementAdderMethod cloned existing statement
pp.convertInt(vc_24227);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals(o_withBackslash_cf75397_cf76328__11, "c:/foo/bar.-110207849");
        // StatementAdderOnAssert create null value
        java.lang.Object vc_25501 = (java.lang.Object)null;
        // AssertGenerator add assertion
        org.junit.Assert.assertNull(vc_25501);
        // AssertGenerator replace invocation
        boolean o_withBackslash_cf75397_cf76328_cf79125__19 = // StatementAdderMethod cloned existing statement
pp.equals(vc_25501);
        // AssertGenerator add assertion
        org.junit.Assert.assertFalse(o_withBackslash_cf75397_cf76328_cf79125__19);
        org.junit.Assert.assertEquals("c:/foo/bar.3", pp.convertInt(3));
    }

    /* amplification of ch.qos.logback.core.rolling.helper.FileNamePatternTest#withBackslash */
    @org.junit.Test(timeout = 10000)
    public void withBackslash_cf75410_cf76528_cf78325_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            ch.qos.logback.core.rolling.helper.FileNamePattern pp = new ch.qos.logback.core.rolling.helper.FileNamePattern("c:\\foo\\bar.%i", context);
            // StatementAdderOnAssert create null value
            java.lang.String vc_24234 = (java.lang.String)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_24234);
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_24234);
            // AssertGenerator replace invocation
            java.lang.String o_withBackslash_cf75410__5 = // StatementAdderMethod cloned existing statement
pp.escapeRightParantesis(vc_24234);
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals(o_withBackslash_cf75410__5, "c:/foo/bar.%i");
            // StatementAdderOnAssert create null value
            java.lang.Object vc_24641 = (java.lang.Object)null;
            // AssertGenerator add assertion
            org.junit.Assert.assertNull(vc_24641);
            // AssertGenerator replace invocation
            boolean o_withBackslash_cf75410_cf76528__13 = // StatementAdderMethod cloned existing statement
pp.equals(vc_24641);
            // AssertGenerator add assertion
            org.junit.Assert.assertFalse(o_withBackslash_cf75410_cf76528__13);
            // StatementAdderOnAssert create random local variable
            int vc_25259 = -670065112;
            // StatementAdderOnAssert create null value
            ch.qos.logback.core.rolling.helper.FileNamePattern vc_25257 = (ch.qos.logback.core.rolling.helper.FileNamePattern)null;
            // StatementAdderMethod cloned existing statement
            vc_25257.convertInt(vc_25259);
            // MethodAssertGenerator build local variable
            Object o_27_0 = pp.convertInt(3);
            org.junit.Assert.fail("withBackslash_cf75410_cf76528_cf78325 should have thrown NullPointerException");
        } catch (java.lang.NullPointerException eee) {
        }
    }
}

