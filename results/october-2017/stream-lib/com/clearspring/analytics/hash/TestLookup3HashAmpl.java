/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.clearspring.analytics.hash;


/**
 * Tests for lookup3ycs hash functions
 *
 * @author yonik
 */
public class TestLookup3HashAmpl {
    /**
     * test that the hash of the UTF-16 encoded Java String is equal to the hash of the unicode code points
     *
     * @param utf32
     * 		
     * @param len
     * 		
     */
    void tstEquiv(int[] utf32, int len) {
        int seed = 100;
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < len; i++) {
            sb.appendCodePoint(utf32[i]);
        }
        int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(utf32, 0, len, (seed - (len << 2)));
        int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(utf32, 0, len, seed);
        org.junit.Assert.assertEquals(hash, hash2);
        int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(sb, 0, sb.length(), seed);
        org.junit.Assert.assertEquals(hash, hash3);
        long hash4 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs64(sb, 0, sb.length(), seed);
        org.junit.Assert.assertEquals(((int) (hash4)), hash);
    }

    @org.junit.Test
    public void testHash() {
        java.util.Random r = new java.util.Random(0);
        int[] utf32 = new int[20];
        tstEquiv(utf32, 0);
        utf32[0] = 65536;
        tstEquiv(utf32, 1);
        utf32[0] = 32768;
        tstEquiv(utf32, 1);
        utf32[0] = java.lang.Character.MAX_CODE_POINT;
        tstEquiv(utf32, 1);
        for (int iter = 0; iter < 10000; iter++) {
            int len = r.nextInt(((utf32.length) + 1));
            for (int i = 0; i < len; i++) {
                int codePoint;
                do {
                    codePoint = r.nextInt(((java.lang.Character.MAX_CODE_POINT) + 1));
                } while ((codePoint & 63488) == 55296 );// avoid surrogate code points

                utf32[i] = codePoint;
            }
            // System.out.println("len="+len + ","+utf32[0]+","+utf32[1]);
            tstEquiv(utf32, len);
        }
    }

    // Test that the java version produces the same output as the C version
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3() {
        int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
        /**
         * * the hash values were generated by adding the following to lookup3.c
         *
         * char* s = "hello world";
         * int len = strlen(s);
         * uint32_t a[len];
         * for (int i=0; i<len; i++) {
         *   a[i]=s[i];
         *   uint32_t result = hashword(a, i+1, i*12345);
         *   printf("0x%.8x\n", result);
         * }
         */
        java.lang.String s = "hello world";
        int[] a = new int[s.length()];
        for (int i = 0; i < (s.length()); i++) {
            a[i] = s.charAt(i);
            int len = i + 1;
            int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
            int int_0 = hashes[i];
            int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
            int int_1 = hashes[i];
            int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
            int int_2 = hashes[i];
        }
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", s);
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber70_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, // TestDataMutator on numbers
                1, len, (i * 12345));
                int int_201 = hashes[i];
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
                int int_202 = hashes[i];
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
                int int_203 = hashes[i];
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber70 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber80_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
                int int_228 = hashes[i];
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, // TestDataMutator on numbers
                -1, len, ((i * 12345) + (len << 2)));
                int int_229 = hashes[i];
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
                int int_230 = hashes[i];
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber80 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber18() {
        int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , // TestDataMutator on numbers
        242683634 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
        /**
         * * the hash values were generated by adding the following to lookup3.c
         *
         * char* s = "hello world";
         * int len = strlen(s);
         * uint32_t a[len];
         * for (int i=0; i<len; i++) {
         *   a[i]=s[i];
         *   uint32_t result = hashword(a, i+1, i*12345);
         *   printf("0x%.8x\n", result);
         * }
         */
        java.lang.String s = "hello world";
        int[] a = new int[s.length()];
        for (int i = 0; i < (s.length()); i++) {
            a[i] = s.charAt(i);
            int len = i + 1;
            int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
            int int_54 = hashes[i];
            int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
            int int_55 = hashes[i];
            int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
            int int_56 = hashes[i];
        }
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", s);
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber93_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
                int int_264 = hashes[i];
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
                int int_265 = hashes[i];
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, // TestDataMutator on numbers
                -1, len, ((i * 12345) + (len << 2)));
                int int_266 = hashes[i];
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber93 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber66_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + // TestDataMutator on numbers
                2;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
                int int_195 = hashes[i];
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
                int int_196 = hashes[i];
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
                int int_197 = hashes[i];
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber66 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber2 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber2_literalMutationNumber585_failAssert19() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ // TestDataMutator on numbers
            -993915434 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
                int int_6 = hashes[i];
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
                int int_7 = hashes[i];
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, // TestDataMutator on numbers
                -1, len, ((i * 12345) + (len << 2)));
                int int_8 = hashes[i];
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber2_literalMutationNumber585 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber55 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber55_literalMutationNumber6041() {
        int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , // TestDataMutator on numbers
        -1785310938 , // TestDataMutator on numbers
        -1752576124 };
        /**
         * * the hash values were generated by adding the following to lookup3.c
         *
         * char* s = "hello world";
         * int len = strlen(s);
         * uint32_t a[len];
         * for (int i=0; i<len; i++) {
         *   a[i]=s[i];
         *   uint32_t result = hashword(a, i+1, i*12345);
         *   printf("0x%.8x\n", result);
         * }
         */
        java.lang.String s = "hello world";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", s);
        int[] a = new int[s.length()];
        for (int i = 0; i < (s.length()); i++) {
            a[i] = s.charAt(i);
            int len = i + 1;
            int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
            int int_165 = hashes[i];
            int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
            int int_166 = hashes[i];
            int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
            int int_167 = hashes[i];
        }
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", s);
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber96 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber96_literalMutationNumber8774_failAssert10() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
                int int_270 = hashes[i];
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, // TestDataMutator on numbers
                1, len, ((i * 12345) + (len << 2)));
                int int_271 = hashes[i];
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * // TestDataMutator on numbers
                0) + (len << 2)));
                int int_272 = hashes[i];
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber96_literalMutationNumber8774 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber28 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber28_literalMutationNumber3271_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , // TestDataMutator on numbers
            1938054789 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
                int int_84 = hashes[i];
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, // TestDataMutator on numbers
                -1, len, ((i * 12345) + (len << 2)));
                int int_85 = hashes[i];
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
                int int_86 = hashes[i];
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber28_literalMutationNumber3271 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber70 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber70_failAssert4_literalMutationNumber10132_literalMutationNumber21748() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , // TestDataMutator on numbers
            0 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals("hello world", s);
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, // TestDataMutator on numbers
                1, len, (i * 12345));
                int int_201 = hashes[i];
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * // TestDataMutator on numbers
                12346) + (len << 2)));
                int int_202 = hashes[i];
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
                int int_203 = hashes[i];
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber70 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber37 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber37_literalMutationNumber4191 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber37_literalMutationNumber4191_failAssert5_literalMutationNumber30157() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , // TestDataMutator on numbers
            -2147483648 , // TestDataMutator on numbers
            63116220 , -27553383 , -1785310939 , -876288062 };
            /**
             * * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals("hello world", s);
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + // TestDataMutator on numbers
                2;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
                int int_111 = hashes[i];
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
                int int_112 = hashes[i];
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
                int int_113 = hashes[i];
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber37_literalMutationNumber4191 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber94 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber94_literalMutationNumber8662 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber94_literalMutationNumber8662_failAssert7_literalMutationNumber30423() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals("hello world", s);
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, // TestDataMutator on numbers
                -1, len, (i * 12345));
                int int_267 = hashes[i];
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
                int int_268 = hashes[i];
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, // TestDataMutator on numbers
                -1, len, ((i * 12345) + (len << 2)));
                int int_269 = hashes[i];
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber94_literalMutationNumber8662 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber47 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber47_literalMutationNumber5170 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber47_literalMutationNumber5170_literalMutationNumber26674() {
        int[] hashes = new int[]{ -993915435 , // TestDataMutator on numbers
        984632516 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , // TestDataMutator on numbers
        -1785310938 , -876288062 };
        /**
         * * the hash values were generated by adding the following to lookup3.c
         *
         * char* s = "hello world";
         * int len = strlen(s);
         * uint32_t a[len];
         * for (int i=0; i<len; i++) {
         *   a[i]=s[i];
         *   uint32_t result = hashword(a, i+1, i*12345);
         *   printf("0x%.8x\n", result);
         * }
         */
        java.lang.String s = "hello world";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", s);
        int[] a = new int[s.length()];
        for (int i = 0; i < (s.length()); i++) {
            a[i] = s.charAt(i);
            int len = i + 1;
            int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * // TestDataMutator on numbers
            12346));
            int int_141 = hashes[i];
            int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
            int int_142 = hashes[i];
            int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
            int int_143 = hashes[i];
        }
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", s);
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber66 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber66_failAssert3_literalMutationNumber9953_literalMutationNumber15679() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , // TestDataMutator on numbers
            492316257 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals("hello world", s);
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + // TestDataMutator on numbers
                2;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
                int int_195 = hashes[i];
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, // TestDataMutator on numbers
                1, len, ((i * 12345) + (len << 2)));
                int int_196 = hashes[i];
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
                int int_197 = hashes[i];
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber66 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber93 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber93_failAssert8_literalMutationNumber10476_literalMutationNumber22067() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , // TestDataMutator on numbers
            -337087324 , 242683635 , // TestDataMutator on numbers
            -332262247 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals("hello world", s);
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
                int int_264 = hashes[i];
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
                int int_265 = hashes[i];
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, // TestDataMutator on numbers
                -1, len, ((i * 12345) + (len << 2)));
                int int_266 = hashes[i];
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber93 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber74 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber74_literalMutationNumber6946 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber74_literalMutationNumber6946_literalMutationNumber18692_failAssert6() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , // TestDataMutator on numbers
            121341817 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * // TestDataMutator on numbers
                0));
                int int_210 = hashes[i];
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, // TestDataMutator on numbers
                -1, len, ((i * 12345) + (len << 2)));
                int int_211 = hashes[i];
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
                int int_212 = hashes[i];
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber74_literalMutationNumber6946_literalMutationNumber18692 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }
}

