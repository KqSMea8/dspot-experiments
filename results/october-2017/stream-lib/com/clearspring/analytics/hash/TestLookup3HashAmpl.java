/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.clearspring.analytics.hash;


/**
 * Tests for lookup3ycs hash functions
 *
 * @author yonik
 */
public class TestLookup3HashAmpl {
    /**
     * test that the hash of the UTF-16 encoded Java String is equal to the hash of the unicode code points
     *
     * @param utf32
     * @param len
     */
    void tstEquiv(int[] utf32, int len) {
        int seed = 100;
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < len; i++) {
            sb.appendCodePoint(utf32[i]);
        }
        int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(utf32, 0, len, (seed - (len << 2)));
        int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(utf32, 0, len, seed);
        org.junit.Assert.assertEquals(hash, hash2);
        int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(sb, 0, sb.length(), seed);
        org.junit.Assert.assertEquals(hash, hash3);
        long hash4 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs64(sb, 0, sb.length(), seed);
        org.junit.Assert.assertEquals(((int) (hash4)), hash);
    }

    @org.junit.Test
    public void testHash() {
        java.util.Random r = new java.util.Random(0);
        int[] utf32 = new int[20];
        tstEquiv(utf32, 0);
        utf32[0] = 65536;
        tstEquiv(utf32, 1);
        utf32[0] = 32768;
        tstEquiv(utf32, 1);
        utf32[0] = java.lang.Character.MAX_CODE_POINT;
        tstEquiv(utf32, 1);
        for (int iter = 0; iter < 10000; iter++) {
            int len = r.nextInt(((utf32.length) + 1));
            for (int i = 0; i < len; i++) {
                int codePoint;
                do {
                    codePoint = r.nextInt(((java.lang.Character.MAX_CODE_POINT) + 1));
                } while ((codePoint & 63488) == 55296 );// avoid surrogate code points
                
                utf32[i] = codePoint;
            }
            // System.out.println("len="+len + ","+utf32[0]+","+utf32[1]);
            tstEquiv(utf32, len);
        }
    }

    // Test that the java version produces the same output as the C version
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3() {
        int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
        /**
         * the hash values were generated by adding the following to lookup3.c
         *
         * char* s = "hello world";
         * int len = strlen(s);
         * uint32_t a[len];
         * for (int i=0; i<len; i++) {
         *   a[i]=s[i];
         *   uint32_t result = hashword(a, i+1, i*12345);
         *   printf("0x%.8x\n", result);
         * }
         */
        java.lang.String s = "hello world";
        int[] a = new int[s.length()];
        for (int i = 0; i < (s.length()); i++) {
            a[i] = s.charAt(i);
            int len = i + 1;
            int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
            int int_0 = hashes[i];
            int int_1 = hash;
            int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
            int int_2 = hashes[i];
            int int_3 = hash2;
            int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
            int int_4 = hashes[i];
            int int_5 = hash3;
        }
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", s);
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationString61() {
        int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
        /**
         * the hash values were generated by adding the following to lookup3.c
         *
         * char* s = "hello world";
         * int len = strlen(s);
         * uint32_t a[len];
         * for (int i=0; i<len; i++) {
         *   a[i]=s[i];
         *   uint32_t result = hashword(a, i+1, i*12345);
         *   printf("0x%.8x\n", result);
         * }
         */
        java.lang.String s = "hell world";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hell world", s);
        int[] a = new int[s.length()];
        for (int i = 0; i < (s.length()); i++) {
            a[i] = s.charAt(i);
            int len = i + 1;
            int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
            int int_366 = hashes[i];
            int int_367 = hash;
            int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
            int int_368 = hashes[i];
            int int_369 = hash2;
            int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
            int int_370 = hashes[i];
            int int_371 = hash3;
        }
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hell world", s);
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber36() {
        int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , // TestDataMutator on numbers
        0 , -27553383 , -1785310939 , -876288062 };
        /**
         * the hash values were generated by adding the following to lookup3.c
         *
         * char* s = "hello world";
         * int len = strlen(s);
         * uint32_t a[len];
         * for (int i=0; i<len; i++) {
         *   a[i]=s[i];
         *   uint32_t result = hashword(a, i+1, i*12345);
         *   printf("0x%.8x\n", result);
         * }
         */
        java.lang.String s = "hello world";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", s);
        int[] a = new int[s.length()];
        for (int i = 0; i < (s.length()); i++) {
            a[i] = s.charAt(i);
            int len = i + 1;
            int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
            int int_216 = hashes[i];
            int int_217 = hash;
            int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
            int int_218 = hashes[i];
            int int_219 = hash2;
            int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
            int int_220 = hashes[i];
            int int_221 = hash3;
        }
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", s);
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber70_failAssert4() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 1, len, (i * 12345));
                int int_402 = hashes[i];
                int int_403 = hash;
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
                int int_404 = hashes[i];
                int int_405 = hash2;
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
                int int_406 = hashes[i];
                int int_407 = hash3;
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber70 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber80_failAssert7() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
                int int_456 = hashes[i];
                int int_457 = hash;
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, -1, len, ((i * 12345) + (len << 2)));
                int int_458 = hashes[i];
                int int_459 = hash2;
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
                int int_460 = hashes[i];
                int int_461 = hash3;
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber80 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber93_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
                int int_528 = hashes[i];
                int int_529 = hash;
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
                int int_530 = hashes[i];
                int int_531 = hash2;
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, -1, len, ((i * 12345) + (len << 2)));
                int int_532 = hashes[i];
                int int_533 = hash3;
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber93 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber66_failAssert3() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 2;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
                int int_390 = hashes[i];
                int int_391 = hash;
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
                int int_392 = hashes[i];
                int int_393 = hash2;
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
                int int_394 = hashes[i];
                int int_395 = hash3;
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber66 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber84 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber84_literalMutationNumber7746_failAssert17() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            java.lang.String String_831 = s;
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
                int int_474 = hashes[i];
                int int_475 = hash;
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12346) + (len << 2)));
                int int_476 = hashes[i];
                int int_477 = hash2;
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, -1, len, ((i * 12345) + (len << 2)));
                int int_478 = hashes[i];
                int int_479 = hash3;
            }
            java.lang.String String_832 = s;
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber84_literalMutationNumber7746 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber41 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber41_literalMutationNumber4595() {
        int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , // TestDataMutator on numbers
        0 , -1785310939 , // TestDataMutator on numbers
        -1752576124 };
        /**
         * the hash values were generated by adding the following to lookup3.c
         *
         * char* s = "hello world";
         * int len = strlen(s);
         * uint32_t a[len];
         * for (int i=0; i<len; i++) {
         *   a[i]=s[i];
         *   uint32_t result = hashword(a, i+1, i*12345);
         *   printf("0x%.8x\n", result);
         * }
         */
        java.lang.String s = "hello world";
        java.lang.String String_624 = s;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_624);
        int[] a = new int[s.length()];
        for (int i = 0; i < (s.length()); i++) {
            a[i] = s.charAt(i);
            int len = i + 1;
            int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
            int int_246 = hashes[i];
            int int_247 = hash;
            int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
            int int_248 = hashes[i];
            int int_249 = hash2;
            int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
            int int_250 = hashes[i];
            int int_251 = hash3;
        }
        java.lang.String String_625 = s;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_625);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_624);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", s);
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationString61 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationString61_literalMutationNumber6501() {
        int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
        /**
         * the hash values were generated by adding the following to lookup3.c
         *
         * char* s = "hello world";
         * int len = strlen(s);
         * uint32_t a[len];
         * for (int i=0; i<len; i++) {
         *   a[i]=s[i];
         *   uint32_t result = hashword(a, i+1, i*12345);
         *   printf("0x%.8x\n", result);
         * }
         */
        java.lang.String s = "hell world";
        java.lang.String String_772 = s;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hell world", String_772);
        int[] a = new int[s.length()];
        for (int i = 0; i < (s.length()); i++) {
            a[i] = s.charAt(i);
            int len = i + 1;
            int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
            int int_366 = hashes[i];
            int int_367 = hash;
            int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
            int int_368 = hashes[i];
            int int_369 = hash2;
            int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
            int int_370 = hashes[i];
            int int_371 = hash3;
        }
        java.lang.String String_773 = s;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hell world", String_773);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hell world", String_772);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hell world", s);
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber50 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber50_literalMutationNumber5545_failAssert1() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , // TestDataMutator on numbers
            -2147483648 , -876288062 };
            /**
             * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 1, len, (i * 12345));
                int int_300 = hashes[i];
                int int_301 = hash;
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
                int int_302 = hashes[i];
                int int_303 = hash2;
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
                int int_304 = hashes[i];
                int int_305 = hash3;
            }
            java.lang.String String_665 = s;
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber50_literalMutationNumber5545 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber92 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber92_literalMutationNumber8503() {
        int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , // TestDataMutator on numbers
        0 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
        /**
         * the hash values were generated by adding the following to lookup3.c
         *
         * char* s = "hello world";
         * int len = strlen(s);
         * uint32_t a[len];
         * for (int i=0; i<len; i++) {
         *   a[i]=s[i];
         *   uint32_t result = hashword(a, i+1, i*12345);
         *   printf("0x%.8x\n", result);
         * }
         */
        java.lang.String s = "hello world";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", s);
        java.lang.String String_638 = s;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_638);
        int[] a = new int[s.length()];
        for (int i = 0; i < (s.length()); i++) {
            a[i] = s.charAt(i);
            int len = i + 1;
            int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
            int int_522 = hashes[i];
            int int_523 = hash;
            int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
            int int_524 = hashes[i];
            int int_525 = hash2;
            int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 1, len, ((i * 12345) + (len << 2)));
            int int_526 = hashes[i];
            int int_527 = hash3;
        }
        java.lang.String String_639 = s;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_639);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_638);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", s);
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber28 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber28_literalMutationNumber3271_failAssert8() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , // TestDataMutator on numbers
            1938054789 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
                int int_168 = hashes[i];
                int int_169 = hash;
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, -1, len, ((i * 12345) + (len << 2)));
                int int_170 = hashes[i];
                int int_171 = hash2;
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
                int int_172 = hashes[i];
                int int_173 = hash3;
            }
            java.lang.String String_725 = s;
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber28_literalMutationNumber3271 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber93 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber93_failAssert8_literalMutationNumber10468_literalMutationNumber18812() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ // TestDataMutator on numbers
            -496957717 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals("hello world", s);
            java.lang.String String_1161 = s;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals("hello world", String_1161);
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
                int int_528 = hashes[i];
                int int_529 = hash;
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
                int int_530 = hashes[i];
                int int_531 = hash2;
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, -1, len, ((i * 0) + (len << 2)));
                int int_532 = hashes[i];
                int int_533 = hash3;
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber93 should have thrown StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber94 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber94_literalMutationNumber8662 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber94_literalMutationNumber8662_failAssert7_literalMutationNumber30423() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
            /**
             * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals("hello world", s);
            java.lang.String String_716 = s;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals("hello world", String_716);
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, -1, len, (i * 12345));
                int int_534 = hashes[i];
                int int_535 = hash;
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
                int int_536 = hashes[i];
                int int_537 = hash2;
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, -1, len, ((i * 12345) + (len << 2)));
                int int_538 = hashes[i];
                int int_539 = hash3;
            }
            java.lang.String String_717 = s;
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber94_literalMutationNumber8662 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber74 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber74_literalMutationNumber7002 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber74_literalMutationNumber7002_literalMutationString23657() {
        int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , -1785310939 , -876288062 };
        /**
         * the hash values were generated by adding the following to lookup3.c
         *
         * char* s = "hello world";
         * int len = strlen(s);
         * uint32_t a[len];
         * for (int i=0; i<len; i++) {
         *   a[i]=s[i];
         *   uint32_t result = hashword(a, i+1, i*12345);
         *   printf("0x%.8x\n", result);
         * }
         */
        java.lang.String s = "hello orld";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello orld", s);
        int[] a = new int[s.length()];
        for (int i = 0; i < (s.length()); i++) {
            a[i] = s.charAt(i);
            int len = i + 1;
            int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * -1));
            int int_420 = hashes[i];
            int int_421 = hash;
            int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12345) + (len << 2)));
            int int_422 = hashes[i];
            int int_423 = hash2;
            int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
            int int_424 = hashes[i];
            int int_425 = hash3;
        }
        java.lang.String String_793 = s;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello orld", String_793);
        java.lang.String String_1222 = String_793;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello orld", String_1222);
        java.lang.String String_1223 = s;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello orld", String_1223);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello orld", String_1222);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello orld", String_793);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello orld", s);
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber70 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber70_failAssert4_literalMutationNumber10132_literalMutationNumber21768() {
        // AssertGenerator generate try/catch block with fail statement
        try {
            int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , 242683635 , -332262248 , 1938054790 , -1976715480 , // TestDataMutator on numbers
            0 , -27553383 , -1785310939 , -876288062 };
            /**
             * the hash values were generated by adding the following to lookup3.c
             *
             * char* s = "hello world";
             * int len = strlen(s);
             * uint32_t a[len];
             * for (int i=0; i<len; i++) {
             *   a[i]=s[i];
             *   uint32_t result = hashword(a, i+1, i*12345);
             *   printf("0x%.8x\n", result);
             * }
             */
            java.lang.String s = "hello world";
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals("hello world", s);
            java.lang.String String_1244 = s;
            // AssertGenerator add assertion
            org.junit.Assert.assertEquals("hello world", String_1244);
            int[] a = new int[s.length()];
            for (int i = 0; i < (s.length()); i++) {
                a[i] = s.charAt(i);
                int len = i + 1;
                int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 1, len, (i * 12345));
                int int_402 = hashes[i];
                int int_403 = hash;
                int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 12346) + (len << 2)));
                int int_404 = hashes[i];
                int int_405 = hash2;
                int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
                int int_406 = hashes[i];
                int int_407 = hash3;
            }
            org.junit.Assert.fail("testEqualsLOOKUP3_literalMutationNumber70 should have thrown ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException eee) {
        }
    }

    // Test that the java version produces the same output as the C version
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber49 */
    /* amplification of com.clearspring.analytics.hash.TestLookup3Hash#testEqualsLOOKUP3_literalMutationNumber49_literalMutationNumber5387 */
    @org.junit.Test(timeout = 10000)
    public void testEqualsLOOKUP3_literalMutationNumber49_literalMutationNumber5387_literalMutationNumber23471() {
        int[] hashes = new int[]{ -993915435 , 984632515 , -337087325 , // TestDataMutator on numbers
        0 , -332262248 , 1938054790 , -1976715480 , 63116219 , -27553383 , // TestDataMutator on numbers
        -892655469 , -876288062 };
        /**
         * the hash values were generated by adding the following to lookup3.c
         *
         * char* s = "hello world";
         * int len = strlen(s);
         * uint32_t a[len];
         * for (int i=0; i<len; i++) {
         *   a[i]=s[i];
         *   uint32_t result = hashword(a, i+1, i*12345);
         *   printf("0x%.8x\n", result);
         * }
         */
        java.lang.String s = "hello world";
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", s);
        java.lang.String String_896 = s;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_896);
        java.lang.String String_789 = s;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_789);
        java.lang.String String_897 = String_789;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_897);
        int[] a = new int[s.length()];
        for (int i = 0; i < (s.length()); i++) {
            a[i] = s.charAt(i);
            int len = i + 1;
            int hash = com.clearspring.analytics.hash.Lookup3Hash.lookup3(a, 0, len, (i * 12345));
            int int_294 = hashes[i];
            int int_295 = hash;
            int hash2 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(a, 0, len, ((i * 0) + (len << 2)));
            int int_296 = hashes[i];
            int int_297 = hash2;
            int hash3 = com.clearspring.analytics.hash.Lookup3Hash.lookup3ycs(s, 0, len, ((i * 12345) + (len << 2)));
            int int_298 = hashes[i];
            int int_299 = hash3;
        }
        java.lang.String String_790 = s;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_790);
        java.lang.String String_898 = String_790;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_898);
        java.lang.String String_899 = s;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_899);
        java.lang.String String_900 = String_789;
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_900);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_899);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_898);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_790);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", s);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_896);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_897);
        // AssertGenerator add assertion
        org.junit.Assert.assertEquals("hello world", String_789);
    }
}

